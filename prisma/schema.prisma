generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String               @unique
  hashedPassword     String
  role               Role                 @default(BDR)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isActive           Boolean              @default(true)
  lastLoginAt        DateTime?
  territoryId        String?
  activityLogs       ActivityLog[]
  auditLogs          AuditLog[]
  createdPolicies    DataAccessPolicy[]   @relation("PolicyCreator")
  dataAccessPolicies DataAccessPolicy[]
  editorialItems     EditorialBoardItem[]
  financeEntries     FinanceEntry[]
  leads              Lead[]
  // Messaging relations
  conversationsCreated Conversation[]      @relation("ConversationsCreated")
  conversationMembers  ConversationMember[]
  messages             Message[]
  messageReactions     MessageReaction[]
  messageReads         MessageRead[]
  pipelineItems      PipelineItem[]
  managedTerritories Territory[]          @relation("TerritoryManager")
  territory          Territory?           @relation(fields: [territoryId], references: [id])
  permissions        UserPermission[]
  sessions           UserSession[]
  duplicateWarnings  DuplicateWarning[]
  duplicateMatches   DuplicateMatch[]
  duplicateAudits    DuplicateAuditLog[] @relation("DuplicateAudits")
  // Templates authored/edited
  templatesCreated   Template[]          @relation("TemplateCreatedBy")
  templatesUpdated   Template[]          @relation("TemplateUpdatedBy")
}

model Lead {
  id             Int                  @id @default(autoincrement())
  name           String
  title          String?
  addedDate      DateTime             @default(now())
  bdrId          String?
  company        String?
  source         String
  status         String
  link           String?
  phone          String?
  notes          String?
  email          String?              @unique
  activityLogs   ActivityLog[]
  editorialItems EditorialBoardItem[]
  bdr            User?                @relation(fields: [bdrId], references: [id])
  pipelineItems  PipelineItem[]
  duplicateMatches DuplicateMatch[]

  @@index([status])
  @@index([source])
  @@index([addedDate])
  @@index([bdrId, addedDate])
  @@index([bdrId])
  @@index([bdrId, status])
}

model PipelineItem {
  id                  Int                  @id @default(autoincrement())
  name                String
  title               String?
  addedDate           DateTime             @default(now())
  lastUpdated         DateTime             @default(now())
  bdrId               String
  company             String?
  category            String
  status              String
  value               Float?
  probability         Int?
  expectedCloseDate   DateTime?
  link                String?
  phone               String?
  notes               String?
  email               String?
  leadId              Int?
  callDate            DateTime?
  parentId            Int?
  isSublist           Boolean              @default(false)
  sublistName         String?
  sortOrder           Int?
  agreementDate       DateTime?
  partnerListDueDate  DateTime?
  partnerListSentDate DateTime?
  firstSaleDate       DateTime?
  partnerListSize     Int?
  totalSalesFromList  Int?
  activityLogs        ActivityLog[]
  editorialItems      EditorialBoardItem[]
  bdr                 User                 @relation(fields: [bdrId], references: [id])
  lead                Lead?                @relation(fields: [leadId], references: [id])
  parent              PipelineItem?        @relation("PipelineSublist", fields: [parentId], references: [id])
  children            PipelineItem[]       @relation("PipelineSublist")
  duplicateMatches    DuplicateMatch[]

  @@index([callDate])
  @@index([agreementDate])
  @@index([partnerListSentDate])
  @@index([firstSaleDate])
  @@index([category])
  @@index([status])
  @@index([lastUpdated])
  @@index([addedDate])
  @@index([parentId])
  @@index([leadId])
  @@index([status, lastUpdated])
  @@index([category, status])
  @@index([parentId, sortOrder])
  @@index([isSublist, parentId])
  @@index([bdrId, agreementDate])
  @@index([bdrId, callDate])
  @@index([bdrId, category])
  @@index([bdrId, firstSaleDate])
  @@index([bdrId])
  @@index([bdrId, lastUpdated])
  @@index([bdrId, partnerListSentDate])
  @@index([bdrId, status])
}

model ActivityLog {
  id               Int                 @id @default(autoincrement())
  timestamp        DateTime            @default(now())
  bdrId            String
  activityType     String
  description      String
  scheduledDate    DateTime?
  completedDate    DateTime?
  notes            String?
  leadId           Int?
  pipelineItemId   Int?
  previousStatus   String?
  newStatus        String?
  previousCategory String?
  newCategory      String?
  editorialItemId  Int?
  bdr              User                @relation(fields: [bdrId], references: [id])
  editorialItem    EditorialBoardItem? @relation(fields: [editorialItemId], references: [id])
  lead             Lead?               @relation(fields: [leadId], references: [id])
  pipelineItem     PipelineItem?       @relation(fields: [pipelineItemId], references: [id])

  @@index([activityType, timestamp])
  @@index([timestamp])
  @@index([activityType])
  @@index([pipelineItemId])
  @@index([leadId])
  @@index([editorialItemId])
  @@index([pipelineItemId, timestamp])
  @@index([activityType, bdrId])
  @@index([bdrId, activityType])
  @@index([bdrId])
  @@index([bdrId, timestamp])
  @@index([timestamp, bdrId])
}

model KpiTarget {
  id    Int    @id @default(autoincrement())
  name  String @unique
  value Int
}

model FinanceEntry {
  id                    Int       @id @default(autoincrement())
  company               String
  bdrId                 String
  leadGen               Boolean   @default(false)
  status                String
  invoiceDate           DateTime?
  dueDate               DateTime?
  soldAmount            Float?
  gbpAmount             Float?
  exchangeRate          Float?
  exchangeRateDate      DateTime?
  actualGbpReceived     Float?
  notes                 String?
  commissionPaid        Boolean   @default(false)
  danCommissionPaid     Boolean   @default(false)
  bdrCommissionAmount   Float?
  danCommissionAmount   Float?
  isMarkCawstonLead     Boolean   @default(false)
  month                 String    @default("2025-01")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  bdr                   User      @relation(fields: [bdrId], references: [id])

  @@index([status])
  @@index([invoiceDate])
  @@index([dueDate])
  @@index([month])
  @@index([createdAt])
  @@index([status, month])
  @@index([month, createdAt])
  @@index([status, createdAt])
  @@index([bdrId, createdAt])
  @@index([bdrId])
  @@index([bdrId, month])
  @@index([bdrId, status])
  @@index([bdrId, status, month])
}

model Territory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  managerId   String?
  manager     User?    @relation("TerritoryManager", fields: [managerId], references: [id])
  users       User[]
  companyRegistries CompanyRegistry[]
  contactRegistries ContactRegistry[]

  @@index([isActive])
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  resource        Resource
  action          Action
  description     String?
  createdAt       DateTime         @default(now())
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([resource, action])
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String?
  expiresAt    DateTime?
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

model RolePermission {
  id           String     @id @default(cuid())
  role         Role
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  ipAddress  String?
  userAgent  String?
  details    Json?
  success    Boolean  @default(true)
  errorMsg   String?
  timestamp  DateTime @default(now())
  sessionId  String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([userId, timestamp])
  @@index([action, resource])
  @@index([success, timestamp])
}

// Templates Knowledgebase for BDRs
model TemplateCategory {
  id          String     @id @default(cuid())
  name        String
  description String?
  sortOrder   Int        @default(0)
  templates   Template[]

  @@unique([name])
}

model Template {
  id          String            @id @default(cuid())
  title       String
  content     String            // main text to copy/paste (markdown allowed)
  type        TemplateType      @default(GENERAL)
  tags        String[]          @default([])
  isArchived  Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdById String
  updatedById String?
  categoryId  String?
  category    TemplateCategory? @relation(fields: [categoryId], references: [id])
  createdBy   User              @relation("TemplateCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?             @relation("TemplateUpdatedBy", fields: [updatedById], references: [id])

  @@index([title])
  @@index([type])
  @@index([isArchived])
  @@index([categoryId])
}

enum TemplateType {
  GENERAL
  LINKEDIN_INTRO
  SALES_CHASE
  FOLLOW_UP
  HANDOVER
}

model DataAccessPolicy {
  id         String   @id @default(cuid())
  userId     String
  resource   Resource
  conditions Json
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdBy  String
  creator    User     @relation("PolicyCreator", fields: [createdBy], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([resource])
  @@index([isActive])
  @@index([userId, resource])
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  sessionId    String    @unique
  ipAddress    String
  userAgent    String?
  loginTime    DateTime  @default(now())
  lastActivity DateTime  @default(now())
  expiresAt    DateTime
  isActive     Boolean   @default(true)
  logoutTime   DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([isActive])
  @@index([expiresAt])
  @@index([userId, isActive])
}

model EditorialBoardItem {
  id               Int             @id @default(autoincrement())
  name             String
  title            String?
  company          String?
  email            String?
  phone            String?
  addedDate        DateTime        @default(now())
  lastUpdated      DateTime        @default(now())
  bdrId            String
  status           EditorialStatus @default(LIST_OUT_QA_INTERVIEW_PROPOSED)
  notes            String?
  link             String?
  interviewDate    DateTime?
  qaSubmissionDate DateTime?
  qaApprovedDate   DateTime?
  publicationDate  DateTime?
  publicationLink  String?
  leadId           Int?
  pipelineItemId   Int?
  activityLogs     ActivityLog[]
  bdr              User            @relation(fields: [bdrId], references: [id])
  lead             Lead?           @relation(fields: [leadId], references: [id])
  pipelineItem     PipelineItem?   @relation(fields: [pipelineItemId], references: [id])

  @@index([status])
  @@index([addedDate])
  @@index([lastUpdated])
  @@index([bdrId])
  @@index([leadId])
  @@index([pipelineItemId])
  @@index([bdrId, status])
  @@index([status, lastUpdated])
}

enum Role {
  ADMIN
  BDR
  TEAM_LEAD
  MANAGER
  DIRECTOR
}

enum Resource {
  LEADS
  PIPELINE
  FINANCE
  USERS
  REPORTS
  SETTINGS
  ACTIVITY_LOGS
  DUPLICATES
  MESSAGING
  TEMPLATES
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
  EXPORT
  MANAGE
  VIEW_ALL
  VIEW_TEAM
}

enum EditorialStatus {
  LIST_OUT_QA_INTERVIEW_PROPOSED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  QA_SUBMITTED
  QA_APPROVED
  PUBLISHED
  DECLINED
}

// Duplicate Prevention Models

model DuplicateWarning {
  id                String              @id @default(cuid())
  triggeredByUserId String
  triggerAction     DuplicateAction
  warningType       DuplicateType
  severity          WarningSeverity     @default(MEDIUM)
  
  // What triggered the warning
  triggerData       Json                // Contains the data being added (lead/contact/company info)
  
  // Potential duplicates found
  potentialDuplicates DuplicateMatch[]
  
  // User decision
  userDecision      UserDecision?
  decisionMade      Boolean             @default(false)
  decisionAt        DateTime?
  proceedReason     String?
  
  // System tracking
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relationships
  triggeredBy       User                @relation(fields: [triggeredByUserId], references: [id], onDelete: Cascade)
  auditLogs         DuplicateAuditLog[] @relation("DuplicateAuditLogs")
  
  @@index([triggeredByUserId])
  @@index([createdAt])
  @@index([warningType])
  @@index([severity])
  @@index([decisionMade])
  @@index([triggerAction])
}

model DuplicateMatch {
  id               String           @id @default(cuid())
  warningId        String
  matchType        DuplicateType
  confidence       Float            // 0.0 to 1.0 confidence score
  matchDetails     Json             // Details about what matched
  
  // What was matched against
  existingLeadId      Int?
  existingPipelineId  Int?
  existingCompany     String?
  existingContactInfo Json?           // Email, phone, name, etc.
  
  // Who owns the existing record
  ownedByUserId       String?
  lastContactDate     DateTime?
  recordStatus        String?
  
  createdAt        DateTime         @default(now())
  
  // Relationships
  warning          DuplicateWarning @relation(fields: [warningId], references: [id], onDelete: Cascade)
  existingLead     Lead?            @relation(fields: [existingLeadId], references: [id])
  existingPipeline PipelineItem?    @relation(fields: [existingPipelineId], references: [id])
  ownedBy          User?            @relation(fields: [ownedByUserId], references: [id])
  
  @@index([warningId])
  @@index([matchType])
  @@index([confidence])
  @@index([ownedByUserId])
  @@index([lastContactDate])
}

model CompanyRegistry {
  id                String            @id @default(cuid())
  companyName       String
  normalizedName    String            // Normalized for matching
  domain            String?
  aliases           String[]          // Alternative names/spellings
  
  // Contact information
  primaryEmail      String?
  primaryPhone      String?
  website           String?
  linkedinUrl       String?
  
  // Tracking
  firstSeenAt       DateTime          @default(now())
  lastContactedAt   DateTime?
  totalContacts     Int               @default(0)
  activeDeals       Int               @default(0)
  
  // Territory and ownership tracking
  primaryTerritoryId String?
  primaryTerritory   Territory?       @relation(fields: [primaryTerritoryId], references: [id])
  
  // Relationships
  contacts          ContactRegistry[]
  
  @@unique([normalizedName])
  @@index([companyName])
  @@index([normalizedName])
  @@index([domain])
  @@index([lastContactedAt])
  @@index([primaryTerritoryId])
}

model ContactRegistry {
  id              String           @id @default(cuid())
  fullName        String
  normalizedName  String           // Normalized for matching
  firstName       String?
  lastName        String?
  
  // Contact details
  email           String?
  normalizedEmail String?          // Normalized email for matching
  phone           String?
  normalizedPhone String?          // Normalized phone for matching
  title           String?
  linkedinUrl     String?
  
  // Company association
  companyId       String?
  company         CompanyRegistry? @relation(fields: [companyId], references: [id])
  
  // Tracking
  firstSeenAt     DateTime         @default(now())
  lastContactedAt DateTime?
  contactCount    Int              @default(0)
  
  // Territory tracking
  primaryTerritoryId String?
  primaryTerritory   Territory?    @relation(fields: [primaryTerritoryId], references: [id])
  
  @@unique([normalizedEmail])
  @@index([fullName])
  @@index([normalizedName])
  @@index([normalizedEmail])
  @@index([normalizedPhone])
  @@index([companyId])
  @@index([lastContactedAt])
  @@index([primaryTerritoryId])
}

model DuplicateAuditLog {
  id              String           @id @default(cuid())
  userId          String
  action          String           // 'warning_shown', 'proceeded_anyway', 'cancelled', 'admin_viewed'
  warningId       String?
  
  // Context
  entityType      String           // 'lead', 'pipeline', 'company', 'contact'
  entityId        String?
  
  // Decision context
  decisionReason  String?
  systemSuggestion String?
  actualOutcome   String?          // Follow-up: was it actually a duplicate?
  
  // Metadata
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime         @default(now())
  
  // Relationships
  user            User             @relation("DuplicateAudits", fields: [userId], references: [id])
  warning         DuplicateWarning? @relation("DuplicateAuditLogs", fields: [warningId], references: [id])
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([warningId])
  @@index([entityType])
}

// Messaging Models
model Conversation {
  id            String                @id @default(cuid())
  name          String?
  isGroup       Boolean               @default(false)
  isLocked      Boolean               @default(false)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  createdById   String
  createdBy     User                  @relation("ConversationsCreated", fields: [createdById], references: [id])
  members       ConversationMember[]
  messages      Message[]
  lastMessageAt DateTime?

  @@index([updatedAt])
  @@index([lastMessageAt])
}

model ConversationMember {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  role           String       @default("member") // member | admin
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String              @id @default(cuid())
  conversationId String
  senderId       String
  content        String?
  parentId       String?
  isEdited       Boolean             @default(false)
  isDeleted      Boolean             @default(false)
  isPinned       Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  conversation   Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User                @relation(fields: [senderId], references: [id])
  parent         Message?            @relation("Thread", fields: [parentId], references: [id])
  replies        Message[]           @relation("Thread")
  attachments    MessageAttachment[]
  reactions      MessageReaction[]
  reads          MessageRead[]

  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
  @@index([createdAt])
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  url       String
  fileName  String
  mimeType  String
  size      Int
  width     Int?
  height    Int?
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

// Enums for duplicate system

enum DuplicateAction {
  LEAD_CREATE
  LEAD_UPDATE
  PIPELINE_CREATE
  PIPELINE_UPDATE
  CONTACT_ADD
  COMPANY_ADD
}

enum DuplicateType {
  COMPANY_NAME
  COMPANY_DOMAIN
  CONTACT_EMAIL
  CONTACT_PHONE
  CONTACT_NAME
  LINKEDIN_PROFILE
  RECENT_ACTIVITY
  ACTIVE_DEAL
}

enum WarningSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserDecision {
  PROCEEDED
  CANCELLED
  IGNORED
}
