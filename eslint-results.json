[{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\admin\\duplicates\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'subMonths' is defined but never used.","line":38,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2676,2679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2676,2679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2802,2805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2802,2805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [session, dateRange, fetchData]","fix":{"range":[3051,3071],"text":"[session, dateRange, fetchData]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { \r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport {\r\n  AlertTriangle,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Users,\r\n  Search,\r\n  Filter,\r\n  Download,\r\n  RefreshCw,\r\n  Calendar,\r\n  BarChart3,\r\n  AlertCircle,\r\n} from 'lucide-react';\r\nimport { format, subDays, subMonths } from 'date-fns';\r\nimport { WarningSeverity, DuplicateType, UserDecision } from '@prisma/client';\r\nimport { useSession } from 'next-auth/react';\r\nimport { redirect } from 'next/navigation';\r\nimport { hasPermission } from '@/lib/permissions';\r\nimport { PERMISSIONS } from '@/lib/permissions';\r\n\r\ninterface DuplicateStatistics {\r\n  totalWarnings: number;\r\n  proceedCount: number;\r\n  cancelledCount: number;\r\n  proceedRate: number;\r\n  severityBreakdown: Record<WarningSeverity, number>;\r\n}\r\n\r\ninterface DuplicateWarning {\r\n  id: string;\r\n  createdAt: string;\r\n  severity: WarningSeverity;\r\n  warningType: DuplicateType;\r\n  triggerAction: string;\r\n  decisionMade: boolean;\r\n  userDecision?: UserDecision;\r\n  decisionAt?: string;\r\n  triggeredBy: {\r\n    id: string;\r\n    name: string;\r\n    email: string;\r\n    role: string;\r\n  };\r\n  potentialDuplicates: Array<{\r\n    id: string;\r\n    matchType: DuplicateType;\r\n    confidence: number;\r\n    existingCompany?: string;\r\n    ownedBy?: {\r\n      id: string;\r\n      name: string;\r\n      role: string;\r\n    };\r\n    lastContactDate?: string;\r\n    recordStatus?: string;\r\n  }>;\r\n}\r\n\r\nexport default function DuplicatesAdminPage() {\r\n  const { data: session } = useSession();\r\n  const [statistics, setStatistics] = useState<DuplicateStatistics | null>(null);\r\n  const [warnings, setWarnings] = useState<DuplicateWarning[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [severityFilter, setSeverityFilter] = useState<string>('all');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [dateRange, setDateRange] = useState<string>('30');\r\n\r\n  // Check admin permissions\r\n  useEffect(() => {\r\n    if (session && !hasPermission(session.user as any, PERMISSIONS.DUPLICATES.MANAGE.resource, PERMISSIONS.DUPLICATES.MANAGE.action) &&\r\n        !hasPermission(session.user as any, PERMISSIONS.DUPLICATES.VIEW_ALL.resource, PERMISSIONS.DUPLICATES.VIEW_ALL.action)) {\r\n      redirect('/');\r\n    }\r\n  }, [session]);\r\n\r\n  // Fetch statistics and warnings\r\n  useEffect(() => {\r\n    if (session) {\r\n      fetchData();\r\n    }\r\n  }, [session, dateRange]);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const dateFrom = dateRange === 'all' ? undefined : \r\n        format(subDays(new Date(), parseInt(dateRange)), 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'');\r\n      const dateTo = format(new Date(), 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'');\r\n\r\n      const [statsResponse, warningsResponse] = await Promise.all([\r\n        fetch(`/api/admin/duplicates?action=statistics${dateFrom ? `&dateFrom=${dateFrom}&dateTo=${dateTo}` : ''}`),\r\n        fetch('/api/admin/duplicates?action=recent-warnings&limit=100&includeResolved=true')\r\n      ]);\r\n\r\n      if (statsResponse.ok) {\r\n        const stats = await statsResponse.json();\r\n        setStatistics(stats);\r\n      }\r\n\r\n      if (warningsResponse.ok) {\r\n        const warningsData = await warningsResponse.json();\r\n        setWarnings(warningsData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching duplicate data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const filteredWarnings = warnings.filter(warning => {\r\n    const matchesSearch = !searchTerm || \r\n      warning.triggeredBy.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      warning.triggeredBy.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      warning.potentialDuplicates.some(dup => \r\n        dup.existingCompany?.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n\r\n    const matchesSeverity = severityFilter === 'all' || warning.severity === severityFilter;\r\n\r\n    const matchesStatus = statusFilter === 'all' || \r\n      (statusFilter === 'pending' && !warning.decisionMade) ||\r\n      (statusFilter === 'resolved' && warning.decisionMade) ||\r\n      (statusFilter === 'proceeded' && warning.userDecision === UserDecision.PROCEEDED) ||\r\n      (statusFilter === 'cancelled' && warning.userDecision === UserDecision.CANCELLED);\r\n\r\n    return matchesSearch && matchesSeverity && matchesStatus;\r\n  });\r\n\r\n  const getSeverityColor = (severity: WarningSeverity) => {\r\n    switch (severity) {\r\n      case WarningSeverity.CRITICAL:\r\n        return 'destructive';\r\n      case WarningSeverity.HIGH:\r\n        return 'destructive';\r\n      case WarningSeverity.MEDIUM:\r\n        return 'secondary';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  const getDecisionColor = (decision?: UserDecision) => {\r\n    switch (decision) {\r\n      case UserDecision.PROCEEDED:\r\n        return 'default';\r\n      case UserDecision.CANCELLED:\r\n        return 'secondary';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  const formatMatchType = (matchType: DuplicateType) => {\r\n    return matchType.toLowerCase().replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\r\n  };\r\n\r\n  const formatTimeAgo = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 1) return 'Less than 1 hour ago';\r\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\r\n    if (diffInHours < 168) return `${Math.floor(diffInHours / 24)} days ago`;\r\n    return format(date, 'MMM dd, yyyy');\r\n  };\r\n\r\n  if (!session) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Duplicate Management</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Monitor and analyze duplicate detection system performance\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" onClick={fetchData} disabled={loading}>\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\r\n            Refresh\r\n          </Button>\r\n          <Button variant=\"outline\">\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            Export\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"warnings\">Recent Warnings</TabsTrigger>\r\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          {/* Date Range Selector */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Calendar className=\"h-5 w-5\" />\r\n                Time Period\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <Select value={dateRange} onValueChange={setDateRange}>\r\n                <SelectTrigger className=\"w-[200px]\">\r\n                  <SelectValue placeholder=\"Select time period\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"7\">Last 7 days</SelectItem>\r\n                  <SelectItem value=\"30\">Last 30 days</SelectItem>\r\n                  <SelectItem value=\"90\">Last 90 days</SelectItem>\r\n                  <SelectItem value=\"365\">Last year</SelectItem>\r\n                  <SelectItem value=\"all\">All time</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Statistics Cards */}\r\n          {statistics && (\r\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n              <Card>\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                  <CardTitle className=\"text-sm font-medium\">Total Warnings</CardTitle>\r\n                  <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-2xl font-bold\">{statistics.totalWarnings}</div>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Duplicate warnings shown\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                  <CardTitle className=\"text-sm font-medium\">Proceed Rate</CardTitle>\r\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-2xl font-bold\">{statistics.proceedRate.toFixed(1)}%</div>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    BDRs proceeding despite warnings\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                  <CardTitle className=\"text-sm font-medium\">Proceeded</CardTitle>\r\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-2xl font-bold\">{statistics.proceedCount}</div>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Warnings overridden\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              <Card>\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n                  <CardTitle className=\"text-sm font-medium\">Cancelled</CardTitle>\r\n                  <TrendingDown className=\"h-4 w-4 text-muted-foreground\" />\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"text-2xl font-bold\">{statistics.cancelledCount}</div>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    Actions cancelled\r\n                  </p>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          )}\r\n\r\n          {/* Severity Breakdown */}\r\n          {statistics && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Warning Severity Breakdown</CardTitle>\r\n                <CardDescription>Distribution of warning severities</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                  {Object.entries(statistics.severityBreakdown).map(([severity, count]) => (\r\n                    <div key={severity} className=\"text-center\">\r\n                      <div className=\"text-2xl font-bold\">{count}</div>\r\n                      <Badge variant={getSeverityColor(severity as WarningSeverity)}>\r\n                        {severity}\r\n                      </Badge>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"warnings\" className=\"space-y-4\">\r\n          {/* Filters */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Filter className=\"h-5 w-5\" />\r\n                Filters\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"flex flex-col md:flex-row gap-4\">\r\n                <div className=\"flex-1\">\r\n                  <Label htmlFor=\"search\">Search</Label>\r\n                  <div className=\"relative\">\r\n                    <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\r\n                    <Input\r\n                      id=\"search\"\r\n                      placeholder=\"Search by user name, email, or company...\"\r\n                      value={searchTerm}\r\n                      onChange={(e) => setSearchTerm(e.target.value)}\r\n                      className=\"pl-8\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"severity\">Severity</Label>\r\n                  <Select value={severityFilter} onValueChange={setSeverityFilter}>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"All severities\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">All Severities</SelectItem>\r\n                      <SelectItem value=\"CRITICAL\">Critical</SelectItem>\r\n                      <SelectItem value=\"HIGH\">High</SelectItem>\r\n                      <SelectItem value=\"MEDIUM\">Medium</SelectItem>\r\n                      <SelectItem value=\"LOW\">Low</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"status\">Status</Label>\r\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"All statuses\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">All Statuses</SelectItem>\r\n                      <SelectItem value=\"pending\">Pending</SelectItem>\r\n                      <SelectItem value=\"resolved\">Resolved</SelectItem>\r\n                      <SelectItem value=\"proceeded\">Proceeded</SelectItem>\r\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Warnings Table */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Recent Duplicate Warnings ({filteredWarnings.length})</CardTitle>\r\n              <CardDescription>\r\n                Latest duplicate detection warnings and their outcomes\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {loading ? (\r\n                <div className=\"text-center py-8\">\r\n                  <RefreshCw className=\"h-8 w-8 animate-spin mx-auto mb-2\" />\r\n                  <p>Loading warnings...</p>\r\n                </div>\r\n              ) : (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>User</TableHead>\r\n                      <TableHead>Type</TableHead>\r\n                      <TableHead>Severity</TableHead>\r\n                      <TableHead>Matches</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Created</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {filteredWarnings.map((warning) => (\r\n                      <TableRow key={warning.id}>\r\n                        <TableCell>\r\n                          <div>\r\n                            <div className=\"font-medium\">{warning.triggeredBy.name}</div>\r\n                            <div className=\"text-sm text-muted-foreground\">{warning.triggeredBy.email}</div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge variant=\"outline\">\r\n                            {formatMatchType(warning.warningType)}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <Badge variant={getSeverityColor(warning.severity)}>\r\n                            {warning.severity}\r\n                          </Badge>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"text-sm\">\r\n                            {warning.potentialDuplicates.length} duplicate(s)\r\n                            {warning.potentialDuplicates.length > 0 && (\r\n                              <div className=\"text-xs text-muted-foreground\">\r\n                                {warning.potentialDuplicates[0].existingCompany || 'Unknown Company'}\r\n                                {warning.potentialDuplicates[0].ownedBy && \r\n                                  ` • ${warning.potentialDuplicates[0].ownedBy.name}`\r\n                                }\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {warning.decisionMade ? (\r\n                            <Badge variant={getDecisionColor(warning.userDecision)}>\r\n                              {warning.userDecision}\r\n                            </Badge>\r\n                          ) : (\r\n                            <Badge variant=\"outline\">Pending</Badge>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"text-sm\">{formatTimeAgo(warning.createdAt)}</div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <BarChart3 className=\"h-5 w-5\" />\r\n                System Performance Analytics\r\n              </CardTitle>\r\n              <CardDescription>\r\n                Detailed insights into duplicate detection system effectiveness\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Advanced analytics and reporting features will be available in future releases.\r\n                  Current basic statistics are shown in the Overview tab.\r\n                </p>\r\n                \r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <h4 className=\"font-semibold mb-2\">Most Common Duplicate Types</h4>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Analysis of which types of duplicates are most frequently detected\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <h4 className=\"font-semibold mb-2\">User Behavior Patterns</h4>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Insights into how different users respond to duplicate warnings\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <h4 className=\"font-semibold mb-2\">Time-based Trends</h4>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Duplicate detection patterns over time and seasonal variations\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <div className=\"p-4 border rounded-lg\">\r\n                    <h4 className=\"font-semibold mb-2\">False Positive Analysis</h4>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Track system accuracy and identify areas for improvement\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\admin\\kpi-targets\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\admin\\roles\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":9,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":9,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":9,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getRoleIcon' is assigned a value but never used.","line":154,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":154,"endColumn":20},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":255,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9962,10073],"text":"\r\n                        You have unsaved changes. Click &quot;Save Changes\" to apply them.\r\n                      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9962,10073],"text":"\r\n                        You have unsaved changes. Click &ldquo;Save Changes\" to apply them.\r\n                      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9962,10073],"text":"\r\n                        You have unsaved changes. Click &#34;Save Changes\" to apply them.\r\n                      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9962,10073],"text":"\r\n                        You have unsaved changes. Click &rdquo;Save Changes\" to apply them.\r\n                      "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":255,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9962,10073],"text":"\r\n                        You have unsaved changes. Click \"Save Changes&quot; to apply them.\r\n                      "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9962,10073],"text":"\r\n                        You have unsaved changes. Click \"Save Changes&ldquo; to apply them.\r\n                      "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9962,10073],"text":"\r\n                        You have unsaved changes. Click \"Save Changes&#34; to apply them.\r\n                      "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9962,10073],"text":"\r\n                        You have unsaved changes. Click \"Save Changes&rdquo; to apply them.\r\n                      "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { useState, useEffect } from 'react';\r\nimport { Shield, User, Users, Crown, Settings, Save, RotateCcw, Info } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\n\r\ninterface Permission {\r\n  id: string;\r\n  name: string;\r\n  resource: string;\r\n  action: string;\r\n  description?: string;\r\n}\r\n\r\ninterface RolePermissionsData {\r\n  rolePermissions: Record<string, Permission[]>;\r\n  availablePermissions: Permission[];\r\n}\r\n\r\nconst ROLES = [\r\n  { key: 'BDR', name: 'BDR', icon: User, description: 'Business Development Representatives - front-line sales staff' },\r\n  { key: 'TEAM_LEAD', name: 'Team Lead', icon: Users, description: 'Team leaders who manage small groups of BDRs' },\r\n  { key: 'MANAGER', name: 'Manager', icon: Shield, description: 'Managers who oversee territories and multiple teams' },\r\n  { key: 'DIRECTOR', name: 'Director', icon: Crown, description: 'Directors with broad organizational oversight' },\r\n];\r\n\r\nconst RESOURCE_GROUPS = {\r\n  'Core Operations': ['LEADS', 'PIPELINE', 'FINANCE'],\r\n  'Administration': ['USERS', 'SETTINGS', 'ACTIVITY_LOGS'],\r\n  'Reporting & Analytics': ['REPORTS', 'DUPLICATES'],\r\n  'Communication': ['MESSAGING', 'TEMPLATES'],\r\n};\r\n\r\nconst ACTION_DESCRIPTIONS = {\r\n  CREATE: 'Create new records',\r\n  READ: 'View and access records',\r\n  UPDATE: 'Edit and modify records', \r\n  DELETE: 'Remove records',\r\n  VIEW_ALL: 'See all data across organization',\r\n  VIEW_TEAM: 'See team/territory data',\r\n  EXPORT: 'Export data to external formats',\r\n  MANAGE: 'Full administrative control',\r\n};\r\n\r\nasync function fetchRolePermissions(): Promise<RolePermissionsData> {\r\n  const res = await fetch('/api/admin/roles/permissions');\r\n  if (!res.ok) throw new Error('Failed to fetch role permissions');\r\n  return res.json();\r\n}\r\n\r\nasync function updateRolePermissions(role: string, permissionIds: string[]): Promise<void> {\r\n  const res = await fetch('/api/admin/roles/permissions', {\r\n    method: 'PATCH',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ role, permissionIds }),\r\n  });\r\n  if (!res.ok) {\r\n    const error = await res.json();\r\n    throw new Error(error.error || 'Failed to update role permissions');\r\n  }\r\n}\r\n\r\nexport default function RolePermissionsAdmin() {\r\n  const queryClient = useQueryClient();\r\n  const [selectedRole, setSelectedRole] = useState('BDR');\r\n  const [localPermissions, setLocalPermissions] = useState<Record<string, string[]>>({});\r\n  const [hasChanges, setHasChanges] = useState(false);\r\n\r\n  const { data, isLoading } = useQuery({\r\n    queryKey: ['rolePermissions'],\r\n    queryFn: fetchRolePermissions,\r\n  });\r\n\r\n  const updateMutation = useMutation({\r\n    mutationFn: ({ role, permissionIds }: { role: string; permissionIds: string[] }) => \r\n      updateRolePermissions(role, permissionIds),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['rolePermissions'] });\r\n      setHasChanges(false);\r\n      toast.success('Role permissions updated successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n\r\n  // Initialize local permissions when data loads\r\n  useEffect(() => {\r\n    if (data) {\r\n      const initial: Record<string, string[]> = {};\r\n      ROLES.forEach(role => {\r\n        initial[role.key] = (data.rolePermissions[role.key] || []).map((p: Permission) => p.id);\r\n      });\r\n      setLocalPermissions(initial);\r\n    }\r\n  }, [data]);\r\n\r\n  // Check for changes\r\n  useEffect(() => {\r\n    if (data && Object.keys(localPermissions).length > 0) {\r\n      const hasAnyChanges = ROLES.some(role => {\r\n        const current = (data.rolePermissions[role.key] || []).map((p: Permission) => p.id).sort();\r\n        const local = (localPermissions[role.key] || []).sort();\r\n        return JSON.stringify(current) !== JSON.stringify(local);\r\n      });\r\n      setHasChanges(hasAnyChanges);\r\n    }\r\n  }, [data, localPermissions]);\r\n\r\n  const handlePermissionToggle = (role: string, permissionId: string, checked: boolean) => {\r\n    setLocalPermissions(prev => {\r\n      const current = prev[role] || [];\r\n      const updated = checked \r\n        ? [...current, permissionId]\r\n        : current.filter(id => id !== permissionId);\r\n      \r\n      return { ...prev, [role]: updated };\r\n    });\r\n  };\r\n\r\n  const handleSaveRole = (role: string) => {\r\n    const permissionIds = localPermissions[role] || [];\r\n    updateMutation.mutate({ role, permissionIds });\r\n  };\r\n\r\n  const handleResetRole = (role: string) => {\r\n    if (data) {\r\n      setLocalPermissions(prev => ({\r\n        ...prev,\r\n        [role]: (data.rolePermissions[role] || []).map((p: Permission) => p.id)\r\n      }));\r\n    }\r\n  };\r\n\r\n  const getPermissionsByGroup = (permissions: Permission[]) => {\r\n    const grouped: Record<string, Permission[]> = {};\r\n    \r\n    Object.entries(RESOURCE_GROUPS).forEach(([groupName, resources]) => {\r\n      grouped[groupName] = permissions.filter(p => resources.includes(p.resource));\r\n    });\r\n\r\n    return grouped;\r\n  };\r\n\r\n  const getRoleIcon = (roleKey: string) => {\r\n    const role = ROLES.find(r => r.key === roleKey);\r\n    return role?.icon || User;\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div className=\"p-6\">Loading role permissions...</div>;\r\n  }\r\n\r\n  if (!data) {\r\n    return <div className=\"p-6\">Failed to load role permissions.</div>;\r\n  }\r\n\r\n  const currentRole = ROLES.find(r => r.key === selectedRole);\r\n  const rolePermissionIds = localPermissions[selectedRole] || [];\r\n  const groupedPermissions = getPermissionsByGroup(data.availablePermissions);\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Settings className=\"h-5 w-5\" />\r\n            Role-Based Permissions Management\r\n          </CardTitle>\r\n          <p className=\"text-sm text-gray-600\">\r\n            Configure default permissions for each role. These apply globally to all users with that role.\r\n          </p>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex flex-col lg:flex-row gap-6\">\r\n            {/* Role Selection Sidebar */}\r\n            <div className=\"lg:w-64 space-y-2\">\r\n              <h3 className=\"font-medium text-sm text-gray-700 mb-3\">Select Role</h3>\r\n              {ROLES.map((role) => {\r\n                const Icon = role.icon;\r\n                const hasLocalChanges = data && localPermissions[role.key] && \r\n                  JSON.stringify((data.rolePermissions[role.key] || []).map((p: Permission) => p.id).sort()) !== \r\n                  JSON.stringify((localPermissions[role.key] || []).sort());\r\n                \r\n                return (\r\n                  <div key={role.key} className=\"relative\">\r\n                    <Button\r\n                      variant={selectedRole === role.key ? 'default' : 'outline'}\r\n                      className=\"w-full justify-start gap-2 h-auto p-3\"\r\n                      onClick={() => setSelectedRole(role.key)}\r\n                    >\r\n                      <Icon className=\"h-4 w-4\" />\r\n                      <div className=\"text-left\">\r\n                        <div className=\"font-medium\">{role.name}</div>\r\n                        <div className=\"text-xs opacity-70 line-clamp-1\">\r\n                          {role.description}\r\n                        </div>\r\n                      </div>\r\n                    </Button>\r\n                    {hasLocalChanges && (\r\n                      <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-500 rounded-full\"></div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n\r\n            {/* Permissions Configuration */}\r\n            <div className=\"flex-1\">\r\n              {currentRole && (\r\n                <div className=\"space-y-6\">\r\n                  {/* Role Header */}\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      {React.createElement(currentRole.icon, { className: \"h-6 w-6\" })}\r\n                      <div>\r\n                        <h2 className=\"text-xl font-semibold\">{currentRole.name} Permissions</h2>\r\n                        <p className=\"text-sm text-gray-600\">{currentRole.description}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleResetRole(selectedRole)}\r\n                        disabled={!hasChanges}\r\n                      >\r\n                        <RotateCcw className=\"h-4 w-4 mr-1\" />\r\n                        Reset\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        onClick={() => handleSaveRole(selectedRole)}\r\n                        disabled={!hasChanges || updateMutation.isPending}\r\n                      >\r\n                        <Save className=\"h-4 w-4 mr-1\" />\r\n                        {updateMutation.isPending ? 'Saving...' : 'Save Changes'}\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {hasChanges && (\r\n                    <Alert>\r\n                      <Info className=\"h-4 w-4\" />\r\n                      <AlertDescription>\r\n                        You have unsaved changes. Click \"Save Changes\" to apply them.\r\n                      </AlertDescription>\r\n                    </Alert>\r\n                  )}\r\n\r\n                  {/* Permission Groups */}\r\n                  <div className=\"space-y-6\">\r\n                    {Object.entries(groupedPermissions).map(([groupName, permissions]) => (\r\n                      <Card key={groupName}>\r\n                        <CardHeader className=\"pb-3\">\r\n                          <CardTitle className=\"text-lg\">{groupName}</CardTitle>\r\n                        </CardHeader>\r\n                        <CardContent>\r\n                          <div className=\"grid gap-4\">\r\n                            {permissions.length === 0 ? (\r\n                              <p className=\"text-sm text-gray-500 italic\">No permissions in this category</p>\r\n                            ) : (\r\n                              Object.entries(\r\n                                permissions\r\n                                  .sort((a, b) => a.resource.localeCompare(b.resource) || a.action.localeCompare(b.action))\r\n                                  .reduce((acc, permission) => {\r\n                                    if (!acc[permission.resource]) {\r\n                                      acc[permission.resource] = [];\r\n                                    }\r\n                                    acc[permission.resource].push(permission);\r\n                                    return acc;\r\n                                  }, {} as Record<string, Permission[]>)\r\n                              ).map(([resource, resourcePermissions]) => (\r\n                                <div key={resource}>\r\n                                  <h4 className=\"font-medium text-sm text-gray-700 mb-2\">{resource}</h4>\r\n                                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 ml-4\">\r\n                                    {resourcePermissions.map((permission) => (\r\n                                      <div key={permission.id} className=\"flex items-center space-x-2\">\r\n                                        <Checkbox\r\n                                          id={permission.id}\r\n                                          checked={rolePermissionIds.includes(permission.id)}\r\n                                          onCheckedChange={(checked) =>\r\n                                            handlePermissionToggle(selectedRole, permission.id, !!checked)\r\n                                          }\r\n                                        />\r\n                                        <label\r\n                                          htmlFor={permission.id}\r\n                                          className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\r\n                                        >\r\n                                          <div className=\"flex items-center gap-2\">\r\n                                            <Badge variant=\"outline\" className=\"text-xs\">\r\n                                              {permission.action}\r\n                                            </Badge>\r\n                                            <span className=\"text-xs text-gray-600\">\r\n                                              {ACTION_DESCRIPTIONS[permission.action as keyof typeof ACTION_DESCRIPTIONS] || permission.action}\r\n                                            </span>\r\n                                          </div>\r\n                                        </label>\r\n                                      </div>\r\n                                    ))}\r\n                                  </div>\r\n                                  {resourcePermissions.length > 0 && <Separator className=\"mt-3\" />}\r\n                                </div>\r\n                              ))\r\n                            )}\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\admin\\users\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvailablePermission' is defined but never used.","line":64,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":426,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14508,14511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14508,14511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":584,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":584,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21398,21401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21398,21401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Label } from '@/components/ui/label';\r\nimport { useState } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { UserPlus, Edit, Trash2, Shield, User as UserIcon, KeyRound, Settings } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\nasync function fetchTerritories(): Promise<{ id: string; name: string }[]> {\r\n  const res = await fetch('/api/territories');\r\n  if (!res.ok) return [];\r\n  const data = await res.json();\r\n  return data?.territories ?? [];\r\n}\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string | null;\r\n  email: string;\r\n  role: 'ADMIN' | 'DIRECTOR' | 'MANAGER' | 'TEAM_LEAD' | 'BDR';\r\n  isActive: boolean;\r\n  lastLoginAt: string | null;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  territory?: { id: string; name: string } | null;\r\n  _count: {\r\n    pipelineItems: number;\r\n    leads: number;\r\n    activityLogs: number;\r\n  };\r\n}\r\n\r\ninterface CreateUserForm {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  role: 'ADMIN' | 'DIRECTOR' | 'MANAGER' | 'TEAM_LEAD' | 'BDR';\r\n  territoryId?: string | null;\r\n}\r\n\r\ninterface UpdateUserForm {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n  role?: 'ADMIN' | 'DIRECTOR' | 'MANAGER' | 'TEAM_LEAD' | 'BDR';\r\n  territoryId?: string | null;\r\n}\r\n\r\ninterface UserPermission {\r\n  id: string;\r\n  resource: string;\r\n  action: string;\r\n  expiresAt: string | null;\r\n  createdAt: string;\r\n}\r\n\r\ninterface AvailablePermission {\r\n  id: string;\r\n  resource: string;\r\n  action: string;\r\n}\r\n\r\nasync function fetchUsers(): Promise<User[]> {\r\n  const res = await fetch('/api/admin/users');\r\n  if (!res.ok) throw new Error('Failed to fetch users');\r\n  return res.json();\r\n}\r\n\r\nasync function createUser(data: CreateUserForm): Promise<User> {\r\n  const res = await fetch('/api/admin/users', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  if (!res.ok) {\r\n    const error = await res.json();\r\n    throw new Error(error.error || 'Failed to create user');\r\n  }\r\n  return res.json();\r\n}\r\n\r\nasync function updateUser(id: string, data: UpdateUserForm): Promise<User> {\r\n  const res = await fetch(`/api/admin/users/${id}`, {\r\n    method: 'PATCH',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  if (!res.ok) {\r\n    const error = await res.json();\r\n    throw new Error(error.error || 'Failed to update user');\r\n  }\r\n  return res.json();\r\n}\r\n\r\nasync function deleteUser(id: string): Promise<void> {\r\n  const res = await fetch(`/api/admin/users/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  if (!res.ok) {\r\n    const error = await res.json();\r\n    throw new Error(error.error || 'Failed to delete user');\r\n  }\r\n}\r\n\r\nasync function resetUserPassword(id: string, newPassword: string): Promise<void> {\r\n  const res = await fetch(`/api/admin/users/${id}/reset-password`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ newPassword }),\r\n  });\r\n  if (!res.ok) {\r\n    const error = await res.json();\r\n    throw new Error(error.error || 'Failed to reset password');\r\n  }\r\n}\r\n\r\nexport default function UsersAdmin() {\r\n  const queryClient = useQueryClient();\r\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [resetPasswordDialogOpen, setResetPasswordDialogOpen] = useState(false);\r\n  const [permissionsDialogOpen, setPermissionsDialogOpen] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\r\n  const [newPassword, setNewPassword] = useState('');\r\n  \r\n  const [createForm, setCreateForm] = useState<CreateUserForm>({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    role: 'BDR',\r\n    territoryId: null,\r\n  });\r\n  \r\n  const [editForm, setEditForm] = useState<UpdateUserForm>({});\r\n  const [selectedUserForPermissions, setSelectedUserForPermissions] = useState<User | null>(null);\r\n  const [newPermissionResource, setNewPermissionResource] = useState('');\r\n  const [newPermissionAction, setNewPermissionAction] = useState('');\r\n  const [newPermissionExpiry, setNewPermissionExpiry] = useState('');\r\n\r\n  const { data: userPermissions = [], refetch: refetchPermissions } = useQuery({\r\n    queryKey: ['userPermissions', selectedUserForPermissions?.id],\r\n    queryFn: async () => {\r\n      if (!selectedUserForPermissions) return { userPermissions: [], availablePermissions: [] };\r\n      const res = await fetch(`/api/admin/users/${selectedUserForPermissions.id}/permissions`);\r\n      if (!res.ok) throw new Error('Failed to fetch permissions');\r\n      return res.json();\r\n    },\r\n    enabled: !!selectedUserForPermissions,\r\n  });\r\n\r\n  const { data: users = [], isLoading } = useQuery({\r\n    queryKey: ['users'],\r\n    queryFn: fetchUsers,\r\n  });\r\n  const { data: territories = [] } = useQuery({\r\n    queryKey: ['territories'],\r\n    queryFn: fetchTerritories,\r\n  });\r\n\r\n  const createMutation = useMutation({\r\n    mutationFn: createUser,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['users'] });\r\n      setCreateDialogOpen(false);\r\n      setCreateForm({ name: '', email: '', password: '', role: 'BDR' });\r\n      toast.success('User created successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n\r\n  const updateMutation = useMutation({\r\n    mutationFn: ({ id, data }: { id: string; data: UpdateUserForm }) => updateUser(id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['users'] });\r\n      setEditDialogOpen(false);\r\n      setSelectedUser(null);\r\n      setEditForm({});\r\n      toast.success('User updated successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n\r\n  const deleteMutation = useMutation({\r\n    mutationFn: deleteUser,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['users'] });\r\n      toast.success('User deleted successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n\r\n  const resetPasswordMutation = useMutation({\r\n    mutationFn: ({ id, newPassword }: { id: string; newPassword: string }) => resetUserPassword(id, newPassword),\r\n    onSuccess: () => {\r\n      setResetPasswordDialogOpen(false);\r\n      setSelectedUser(null);\r\n      setNewPassword('');\r\n      toast.success('Password reset successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n\r\n  const addPermissionMutation = useMutation({\r\n    mutationFn: async ({ userId, resource, action, expiresAt }: { userId: string; resource: string; action: string; expiresAt?: string }) => {\r\n      const res = await fetch(`/api/admin/users/${userId}/permissions`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ resource, action, expiresAt }),\r\n      });\r\n      if (!res.ok) {\r\n        const error = await res.json();\r\n        throw new Error(error.error || 'Failed to add permission');\r\n      }\r\n      return res.json();\r\n    },\r\n    onSuccess: () => {\r\n      refetchPermissions();\r\n      setNewPermissionResource('');\r\n      setNewPermissionAction('');\r\n      setNewPermissionExpiry('');\r\n      toast.success('Permission added successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n\r\n  const removePermissionMutation = useMutation({\r\n    mutationFn: async ({ userId, permissionId }: { userId: string; permissionId: string }) => {\r\n      const res = await fetch(`/api/admin/users/${userId}/permissions?permissionId=${permissionId}`, {\r\n        method: 'DELETE',\r\n      });\r\n      if (!res.ok) {\r\n        const error = await res.json();\r\n        throw new Error(error.error || 'Failed to remove permission');\r\n      }\r\n      return res.json();\r\n    },\r\n    onSuccess: () => {\r\n      refetchPermissions();\r\n      toast.success('Permission removed successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n\r\n  const handleCreate = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!createForm.name || !createForm.email || !createForm.password) {\r\n      toast.error('Please fill in all required fields');\r\n      return;\r\n    }\r\n    createMutation.mutate(createForm);\r\n  };\r\n\r\n  const handleEdit = (user: User) => {\r\n    setSelectedUser(user);\r\n    setEditForm({\r\n      name: user.name || '',\r\n      email: user.email,\r\n      role: user.role,\r\n      territoryId: user.territory?.id ?? null,\r\n    });\r\n    setEditDialogOpen(true);\r\n  };\r\n\r\n  const handleUpdate = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!selectedUser) return;\r\n    \r\n    // Only send fields that have changed\r\n    const updates: UpdateUserForm = {};\r\n    if (editForm.name && editForm.name !== selectedUser.name) updates.name = editForm.name;\r\n    if (editForm.email && editForm.email !== selectedUser.email) updates.email = editForm.email;\r\n    if (editForm.password) updates.password = editForm.password;\r\n    if (editForm.role && editForm.role !== selectedUser.role) updates.role = editForm.role;\r\n    if (editForm.territoryId !== selectedUser.territory?.id) updates.territoryId = editForm.territoryId ?? null;\r\n    \r\n    if (Object.keys(updates).length === 0) {\r\n      toast.info('No changes to save');\r\n      return;\r\n    }\r\n    \r\n    updateMutation.mutate({ id: selectedUser.id, data: updates });\r\n  };\r\n\r\n  const handleDelete = (user: User) => {\r\n    const hasData = user._count.pipelineItems + user._count.leads + user._count.activityLogs > 0;\r\n    \r\n    if (hasData) {\r\n      toast.error(`Cannot delete ${user.name}. They have associated data that must be reassigned first.`);\r\n      return;\r\n    }\r\n    \r\n    if (confirm(`Are you sure you want to delete ${user.name}? This action cannot be undone.`)) {\r\n      deleteMutation.mutate(user.id);\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = (user: User) => {\r\n    setSelectedUser(user);\r\n    setNewPassword('');\r\n    setResetPasswordDialogOpen(true);\r\n  };\r\n\r\n  const handlePasswordReset = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!selectedUser || !newPassword) {\r\n      toast.error('Please enter a new password');\r\n      return;\r\n    }\r\n    \r\n    if (newPassword.length < 6) {\r\n      toast.error('Password must be at least 6 characters');\r\n      return;\r\n    }\r\n    \r\n    resetPasswordMutation.mutate({ id: selectedUser.id, newPassword });\r\n  };\r\n\r\n  const handleManagePermissions = (user: User) => {\r\n    setSelectedUserForPermissions(user);\r\n    setPermissionsDialogOpen(true);\r\n  };\r\n\r\n  const handleAddPermission = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!selectedUserForPermissions || !newPermissionResource || !newPermissionAction) {\r\n      toast.error('Please select resource and action');\r\n      return;\r\n    }\r\n    addPermissionMutation.mutate({\r\n      userId: selectedUserForPermissions.id,\r\n      resource: newPermissionResource,\r\n      action: newPermissionAction,\r\n      expiresAt: newPermissionExpiry || undefined,\r\n    });\r\n  };\r\n\r\n  const handleRemovePermission = (permissionId: string) => {\r\n    if (!selectedUserForPermissions) return;\r\n    if (confirm('Are you sure you want to remove this permission?')) {\r\n      removePermissionMutation.mutate({\r\n        userId: selectedUserForPermissions.id,\r\n        permissionId,\r\n      });\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div className=\"p-6\">Loading users...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-6\">\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <UserIcon className=\"h-5 w-5\" />\r\n            User Management\r\n          </CardTitle>\r\n          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button>\r\n                <UserPlus className=\"h-4 w-4 mr-2\" />\r\n                Add User\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent>\r\n              <DialogHeader>\r\n                <DialogTitle>Create New User</DialogTitle>\r\n              </DialogHeader>\r\n              <form onSubmit={handleCreate} className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"create-name\">Name</Label>\r\n                  <Input\r\n                    id=\"create-name\"\r\n                    value={createForm.name}\r\n                    onChange={(e) => setCreateForm({ ...createForm, name: e.target.value })}\r\n                    placeholder=\"Full name\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"create-email\">Email</Label>\r\n                  <Input\r\n                    id=\"create-email\"\r\n                    type=\"email\"\r\n                    value={createForm.email}\r\n                    onChange={(e) => setCreateForm({ ...createForm, email: e.target.value })}\r\n                    placeholder=\"user@emg.com\"\r\n                    required\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"create-password\">Password</Label>\r\n                  <Input\r\n                    id=\"create-password\"\r\n                    type=\"password\"\r\n                    value={createForm.password}\r\n                    onChange={(e) => setCreateForm({ ...createForm, password: e.target.value })}\r\n                    placeholder=\"Minimum 6 characters\"\r\n                    required\r\n                  />\r\n                </div>\r\n                 <div>\r\n                  <Label htmlFor=\"create-role\">Role</Label>\r\n                  <Select\r\n                    value={createForm.role}\r\n                     onValueChange={(value: any) => setCreateForm({ ...createForm, role: value })}\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"BDR\">BDR</SelectItem>\r\n                       <SelectItem value=\"TEAM_LEAD\">Team Lead</SelectItem>\r\n                       <SelectItem value=\"MANAGER\">Manager</SelectItem>\r\n                       <SelectItem value=\"DIRECTOR\">Director</SelectItem>\r\n                      <SelectItem value=\"ADMIN\">Admin</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                 <div>\r\n                   <Label htmlFor=\"create-territory\">Territory (optional)</Label>\r\n                   <Select\r\n                     value={createForm.territoryId || 'none'}\r\n                     onValueChange={(value) => setCreateForm({ ...createForm, territoryId: value === 'none' ? null : value })}\r\n                   >\r\n                     <SelectTrigger>\r\n                       <SelectValue placeholder=\"Select a territory\" />\r\n                     </SelectTrigger>\r\n                     <SelectContent>\r\n                       <SelectItem value=\"none\">None</SelectItem>\r\n                       {territories.map(t => (\r\n                         <SelectItem key={t.id} value={t.id}>{t.name}</SelectItem>\r\n                       ))}\r\n                     </SelectContent>\r\n                   </Select>\r\n                 </div>\r\n                <Button type=\"submit\" disabled={createMutation.isPending} className=\"w-full\">\r\n                  {createMutation.isPending ? 'Creating...' : 'Create User'}\r\n                </Button>\r\n              </form>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Name</TableHead>\r\n                <TableHead>Email</TableHead>\r\n                <TableHead>Role</TableHead>\r\n                <TableHead>Status</TableHead>\r\n                <TableHead>Last Login</TableHead>\r\n                <TableHead>Data Count</TableHead>\r\n                <TableHead>Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {users.map((user) => (\r\n                <TableRow key={user.id}>\r\n                  <TableCell className=\"font-medium\">{user.name || 'No name'}</TableCell>\r\n                  <TableCell>{user.email}</TableCell>\r\n                  <TableCell>\r\n                    <Badge variant={user.role === 'ADMIN' ? 'default' : 'secondary'} className=\"gap-1\">\r\n                      {user.role === 'ADMIN' ? <Shield className=\"h-3 w-3\" /> : <UserIcon className=\"h-3 w-3\" />}\r\n                      {user.role}\r\n                    </Badge>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Badge variant={user.isActive ? 'default' : 'destructive'}>\r\n                      {user.isActive ? 'Active' : 'Inactive'}\r\n                    </Badge>\r\n                  </TableCell>\r\n                  <TableCell className=\"text-sm text-gray-600\">\r\n                    {user.lastLoginAt \r\n                      ? format(new Date(user.lastLoginAt), 'MMM dd, yyyy HH:mm')\r\n                      : 'Never logged in'\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <div className=\"text-sm text-gray-600\">\r\n                      {user._count.pipelineItems} pipeline, {user._count.leads} leads, {user._count.activityLogs} logs\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <div className=\"flex gap-2\">\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => handleEdit(user)}\r\n                      >\r\n                        <Edit className=\"h-3 w-3\" />\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => handleResetPassword(user)}\r\n                      >\r\n                        <KeyRound className=\"h-3 w-3\" />\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => handleManagePermissions(user)}\r\n                      >\r\n                        <Settings className=\"h-3 w-3\" />\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => handleDelete(user)}\r\n                        disabled={user._count.pipelineItems + user._count.leads + user._count.activityLogs > 0}\r\n                      >\r\n                        <Trash2 className=\"h-3 w-3\" />\r\n                      </Button>\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Edit User Dialog */}\r\n      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Edit User: {selectedUser?.name}</DialogTitle>\r\n          </DialogHeader>\r\n          <form onSubmit={handleUpdate} className=\"space-y-4\">\r\n            <div>\r\n              <Label htmlFor=\"edit-name\">Name</Label>\r\n              <Input\r\n                id=\"edit-name\"\r\n                value={editForm.name || ''}\r\n                onChange={(e) => setEditForm({ ...editForm, name: e.target.value })}\r\n                placeholder=\"Full name\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"edit-email\">Email</Label>\r\n              <Input\r\n                id=\"edit-email\"\r\n                type=\"email\"\r\n                value={editForm.email || ''}\r\n                onChange={(e) => setEditForm({ ...editForm, email: e.target.value })}\r\n                placeholder=\"user@emg.com\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"edit-password\">New Password (leave blank to keep current)</Label>\r\n              <Input\r\n                id=\"edit-password\"\r\n                type=\"password\"\r\n                value={editForm.password || ''}\r\n                onChange={(e) => setEditForm({ ...editForm, password: e.target.value })}\r\n                placeholder=\"New password\"\r\n              />\r\n            </div>\r\n              <div>\r\n              <Label htmlFor=\"edit-role\">Role</Label>\r\n              <Select\r\n                value={editForm.role || 'BDR'}\r\n                onValueChange={(value: any) => setEditForm({ ...editForm, role: value })}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"BDR\">BDR</SelectItem>\r\n                    <SelectItem value=\"TEAM_LEAD\">Team Lead</SelectItem>\r\n                    <SelectItem value=\"MANAGER\">Manager</SelectItem>\r\n                    <SelectItem value=\"DIRECTOR\">Director</SelectItem>\r\n                  <SelectItem value=\"ADMIN\">Admin</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n              <div>\r\n                <Label htmlFor=\"edit-territory\">Territory (optional)</Label>\r\n                <Select\r\n                  value={editForm.territoryId || 'none'}\r\n                  onValueChange={(value) => setEditForm({ ...editForm, territoryId: value === 'none' ? null : value })}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select a territory\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"none\">None</SelectItem>\r\n                    {territories.map(t => (\r\n                      <SelectItem key={t.id} value={t.id}>{t.name}</SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            <Button type=\"submit\" disabled={updateMutation.isPending} className=\"w-full\">\r\n              {updateMutation.isPending ? 'Updating...' : 'Update User'}\r\n            </Button>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Reset Password Dialog */}\r\n      <Dialog open={resetPasswordDialogOpen} onOpenChange={setResetPasswordDialogOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Reset Password: {selectedUser?.name}</DialogTitle>\r\n          </DialogHeader>\r\n          <form onSubmit={handlePasswordReset} className=\"space-y-4\">\r\n            <div>\r\n              <Label htmlFor=\"reset-password\">New Password</Label>\r\n              <Input\r\n                id=\"reset-password\"\r\n                type=\"password\"\r\n                value={newPassword}\r\n                onChange={(e) => setNewPassword(e.target.value)}\r\n                placeholder=\"Enter new password (min 6 characters)\"\r\n                required\r\n              />\r\n              <p className=\"text-sm text-muted-foreground mt-1\">\r\n                The user will need to use this new password to log in.\r\n              </p>\r\n            </div>\r\n            <Button type=\"submit\" disabled={resetPasswordMutation.isPending} className=\"w-full\">\r\n              <KeyRound className=\"h-4 w-4 mr-2\" />\r\n              {resetPasswordMutation.isPending ? 'Resetting...' : 'Reset Password'}\r\n            </Button>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Permissions Management Dialog */}\r\n      <Dialog open={permissionsDialogOpen} onOpenChange={setPermissionsDialogOpen}>\r\n        <DialogContent className=\"max-w-4xl\">\r\n          <DialogHeader>\r\n            <DialogTitle>Manage Permissions: {selectedUserForPermissions?.name}</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-6\">\r\n            {/* Current Permissions */}\r\n            <div>\r\n              <h3 className=\"font-medium mb-3\">Current Permission Overrides</h3>\r\n              {userPermissions.userPermissions?.length > 0 ? (\r\n                <div className=\"space-y-2\">\r\n                  {userPermissions.userPermissions.map((permission: UserPermission) => (\r\n                    <div key={permission.id} className=\"flex items-center justify-between p-3 border rounded\">\r\n                      <div>\r\n                        <span className=\"font-medium\">{permission.resource}</span>\r\n                        <span className=\"mx-2\">·</span>\r\n                        <span className=\"text-gray-600\">{permission.action}</span>\r\n                        {permission.expiresAt && (\r\n                          <span className=\"ml-2 text-sm text-orange-600\">\r\n                            Expires: {format(new Date(permission.expiresAt), 'MMM dd, yyyy')}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => handleRemovePermission(permission.id)}\r\n                        disabled={removePermissionMutation.isPending}\r\n                      >\r\n                        <Trash2 className=\"h-3 w-3\" />\r\n                      </Button>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"text-gray-500 text-sm\">No permission overrides. User has default role-based permissions only.</p>\r\n              )}\r\n            </div>\r\n\r\n            {/* Add New Permission */}\r\n            <div>\r\n              <h3 className=\"font-medium mb-3\">Add Permission Override</h3>\r\n              <form onSubmit={handleAddPermission} className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-3 gap-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"permission-resource\">Resource</Label>\r\n                    <Select value={newPermissionResource} onValueChange={setNewPermissionResource}>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Select resource\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"FINANCE\">Finance</SelectItem>\r\n                        <SelectItem value=\"LEADS\">Leads</SelectItem>\r\n                        <SelectItem value=\"PIPELINE\">Pipeline</SelectItem>\r\n                        <SelectItem value=\"USERS\">Users</SelectItem>\r\n                        <SelectItem value=\"REPORTS\">Reports</SelectItem>\r\n                        <SelectItem value=\"SETTINGS\">Settings</SelectItem>\r\n                        <SelectItem value=\"ACTIVITY_LOGS\">Activity Logs</SelectItem>\r\n                        <SelectItem value=\"DUPLICATES\">Duplicates</SelectItem>\r\n                        <SelectItem value=\"MESSAGING\">Messaging</SelectItem>\r\n                        <SelectItem value=\"TEMPLATES\">Templates</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"permission-action\">Action</Label>\r\n                    <Select value={newPermissionAction} onValueChange={setNewPermissionAction}>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Select action\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"CREATE\">Create</SelectItem>\r\n                        <SelectItem value=\"READ\">Read</SelectItem>\r\n                        <SelectItem value=\"UPDATE\">Update</SelectItem>\r\n                        <SelectItem value=\"DELETE\">Delete</SelectItem>\r\n                        <SelectItem value=\"VIEW_ALL\">View All</SelectItem>\r\n                        <SelectItem value=\"VIEW_TEAM\">View Team</SelectItem>\r\n                        <SelectItem value=\"EXPORT\">Export</SelectItem>\r\n                        <SelectItem value=\"MANAGE\">Manage</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"permission-expiry\">Expiry Date (optional)</Label>\r\n                    <Input\r\n                      id=\"permission-expiry\"\r\n                      type=\"date\"\r\n                      value={newPermissionExpiry}\r\n                      onChange={(e) => setNewPermissionExpiry(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <Button type=\"submit\" disabled={addPermissionMutation.isPending}>\r\n                  {addPermissionMutation.isPending ? 'Adding...' : 'Add Permission Override'}\r\n                </Button>\r\n              </form>\r\n            </div>\r\n\r\n            {/* Role-based Permissions Info */}\r\n            <div className=\"p-4 bg-gray-50 rounded\">\r\n              <h4 className=\"font-medium text-sm mb-2\">Role-based Permissions ({selectedUserForPermissions?.role})</h4>\r\n              <p className=\"text-sm text-gray-600\">\r\n                {selectedUserForPermissions?.role === 'BDR' && 'BDRs can manage their own leads/pipeline, read finance data, and access messaging/templates.'}\r\n                {selectedUserForPermissions?.role === 'TEAM_LEAD' && 'Team Leads can manage team data, read finance, and access messaging/templates.'}\r\n                {selectedUserForPermissions?.role === 'MANAGER' && 'Managers can manage territory data, view team finance, and access most features.'}\r\n                {selectedUserForPermissions?.role === 'DIRECTOR' && 'Directors can view/manage most data across all territories.'}\r\n                {selectedUserForPermissions?.role === 'ADMIN' && 'Admins have full access to all features and data.'}\r\n              </p>\r\n              <p className=\"text-xs text-gray-500 mt-2\">\r\n                Permission overrides add to (not replace) role-based permissions.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\activity-logs\\batch\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\activity-logs\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3409,3412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3409,3412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'activityData' is never reassigned. Use 'const' instead.","line":141,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":141,"endColumn":21,"fix":{"range":[4533,4573],"text":"const activityData = { ...validatedData };"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth/next\";\nimport { authOptions } from \"@/lib/auth\";\nimport { prisma } from \"@/lib/db\";\nimport { createActivityLogSchema } from \"@/lib/validations\";\nimport { Role } from \"@prisma/client\";\n\nexport async function GET(req: NextRequest) {\n  try {\n    // 1. Get Session securely on the server\n    const session = await getServerSession(authOptions);\n\n    // 2. Check Authentication\n    if (!session || !session.user) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { role, id: userId } = session.user;\n\n    const { searchParams } = new URL(req.url);\n    const bdr = searchParams.get('bdr') || undefined;\n    const activityType = searchParams.get('activityType') || undefined;\n    const fromDate = searchParams.get('fromDate') ? new Date(searchParams.get('fromDate')!) : undefined;\n    const toDate = searchParams.get('toDate') ? new Date(searchParams.get('toDate')!) : undefined;\n    const leadId = searchParams.get('leadId') ? Number(searchParams.get('leadId')) : undefined;\n    const pipelineItemId = searchParams.get('pipelineItemId') ? Number(searchParams.get('pipelineItemId')) : undefined;\n    const page = parseInt(searchParams.get('page') || '1');\n    const pageSize = parseInt(searchParams.get('pageSize') || '20');\n    \n    const skip = (page - 1) * pageSize;\n    \n    // 3. Enforce Authorization (RBAC) - Build where clause with role-based filtering\n    const where: Record<string, unknown> = {};\n\n    // Role-based data filtering\n    if (role === Role.BDR) {\n      // BDRs can only see their own activity logs\n      where.bdrId = userId;\n    } else if (role === Role.ADMIN) {\n      // Admins can see all activity logs - no additional filtering\n    } else {\n      // Unknown role - deny access\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n    }\n    \n    // Note: For BDRs, we ignore the 'bdr' filter param since they can only see their own data\n    // For Admins, we can still apply the bdr filter if provided\n    if (bdr && role === Role.ADMIN) {\n      where.bdr = { name: bdr };\n    }\n    if (activityType) where.activityType = activityType;\n    if (leadId) where.leadId = leadId;\n    if (pipelineItemId) where.pipelineItemId = pipelineItemId;\n    \n    // Date range query\n    if (fromDate || toDate) {\n      where.timestamp = {};\n      if (fromDate) where.timestamp.gte = fromDate;\n      if (toDate) where.timestamp.lte = toDate;\n    }\n    \n    // Get total count for pagination\n    const total = await prisma.activityLog.count({ where });\n    \n    // Get activity logs\n    const logs = await prisma.activityLog.findMany({\n      where,\n      skip,\n      take: pageSize,\n      orderBy: { timestamp: 'desc' },\n      include: {\n        bdr: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          }\n        },\n        lead: {\n          select: {\n            id: true,\n            name: true,\n            company: true\n          }\n        },\n        pipelineItem: {\n          select: {\n            id: true,\n            name: true,\n            company: true,\n            category: true,\n            status: true\n          }\n        }\n      }\n    });\n    \n    // Normalize response: return bdr as a string (name) to match frontend expectations\n    const normalizedLogs = logs.map((log: any) => ({\n      ...log,\n      bdr: log.bdr?.name || '',\n    }));\n    \n    // Calculate total pages\n    const totalPages = Math.ceil(total / pageSize);\n    \n    return NextResponse.json({\n      logs: normalizedLogs,\n      total,\n      page,\n      pageSize,\n      totalPages,\n    });\n  } catch (error) {\n    console.error(\"Error fetching activity logs:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"Failed to fetch activity logs\";\n    return NextResponse.json(\n      { error: errorMessage },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    // 1. Get Session securely on the server\n    const session = await getServerSession(authOptions);\n\n    // 2. Check Authentication\n    if (!session || !session.user) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    const { role, id: userId } = session.user;\n    const data = await req.json();\n    \n    // Validate the request body\n    const validatedData = createActivityLogSchema.parse(data);\n    \n    // 3. Enforce Authorization (RBAC) for activity log creation\n    let activityData = { ...validatedData };\n    \n    if (role === Role.BDR) {\n      // BDRs can only create activity logs assigned to themselves\n      activityData.bdrId = userId;\n    } else if (role === Role.ADMIN) {\n      // Admins can assign activity logs to any user\n      // Use the provided bdrId or assign to themselves if not provided\n      if (!activityData.bdrId) {\n        activityData.bdrId = userId;\n      }\n    } else {\n      // Unknown role - deny access\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\n    }\n    \n    // Create the activity log and update the pipeline item's lastUpdated\n    const [activityLog] = await prisma.$transaction([\n      prisma.activityLog.create({\n        data: {\n          bdrId: activityData.bdrId,\n          activityType: activityData.activityType,\n          description: activityData.description,\n          scheduledDate: activityData.scheduledDate,\n          completedDate: activityData.completedDate,\n          notes: activityData.notes,\n          leadId: activityData.leadId,\n          pipelineItemId: activityData.pipelineItemId,\n          previousStatus: activityData.previousStatus,\n          newStatus: activityData.newStatus,\n          previousCategory: activityData.previousCategory,\n          newCategory: activityData.newCategory,\n        },\n        include: {\n          bdr: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n            }\n          }\n        }\n      }),\n      // Update lastUpdated on the pipeline item if it exists\n      ...(activityData.pipelineItemId ? [\n        prisma.pipelineItem.update({\n          where: { id: activityData.pipelineItemId },\n          data: { lastUpdated: new Date() },\n        })\n      ] : [])\n    ]);\n    \n    return NextResponse.json(activityLog, { status: 201 });\n  } catch (error) {\n    console.error(\"Error creating activity log:\", error);\n    const errorMessage = error instanceof Error ? error.message : \"Failed to create activity log\";\n    return NextResponse.json(\n      { error: errorMessage },\n      { status: 400 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\admin\\duplicates\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'statisticsSchema' is assigned a value but never used.","line":10,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[902,905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[902,905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1028,1031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1028,1031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth-options';\r\nimport { duplicateDetectionService } from '@/lib/duplicate-detection';\r\nimport { hasPermission } from '@/lib/permissions';\r\nimport { PERMISSIONS } from '@/lib/permissions';\r\nimport { z } from 'zod';\r\n\r\n// Request schema for statistics\r\nconst statisticsSchema = z.object({\r\n  dateFrom: z.string().datetime().optional(),\r\n  dateTo: z.string().datetime().optional(),\r\n});\r\n\r\n// GET endpoint for duplicate statistics and management data\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session?.user?.id) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Check admin permissions\r\n    if (!hasPermission(session.user as any, PERMISSIONS.DUPLICATES.MANAGE.resource, PERMISSIONS.DUPLICATES.MANAGE.action) &&\r\n        !hasPermission(session.user as any, PERMISSIONS.DUPLICATES.VIEW_ALL.resource, PERMISSIONS.DUPLICATES.VIEW_ALL.action)) {\r\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const action = searchParams.get('action') || 'statistics';\r\n    \r\n    switch (action) {\r\n      case 'statistics': {\r\n        const dateFrom = searchParams.get('dateFrom');\r\n        const dateTo = searchParams.get('dateTo');\r\n        \r\n        const dateRange = (dateFrom && dateTo) ? {\r\n          from: new Date(dateFrom),\r\n          to: new Date(dateTo),\r\n        } : undefined;\r\n        \r\n        const statistics = await duplicateDetectionService.getDuplicateStatistics(dateRange);\r\n        \r\n        return NextResponse.json(statistics);\r\n      }\r\n      \r\n      case 'recent-warnings': {\r\n        const limit = parseInt(searchParams.get('limit') || '50');\r\n        const includeResolved = searchParams.get('includeResolved') === 'true';\r\n        \r\n        const warnings = await duplicateDetectionService.getRecentWarnings(limit, includeResolved);\r\n        \r\n        return NextResponse.json(warnings);\r\n      }\r\n      \r\n      default:\r\n        return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('Error in admin duplicates endpoint:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid parameters', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\admin\\roles\\permissions\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":7,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1167,1170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1167,1170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":53,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":113,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":139,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":71}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity } from '@/lib/security';\r\nimport { Resource, Action, Role } from '@prisma/client';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  return withSecurity(Resource.SETTINGS, Action.MANAGE, async (context) => {\r\n    // Get all current role permissions\r\n    const rolePermissions = await prisma.rolePermission.findMany({\r\n      include: {\r\n        permission: true\r\n      }\r\n    });\r\n\r\n    // Get all available permissions\r\n    const allPermissions = await prisma.permission.findMany({\r\n      orderBy: [\r\n        { resource: 'asc' },\r\n        { action: 'asc' }\r\n      ]\r\n    });\r\n\r\n    // Group permissions by role\r\n    const permissionsByRole = rolePermissions.reduce((acc, rp) => {\r\n      const role = rp.role;\r\n      if (!acc[role]) {\r\n        acc[role] = [];\r\n      }\r\n      acc[role].push({\r\n        id: rp.permission.id,\r\n        name: rp.permission.name,\r\n        resource: rp.permission.resource,\r\n        action: rp.permission.action,\r\n        description: rp.permission.description\r\n      });\r\n      return acc;\r\n    }, {} as Record<Role, any[]>);\r\n\r\n    return NextResponse.json({\r\n      rolePermissions: permissionsByRole,\r\n      availablePermissions: allPermissions.map(p => ({\r\n        id: p.id,\r\n        name: p.name,\r\n        resource: p.resource,\r\n        action: p.action,\r\n        description: p.description\r\n      }))\r\n    });\r\n  }, request);\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  return withSecurity(Resource.SETTINGS, Action.MANAGE, async (context) => {\r\n    const body = await request.json();\r\n    const { role, permissionId } = body;\r\n\r\n    if (!role || !permissionId) {\r\n      return NextResponse.json(\r\n        { error: 'Role and permission ID are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if permission exists\r\n    const permission = await prisma.permission.findUnique({\r\n      where: { id: permissionId }\r\n    });\r\n\r\n    if (!permission) {\r\n      return NextResponse.json(\r\n        { error: 'Permission not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Check if role permission already exists\r\n    const existingRolePermission = await prisma.rolePermission.findFirst({\r\n      where: {\r\n        role: role as Role,\r\n        permissionId\r\n      }\r\n    });\r\n\r\n    if (existingRolePermission) {\r\n      return NextResponse.json(\r\n        { error: 'Role already has this permission' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create the role permission\r\n    const rolePermission = await prisma.rolePermission.create({\r\n      data: {\r\n        role: role as Role,\r\n        permissionId\r\n      },\r\n      include: {\r\n        permission: true\r\n      }\r\n    });\r\n\r\n    return NextResponse.json({\r\n      id: rolePermission.permission.id,\r\n      name: rolePermission.permission.name,\r\n      resource: rolePermission.permission.resource,\r\n      action: rolePermission.permission.action,\r\n      description: rolePermission.permission.description\r\n    });\r\n  }, request);\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  return withSecurity(Resource.SETTINGS, Action.MANAGE, async (context) => {\r\n    const { searchParams } = new URL(request.url);\r\n    const role = searchParams.get('role');\r\n    const permissionId = searchParams.get('permissionId');\r\n\r\n    if (!role || !permissionId) {\r\n      return NextResponse.json(\r\n        { error: 'Role and permission ID are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Delete the role permission\r\n    await prisma.rolePermission.deleteMany({\r\n      where: {\r\n        role: role as Role,\r\n        permissionId\r\n      }\r\n    });\r\n\r\n    return NextResponse.json({ success: true });\r\n  }, request);\r\n}\r\n\r\n// Bulk update endpoint for better UX\r\nexport async function PATCH(request: NextRequest) {\r\n  return withSecurity(Resource.SETTINGS, Action.MANAGE, async (context) => {\r\n    const body = await request.json();\r\n    const { role, permissionIds } = body;\r\n\r\n    if (!role || !Array.isArray(permissionIds)) {\r\n      return NextResponse.json(\r\n        { error: 'Role and permission IDs array are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Use transaction to ensure atomicity\r\n    await prisma.$transaction(async (tx) => {\r\n      // Remove all existing permissions for this role\r\n      await tx.rolePermission.deleteMany({\r\n        where: { role: role as Role }\r\n      });\r\n\r\n      // Add new permissions\r\n      if (permissionIds.length > 0) {\r\n        await tx.rolePermission.createMany({\r\n          data: permissionIds.map((permissionId: string) => ({\r\n            role: role as Role,\r\n            permissionId\r\n          }))\r\n        });\r\n      }\r\n    });\r\n\r\n    return NextResponse.json({ success: true });\r\n  }, request);\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\admin\\users\\[id]\\permissions\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":11,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":112,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity } from '@/lib/security';\r\nimport { Resource, Action } from '@prisma/client';\r\n\r\ninterface RouteParams {\r\n  params: { id: string };\r\n}\r\n\r\nexport async function GET(request: NextRequest, { params }: RouteParams) {\r\n  return withSecurity(Resource.USERS, Action.READ, async (context) => {\r\n    const resolvedParams = await params;\r\n    const userId = resolvedParams.id;\r\n    \r\n    // Get user's explicit permissions\r\n    const userPermissions = await prisma.userPermission.findMany({\r\n      where: {\r\n        userId,\r\n        OR: [\r\n          { expiresAt: null },\r\n          { expiresAt: { gt: new Date() } }\r\n        ]\r\n      },\r\n      include: {\r\n        permission: true\r\n      }\r\n    });\r\n\r\n    // Get all available permissions\r\n    const allPermissions = await prisma.permission.findMany({\r\n      orderBy: [\r\n        { resource: 'asc' },\r\n        { action: 'asc' }\r\n      ]\r\n    });\r\n\r\n    return NextResponse.json({\r\n      userPermissions: userPermissions.map(up => ({\r\n        id: up.id,\r\n        resource: up.permission.resource,\r\n        action: up.permission.action,\r\n        expiresAt: up.expiresAt,\r\n        createdAt: up.createdAt\r\n      })),\r\n      availablePermissions: allPermissions\r\n    });\r\n  }, request);\r\n}\r\n\r\nexport async function POST(request: NextRequest, { params }: RouteParams) {\r\n  return withSecurity(Resource.USERS, Action.MANAGE, async (context) => {\r\n    const resolvedParams = await params;\r\n    const userId = resolvedParams.id;\r\n    const body = await request.json();\r\n    const { resource, action, expiresAt } = body;\r\n\r\n    // Find the permission\r\n    const permission = await prisma.permission.findFirst({\r\n      where: { resource, action }\r\n    });\r\n\r\n    if (!permission) {\r\n      return NextResponse.json(\r\n        { error: 'Permission not found' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if permission already exists\r\n    const existingPermission = await prisma.userPermission.findFirst({\r\n      where: {\r\n        userId,\r\n        permissionId: permission.id,\r\n        OR: [\r\n          { expiresAt: null },\r\n          { expiresAt: { gt: new Date() } }\r\n        ]\r\n      }\r\n    });\r\n\r\n    if (existingPermission) {\r\n      return NextResponse.json(\r\n        { error: 'User already has this permission' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create the permission override\r\n    const userPermission = await prisma.userPermission.create({\r\n      data: {\r\n        userId,\r\n        permissionId: permission.id,\r\n        expiresAt: expiresAt ? new Date(expiresAt) : null,\r\n        grantedBy: context.userId\r\n      },\r\n      include: {\r\n        permission: true\r\n      }\r\n    });\r\n\r\n    return NextResponse.json({\r\n      id: userPermission.id,\r\n      resource: userPermission.permission.resource,\r\n      action: userPermission.permission.action,\r\n      expiresAt: userPermission.expiresAt,\r\n      createdAt: userPermission.createdAt\r\n    });\r\n  }, request);\r\n}\r\n\r\nexport async function DELETE(request: NextRequest, { params }: RouteParams) {\r\n  return withSecurity(Resource.USERS, Action.MANAGE, async (context) => {\r\n    const resolvedParams = await params;\r\n    const userId = resolvedParams.id;\r\n    const { searchParams } = new URL(request.url);\r\n    const permissionId = searchParams.get('permissionId');\r\n\r\n    if (!permissionId) {\r\n      return NextResponse.json(\r\n        { error: 'Permission ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Delete the user permission\r\n    await prisma.userPermission.deleteMany({\r\n      where: {\r\n        userId,\r\n        id: permissionId\r\n      }\r\n    });\r\n\r\n    return NextResponse.json({ success: true });\r\n  }, request);\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\admin\\users\\[id]\\reset-password\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\admin\\users\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3644,3647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3644,3647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/lib/auth\";\r\nimport { prisma } from \"@/lib/db\";\r\nimport { hashPassword } from \"@/lib/auth-utils\";\r\nimport { Role } from \"@prisma/client\";\r\nimport { z } from \"zod\";\r\n\r\nconst updateUserSchema = z.object({\r\n  name: z.string().min(1, \"Name is required\").optional(),\r\n  email: z.string().email(\"Invalid email address\").optional(),\r\n  password: z.string().min(6, \"Password must be at least 6 characters\").optional(),\r\n  role: z.enum([\"ADMIN\", \"DIRECTOR\", \"MANAGER\", \"TEAM_LEAD\", \"BDR\"]).optional(),\r\n  isActive: z.boolean().optional(),\r\n  territoryId: z.string().nullable().optional(),\r\n});\r\n\r\nexport async function GET(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n\r\n    if (!session || !session.user) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const { id } = await params;\r\n\r\n    // Users can only view their own profile unless they're admin\r\n    if (session.user.role !== \"ADMIN\" && session.user.id !== id) {\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\r\n    }\r\n\r\n    const user = await prisma.user.findUnique({\r\n      where: { id },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        isActive: true,\r\n        lastLoginAt: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        _count: {\r\n          select: {\r\n            pipelineItems: true,\r\n            leads: true,\r\n            activityLogs: true,\r\n          }\r\n        }\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json(user);\r\n  } catch (error) {\r\n    console.error(\"Error fetching user:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PATCH(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n\r\n    if (!session || !session.user) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const { id } = await params;\r\n\r\n    // Users can only edit their own profile unless they're admin\r\n    // Admins can edit anyone, but regular users can only edit themselves\r\n    if (session.user.role !== \"ADMIN\" && session.user.id !== id) {\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\r\n    }\r\n\r\n    const body = await req.json();\r\n    const validatedData = updateUserSchema.parse(body);\r\n\r\n    // Check if user exists\r\n    const existingUser = await prisma.user.findUnique({\r\n      where: { id },\r\n    });\r\n\r\n    if (!existingUser) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    // If email is being updated, check for conflicts\r\n    if (validatedData.email && validatedData.email !== existingUser.email) {\r\n      const emailConflict = await prisma.user.findUnique({\r\n        where: { email: validatedData.email },\r\n      });\r\n\r\n      if (emailConflict) {\r\n        return NextResponse.json({ error: \"Email already exists\" }, { status: 400 });\r\n      }\r\n    }\r\n\r\n    // If non-admin tries to change role, prevent it\r\n    if (validatedData.role && session.user.role !== \"ADMIN\") {\r\n      return NextResponse.json({ error: \"Only admins can change user roles\" }, { status: 403 });\r\n    }\r\n\r\n    // Prepare update data\r\n    const updateData: any = {};\r\n    if (validatedData.name !== undefined) updateData.name = validatedData.name;\r\n    if (validatedData.email !== undefined) updateData.email = validatedData.email;\r\n    if (validatedData.role !== undefined) updateData.role = validatedData.role as Role;\r\n    if (validatedData.isActive !== undefined) updateData.isActive = validatedData.isActive;\r\n    if (validatedData.territoryId !== undefined) updateData.territoryId = validatedData.territoryId;\r\n    \r\n    // Hash password if provided\r\n    if (validatedData.password) {\r\n      updateData.hashedPassword = await hashPassword(validatedData.password);\r\n    }\r\n\r\n    const updatedUser = await prisma.user.update({\r\n      where: { id },\r\n      data: updateData,\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(updatedUser);\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: error.errors }, { status: 400 });\r\n    }\r\n    \r\n    console.error(\"Error updating user:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(req: NextRequest, { params }: { params: Promise<{ id: string }> }) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n\r\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const { id } = await params;\r\n\r\n    // Prevent admin from deleting themselves\r\n    if (session.user.id === id) {\r\n      return NextResponse.json({ error: \"Cannot delete your own account\" }, { status: 400 });\r\n    }\r\n\r\n    // Check if user exists\r\n    const user = await prisma.user.findUnique({\r\n      where: { id },\r\n      include: {\r\n        _count: {\r\n          select: {\r\n            pipelineItems: true,\r\n            leads: true,\r\n            activityLogs: true,\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Check if user has associated data\r\n    if (user._count.pipelineItems > 0 || user._count.leads > 0 || user._count.activityLogs > 0) {\r\n      return NextResponse.json({ \r\n        error: \"Cannot delete user with associated data. Please reassign their data first.\",\r\n        details: {\r\n          pipelineItems: user._count.pipelineItems,\r\n          leads: user._count.leads,\r\n          activityLogs: user._count.activityLogs,\r\n        }\r\n      }, { status: 400 });\r\n    }\r\n\r\n    await prisma.user.delete({\r\n      where: { id },\r\n    });\r\n\r\n    return NextResponse.json({ message: \"User deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting user:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\admin\\users\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateUserSchema' is assigned a value but never used.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used.","line":26,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/lib/auth\";\r\nimport { prisma } from \"@/lib/db\";\r\nimport { hashPassword } from \"@/lib/auth-utils\";\r\nimport { Role } from \"@prisma/client\";\r\nimport { z } from \"zod\";\r\n\r\nconst createUserSchema = z.object({\r\n  name: z.string().min(1, \"Name is required\"),\r\n  email: z.string().email(\"Invalid email address\"),\r\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\r\n  role: z.enum([\"ADMIN\", \"DIRECTOR\", \"MANAGER\", \"TEAM_LEAD\", \"BDR\"]),\r\n  territoryId: z.string().optional().nullable(),\r\n});\r\n\r\nconst updateUserSchema = z.object({\r\n  name: z.string().min(1, \"Name is required\").optional(),\r\n  email: z.string().email(\"Invalid email address\").optional(),\r\n  password: z.string().min(6, \"Password must be at least 6 characters\").optional(),\r\n  role: z.enum([\"ADMIN\", \"DIRECTOR\", \"MANAGER\", \"TEAM_LEAD\", \"BDR\"]).optional(),\r\n  isActive: z.boolean().optional(),\r\n  territoryId: z.string().nullable().optional(),\r\n});\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n\r\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const users = await prisma.user.findMany({\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        territoryId: true,\r\n        territory: { select: { id: true, name: true } },\r\n        isActive: true,\r\n        lastLoginAt: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        _count: {\r\n          select: {\r\n            pipelineItems: true,\r\n            leads: true,\r\n            activityLogs: true,\r\n          }\r\n        }\r\n      },\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    return NextResponse.json(users);\r\n  } catch (error) {\r\n    console.error(\"Error fetching users:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n\r\n    if (!session || !session.user || session.user.role !== \"ADMIN\") {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const body = await req.json();\r\n    const validatedData = createUserSchema.parse(body);\r\n\r\n    // Check if email already exists\r\n    const existingUser = await prisma.user.findUnique({\r\n      where: { email: validatedData.email },\r\n    });\r\n\r\n    if (existingUser) {\r\n      return NextResponse.json({ error: \"Email already exists\" }, { status: 400 });\r\n    }\r\n\r\n    // Hash the password\r\n    const hashedPassword = await hashPassword(validatedData.password);\r\n\r\n    // Create the user\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        name: validatedData.name,\r\n        email: validatedData.email,\r\n        hashedPassword,\r\n        role: validatedData.role as Role,\r\n        territoryId: validatedData.territoryId ?? null,\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(user, { status: 201 });\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json({ error: error.errors }, { status: 400 });\r\n    }\r\n    \r\n    console.error(\"Error creating user:\", error);\r\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\audit-logs\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SecurityService' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"prefer-const","severity":2,"message":"'where' is never reassigned. Use 'const' instead.","line":21,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":21,"endColumn":19,"fix":{"range":[978,998],"text":"const where: any = {};"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[989,992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[989,992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2896,2899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2896,2899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'where' is never reassigned. Use 'const' instead.","line":136,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":136,"endColumn":19,"fix":{"range":[4469,4489],"text":"const where: any = {};"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4480,4483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4480,4483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { SecurityService, withSecurity } from '@/lib/security';\r\nimport { prisma } from '@/lib/db';\r\nimport { Resource, Action } from '@prisma/client';\r\n\r\nexport async function GET(req: NextRequest) {\r\n  return withSecurity(Resource.ACTIVITY_LOGS, Action.READ, async (context) => {\r\n    const { searchParams } = new URL(req.url);\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const pageSize = Math.min(parseInt(searchParams.get('pageSize') || '50'), 100); // Limit max page size\r\n    const skip = (page - 1) * pageSize;\r\n    \r\n    const userId = searchParams.get('userId');\r\n    const action = searchParams.get('action');\r\n    const resource = searchParams.get('resource');\r\n    const success = searchParams.get('success');\r\n    const startDate = searchParams.get('startDate');\r\n    const endDate = searchParams.get('endDate');\r\n\r\n    // Build where clause based on user permissions and filters\r\n    let where: any = {};\r\n\r\n    // Apply row-level security for audit logs\r\n    if (context.role === 'BDR' || context.role === 'TEAM_LEAD') {\r\n      // BDRs and team leads can only see their own audit logs\r\n      where.userId = context.userId;\r\n    } else if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\r\n      // Managers can see logs from users in territories they manage\r\n      where.user = {\r\n        territoryId: {\r\n          in: context.managedTerritoryIds\r\n        }\r\n      };\r\n    }\r\n    // Directors and Admins can see all logs (no additional restrictions)\r\n\r\n    // Apply filters\r\n    if (userId && (context.role === 'ADMIN' || context.role === 'DIRECTOR' || \r\n        (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0))) {\r\n      where.userId = userId;\r\n    }\r\n    \r\n    if (action) where.action = action;\r\n    if (resource) where.resource = resource;\r\n    if (success !== null && success !== undefined) {\r\n      where.success = success === 'true';\r\n    }\r\n    \r\n    if (startDate || endDate) {\r\n      where.timestamp = {};\r\n      if (startDate) where.timestamp.gte = new Date(startDate);\r\n      if (endDate) where.timestamp.lte = new Date(endDate);\r\n    }\r\n\r\n    // Get total count\r\n    const total = await prisma.auditLog.count({ where });\r\n\r\n    // Get audit logs\r\n    const auditLogs = await prisma.auditLog.findMany({\r\n      where,\r\n      skip,\r\n      take: pageSize,\r\n      orderBy: {\r\n        timestamp: 'desc'\r\n      },\r\n      include: {\r\n        user: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            role: true,\r\n            territory: {\r\n              select: {\r\n                name: true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Sanitize sensitive data based on user role\r\n    const sanitizedLogs = auditLogs.map(log => {\r\n      const sanitized: any = {\r\n        id: log.id,\r\n        action: log.action,\r\n        resource: log.resource,\r\n        resourceId: log.resourceId,\r\n        success: log.success,\r\n        timestamp: log.timestamp,\r\n        user: log.user,\r\n        ipAddress: log.ipAddress\r\n      };\r\n\r\n      // Only include sensitive details for admins and directors\r\n      if (context.role === 'ADMIN' || context.role === 'DIRECTOR') {\r\n        sanitized.details = log.details;\r\n        sanitized.errorMsg = log.errorMsg;\r\n        sanitized.userAgent = log.userAgent;\r\n        sanitized.sessionId = log.sessionId;\r\n      } else {\r\n        // Provide limited details for other roles\r\n        sanitized.details = log.details ? { action: log.details.action || 'N/A' } : null;\r\n        if (log.errorMsg && log.success === false) {\r\n          sanitized.errorMsg = 'Error occurred'; // Generic error message\r\n        }\r\n      }\r\n\r\n      return sanitized;\r\n    });\r\n\r\n    const totalPages = Math.ceil(total / pageSize);\r\n\r\n    return NextResponse.json({\r\n      auditLogs: sanitizedLogs,\r\n      total,\r\n      page,\r\n      pageSize,\r\n      totalPages,\r\n    });\r\n  }, req);\r\n}\r\n\r\n// Get audit log statistics\r\nexport async function POST(req: NextRequest) {\r\n  return withSecurity(Resource.ACTIVITY_LOGS, Action.READ, async (context) => {\r\n    const body = await req.json();\r\n    const { action: requestAction, startDate, endDate } = body;\r\n\r\n    if (requestAction !== 'stats') {\r\n      return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\r\n    }\r\n\r\n    // Build base where clause for time range\r\n    let where: any = {};\r\n    if (startDate || endDate) {\r\n      where.timestamp = {};\r\n      if (startDate) where.timestamp.gte = new Date(startDate);\r\n      if (endDate) where.timestamp.lte = new Date(endDate);\r\n    }\r\n\r\n    // Apply row-level security\r\n    if (context.role === 'BDR' || context.role === 'TEAM_LEAD') {\r\n      where.userId = context.userId;\r\n    } else if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\r\n      where.user = {\r\n        territoryId: {\r\n          in: context.managedTerritoryIds\r\n        }\r\n      };\r\n    }\r\n\r\n    // Get statistics\r\n    const [\r\n      totalActions,\r\n      successfulActions,\r\n      failedActions,\r\n      actionsByType,\r\n      actionsByResource,\r\n      topUsers\r\n    ] = await Promise.all([\r\n      // Total actions\r\n      prisma.auditLog.count({ where }),\r\n      \r\n      // Successful actions\r\n      prisma.auditLog.count({ where: { ...where, success: true } }),\r\n      \r\n      // Failed actions\r\n      prisma.auditLog.count({ where: { ...where, success: false } }),\r\n      \r\n      // Actions by type\r\n      prisma.auditLog.groupBy({\r\n        by: ['action'],\r\n        where,\r\n        _count: { action: true },\r\n        orderBy: { _count: { action: 'desc' } }\r\n      }),\r\n      \r\n      // Actions by resource\r\n      prisma.auditLog.groupBy({\r\n        by: ['resource'],\r\n        where,\r\n        _count: { resource: true },\r\n        orderBy: { _count: { resource: 'desc' } }\r\n      }),\r\n      \r\n      // Top users by activity (only for managers and above)\r\n      (context.role === 'MANAGER' || context.role === 'DIRECTOR' || context.role === 'ADMIN') \r\n        ? prisma.auditLog.groupBy({\r\n            by: ['userId'],\r\n            where,\r\n            _count: { userId: true },\r\n            orderBy: { _count: { userId: 'desc' } },\r\n            take: 10\r\n          }).then(async (results) => {\r\n            const userIds = results.map(r => r.userId);\r\n            const users = await prisma.user.findMany({\r\n              where: { id: { in: userIds } },\r\n              select: { id: true, name: true, email: true }\r\n            });\r\n            return results.map(result => ({\r\n              user: users.find(u => u.id === result.userId),\r\n              count: result._count.userId\r\n            }));\r\n          })\r\n        : Promise.resolve([])\r\n    ]);\r\n\r\n    return NextResponse.json({\r\n      summary: {\r\n        totalActions,\r\n        successfulActions,\r\n        failedActions,\r\n        successRate: totalActions > 0 ? (successfulActions / totalActions * 100).toFixed(2) : '0.00'\r\n      },\r\n      actionsByType: actionsByType.map(item => ({\r\n        action: item.action,\r\n        count: item._count.action\r\n      })),\r\n      actionsByResource: actionsByResource.map(item => ({\r\n        resource: item.resource,\r\n        count: item._count.resource\r\n      })),\r\n      topUsers: topUsers\r\n    });\r\n  }, req);\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\auth\\[...nextauth]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\conversations\\[id]\\messages\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2842,2845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2842,2845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'attachments' is never reassigned. Use 'const' instead.","line":88,"column":22,"nodeType":"Identifier","messageId":"useConst","endLine":88,"endColumn":33},{"ruleId":"prefer-const","severity":2,"message":"'parentId' is never reassigned. Use 'const' instead.","line":88,"column":35,"nodeType":"Identifier","messageId":"useConst","endLine":88,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4015,4018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4015,4018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4095,4098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4095,4098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5537,5540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5537,5540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db';\nimport { withSecurity, SecurityService } from '@/lib/security';\nimport { Action, Resource } from '@prisma/client';\nimport { triggerConversationEvent } from '@/lib/realtime';\nimport sanitizeHtml from 'sanitize-html';\nimport { canSendMessage } from '@/lib/rate-limit';\n\ninterface Params { params: Promise<{ id: string }> }\n\nconst sanitizeOptions: sanitizeHtml.IOptions = {\n  allowedTags: ['b','i','em','strong','a','code','pre','p','ul','ol','li','br','span'],\n  allowedAttributes: { a: ['href','rel','target'], span: ['data-user-id','class'] },\n  transformTags: {\n    a: sanitizeHtml.simpleTransform('a', { rel: 'noopener noreferrer', target: '_blank' })\n  }\n};\n\nasync function resolveMentions(content: string) {\n  // Find patterns like @{userId}\n  const ids = Array.from(new Set(Array.from(content.matchAll(/@\\{([a-zA-Z0-9_-]+)\\}/g)).map((m) => m[1])));\n  if (ids.length === 0) return content;\n  const users = await prisma.user.findMany({ where: { id: { in: ids } }, select: { id: true, name: true, email: true } });\n  let out = content;\n  for (const u of users) {\n    const name = u.name || u.email || 'User';\n    const re = new RegExp(`@\\\\{${u.id}\\\\}`, 'g');\n    out = out.replace(re, `<span class=\"mention\" data-user-id=\"${u.id}\">@${name}</span>`);\n  }\n  return out;\n}\n\n// GET messages with cursor pagination\nexport async function GET(req: NextRequest, { params }: Params) {\n  const { id } = await params;\n  try {\n    const url = new URL(req.url);\n    const cursor = url.searchParams.get('cursor');\n    const take = Math.min(parseInt(url.searchParams.get('take') || '50', 10), 100);\n\n    const data = await withSecurity(Resource.MESSAGING, Action.READ, async (context) => {\n      const membership = await prisma.conversationMember.findUnique({\n        where: { conversationId_userId: { conversationId: id, userId: context.userId } },\n      });\n      if (!membership) throw new Error('Forbidden');\n      const conv = await prisma.conversation.findUnique({ where: { id }, select: { isLocked: true } });\n      if (conv?.isLocked) return NextResponse.json({ error: 'Conversation locked' }, { status: 423 });\n\n      const messages = await prisma.message.findMany({\n        where: { conversationId: id },\n        orderBy: { createdAt: 'desc' },\n        take,\n        ...(cursor ? { cursor: { id: cursor }, skip: 1 } : {}),\n        include: {\n          attachments: true,\n          reactions: true,\n          reads: { include: { user: { select: { id: true, name: true } } } },\n          sender: { select: { id: true, name: true } },\n        },\n      });\n\n      const nextCursor = messages.length === take ? messages[messages.length - 1]?.id : null;\n      return { messages, nextCursor };\n    }, req);\n\n    return NextResponse.json(data);\n  } catch (err: any) {\n    await SecurityService.logAction({ action: 'READ', resource: 'MESSAGING', resourceId: id, success: false, errorMsg: err?.message }, req);\n    return NextResponse.json({ error: 'Failed to fetch messages' }, { status: 400 });\n  }\n}\n\n// POST send message\nexport async function POST(req: NextRequest, { params }: Params) {\n  const { id } = await params;\n  try {\n    const body = await req.json();\n    const data = await withSecurity(Resource.MESSAGING, Action.CREATE, async (context) => {\n      const membership = await prisma.conversationMember.findUnique({\n        where: { conversationId_userId: { conversationId: id, userId: context.userId } },\n      });\n      if (!membership) throw new Error('Forbidden');\n      const allowed = await canSendMessage(context.userId, id);\n      if (!allowed) {\n        return NextResponse.json({ error: 'Rate limit' }, { status: 429 });\n      }\n\n      let { content, attachments, parentId } = body as { content?: string; attachments?: Array<{ url: string; fileName: string; mimeType: string; size: number; width?: number; height?: number }>; parentId?: string };\n      content = content ? await resolveMentions(content) : null as any;\n      content = content ? sanitizeHtml(content, sanitizeOptions) : null as any;\n\n      const message = await prisma.message.create({\n        data: {\n          conversationId: id,\n          senderId: context.userId,\n          content,\n          parentId: parentId || null,\n          attachments: attachments && attachments.length ? {\n            create: attachments.map(a => ({ url: a.url, fileName: a.fileName, mimeType: a.mimeType, size: a.size, width: a.width, height: a.height }))\n          } : undefined,\n        },\n      });\n\n      await prisma.conversation.update({ where: { id }, data: { lastMessageAt: new Date() } });\n      // Do not fail request if realtime triggers error\n      Promise.resolve().then(() => triggerConversationEvent(id, 'message:new', { messageId: message.id })).catch(()=>{});\n      // Notify members on their private channels for desktop notifications\n      try {\n        const { triggerUserEvent } = await import('@/lib/realtime');\n        const members = await prisma.conversationMember.findMany({ where: { conversationId: id }, select: { userId: true } });\n        for (const m of members) {\n          if (m.userId === context.userId) continue;\n          Promise.resolve().then(() => triggerUserEvent(m.userId, 'message:new', { conversationId: id, messageId: message.id })).catch(()=>{});\n        }\n      } catch {}\n      return message;\n    }, req);\n\n    if (data instanceof NextResponse) return data;\n    return NextResponse.json({ message: data }, { status: 201 });\n  } catch (err: any) {\n    await SecurityService.logAction({ action: 'CREATE', resource: 'MESSAGING', resourceId: id, success: false, errorMsg: err?.message }, req);\n    return NextResponse.json({ error: 'Failed to send message' }, { status: 400 });\n  }\n}\n\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\conversations\\[id]\\reads\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1632,1635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1632,1635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\nimport { triggerConversationEvent } from '@/lib/realtime';\r\n\r\ninterface Params { params: Promise<{ id: string }> }\r\n\r\n// Mark conversation as read by creating a read receipt on the latest message\r\nexport async function POST(req: NextRequest, { params }: Params) {\r\n  const conversationId = (await params).id;\r\n  try {\r\n    const result = await withSecurity(Resource.MESSAGING, Action.READ, async (context) => {\r\n      const membership = await prisma.conversationMember.findUnique({\r\n        where: { conversationId_userId: { conversationId, userId: context.userId } },\r\n      });\r\n      if (!membership) throw new Error('Forbidden');\r\n\r\n      const latest = await prisma.message.findFirst({\r\n        where: { conversationId },\r\n        orderBy: { createdAt: 'desc' },\r\n        select: { id: true },\r\n      });\r\n      if (!latest) return { ok: true };\r\n      await prisma.messageRead.upsert({\r\n        where: { messageId_userId: { messageId: latest.id, userId: context.userId } },\r\n        create: { messageId: latest.id, userId: context.userId },\r\n        update: { readAt: new Date() },\r\n      });\r\n      // Do not fail request if realtime fails\r\n      Promise.resolve().then(() =>\r\n        triggerConversationEvent(conversationId, 'message:read', { messageId: latest.id, userId: context.userId })\r\n      ).catch(()=>{});\r\n      return { ok: true };\r\n    }, req);\r\n    return NextResponse.json(result);\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'READ', resource: 'MESSAGING', resourceId: conversationId, success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to mark read' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\conversations\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1225,1228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1225,1228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2152,2155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2152,2155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3182,3185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3182,3185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\n\r\ninterface Params { params: Promise<{ id: string }> }\r\n\r\n// PATCH: rename/add/remove members (admin in conversation)\r\nexport async function PATCH(req: NextRequest, { params }: Params) {\r\n  const resolvedParams = await params;\r\n  const { id } = resolvedParams;\r\n  try {\r\n    const body = await req.json();\r\n    const result = await withSecurity(Resource.MESSAGING, Action.UPDATE, async (context) => {\r\n      const membership = await prisma.conversationMember.findUnique({\r\n        where: { conversationId_userId: { conversationId: id, userId: context.userId } },\r\n      });\r\n      if (!membership) throw new Error('Not a member');\r\n      const isAdmin = membership.role === 'admin';\r\n      const { name, addMemberIds, removeMemberIds, lock } = body as {\r\n        name?: string;\r\n        addMemberIds?: string[];\r\n        removeMemberIds?: string[];\r\n        lock?: boolean;\r\n      };\r\n\r\n      // Only admin can rename, add/remove, or lock\r\n      if (!isAdmin) throw new Error('Forbidden');\r\n\r\n      const updates: any = {};\r\n      if (typeof name === 'string') updates.name = name || null;\r\n      if (typeof lock === 'boolean') updates.isLocked = lock;\r\n\r\n      const tx = await prisma.$transaction(async (tx) => {\r\n        const conv = await tx.conversation.update({ where: { id }, data: updates });\r\n        if (addMemberIds?.length) {\r\n          const toAdd = Array.from(new Set(addMemberIds));\r\n          await tx.conversationMember.createMany({\r\n            data: toAdd.map((uid) => ({ conversationId: id, userId: uid, role: 'member' })),\r\n            skipDuplicates: true,\r\n          });\r\n        }\r\n        if (removeMemberIds?.length) {\r\n          await tx.conversationMember.deleteMany({\r\n            where: { conversationId: id, userId: { in: removeMemberIds } },\r\n          });\r\n        }\r\n        return conv;\r\n      });\r\n\r\n      return tx;\r\n    }, req);\r\n    return NextResponse.json({ conversation: result });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'UPDATE', resource: 'MESSAGING', resourceId: params.id, success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to update conversation' }, { status: 400 });\r\n  }\r\n}\r\n\r\n// DELETE: admin-only\r\nexport async function DELETE(req: NextRequest, { params }: Params) {\r\n  const { id } = params;\r\n  try {\r\n    await withSecurity(Resource.MESSAGING, Action.MANAGE, async (context) => {\r\n      const membership = await prisma.conversationMember.findUnique({\r\n        where: { conversationId_userId: { conversationId: id, userId: context.userId } },\r\n      });\r\n      if (!membership || membership.role !== 'admin') throw new Error('Forbidden');\r\n      // Soft-delete by removing members and clearing name\r\n      await prisma.conversation.update({ where: { id }, data: { name: null } });\r\n      await prisma.conversationMember.deleteMany({ where: { conversationId: id } });\r\n    }, req);\r\n    return NextResponse.json({ ok: true });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'DELETE', resource: 'MESSAGING', resourceId: id, success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to delete conversation' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\conversations\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1374,1377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1374,1377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1802,1805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1802,1805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3456,3459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3456,3459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db';\nimport { withSecurity, SecurityService } from '@/lib/security';\nimport { Action, Resource } from '@prisma/client';\n\n// GET /api/chat/conversations\nexport async function GET(req: NextRequest) {\n  try {\n    const data = await withSecurity(Resource.MESSAGING, Action.READ, async (context) => {\n      const conversations = await prisma.conversation.findMany({\n        where: {\n          members: { some: { userId: context.userId } },\n        },\n        orderBy: [{ lastMessageAt: 'desc' }, { updatedAt: 'desc' }],\n        include: {\n          members: { select: { userId: true, role: true, user: { select: { id: true, name: true, role: true } } } },\n          messages: {\n            take: 1,\n            orderBy: { createdAt: 'desc' },\n            include: { attachments: true, reactions: true, reads: true, sender: { select: { id: true, name: true } } },\n          },\n        },\n      });\n\n      // Compute unread counts per conversation\n      const result = await Promise.all(\n        conversations.map(async (c) => {\n          const lastReadAt = await prisma.messageRead.findFirst({\n            where: { userId: context.userId, message: { conversationId: c.id } },\n            orderBy: { readAt: 'desc' },\n            select: { readAt: true },\n          });\n\n          const where: any = {\n            conversationId: c.id,\n            isDeleted: false,\n          };\n          if (lastReadAt?.readAt) {\n            where.createdAt = { gt: lastReadAt.readAt };\n          }\n\n          const unreadCount = await prisma.message.count({ where });\n\n          return { ...c, unreadCount };\n        })\n      );\n\n      return result;\n    }, req);\n\n    return NextResponse.json({ conversations: data });\n  } catch (err: any) {\n    console.error('Conversations GET failed:', err);\n    await SecurityService.logAction({ action: 'LIST', resource: 'MESSAGING', success: false, errorMsg: err?.message }, req);\n    return NextResponse.json({ error: 'Failed to load conversations', detail: err?.message }, { status: 500 });\n  }\n}\n\n// POST /api/chat/conversations\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    const data = await withSecurity(Resource.MESSAGING, Action.CREATE, async (context) => {\n      const { name, memberIds } = body as { name?: string; memberIds: string[] };\n      const uniqueMembers = Array.from(new Set([context.userId, ...(memberIds || [])]));\n\n      const conversation = await prisma.conversation.create({\n        data: {\n          name: name || null,\n          isGroup: !!name || uniqueMembers.length > 2,\n          createdById: context.userId,\n          members: {\n            create: uniqueMembers.map((uid) => ({ userId: uid, role: uid === context.userId ? 'admin' : 'member' })),\n          },\n        },\n        include: { members: { include: { user: { select: { id: true, name: true } } } } },\n      });\n\n      // Notify invited users\n      // Note: this is fire-and-forget; do not block\n      Promise.resolve().then(async () => {\n        const { triggerUserEvent } = await import('@/lib/realtime');\n        for (const m of conversation.members) {\n          await triggerUserEvent(m.userId, 'conversation:updated', { conversationId: conversation.id });\n        }\n      });\n\n      return conversation;\n    }, req);\n\n    return NextResponse.json({ conversation: data }, { status: 201 });\n  } catch (err: any) {\n    console.error('Conversations POST failed:', err);\n    await SecurityService.logAction({ action: 'CREATE', resource: 'MESSAGING', success: false, errorMsg: err?.message }, req);\n    return NextResponse.json({ error: 'Failed to create conversation', detail: err?.message }, { status: 500 });\n  }\n}\n\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\link-preview\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1228,1231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1228,1231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\n\r\nconst ALLOWLIST = ['github.com','vercel.com','docs.google.com','www.npmjs.com'];\r\n\r\nasync function fetchMetadata(url: string) {\r\n  const controller = new AbortController();\r\n  const id = setTimeout(() => controller.abort(), 3500);\r\n  try {\r\n    const res = await fetch(url, { signal: controller.signal, redirect: 'follow' });\r\n    const html = await res.text();\r\n    const titleMatch = html.match(/<title>([^<]+)<\\/title>/i);\r\n    const title = titleMatch ? titleMatch[1].trim() : url;\r\n    return { title };\r\n  } finally {\r\n    clearTimeout(id);\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { url } = await req.json();\r\n    const hostname = new URL(url).hostname.toLowerCase();\r\n    if (!ALLOWLIST.some((d) => hostname.endsWith(d))) {\r\n      return NextResponse.json({ error: 'Domain not allowed' }, { status: 400 });\r\n    }\r\n    const data = await withSecurity(Resource.MESSAGING, Action.READ, async () => {\r\n      return await fetchMetadata(url);\r\n    }, req);\r\n    return NextResponse.json(data);\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'LINK_PREVIEW', resource: 'MESSAGING', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\messages\\[id]\\pin\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1904,1907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1904,1907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\nimport { triggerConversationEvent } from '@/lib/realtime';\r\n\r\ninterface Params { params: Promise<{ id: string }> }\r\n\r\nexport async function POST(req: NextRequest, { params }: Params) {\r\n  const resolvedParams = await params;\r\n  const messageId = resolvedParams.id;\r\n  try {\r\n    await withSecurity(Resource.MESSAGING, Action.MANAGE, async () => {\r\n      const message = await prisma.message.findUnique({ where: { id: messageId } });\r\n      if (!message) throw new Error('Not found');\r\n      await prisma.message.update({ where: { id: messageId }, data: { isPinned: true } });\r\n      await triggerConversationEvent(message.conversationId, 'conversation:updated', { conversationId: message.conversationId });\r\n    }, req);\r\n    return NextResponse.json({ ok: true });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'PIN', resource: 'MESSAGING', resourceId: messageId, success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to pin' }, { status: 400 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(req: NextRequest, { params }: Params) {\r\n  const resolvedParams = await params;\r\n  const messageId = resolvedParams.id;\r\n  try {\r\n    await withSecurity(Resource.MESSAGING, Action.MANAGE, async () => {\r\n      const message = await prisma.message.findUnique({ where: { id: messageId } });\r\n      if (!message) throw new Error('Not found');\r\n      await prisma.message.update({ where: { id: messageId }, data: { isPinned: false } });\r\n      await triggerConversationEvent(message.conversationId, 'conversation:updated', { conversationId: message.conversationId });\r\n    }, req);\r\n    return NextResponse.json({ ok: true });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'PIN_UNDO', resource: 'MESSAGING', resourceId: messageId, success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to unpin' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\messages\\[id]\\reactions\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1536,1539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1536,1539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db';\nimport { withSecurity, SecurityService } from '@/lib/security';\nimport { Action, Resource } from '@prisma/client';\nimport { triggerConversationEvent } from '@/lib/realtime';\n\ninterface Params { params: Promise<{ id: string }> }\n\nexport async function POST(req: NextRequest, { params }: Params) {\n  const resolvedParams = await params;\n  const messageId = resolvedParams.id;\n  try {\n    const { emoji } = await req.json();\n    const result = await withSecurity(Resource.MESSAGING, Action.UPDATE, async (context) => {\n      const message = await prisma.message.findUnique({ where: { id: messageId } });\n      if (!message) throw new Error('Not found');\n      const membership = await prisma.conversationMember.findUnique({\n        where: { conversationId_userId: { conversationId: message.conversationId, userId: context.userId } },\n      });\n      if (!membership) throw new Error('Forbidden');\n      const existing = await prisma.messageReaction.findFirst({\n        where: { messageId, userId: context.userId, emoji },\n      });\n      if (existing) {\n        await prisma.messageReaction.delete({ where: { id: existing.id } });\n      } else {\n        await prisma.messageReaction.create({ data: { messageId, userId: context.userId, emoji } });\n      }\n      await triggerConversationEvent(message.conversationId, 'message:edit', { messageId });\n      return { toggled: true };\n    }, req);\n    return NextResponse.json(result);\n  } catch (err: any) {\n    await SecurityService.logAction({ action: 'UPDATE', resource: 'MESSAGING', resourceId: messageId, success: false, errorMsg: err?.message }, req);\n    return NextResponse.json({ error: 'Failed to toggle reaction' }, { status: 400 });\n  }\n}\n\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\messages\\[id]\\reads\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1459,1462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1459,1462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\nimport { triggerConversationEvent } from '@/lib/realtime';\r\n\r\ninterface Params { params: Promise<{ id: string }> }\r\n\r\nexport async function POST(req: NextRequest, { params }: Params) {\r\n  const messageId = (await params).id;\r\n  try {\r\n    const result = await withSecurity(Resource.MESSAGING, Action.READ, async (context) => {\r\n      const message = await prisma.message.findUnique({ where: { id: messageId } });\r\n      if (!message) throw new Error('Not found');\r\n      const membership = await prisma.conversationMember.findUnique({\r\n        where: { conversationId_userId: { conversationId: message.conversationId, userId: context.userId } },\r\n      });\r\n      if (!membership) throw new Error('Forbidden');\r\n      await prisma.messageRead.upsert({\r\n        where: { messageId_userId: { messageId, userId: context.userId } },\r\n        create: { messageId, userId: context.userId },\r\n        update: { readAt: new Date() },\r\n      });\r\n      // Do not fail if realtime fails\r\n      Promise.resolve().then(() =>\r\n        triggerConversationEvent(message.conversationId, 'message:read', { messageId, userId: context.userId })\r\n      ).catch(()=>{});\r\n      return { ok: true };\r\n    }, req);\r\n    return NextResponse.json(result);\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'READ', resource: 'MESSAGING', resourceId: messageId, success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to mark read' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\messages\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2035,2038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2035,2038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3679,3682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3679,3682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\nimport { triggerConversationEvent } from '@/lib/realtime';\r\nimport sanitizeHtml from 'sanitize-html';\r\n\r\ninterface Params { params: Promise<{ id: string }> }\r\n\r\nconst sanitizeOptions: sanitizeHtml.IOptions = {\r\n  allowedTags: ['b','i','em','strong','a','code','pre','p','ul','ol','li','br'],\r\n  allowedAttributes: { a: ['href','rel','target'] },\r\n  transformTags: {\r\n    a: sanitizeHtml.simpleTransform('a', { rel: 'noopener noreferrer', target: '_blank' })\r\n  }\r\n};\r\n\r\nexport async function PATCH(req: NextRequest, { params }: Params) {\r\n  const resolvedParams = await params;\r\n  const messageId = resolvedParams.id;\r\n  try {\r\n    const body = await req.json();\r\n    const result = await withSecurity(Resource.MESSAGING, Action.UPDATE, async (context) => {\r\n      const message = await prisma.message.findUnique({ where: { id: messageId } });\r\n      if (!message) throw new Error('Not found');\r\n      const membership = await prisma.conversationMember.findUnique({\r\n        where: { conversationId_userId: { conversationId: message.conversationId, userId: context.userId } },\r\n      });\r\n      if (!membership) throw new Error('Forbidden');\r\n      // Allow sender within 10 minutes\r\n      const isSender = message.senderId === context.userId;\r\n      const withinWindow = Date.now() - new Date(message.createdAt).getTime() <= 10 * 60 * 1000;\r\n      if (!isSender || !withinWindow) throw new Error('Edit window expired');\r\n      const content = sanitizeHtml((body.content as string) || '', sanitizeOptions);\r\n      const updated = await prisma.message.update({ where: { id: messageId }, data: { content, isEdited: true } });\r\n      await triggerConversationEvent(message.conversationId, 'message:edit', { messageId });\r\n      return updated;\r\n    }, req);\r\n    return NextResponse.json({ message: result });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'UPDATE', resource: 'MESSAGING', resourceId: messageId, success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to edit message' }, { status: 400 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(req: NextRequest, { params }: Params) {\r\n  const resolvedParams = await params;\r\n  const messageId = resolvedParams.id;\r\n  try {\r\n    await withSecurity(Resource.MESSAGING, Action.DELETE, async (context) => {\r\n      const message = await prisma.message.findUnique({ where: { id: messageId } });\r\n      if (!message) throw new Error('Not found');\r\n      const conv = await prisma.conversation.findUnique({ where: { id: message.conversationId }, select: { isLocked: true } });\r\n      if (conv?.isLocked) throw new Error('Conversation locked');\r\n      const membership = await prisma.conversationMember.findUnique({\r\n        where: { conversationId_userId: { conversationId: message.conversationId, userId: context.userId } },\r\n      });\r\n      if (!membership) throw new Error('Forbidden');\r\n      const isSender = message.senderId === context.userId;\r\n      const withinWindow = Date.now() - new Date(message.createdAt).getTime() <= 10 * 60 * 1000;\r\n      const isAdmin = membership.role === 'admin';\r\n      if (!(isAdmin || (isSender && withinWindow))) throw new Error('Forbidden');\r\n      await prisma.message.update({ where: { id: messageId }, data: { isDeleted: true, content: '' } });\r\n      await triggerConversationEvent(message.conversationId, 'message:delete', { messageId });\r\n    }, req);\r\n    return NextResponse.json({ ok: true });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'DELETE', resource: 'MESSAGING', resourceId: messageId, success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to delete message' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\pusher\\auth\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'conversationId' is assigned a value but never used.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1431,1434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1431,1434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\nimport { pusherServer } from '@/lib/realtime';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const form = await req.formData();\r\n    const socket_id = String(form.get('socket_id'));\r\n    const channel_name = String(form.get('channel_name'));\r\n\r\n    const authResponse = await withSecurity(Resource.MESSAGING, Action.READ, async (context) => {\r\n      // Only allow presence/private channels for user who is a member of the conversation\r\n      if (channel_name.startsWith('presence-conv-')) {\r\n        const conversationId = channel_name.replace('presence-conv-', '');\r\n        // No DB call here to keep fast; channel will only be used after other queries\r\n        return pusherServer.authorizeChannel(socket_id, channel_name, {\r\n          user_id: context.userId,\r\n          user_info: { name: context.userId },\r\n        });\r\n      }\r\n      if (channel_name.startsWith('private-user-')) {\r\n        const userId = channel_name.replace('private-user-', '');\r\n        if (userId !== context.userId) throw new Error('Forbidden');\r\n        return pusherServer.authorizeChannel(socket_id, channel_name);\r\n      }\r\n      throw new Error('Forbidden');\r\n    }, req);\r\n\r\n    return new NextResponse(authResponse, { status: 200 });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'READ', resource: 'MESSAGING', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Auth failed' }, { status: 403 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\search\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[628,631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[628,631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1239,1242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1239,1242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const url = new URL(req.url);\r\n    const q = url.searchParams.get('q') || '';\r\n    const conversationId = url.searchParams.get('conversationId') || undefined;\r\n    const take = Math.min(parseInt(url.searchParams.get('take') || '50', 10), 100);\r\n    const data = await withSecurity(Resource.MESSAGING, Action.READ, async (context) => {\r\n      const where: any = {\r\n        isDeleted: false,\r\n        content: q ? { contains: q, mode: 'insensitive' } : undefined,\r\n        conversation: {\r\n          members: { some: { userId: context.userId } },\r\n        },\r\n      };\r\n      if (conversationId) where.conversationId = conversationId;\r\n      const messages = await prisma.message.findMany({\r\n        where,\r\n        orderBy: { createdAt: 'desc' },\r\n        take,\r\n        include: { sender: { select: { id: true, name: true } }, conversation: true },\r\n      });\r\n      return messages;\r\n    }, req);\r\n    return NextResponse.json({ messages: data });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'SEARCH', resource: 'MESSAGING', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Search failed' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\typing\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[741,744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[741,744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\nimport { triggerConversationEvent } from '@/lib/realtime';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { conversationId } = await req.json();\r\n    await withSecurity(Resource.MESSAGING, Action.READ, async (context) => {\r\n      // Do not let realtime failures cause a 400. Fire-and-forget.\r\n      Promise.resolve().then(() =>\r\n        triggerConversationEvent(conversationId, 'presence:typing', { userId: context.userId, at: Date.now() })\r\n      ).catch(() => {});\r\n    }, req);\r\n    return NextResponse.json({ ok: true });\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'TYPING', resource: 'MESSAGING', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\chat\\uploads\\create-url\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[674,677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[674,677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\nimport { createDirectUploadUrl } from '@/lib/uploads';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const result = await withSecurity(Resource.MESSAGING, Action.CREATE, async () => {\r\n      const { filename, mime, size } = body as { filename: string; mime: string; size: number };\r\n      const url = await createDirectUploadUrl({ filename, mime, size });\r\n      return url;\r\n    }, req);\r\n    return NextResponse.json(result);\r\n  } catch (err: any) {\r\n    await SecurityService.logAction({ action: 'CREATE', resource: 'MESSAGING', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to create upload URL' }, { status: 400 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\duplicates\\check\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1230,1233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1230,1233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1352,1355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1352,1355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3391,3394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3391,3394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5105,5108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5105,5108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth-options';\r\nimport { duplicateDetectionService, DuplicateCheckInput } from '@/lib/duplicate-detection';\r\nimport { DuplicateAction } from '@prisma/client';\r\nimport { z } from 'zod';\r\nimport { hasPermission } from '@/lib/permissions';\r\nimport { PERMISSIONS } from '@/lib/permissions';\r\n\r\n// Request schema validation\r\nconst checkDuplicatesSchema = z.object({\r\n  name: z.string().optional(),\r\n  email: z.string().email().optional(),\r\n  phone: z.string().optional(),\r\n  company: z.string().optional(),\r\n  linkedinUrl: z.string().url().optional(),\r\n  title: z.string().optional(),\r\n  action: z.enum(['LEAD_CREATE', 'LEAD_UPDATE', 'PIPELINE_CREATE', 'PIPELINE_UPDATE', 'CONTACT_ADD', 'COMPANY_ADD']).optional(),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session?.user?.id) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Check permissions - user needs duplicate read permission OR lead create permission\r\n    if (!hasPermission(session.user as any, PERMISSIONS.DUPLICATES.READ.resource, PERMISSIONS.DUPLICATES.READ.action) &&\r\n        !hasPermission(session.user as any, PERMISSIONS.LEADS.CREATE.resource, PERMISSIONS.LEADS.CREATE.action)) {\r\n      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const validatedData = checkDuplicatesSchema.parse(body);\r\n    \r\n    // Convert action string to enum if provided\r\n    const action = validatedData.action \r\n      ? DuplicateAction[validatedData.action as keyof typeof DuplicateAction]\r\n      : DuplicateAction.LEAD_CREATE;\r\n    \r\n    // Prepare input for duplicate check\r\n    const checkInput: DuplicateCheckInput = {\r\n      name: validatedData.name,\r\n      email: validatedData.email,\r\n      phone: validatedData.phone,\r\n      company: validatedData.company,\r\n      linkedinUrl: validatedData.linkedinUrl,\r\n      title: validatedData.title,\r\n    };\r\n    \r\n    // Perform duplicate check\r\n    const result = await duplicateDetectionService.checkForDuplicates(\r\n      checkInput,\r\n      session.user.id,\r\n      action\r\n    );\r\n    \r\n    // Filter sensitive information based on user role\r\n    const filteredResult = {\r\n      hasWarning: result.hasWarning,\r\n      severity: result.severity,\r\n      warningId: result.warningId,\r\n      message: result.message,\r\n      matches: result.matches.map(match => ({\r\n        id: match.id,\r\n        matchType: match.matchType,\r\n        confidence: match.confidence,\r\n        severity: match.severity,\r\n        matchDetails: {\r\n          // Include basic match info but filter sensitive details\r\n          type: match.matchDetails.exactMatch ? 'exact' : 'similar',\r\n          field: match.matchType.toLowerCase(),\r\n        },\r\n        existingRecord: {\r\n          type: match.existingRecord.type,\r\n          company: match.existingRecord.company,\r\n          lastContactDate: match.existingRecord.lastContactDate,\r\n          status: match.existingRecord.status,\r\n          isActive: match.existingRecord.isActive,\r\n          // Only include owner info if user has appropriate permissions\r\n          owner: hasPermission(session.user as any, PERMISSIONS.USERS.VIEW_ALL.resource, PERMISSIONS.USERS.VIEW_ALL.action) ? \r\n            match.existingRecord.owner : \r\n            { name: match.existingRecord.owner?.name }, // Basic name only\r\n        }\r\n      }))\r\n    };\r\n    \r\n    return NextResponse.json(filteredResult);\r\n    \r\n  } catch (error) {\r\n    console.error('Error checking duplicates:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid request data', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// GET endpoint for retrieving specific duplicate warning details\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session?.user?.id) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const warningId = searchParams.get('warningId');\r\n    \r\n    if (!warningId) {\r\n      return NextResponse.json({ error: 'Warning ID required' }, { status: 400 });\r\n    }\r\n    \r\n    // Get the warning details\r\n    const warning = await duplicateDetectionService.getRecentWarnings(1, true);\r\n    const warningDetails = warning.find(w => w.id === warningId);\r\n    \r\n    if (!warningDetails) {\r\n      return NextResponse.json({ error: 'Warning not found' }, { status: 404 });\r\n    }\r\n    \r\n    // Check if user can view this warning (own warning or admin)\r\n    const isOwner = warningDetails.triggeredBy.id === session.user.id;\r\n    const isAdmin = hasPermission(session.user as any, PERMISSIONS.USERS.VIEW_ALL.resource, PERMISSIONS.USERS.VIEW_ALL.action);\r\n    \r\n    if (!isOwner && !isAdmin) {\r\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 });\r\n    }\r\n    \r\n    return NextResponse.json(warningDetails);\r\n    \r\n  } catch (error) {\r\n    console.error('Error retrieving warning details:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\duplicates\\company-conflicts\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1762,1765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1762,1765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { subDays } from 'date-fns';\r\n\r\n// GET /api/duplicates/company-conflicts?company=Acme%20Inc&company=Beta%20Ltd&days=14\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    const companies = searchParams.getAll('company').filter(Boolean);\r\n    const daysParam = parseInt(searchParams.get('days') || '14', 10);\r\n    const days = isNaN(daysParam) ? 14 : Math.max(1, Math.min(daysParam, 365));\r\n    if (companies.length === 0) {\r\n      return NextResponse.json({ conflicts: {} });\r\n    }\r\n\r\n    const now = new Date();\r\n    const since = subDays(now, days);\r\n\r\n    // Find recent duplicate warnings whose potential duplicate existingCompany matches any provided company\r\n    const warnings = await prisma.duplicateWarning.findMany({\r\n      where: {\r\n        createdAt: { gte: since },\r\n        potentialDuplicates: {\r\n          some: {\r\n            existingCompany: { in: companies },\r\n          },\r\n        },\r\n      },\r\n      select: {\r\n        id: true,\r\n        potentialDuplicates: {\r\n          select: {\r\n            existingCompany: true,\r\n          },\r\n        },\r\n      },\r\n      take: 500,\r\n    });\r\n\r\n    const conflictSet = new Set<string>();\r\n    for (const w of warnings) {\r\n      for (const dup of w.potentialDuplicates) {\r\n        if (dup.existingCompany && companies.includes(dup.existingCompany)) {\r\n          conflictSet.add(dup.existingCompany);\r\n        }\r\n      }\r\n    }\r\n\r\n    const conflicts: Record<string, boolean> = {};\r\n    for (const c of companies) conflicts[c] = conflictSet.has(c);\r\n\r\n    return NextResponse.json({ conflicts, since: since.toISOString() });\r\n  } catch (error: any) {\r\n    console.error('Error fetching company conflicts:', error);\r\n    return NextResponse.json({ error: error.message || 'Failed to fetch conflicts' }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\duplicates\\decision\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[918,921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[918,921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth-options';\r\nimport { duplicateDetectionService } from '@/lib/duplicate-detection';\r\nimport { UserDecision } from '@prisma/client';\r\nimport { z } from 'zod';\r\nimport { hasPermission } from '@/lib/permissions';\r\nimport { PERMISSIONS } from '@/lib/permissions';\r\n\r\n// Request schema validation\r\nconst recordDecisionSchema = z.object({\r\n  warningId: z.string().cuid(),\r\n  decision: z.enum(['PROCEEDED', 'CANCELLED', 'IGNORED']),\r\n  reason: z.string().optional(),\r\n});\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session?.user?.id) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Check permissions\r\n    if (!hasPermission(session.user as any, PERMISSIONS.LEADS.CREATE.resource, PERMISSIONS.LEADS.CREATE.action)) {\r\n      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const validatedData = recordDecisionSchema.parse(body);\r\n    \r\n    // Convert decision string to enum\r\n    const decision = UserDecision[validatedData.decision as keyof typeof UserDecision];\r\n    \r\n    // Record the decision\r\n    await duplicateDetectionService.recordDecision(\r\n      validatedData.warningId,\r\n      decision,\r\n      session.user.id,\r\n      validatedData.reason\r\n    );\r\n    \r\n    return NextResponse.json({ \r\n      success: true,\r\n      message: 'Decision recorded successfully'\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error recording duplicate decision:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid request data', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\duplicates\\search\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1164,1167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1164,1167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1276,1279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1276,1279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1903,1906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1903,1906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2044,2047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2044,2047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2136,2139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2136,2139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth-options';\r\nimport { prisma } from '@/lib/db';\r\nimport { z } from 'zod';\r\nimport { hasPermission, getDataAccessFilter } from '@/lib/permissions';\r\nimport { PERMISSIONS } from '@/lib/permissions';\r\nimport { Resource } from '@prisma/client';\r\nimport { normalizeCompanyName, normalizePersonName, normalizeEmail, calculateStringSimilarity } from '@/lib/duplicate-detection';\r\n\r\n// Request schema validation\r\nconst searchSchema = z.object({\r\n  query: z.string().min(2).max(100),\r\n  type: z.enum(['company', 'contact', 'email', 'phone', 'all']).optional().default('all'),\r\n  limit: z.number().min(1).max(100).optional().default(20),\r\n  includeInactive: z.boolean().optional().default(false),\r\n});\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session?.user?.id) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Check permissions for database search\r\n    if (!hasPermission(session.user as any, PERMISSIONS.LEADS.READ.resource, PERMISSIONS.LEADS.READ.action) &&\r\n        !hasPermission(session.user as any, PERMISSIONS.PIPELINE.READ.resource, PERMISSIONS.PIPELINE.READ.action)) {\r\n      return NextResponse.json({ error: 'Insufficient permissions' }, { status: 403 });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const validatedParams = searchSchema.parse({\r\n      query: searchParams.get('query'),\r\n      type: searchParams.get('type'),\r\n      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!) : undefined,\r\n      includeInactive: searchParams.get('includeInactive') === 'true',\r\n    });\r\n    \r\n    const { query, type, limit, includeInactive } = validatedParams;\r\n    const results: any[] = [];\r\n    \r\n    // Get data access filter based on user permissions\r\n    const leadAccessFilter = getDataAccessFilter(session.user as any, Resource.LEADS);\r\n    const pipelineAccessFilter = getDataAccessFilter(session.user as any, Resource.PIPELINE);\r\n    \r\n    // Search leads\r\n    if (type === 'all' || type === 'company' || type === 'contact' || type === 'email') {\r\n      const leadResults = await prisma.lead.findMany({\r\n        where: {\r\n          ...leadAccessFilter,\r\n          AND: [\r\n            includeInactive ? {} : { status: { not: 'Closed' } },\r\n            {\r\n              OR: [\r\n                { name: { contains: query, mode: 'insensitive' } },\r\n                { company: { contains: query, mode: 'insensitive' } },\r\n                { email: { contains: query, mode: 'insensitive' } },\r\n                { phone: { contains: query } },\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        include: {\r\n          bdr: {\r\n            select: { id: true, name: true, role: true }\r\n          },\r\n          activityLogs: {\r\n            orderBy: { timestamp: 'desc' },\r\n            take: 1,\r\n          }\r\n        },\r\n        take: Math.min(limit, 50),\r\n        orderBy: { addedDate: 'desc' }\r\n      });\r\n      \r\n      results.push(...leadResults.map(lead => ({\r\n        id: `lead-${lead.id}`,\r\n        type: 'lead',\r\n        name: lead.name,\r\n        company: lead.company,\r\n        email: lead.email,\r\n        phone: lead.phone,\r\n        status: lead.status,\r\n        addedDate: lead.addedDate,\r\n        lastActivity: lead.activityLogs[0]?.timestamp,\r\n        owner: lead.bdr,\r\n        relevanceScore: calculateSearchRelevance(query, {\r\n          name: lead.name,\r\n          company: lead.company,\r\n          email: lead.email,\r\n        })\r\n      })));\r\n    }\r\n    \r\n    // Search pipeline items\r\n    if (type === 'all' || type === 'company' || type === 'contact' || type === 'email') {\r\n      const pipelineResults = await prisma.pipelineItem.findMany({\r\n        where: {\r\n          ...pipelineAccessFilter,\r\n          AND: [\r\n            includeInactive ? {} : { \r\n              status: { \r\n                notIn: ['Closed - Won', 'Closed - Lost', 'Dead'] \r\n              } \r\n            },\r\n            {\r\n              OR: [\r\n                { name: { contains: query, mode: 'insensitive' } },\r\n                { company: { contains: query, mode: 'insensitive' } },\r\n                { email: { contains: query, mode: 'insensitive' } },\r\n                { phone: { contains: query } },\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        include: {\r\n          bdr: {\r\n            select: { id: true, name: true, role: true }\r\n          },\r\n          activityLogs: {\r\n            orderBy: { timestamp: 'desc' },\r\n            take: 1,\r\n          }\r\n        },\r\n        take: Math.min(limit, 50),\r\n        orderBy: { lastUpdated: 'desc' }\r\n      });\r\n      \r\n      results.push(...pipelineResults.map(item => ({\r\n        id: `pipeline-${item.id}`,\r\n        type: 'pipeline',\r\n        name: item.name,\r\n        company: item.company,\r\n        email: item.email,\r\n        phone: item.phone,\r\n        status: item.status,\r\n        category: item.category,\r\n        value: item.value,\r\n        addedDate: item.addedDate,\r\n        lastActivity: item.activityLogs[0]?.timestamp || item.lastUpdated,\r\n        owner: item.bdr,\r\n        relevanceScore: calculateSearchRelevance(query, {\r\n          name: item.name,\r\n          company: item.company,\r\n          email: item.email,\r\n        })\r\n      })));\r\n    }\r\n    \r\n    // Sort by relevance and limit results\r\n    const sortedResults = results\r\n      .sort((a, b) => b.relevanceScore - a.relevanceScore)\r\n      .slice(0, limit);\r\n    \r\n    return NextResponse.json({\r\n      results: sortedResults,\r\n      totalFound: results.length,\r\n      query,\r\n      searchType: type,\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error performing duplicate search:', error);\r\n    \r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid search parameters', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Calculate search relevance score\r\nfunction calculateSearchRelevance(query: string, fields: { name?: string | null; company?: string | null; email?: string | null }): number {\r\n  const normalizedQuery = query.toLowerCase().trim();\r\n  let maxScore = 0;\r\n  \r\n  // Check exact matches (highest score)\r\n  if (fields.name && normalizePersonName(fields.name).includes(normalizedQuery)) {\r\n    maxScore = Math.max(maxScore, 1.0);\r\n  }\r\n  if (fields.company && normalizeCompanyName(fields.company).includes(normalizedQuery)) {\r\n    maxScore = Math.max(maxScore, 1.0);\r\n  }\r\n  if (fields.email && normalizeEmail(fields.email).includes(normalizedQuery)) {\r\n    maxScore = Math.max(maxScore, 1.0);\r\n  }\r\n  \r\n  // Check similarity matches\r\n  if (fields.name) {\r\n    const nameSimilarity = calculateStringSimilarity(normalizedQuery, normalizePersonName(fields.name));\r\n    maxScore = Math.max(maxScore, nameSimilarity * 0.9);\r\n  }\r\n  \r\n  if (fields.company) {\r\n    const companySimilarity = calculateStringSimilarity(normalizedQuery, normalizeCompanyName(fields.company));\r\n    maxScore = Math.max(maxScore, companySimilarity * 0.9);\r\n  }\r\n  \r\n  // Partial matches (lower score)\r\n  const searchTerms = normalizedQuery.split(' ');\r\n  for (const term of searchTerms) {\r\n    if (term.length < 2) continue;\r\n    \r\n    if (fields.name && normalizePersonName(fields.name).includes(term)) {\r\n      maxScore = Math.max(maxScore, 0.6);\r\n    }\r\n    if (fields.company && normalizeCompanyName(fields.company).includes(term)) {\r\n      maxScore = Math.max(maxScore, 0.6);\r\n    }\r\n  }\r\n  \r\n  return maxScore;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\editorial\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\editorial\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1623,1626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1623,1626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth-options';\r\nimport { prisma } from '@/lib/db';\r\nimport { z } from 'zod';\r\n\r\nconst editorialItemSchema = z.object({\r\n  name: z.string().min(1),\r\n  title: z.string().optional(),\r\n  company: z.string().optional(),\r\n  email: z.string().email().optional().or(z.literal('')),\r\n  phone: z.string().optional(),\r\n  bdrId: z.string(),\r\n  status: z.enum(['LIST_OUT_QA_INTERVIEW_PROPOSED', 'INTERVIEW_SCHEDULED', 'INTERVIEW_COMPLETED', 'QA_SUBMITTED', 'QA_APPROVED', 'PUBLISHED', 'DECLINED']),\r\n  notes: z.string().optional(),\r\n  link: z.string().optional(),\r\n  interviewDate: z.string().optional(),\r\n  qaSubmissionDate: z.string().optional(),\r\n  qaApprovedDate: z.string().optional(),\r\n  publicationDate: z.string().optional(),\r\n  publicationLink: z.string().optional(),\r\n  leadId: z.number().optional(),\r\n  pipelineItemId: z.number().optional(),\r\n});\r\n\r\n// GET /api/editorial - Get all editorial board items\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const bdr = searchParams.get('bdr') || undefined;\r\n    const status = searchParams.get('status') || undefined;\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const pageSize = parseInt(searchParams.get('pageSize') || '50');\r\n    const skip = (page - 1) * pageSize;\r\n\r\n    const where: any = {};\r\n    if (bdr) where.bdrId = bdr;\r\n    if (status) where.status = status;\r\n\r\n    const [items, totalCount] = await Promise.all([\r\n      prisma.editorialBoardItem.findMany({\r\n        where,\r\n        include: {\r\n          bdr: {\r\n            select: { name: true, email: true }\r\n          },\r\n          lead: {\r\n            select: { name: true, company: true }\r\n          },\r\n          pipelineItem: {\r\n            select: { name: true, company: true }\r\n          }\r\n        },\r\n        orderBy: [\r\n          { status: 'asc' },\r\n          { lastUpdated: 'desc' }\r\n        ],\r\n        skip,\r\n        take: pageSize,\r\n      }),\r\n      prisma.editorialBoardItem.count({ where })\r\n    ]);\r\n\r\n    return NextResponse.json({\r\n      items,\r\n      pagination: {\r\n        page,\r\n        pageSize,\r\n        totalCount,\r\n        totalPages: Math.ceil(totalCount / pageSize),\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching editorial items:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch editorial items' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST /api/editorial - Create new editorial board item\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const validatedData = editorialItemSchema.parse(body);\r\n\r\n    // Convert date strings to Date objects if provided\r\n    const dateFields = ['interviewDate', 'qaSubmissionDate', 'qaApprovedDate', 'publicationDate'];\r\n    const processedData = { ...validatedData };\r\n    \r\n    dateFields.forEach(field => {\r\n      if (processedData[field as keyof typeof processedData]) {\r\n        processedData[field as keyof typeof processedData] = new Date(processedData[field as keyof typeof processedData] as string);\r\n      }\r\n    });\r\n\r\n    const editorialItem = await prisma.editorialBoardItem.create({\r\n      data: {\r\n        ...processedData,\r\n        lastUpdated: new Date(),\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { name: true, email: true }\r\n        },\r\n        lead: {\r\n          select: { name: true, company: true }\r\n        },\r\n        pipelineItem: {\r\n          select: { name: true, company: true }\r\n        }\r\n      }\r\n    });\r\n\r\n    return NextResponse.json(editorialItem, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Error creating editorial item:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Validation failed', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Failed to create editorial item' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\editorial\\sync\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2787,2790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2787,2790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":135,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":194,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6542,6545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6542,6545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth-options';\r\nimport { prisma } from '@/lib/db';\r\nimport { z } from 'zod';\r\n\r\nconst syncFromPipelineSchema = z.object({\r\n  pipelineItemId: z.number(),\r\n  force: z.boolean().optional().default(false), // Force create even if already exists\r\n});\r\n\r\n// POST /api/editorial/sync - Sync pipeline item to editorial board\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { pipelineItemId, force } = syncFromPipelineSchema.parse(body);\r\n\r\n    // Get the pipeline item\r\n    const pipelineItem = await prisma.pipelineItem.findUnique({\r\n      where: { id: pipelineItemId },\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true, email: true }\r\n        },\r\n        lead: {\r\n          select: { id: true, name: true, company: true, email: true, phone: true }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!pipelineItem) {\r\n      return NextResponse.json({ error: 'Pipeline item not found' }, { status: 404 });\r\n    }\r\n\r\n    // Check if already exists in editorial board (unless force is true)\r\n    if (!force) {\r\n      const existingEditorialItem = await prisma.editorialBoardItem.findFirst({\r\n        where: { pipelineItemId }\r\n      });\r\n\r\n      if (existingEditorialItem) {\r\n        return NextResponse.json(\r\n          { error: 'Pipeline item already exists in editorial board', editorialItem: existingEditorialItem },\r\n          { status: 409 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Determine initial status based on pipeline status\r\n    let editorialStatus: string;\r\n    switch (pipelineItem.status) {\r\n      case 'List Out':\r\n      case 'Partner List Sent':\r\n        editorialStatus = 'LIST_OUT_QA_INTERVIEW_PROPOSED';\r\n        break;\r\n      case 'Q&A':\r\n      case 'Free Q&A Offered':\r\n        editorialStatus = 'QA_SUBMITTED';\r\n        break;\r\n      case 'Sold':\r\n        editorialStatus = 'QA_APPROVED';\r\n        break;\r\n      default:\r\n        editorialStatus = 'LIST_OUT_QA_INTERVIEW_PROPOSED';\r\n    }\r\n\r\n    // Create editorial board item with duplicated data\r\n    const editorialItem = await prisma.editorialBoardItem.create({\r\n      data: {\r\n        name: pipelineItem.name,\r\n        title: pipelineItem.title || undefined,\r\n        company: pipelineItem.company || undefined,\r\n        email: pipelineItem.email || pipelineItem.lead?.email || undefined,\r\n        phone: pipelineItem.phone || pipelineItem.lead?.phone || undefined,\r\n        bdrId: pipelineItem.bdrId,\r\n        status: editorialStatus as any,\r\n        notes: `Synced from pipeline: ${pipelineItem.notes || 'No notes'}`,\r\n        link: pipelineItem.link || undefined,\r\n        leadId: pipelineItem.leadId || undefined,\r\n        pipelineItemId: pipelineItem.id,\r\n        lastUpdated: new Date(),\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { name: true, email: true }\r\n        },\r\n        lead: {\r\n          select: { name: true, company: true }\r\n        },\r\n        pipelineItem: {\r\n          select: { name: true, company: true }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Log the sync activity\r\n    await prisma.activityLog.create({\r\n      data: {\r\n        bdrId: pipelineItem.bdrId,\r\n        activityType: 'Editorial_Sync',\r\n        description: `Pipeline item synced to editorial board`,\r\n        notes: `Status: ${pipelineItem.status} → ${editorialStatus}`,\r\n        pipelineItemId: pipelineItem.id,\r\n        editorialItemId: editorialItem.id,\r\n      }\r\n    });\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      editorialItem,\r\n      message: `Pipeline item \"${pipelineItem.name}\" synced to editorial board`\r\n    }, { status: 201 });\r\n\r\n  } catch (error) {\r\n    console.error('Error syncing pipeline item to editorial board:', error);\r\n    if (error instanceof z.ZodError) {\r\n      return NextResponse.json(\r\n        { error: 'Validation failed', details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    return NextResponse.json(\r\n      { error: 'Failed to sync pipeline item to editorial board' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST /api/editorial/sync/auto - Auto-sync eligible pipeline items\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Find pipeline items in eligible statuses that aren't already in editorial board\r\n    const eligibleStatuses = ['List Out', 'Partner List Sent', 'Q&A', 'Free Q&A Offered', 'Sold'];\r\n    \r\n    const eligibleItems = await prisma.pipelineItem.findMany({\r\n      where: {\r\n        status: { in: eligibleStatuses },\r\n        editorialItems: {\r\n          none: {} // Not already in editorial board\r\n        }\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true, email: true }\r\n        },\r\n        lead: {\r\n          select: { id: true, name: true, company: true, email: true, phone: true }\r\n        }\r\n      },\r\n      take: 50 // Limit to avoid overwhelming the system\r\n    });\r\n\r\n    const syncedItems = [];\r\n    \r\n    for (const pipelineItem of eligibleItems) {\r\n      // Determine initial status based on pipeline status\r\n      let editorialStatus: string;\r\n      switch (pipelineItem.status) {\r\n        case 'List Out':\r\n        case 'Partner List Sent':\r\n          editorialStatus = 'LIST_OUT_QA_INTERVIEW_PROPOSED';\r\n          break;\r\n        case 'Q&A':\r\n        case 'Free Q&A Offered':\r\n          editorialStatus = 'QA_SUBMITTED';\r\n          break;\r\n        case 'Sold':\r\n          editorialStatus = 'QA_APPROVED';\r\n          break;\r\n        default:\r\n          editorialStatus = 'LIST_OUT_QA_INTERVIEW_PROPOSED';\r\n      }\r\n\r\n      try {\r\n        // Create editorial board item\r\n        const editorialItem = await prisma.editorialBoardItem.create({\r\n          data: {\r\n            name: pipelineItem.name,\r\n            title: pipelineItem.title || undefined,\r\n            company: pipelineItem.company || undefined,\r\n            email: pipelineItem.email || pipelineItem.lead?.email || undefined,\r\n            phone: pipelineItem.phone || pipelineItem.lead?.phone || undefined,\r\n            bdrId: pipelineItem.bdrId,\r\n            status: editorialStatus as any,\r\n            notes: `Auto-synced from pipeline: ${pipelineItem.notes || 'No notes'}`,\r\n            link: pipelineItem.link || undefined,\r\n            leadId: pipelineItem.leadId || undefined,\r\n            pipelineItemId: pipelineItem.id,\r\n            lastUpdated: new Date(),\r\n          }\r\n        });\r\n\r\n        // Log the sync activity\r\n        await prisma.activityLog.create({\r\n          data: {\r\n            bdrId: pipelineItem.bdrId,\r\n            activityType: 'Editorial_Auto_Sync',\r\n            description: `Pipeline item auto-synced to editorial board`,\r\n            notes: `Status: ${pipelineItem.status} → ${editorialStatus}`,\r\n            pipelineItemId: pipelineItem.id,\r\n            editorialItemId: editorialItem.id,\r\n          }\r\n        });\r\n\r\n        syncedItems.push({\r\n          pipelineItem: { id: pipelineItem.id, name: pipelineItem.name },\r\n          editorialItem: { id: editorialItem.id, status: editorialStatus }\r\n        });\r\n      } catch (error) {\r\n        console.error(`Failed to sync pipeline item ${pipelineItem.id}:`, error);\r\n        // Continue with other items even if one fails\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      syncedCount: syncedItems.length,\r\n      syncedItems,\r\n      message: `Auto-synced ${syncedItems.length} pipeline items to editorial board`\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error auto-syncing pipeline items:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to auto-sync pipeline items to editorial board' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\email-verification\\find\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\email-verification\\token\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\n\r\nconst MAILTESTER_KEY = 'sub_1RqwpEAJu6gy4fiY6HjlCsFr';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const response = await fetch(`https://token.mailtester.ninja/token?key=${MAILTESTER_KEY}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to get token: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      token: data.token,\r\n      message: data.message,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error getting MailTester token:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to get authentication token' \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\email-verification\\verify\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\export\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4447,4450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4447,4450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { SecurityService, withSecurity } from '@/lib/security';\r\nimport { DataExportService, ExportRequest } from '@/lib/export-service';\r\nimport { Resource, Action } from '@prisma/client';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  return withSecurity(Resource.REPORTS, Action.EXPORT, async (context) => {\r\n    const body = await req.json();\r\n    \r\n    // Validate export request\r\n    const exportRequest: ExportRequest = {\r\n      resource: body.resource,\r\n      format: body.format || 'csv',\r\n      filters: body.filters || {},\r\n      fields: body.fields,\r\n      dateRange: body.dateRange ? {\r\n        start: new Date(body.dateRange.start),\r\n        end: new Date(body.dateRange.end)\r\n      } : undefined\r\n    };\r\n\r\n    // Check if export is allowed\r\n    const { allowed, reason } = await DataExportService.canExport(context, exportRequest);\r\n    if (!allowed) {\r\n      await SecurityService.logAction({\r\n        action: 'EXPORT',\r\n        resource: exportRequest.resource,\r\n        success: false,\r\n        errorMsg: reason,\r\n        details: exportRequest\r\n      }, req);\r\n      \r\n      return NextResponse.json({ error: reason }, { status: 403 });\r\n    }\r\n\r\n    try {\r\n      // Execute export\r\n      const result = await DataExportService.executeExport(context, exportRequest);\r\n      \r\n      // Convert to appropriate format\r\n      let responseData;\r\n      let contentType;\r\n      let filename;\r\n\r\n      switch (exportRequest.format) {\r\n        case 'csv':\r\n          responseData = convertToCSV(result.data);\r\n          contentType = 'text/csv';\r\n          filename = `${exportRequest.resource.toLowerCase()}_export_${new Date().toISOString().split('T')[0]}.csv`;\r\n          break;\r\n        case 'json':\r\n          responseData = JSON.stringify(result.data, null, 2);\r\n          contentType = 'application/json';\r\n          filename = `${exportRequest.resource.toLowerCase()}_export_${new Date().toISOString().split('T')[0]}.json`;\r\n          break;\r\n        default:\r\n          return NextResponse.json({ error: 'Unsupported format' }, { status: 400 });\r\n      }\r\n\r\n      // Log successful export\r\n      await SecurityService.logAction({\r\n        action: 'EXPORT',\r\n        resource: exportRequest.resource,\r\n        success: true,\r\n        details: {\r\n          format: exportRequest.format,\r\n          recordCount: result.data.length,\r\n          filters: exportRequest.filters\r\n        }\r\n      }, req);\r\n\r\n      // Return file as download\r\n      return new NextResponse(responseData, {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': contentType,\r\n          'Content-Disposition': `attachment; filename=\"${filename}\"`,\r\n          'X-Export-Metadata': JSON.stringify(result.metadata)\r\n        },\r\n      });\r\n    } catch (error) {\r\n      await SecurityService.logAction({\r\n        action: 'EXPORT',\r\n        resource: exportRequest.resource,\r\n        success: false,\r\n        errorMsg: error instanceof Error ? error.message : 'Unknown error',\r\n        details: exportRequest\r\n      }, req);\r\n\r\n      return NextResponse.json({ \r\n        error: error instanceof Error ? error.message : 'Export failed' \r\n      }, { status: 500 });\r\n    }\r\n  }, req);\r\n}\r\n\r\nexport async function GET(req: NextRequest) {\r\n  return withSecurity(Resource.REPORTS, Action.READ, async (context) => {\r\n    const { searchParams } = new URL(req.url);\r\n    const action = searchParams.get('action');\r\n\r\n    if (action === 'history') {\r\n      const days = parseInt(searchParams.get('days') || '30');\r\n      const history = await DataExportService.getExportHistory(context.userId, days);\r\n      return NextResponse.json({ history });\r\n    }\r\n\r\n    if (action === 'restrictions') {\r\n      const resource = searchParams.get('resource') as Resource;\r\n      if (!resource) {\r\n        return NextResponse.json({ error: 'Resource parameter required' }, { status: 400 });\r\n      }\r\n\r\n      const mockRequest: ExportRequest = {\r\n        resource,\r\n        format: 'csv',\r\n        filters: {}\r\n      };\r\n\r\n      const { allowed, restrictions, reason } = await DataExportService.canExport(context, mockRequest);\r\n      return NextResponse.json({ \r\n        allowed, \r\n        restrictions: restrictions || null, \r\n        reason: reason || null \r\n      });\r\n    }\r\n\r\n    return NextResponse.json({ error: 'Invalid action' }, { status: 400 });\r\n  }, req);\r\n}\r\n\r\nfunction convertToCSV(data: any[]): string {\r\n  if (data.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  const headers = Object.keys(data[0]);\r\n  const csvRows = [\r\n    headers.join(','),\r\n    ...data.map(row => \r\n      headers.map(header => {\r\n        const value = row[header];\r\n        // Handle nested objects and arrays\r\n        const stringValue = typeof value === 'object' ? JSON.stringify(value) : String(value || '');\r\n        // Escape commas and quotes\r\n        return stringValue.includes(',') || stringValue.includes('\"') \r\n          ? `\"${stringValue.replace(/\"/g, '\"\"')}\"` \r\n          : stringValue;\r\n      }).join(',')\r\n    )\r\n  ];\r\n\r\n  return csvRows.join('\\n');\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\finance\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\finance\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9235,9238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9235,9238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10273,10276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10273,10276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is assigned a value but never used.","line":293,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":29},{"ruleId":"prefer-const","severity":2,"message":"'financeData' is never reassigned. Use 'const' instead.","line":300,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":300,"endColumn":20,"fix":{"range":[11304,11343],"text":"const financeData = { ...validatedData };"}}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/lib/auth\";\r\nimport { prisma } from \"@/lib/db\";\r\nimport { createFinanceEntrySchema } from \"@/lib/validations\";\r\nimport { exchangeRateService } from \"@/lib/exchange-rate\";\r\nimport { Role } from \"@prisma/client\";\r\n\r\n// GET - List finance entries with filters and monthly grouping\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // 1. Get Session securely on the server\r\n    const session = await getServerSession(authOptions);\r\n\r\n    // 2. Check Authentication\r\n    if (!session || !session.user) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const { role, id: userId } = session.user;\r\n\r\n    const { searchParams } = new URL(req.url);\r\n    const search = searchParams.get('search') || '';\r\n    const status = searchParams.get('status') || undefined;\r\n    const bdr = searchParams.get('bdr') || undefined;\r\n    const month = searchParams.get('month') || undefined;\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const pageSize = parseInt(searchParams.get('pageSize') || '10');\r\n    const groupByMonth = searchParams.get('groupByMonth') === 'true';\r\n    const analytics = searchParams.get('analytics') === 'true';\r\n    const skip = (page - 1) * pageSize;\r\n    \r\n    // 3. Enforce Authorization (RBAC) - Build where clause with role-based filtering\r\n    const where: {\r\n      OR?: Array<{ company: { contains: string; mode: 'insensitive' } } | \r\n                  { notes: { contains: string; mode: 'insensitive' } }>;\r\n      status?: string;\r\n      bdr?: string; // Changed from { name: string } to string\r\n      bdrId?: string;\r\n      month?: string;\r\n    } = {};\r\n\r\n    // Role-based data filtering\r\n    if (role === Role.BDR) {\r\n      // BDRs can only see their own finance entries\r\n      where.bdrId = userId;\r\n    } else if (role === Role.ADMIN) {\r\n      // Admins can see all finance entries - no additional filtering\r\n    } else {\r\n      // Unknown role - deny access\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\r\n    }\r\n    \r\n    if (search) {\r\n      where.OR = [\r\n        { company: { contains: search, mode: 'insensitive' } },\r\n        { notes: { contains: search, mode: 'insensitive' } },\r\n      ];\r\n    }\r\n    if (status) where.status = status;\r\n    // Note: For BDRs, we ignore the 'bdr' filter param since they can only see their own data\r\n    // For Admins, we can still apply the bdr filter if provided\r\n    if (bdr) {\r\n      // Accept BDR by name in UI; map to userId for query\r\n      const targetUser = await prisma.user.findFirst({ where: { name: bdr }, select: { id: true } });\r\n      if (targetUser) {\r\n        where.bdrId = targetUser.id;\r\n      } else {\r\n        where.bdrId = '___NO_MATCH___';\r\n      }\r\n    }\r\n    if (month) where.month = month;\r\n    \r\n    if (analytics) {\r\n      // Get all finance entries for analytics\r\n      const allEntries = await prisma.financeEntry.findMany({\r\n        where,\r\n        orderBy: { createdAt: 'desc' }\r\n      });\r\n      \r\n      // Calculate analytics\r\n      const totalRevenue = allEntries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n      \r\n      // Year-to-date calculations\r\n      const currentYear = new Date().getFullYear();\r\n      const ytdEntries = allEntries.filter(entry => {\r\n        const entryYear = entry.createdAt ? new Date(entry.createdAt).getFullYear() : currentYear;\r\n        return entryYear === currentYear;\r\n      });\r\n      const ytdRevenue = ytdEntries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n      const ytdDeals = ytdEntries.length;\r\n      \r\n      // Monthly calculations\r\n      const currentMonth = new Date().toISOString().slice(0, 7);\r\n      const currentMonthEntries = allEntries.filter(entry => entry.month === currentMonth);\r\n      const monthlyRevenue = currentMonthEntries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n      const monthlyDeals = currentMonthEntries.length;\r\n      \r\n      // Quarterly calculations\r\n      const currentQuarter = Math.floor((new Date().getMonth() + 3) / 3);\r\n      const quarterlyEntries = allEntries.filter(entry => {\r\n        if (!entry.createdAt) return false;\r\n        const entryDate = new Date(entry.createdAt);\r\n        const entryQuarter = Math.floor((entryDate.getMonth() + 3) / 3);\r\n        return entryDate.getFullYear() === currentYear && entryQuarter === currentQuarter;\r\n      });\r\n      const quarterlyRevenue = quarterlyEntries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n      \r\n      // Growth calculations\r\n      const lastMonth = new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().slice(0, 7);\r\n      const lastMonthEntries = allEntries.filter(entry => entry.month === lastMonth);\r\n      const lastMonthRevenue = lastMonthEntries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n      const monthlyGrowth = lastMonthRevenue > 0 ? ((monthlyRevenue - lastMonthRevenue) / lastMonthRevenue) * 100 : 0;\r\n      \r\n      // Deal calculations\r\n      const totalDeals = allEntries.length;\r\n      const averageDealSize = totalDeals > 0 ? totalRevenue / totalDeals : 0;\r\n      const conversionRate = totalDeals > 0 ? (allEntries.filter(entry => entry.status === 'Paid').length / totalDeals) * 100 : 0;\r\n      \r\n      // Calculate overdue days\r\n      const overdueEntries = allEntries.filter(entry => \r\n        entry.status === 'Overdue' && entry.dueDate\r\n      );\r\n      const overdueDays = overdueEntries.length > 0 ? \r\n        overdueEntries.reduce((sum, entry) => {\r\n          const daysDiff = Math.floor((new Date().getTime() - new Date(entry.dueDate!).getTime()) / (1000 * 60 * 60 * 24));\r\n          return sum + daysDiff;\r\n        }, 0) / overdueEntries.length : 0;\r\n      \r\n      // Calculate average payment time\r\n      const paidEntries = allEntries.filter(entry => \r\n        entry.status === 'Paid' && entry.invoiceDate && entry.dueDate\r\n      );\r\n      const averagePaymentTime = paidEntries.length > 0 ? \r\n        paidEntries.reduce((sum, entry) => {\r\n          const invoiceDate = new Date(entry.invoiceDate!);\r\n          const dueDate = new Date(entry.dueDate!);\r\n          const daysDiff = Math.floor((dueDate.getTime() - invoiceDate.getTime()) / (1000 * 60 * 60 * 24));\r\n          return sum + Math.abs(daysDiff);\r\n        }, 0) / paidEntries.length : 0;\r\n      \r\n      // Status breakdown\r\n      const statusBreakdown = allEntries.reduce((acc: {[key: string]: number}, entry) => {\r\n        acc[entry.status] = (acc[entry.status] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n      \r\n      // Payment status\r\n      const paymentStatus = {\r\n        paid: allEntries.filter(entry => entry.status === 'Paid').length,\r\n        pending: allEntries.filter(entry => entry.status === 'Pending').length,\r\n        overdue: allEntries.filter(entry => entry.status === 'Overdue').length,\r\n      };\r\n      \r\n      // Monthly trends (last 6 months)\r\n      const monthlyTrends = [];\r\n      for (let i = 5; i >= 0; i--) {\r\n        const date = new Date();\r\n        date.setMonth(date.getMonth() - i);\r\n        const monthStr = date.toISOString().slice(0, 7);\r\n        const monthEntries = allEntries.filter(entry => entry.month === monthStr);\r\n        monthlyTrends.push({\r\n          month: date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' }),\r\n          revenue: monthEntries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0),\r\n          deals: monthEntries.length\r\n        });\r\n      }\r\n      \r\n      // BDR performance\r\n      const bdrPerformance = Object.entries(\r\n        allEntries.reduce((acc: {[key: string]: {revenue: number, deals: number}}, entry) => {\r\n          const bdrName = entry.bdr || 'Unassigned';\r\n          if (!acc[bdrName]) {\r\n            acc[bdrName] = { revenue: 0, deals: 0 };\r\n          }\r\n          acc[bdrName].revenue += entry.gbpAmount || 0;\r\n          acc[bdrName].deals += 1;\r\n          return acc;\r\n        }, {})\r\n      ).map(([bdr, data]) => ({\r\n        bdr,\r\n        revenue: data.revenue,\r\n        deals: data.deals,\r\n        avgDealSize: data.deals > 0 ? data.revenue / data.deals : 0\r\n      })).sort((a, b) => b.revenue - a.revenue);\r\n      \r\n      const analytics = {\r\n        totalRevenue,\r\n        ytdRevenue,\r\n        monthlyRevenue,\r\n        quarterlyRevenue,\r\n        averageDealSize,\r\n        conversionRate,\r\n        overdueDays,\r\n        monthlyGrowth,\r\n        totalDeals,\r\n        ytdDeals,\r\n        monthlyDeals,\r\n        averagePaymentTime,\r\n        statusBreakdown,\r\n        monthlyTrends,\r\n        bdrPerformance,\r\n        paymentStatus\r\n      };\r\n      \r\n      return NextResponse.json({ analytics });\r\n    }\r\n    \r\n    if (groupByMonth) {\r\n      // Get all entries grouped by month with BDR relation for name resolution\r\n      const financeEntries = await prisma.financeEntry.findMany({\r\n        where,\r\n        orderBy: [\r\n          { month: 'asc' },\r\n          { createdAt: 'desc' }\r\n        ],\r\n        include: {\r\n          bdr: { select: { name: true } }\r\n        }\r\n      });\r\n\r\n      // Map BDR relation to string name for UI\r\n      const normalized = financeEntries.map((e: any) => ({\r\n        ...e,\r\n        bdr: e.bdr?.name || '',\r\n      }));\r\n\r\n      // Group entries by month\r\n      const groupedEntries = normalized.reduce((acc: { [key: string]: typeof normalized }, entry) => {\r\n        if (!acc[entry.month]) {\r\n          acc[entry.month] = [];\r\n        }\r\n        acc[entry.month].push(entry);\r\n        return acc;\r\n      }, {} as { [key: string]: typeof normalized });\r\n\r\n      return NextResponse.json({\r\n        groupedEntries,\r\n        total: normalized.length,\r\n      });\r\n    }\r\n    \r\n    // Get total count\r\n    const total = await prisma.financeEntry.count({ where });\r\n    \r\n    // Get finance entries\r\n    const financeEntries = await prisma.financeEntry.findMany({\r\n      where,\r\n      skip,\r\n      take: pageSize,\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true }\r\n        }\r\n      },\r\n      orderBy: [\r\n        { month: 'desc' },\r\n        { createdAt: 'desc' }\r\n      ]\r\n    });\r\n    \r\n    return NextResponse.json({\r\n      financeEntries: financeEntries.map((e: any) => ({\r\n        ...e,\r\n        bdr: e.bdr?.name || '',\r\n      })),\r\n      total,\r\n      page,\r\n      pageSize,\r\n      totalPages: Math.ceil(total / pageSize)\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error fetching finance entries:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch finance entries\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST - Create a new finance entry\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    // 1. Get Session securely on the server\r\n    const session = await getServerSession(authOptions);\r\n\r\n    // 2. Check Authentication\r\n    if (!session || !session.user) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const { role, id: userId, name: userName } = session.user;\r\n    const data = await req.json();\r\n    \r\n    // Validate the finance entry data\r\n    const validatedData = createFinanceEntrySchema.parse(data);\r\n    \r\n    // 3. Enforce Authorization (RBAC) for finance entry creation\r\n    let financeData = { ...validatedData };\r\n    \r\n    if (role === Role.BDR) {\r\n      // BDRs can only create finance entries assigned to themselves\r\n      financeData.bdr = userName; // Use the user's name as the BDR\r\n    } else if (role === Role.ADMIN) {\r\n      // Admins can assign finance entries to any BDR\r\n      // Use the provided bdr or assign to themselves if not provided\r\n      if (!financeData.bdr) {\r\n        financeData.bdr = userName;\r\n      }\r\n    } else {\r\n      // Unknown role - deny access\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\r\n    }\r\n    \r\n    // Convert date strings to Date objects\r\n    const processedData = {\r\n      ...financeData,\r\n      invoiceDate: financeData.invoiceDate ? new Date(financeData.invoiceDate) : null,\r\n      dueDate: financeData.dueDate ? new Date(financeData.dueDate) : null,\r\n      exchangeRateDate: financeData.exchangeRateDate ? new Date(financeData.exchangeRateDate) : null,\r\n    };\r\n    \r\n    // Handle automatic USD to GBP conversion if needed\r\n    if (processedData.soldAmount && processedData.soldAmount > 0 && !processedData.gbpAmount) {\r\n      try {\r\n        const rate = await exchangeRateService.getCurrentRate();\r\n        processedData.gbpAmount = exchangeRateService.convertUSDToGBP(processedData.soldAmount, rate);\r\n        processedData.exchangeRate = rate;\r\n        processedData.exchangeRateDate = new Date();\r\n      } catch (error) {\r\n        console.error('Error converting currency:', error);\r\n        // Continue without conversion if API fails\r\n      }\r\n    }\r\n    \r\n    // Create the finance entry\r\n    const financeEntry = await prisma.financeEntry.create({\r\n      data: processedData\r\n    });\r\n\r\n    // Notify finance viewers about new deal\r\n    try {\r\n      const viewers = await prisma.user.findMany({ where: { isActive: true }, select: { id: true, role: true } });\r\n      const eligible = viewers.filter(u => u.role === Role.ADMIN || u.role === Role.MANAGER || u.role === Role.DIRECTOR || u.role === Role.TEAM_LEAD || u.role === Role.BDR);\r\n      const title = 'New Finance Deal Added';\r\n      const message = `${financeEntry.company} • ${financeEntry.status}${financeEntry.gbpAmount ? ` • £${financeEntry.gbpAmount}` : ''}`;\r\n      await Promise.all(\r\n        eligible.map(u => fetch(`${process.env.NEXT_PUBLIC_BASE_URL || ''}/api/reporting/advanced/notifications`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ userId: u.id, type: 'info', title, message, priority: 'high' })\r\n        }).catch(() => null))\r\n      );\r\n    } catch {}\r\n\r\n    return NextResponse.json(financeEntry, { status: 201 });\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error creating finance entry:\", error);\r\n    \r\n    // Handle validation errors\r\n    if (error && typeof error === 'object' && 'name' in error && error.name === \"ZodError\") {\r\n      return NextResponse.json(\r\n        { error: \"Validation error\", details: 'errors' in error ? error.errors : [] },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: \"Failed to create finance entry\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\kpi-targets\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used.","line":5,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { requireRole } from '@/lib/authorize';\r\n\r\nexport const GET = requireRole(['admin','manager'], async function (req: NextRequest) {\r\n  const targets = await prisma.kpiTarget.findMany();\r\n  return NextResponse.json(targets);\r\n});\r\n\r\nexport const PUT = requireRole(['admin'], async function (req: NextRequest) {\r\n  const body = await req.json(); // expects [{name,value}]\r\n  if (!Array.isArray(body)) {\r\n    return NextResponse.json({ error: 'Invalid payload' }, { status: 400 });\r\n  }\r\n  for (const t of body) {\r\n    await prisma.kpiTarget.upsert({\r\n      where: { name: t.name },\r\n      update: { value: t.value },\r\n      create: { name: t.name, value: t.value },\r\n    });\r\n  }\r\n  const targets = await prisma.kpiTarget.findMany();\r\n  return NextResponse.json(targets);\r\n}); ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\leads\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PERMISSIONS' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'session' is assigned a value but never used.","line":144,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5054,5057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5054,5057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5087,5090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5087,5090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":106,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":109,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5115,5118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5115,5118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":180,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6059,6062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6059,6062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7138,7141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7138,7141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from \"@/lib/db\";\r\nimport { updateLeadSchema } from \"@/lib/validations\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { PERMISSIONS, hasPermission } from \"@/lib/permissions\";\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth-options';\r\n\r\ninterface RouteParams {\r\n  params: {\r\n    id: string;\r\n  };\r\n}\r\n\r\n// GET - Fetch a specific lead\r\nexport async function GET(req: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    const leadId = Number(id);\r\n    \r\n    if (isNaN(leadId)) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid lead ID\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const lead = await prisma.lead.findUnique({\r\n      where: { id: leadId },\r\n    });\r\n    \r\n    if (!lead) {\r\n      return NextResponse.json(\r\n        { error: \"Lead not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(lead);\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error fetching lead:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch lead\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT - Update a lead\r\nexport async function PUT(req: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const { id } = params;\r\n    const leadId = Number(id);\r\n    \r\n    if (isNaN(leadId)) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid lead ID\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const data = await req.json();\r\n    \r\n    // Get the existing lead data first\r\n    const existingLead = await prisma.lead.findUnique({\r\n      where: { id: leadId },\r\n    });\r\n    \r\n    if (!existingLead) {\r\n      return NextResponse.json(\r\n        { error: \"Lead not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Check if status is changing\r\n    const statusChanged = existingLead.status !== data.status;\r\n    const previousStatus = existingLead.status;\r\n    const newStatus = data.status;\r\n    \r\n    // Merge the existing data with the partial update\r\n    const mergedData = {\r\n      ...existingLead,\r\n      ...data,\r\n      id: leadId,\r\n    };\r\n    \r\n    // Validate the merged data\r\n    const validatedData = updateLeadSchema.parse(mergedData);\r\n    \r\n    // Update the lead\r\n    const lead = await prisma.lead.update({\r\n      where: { id: leadId },\r\n      data: {\r\n        name: validatedData.name,\r\n        title: validatedData.title,\r\n        bdr: validatedData.bdr,\r\n        company: validatedData.company,\r\n        source: validatedData.source,\r\n        status: validatedData.status,\r\n        link: validatedData.link,\r\n        phone: validatedData.phone,\r\n        notes: validatedData.notes,\r\n        email: validatedData.email,\r\n      },\r\n    });\r\n    \r\n    // If status changed, create an activity log for the status transition\r\n    if (statusChanged) {\r\n      await prisma.activityLog.create({\r\n        data: {\r\n          bdr: lead.bdr || 'Unknown',\r\n          activityType: 'Status_Change',\r\n          description: `Lead status changed from ${previousStatus} to ${newStatus}`,\r\n          previousStatus: previousStatus,\r\n          newStatus: newStatus,\r\n          leadId: leadId,\r\n          timestamp: new Date(),\r\n        },\r\n      });\r\n      \r\n      // If this is a transition from \"Call Booked\" to a completion status (excluding no show/rescheduled),\r\n      // also create a Call_Completed activity log\r\n      if (previousStatus === 'Call Booked' && \r\n          newStatus !== 'Call Booked' && \r\n          !['no show', 'rescheduled', 'No Show', 'Rescheduled'].includes(newStatus.toLowerCase())) {\r\n        await prisma.activityLog.create({\r\n          data: {\r\n            bdr: lead.bdr || 'Unknown',\r\n            activityType: 'Call_Completed',\r\n            description: `Call completed automatically: ${previousStatus} → ${newStatus}`,\r\n            previousStatus: previousStatus,\r\n            newStatus: newStatus,\r\n            leadId: leadId,\r\n            timestamp: new Date(),\r\n          },\r\n        });\r\n      }\r\n    }\r\n\r\n    // Notify finance viewers if notes indicate a deal was added\r\n    try {\r\n      const session = await getServerSession(authOptions);\r\n      const updatedNotes: string = (data?.notes ?? '').toString();\r\n      const previousNotes: string = (existingLead?.notes ?? '').toString();\r\n      const notesChanged = updatedNotes !== previousNotes;\r\n      const dealKeywords = [\r\n        /\\bdeal\\b/i,\r\n        /\\bsold\\b/i,\r\n        /\\bagreement\\b/i,\r\n        /\\binvoice\\b/i,\r\n        /\\bgbp\\b/i,\r\n        /\\bamount\\b/i,\r\n      ];\r\n      const hasDealSignal = notesChanged && dealKeywords.some((re) => re.test(updatedNotes));\r\n      if (hasDealSignal) {\r\n        // Find all users with finance board access (READ on FINANCE)\r\n        const financeUsers = await prisma.user.findMany({\r\n          where: { isActive: true },\r\n          select: { id: true, role: true },\r\n        });\r\n        const recipients = financeUsers\r\n          .filter((u) => hasPermission(u as any, 2 /* Resource.FINANCE */ as any, 1 /* Action.READ */ as any))\r\n          .map((u) => u.id);\r\n        // Emit ephemeral notifications via existing notifications endpoint contract (no DB persistence)\r\n        const title = 'Deal activity on lead notes';\r\n        const msg = `Lead ${lead.name} (${lead.company || 'Unknown'}) notes indicate a deal update.`;\r\n        // Best-effort fire-and-forget post per recipient\r\n        await Promise.all(\r\n          recipients.map((uid) =>\r\n            fetch(`${process.env.NEXT_PUBLIC_BASE_URL || ''}/api/reporting/advanced/notifications`, {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify({ userId: uid, type: 'info', title, message: msg, priority: 'high' }),\r\n            }).catch(() => null)\r\n          )\r\n        );\r\n      }\r\n    } catch (e) {\r\n      // Do not fail lead update on notification error\r\n    }\r\n    \r\n    return NextResponse.json(lead);\r\n    \r\n  } catch (error: any) {\r\n    console.error(\"Error updating lead:\", error);\r\n    \r\n    // Handle validation errors\r\n    if (error.name === \"ZodError\") {\r\n      return NextResponse.json(\r\n        { error: \"Validation error\", details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Handle Prisma errors\r\n    if (error.code === \"P2025\") {\r\n      return NextResponse.json(\r\n        { error: \"Lead not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: \"Failed to update lead\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE - Delete a lead\r\nexport async function DELETE(req: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const { id } = params;\r\n    const leadId = Number(id);\r\n    \r\n    if (isNaN(leadId)) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid lead ID\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    await prisma.lead.delete({\r\n      where: { id: leadId },\r\n    });\r\n    \r\n    return NextResponse.json({ message: \"Lead deleted\" }, { status: 200 });\r\n    \r\n  } catch (error: any) {\r\n    console.error(\"Error deleting lead:\", error);\r\n    \r\n    // Handle Prisma errors\r\n    if (error.code === \"P2025\") {\r\n      return NextResponse.json(\r\n        { error: \"Lead not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: \"Failed to delete lead\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\leads\\bulk-delete\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1092,1095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1092,1095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from \"@/lib/db\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { z } from \"zod\";\r\n\r\nconst bulkDeleteSchema = z.object({\r\n  ids: z.array(z.number()).min(1, \"No IDs provided\"),\r\n});\r\n\r\n// DELETE - Bulk delete leads\r\nexport async function DELETE(req: NextRequest) {\r\n  try {\r\n    // Some environments strip bodies from DELETE; try to parse, otherwise read from query string\r\n    let data: unknown = undefined;\r\n    try {\r\n      data = await req.json();\r\n    } catch {\r\n      // fallback to query param ids=1,2,3\r\n      const { searchParams } = new URL(req.url);\r\n      const idsParam = searchParams.get(\"ids\");\r\n      if (idsParam) {\r\n        data = { ids: idsParam.split(\",\").map((s) => Number(s)).filter((n) => !Number.isNaN(n)) };\r\n      }\r\n    }\r\n\r\n    const { ids } = bulkDeleteSchema.parse(data);\r\n\r\n    const result = await prisma.lead.deleteMany({\r\n      where: { id: { in: ids } },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { message: `Deleted ${result.count} leads`, count: result.count },\r\n      { status: 200 }\r\n    );\r\n  } catch (error: any) {\r\n    if (error.name === \"ZodError\") {\r\n      return NextResponse.json(\r\n        { error: \"Validation error\", details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.error(\"Error bulk deleting leads:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to bulk delete leads\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\leads\\bulk-update\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2761,2764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2761,2764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from \"@/lib/db\";\r\nimport { leadStatusEnum } from \"@/lib/validations\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { z } from \"zod\";\r\n\r\nconst bulkUpdateSchema = z.object({\r\n  ids: z.array(z.number()),\r\n  status: z.enum(leadStatusEnum),\r\n});\r\n\r\n// PATCH - Bulk update leads status\r\nexport async function PATCH(req: NextRequest) {\r\n  try {\r\n    const data = await req.json();\r\n    \r\n    // Validate the data\r\n    const { ids, status } = bulkUpdateSchema.parse(data);\r\n    \r\n    // No IDs provided\r\n    if (ids.length === 0) {\r\n      return NextResponse.json(\r\n        { error: \"No lead IDs provided\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Get existing leads to track status changes\r\n    const existingLeads = await prisma.lead.findMany({\r\n      where: { id: { in: ids } },\r\n      select: { id: true, status: true, bdr: true }\r\n    });\r\n    \r\n    // Update all leads with the provided IDs\r\n    const result = await prisma.lead.updateMany({\r\n      where: {\r\n        id: { in: ids },\r\n      },\r\n      data: { status },\r\n    });\r\n    \r\n    // Create activity logs for status transitions\r\n    const activityLogs = [];\r\n    for (const lead of existingLeads) {\r\n      if (lead.status !== status) {\r\n        // Create status change activity log\r\n        activityLogs.push({\r\n          bdr: lead.bdr || 'Unknown',\r\n          activityType: 'Status_Change',\r\n          description: `Lead status changed from ${lead.status} to ${status}`,\r\n          previousStatus: lead.status,\r\n          newStatus: status,\r\n          leadId: lead.id,\r\n          timestamp: new Date(),\r\n        });\r\n        \r\n        // If this is a transition from \"Call Booked\" to a completion status (excluding no show/rescheduled),\r\n        // also create a Call_Completed activity log\r\n        if (lead.status === 'Call Booked' && \r\n            status !== 'Call Booked' && \r\n            !['no show', 'rescheduled', 'No Show', 'Rescheduled'].includes(status.toLowerCase())) {\r\n          activityLogs.push({\r\n            bdr: lead.bdr || 'Unknown',\r\n            activityType: 'Call_Completed',\r\n            description: `Call completed automatically: ${lead.status} → ${status}`,\r\n            previousStatus: lead.status,\r\n            newStatus: status,\r\n            leadId: lead.id,\r\n            timestamp: new Date(),\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Create all activity logs in a transaction\r\n    if (activityLogs.length > 0) {\r\n      await prisma.activityLog.createMany({\r\n        data: activityLogs,\r\n      });\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      message: `Updated ${result.count} leads`,\r\n      count: result.count,\r\n      activityLogsCreated: activityLogs.length,\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error(\"Error bulk updating leads:\", error);\r\n    \r\n    // Handle validation errors\r\n    if (error.name === \"ZodError\") {\r\n      return NextResponse.json(\r\n        { error: \"Validation error\", details: error.errors },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: \"Failed to update leads\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\leads\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getServerSession' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authOptions' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAuthenticatedUser' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createErrorResponse' is defined but never used.","line":8,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createSuccessResponse' is defined but never used.","line":8,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasPermission' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDataAccessFilter' is defined but never used.","line":9,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":44},{"ruleId":"prefer-const","severity":2,"message":"'baseQuery' is never reassigned. Use 'const' instead.","line":26,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":26,"endColumn":23,"fix":{"range":[1304,1408],"text":"const baseQuery: any = {\r\n      skip,\r\n      take: pageSize,\r\n      orderBy: { addedDate: 'desc' }\r\n    };"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1319,1322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1319,1322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'where' is never reassigned. Use 'const' instead.","line":33,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":33,"endColumn":19,"fix":{"range":[1456,1476],"text":"const where: any = {};"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1467,1470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1467,1470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3491,3494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3491,3494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/lib/auth-options\";\r\nimport { prisma } from \"@/lib/db\";\r\nimport { createLeadSchema } from \"@/lib/validations\";\r\nimport { NextRequest } from \"next/server\";\r\nimport { Resource, Action, DuplicateAction } from \"@prisma/client\";\r\nimport { getAuthenticatedUser, createErrorResponse, createSuccessResponse } from \"@/lib/auth-api\";\r\nimport { hasPermission, getDataAccessFilter } from \"@/lib/permissions\";\r\nimport { SecurityService, withSecurity } from \"@/lib/security\";\r\nimport { duplicateDetectionService } from \"@/lib/duplicate-detection\";\r\n\r\n// GET - List leads with filters\r\nexport async function GET(req: NextRequest) {\r\n  return withSecurity(Resource.LEADS, Action.READ, async (context) => {\r\n    const { searchParams } = new URL(req.url);\r\n    const search = searchParams.get('search') || '';\r\n    const status = searchParams.get('status') || undefined;\r\n    const source = searchParams.get('source') || undefined;\r\n    const bdr = searchParams.get('bdr') || undefined;\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const pageSize = parseInt(searchParams.get('pageSize') || '10');\r\n    const skip = (page - 1) * pageSize;\r\n    \r\n    // Build base query\r\n    let baseQuery: any = {\r\n      skip,\r\n      take: pageSize,\r\n      orderBy: { addedDate: 'desc' }\r\n    };\r\n\r\n    // Build where clause with filters\r\n    let where: any = {};\r\n    \r\n    if (search) {\r\n      where.OR = [\r\n        { name: { contains: search, mode: 'insensitive' } },\r\n        { company: { contains: search, mode: 'insensitive' } },\r\n        { email: { contains: search, mode: 'insensitive' } },\r\n      ];\r\n    }\r\n    if (status) where.status = status;\r\n    if (source) where.source = source;\r\n    \r\n    // Apply BDR filter for users with appropriate permissions\r\n    if (bdr && (context.permissions.includes(`${Resource.LEADS}:${Action.VIEW_ALL}`) || context.permissions.includes(`${Resource.LEADS}:${Action.VIEW_TEAM}`))) {\r\n      const targetUser = await prisma.user.findFirst({ where: { name: bdr }, select: { id: true } });\r\n      if (targetUser) {\r\n        where.bdrId = targetUser.id;\r\n      } else {\r\n        where.bdrId = '___NO_MATCH___';\r\n      }\r\n    }\r\n\r\n    baseQuery.where = where;\r\n    \r\n    // Apply row-level security\r\n    const secureQuery = SecurityService.buildSecureQuery(baseQuery, context, Resource.LEADS);\r\n    \r\n    // Get total count with same security restrictions\r\n    const countQuery = SecurityService.buildSecureQuery({ where }, context, Resource.LEADS);\r\n    const total = await prisma.lead.count(countQuery);\r\n    \r\n    // Get leads with pipeline information\r\n    const leads = await prisma.lead.findMany({\r\n      ...secureQuery,\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        title: true,\r\n        addedDate: true,\r\n        company: true,\r\n        source: true,\r\n        status: true,\r\n        link: true,\r\n        phone: true,\r\n        notes: true,\r\n        email: true,\r\n        bdr: { select: { name: true } },\r\n        pipelineItems: {\r\n          select: {\r\n            id: true,\r\n            category: true,\r\n            status: true,\r\n            lastUpdated: true,\r\n          },\r\n          take: 1,\r\n          orderBy: { lastUpdated: 'desc' }\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Transform the response\r\n    const transformedLeads = leads.map(lead => {\r\n      const { pipelineItems, bdr, ...rest } = lead as any;\r\n      const latestItem = pipelineItems[0];\r\n      return {\r\n        ...rest,\r\n        // Derive lastUpdated from latest pipeline item if available, otherwise fall back to addedDate\r\n        lastUpdated: latestItem?.lastUpdated || rest.addedDate,\r\n        bdr: bdr?.name || bdr || null,\r\n        inPipeline: pipelineItems.length > 0,\r\n        pipelineStatus: latestItem?.status || null,\r\n        pipelineCategory: latestItem?.category || null,\r\n      };\r\n    });\r\n\r\n    const totalPages = Math.ceil(total / pageSize);\r\n    \r\n    return new NextResponse(JSON.stringify({\r\n      leads: transformedLeads,\r\n      total,\r\n      page,\r\n      pageSize,\r\n      totalPages,\r\n    }), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Cache-Control': 'private, max-age=30, stale-while-revalidate=60',\r\n      },\r\n    });\r\n  }, req);\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  return withSecurity(Resource.LEADS, Action.CREATE, async (context) => {\r\n    const data = await req.json();\r\n    \r\n    // Validate the request body\r\n    const validatedData = createLeadSchema.parse(data);\r\n    \r\n    // Determine BDR assignment based on permissions\r\n    let bdrId = context.userId; // Default to current user\r\n    \r\n    if (validatedData.bdrId && context.permissions.includes(`${Resource.LEADS}:${Action.VIEW_ALL}`)) {\r\n      // Users with VIEW_ALL permission can assign to any BDR\r\n      bdrId = validatedData.bdrId;\r\n    }\r\n    \r\n    // Create the lead\r\n    const lead = await prisma.lead.create({\r\n      data: {\r\n        name: validatedData.name,\r\n        title: validatedData.title,\r\n        bdrId: bdrId,\r\n        company: validatedData.company,\r\n        source: validatedData.source,\r\n        status: validatedData.status,\r\n        link: validatedData.link,\r\n        phone: validatedData.phone,\r\n        notes: validatedData.notes,\r\n        email: validatedData.email,\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            territory: {\r\n              select: { name: true }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Log the creation\r\n    await SecurityService.logAction({\r\n      action: 'CREATE',\r\n      resource: 'LEADS',\r\n      resourceId: lead.id.toString(),\r\n      details: {\r\n        leadName: lead.name,\r\n        company: lead.company,\r\n        assignedTo: bdrId\r\n      }\r\n    }, req);\r\n    \r\n    // Fire-and-forget: record a duplicate awareness warning for reporting if this company/email was recently active in other owners\r\n    if (lead.company || lead.email) {\r\n      duplicateDetectionService\r\n        .checkForDuplicates(\r\n          { name: lead.name, company: lead.company || undefined, email: lead.email || undefined, phone: lead.phone || undefined, title: lead.title || undefined, linkedinUrl: lead.link || undefined },\r\n          bdrId,\r\n          DuplicateAction.LEAD_CREATE\r\n        )\r\n        .catch(() => {});\r\n    }\r\n    return NextResponse.json(lead, { status: 201 });\r\n  }, req);\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\[id]\\move-to-sublist\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\[id]\\move\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3074,3077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3074,3077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/db\";\nimport { pipelineCategoryEnum } from \"@/lib/validations\";\nimport { z } from \"zod\";\n\ninterface RouteParams {\n  params: {\n    id: string;\n  };\n}\n\n// Schema for validation\nconst movePipelineItemSchema = z.object({\n  newCategory: z.enum(pipelineCategoryEnum),\n  newStatus: z.string(),\n});\n\nexport async function PATCH(req: NextRequest, { params }: RouteParams) {\n  try {\n    const resolvedParams = await params;\n    const id = resolvedParams.id;\n    const pipelineId = Number(id);\n    \n    if (isNaN(pipelineId)) {\n      return NextResponse.json({ error: \"Invalid pipeline item ID\" }, { status: 400 });\n    }\n    \n    // Find the pipeline item first to get current values\n    const pipelineItem = await prisma.pipelineItem.findUnique({\n      where: { id: pipelineId },\n    });\n    \n    if (!pipelineItem) {\n      return NextResponse.json({ error: \"Pipeline item not found\" }, { status: 404 });\n    }\n    \n    // Extract and validate request data\n    const data = await req.json();\n    const validatedData = movePipelineItemSchema.parse(data);\n    \n    // Store previous values for logging\n    const previousCategory = pipelineItem.category;\n    const previousStatus = pipelineItem.status;\n    \n    // Update the pipeline item\n    const updatedPipelineItem = await prisma.pipelineItem.update({\n      where: { id: pipelineId },\n      data: {\n        category: validatedData.newCategory,\n        status: validatedData.newStatus,\n        lastUpdated: new Date(),\n      },\n    });\n    \n    // Create activity log entry for pipeline move\n    await prisma.activityLog.create({\n      data: {\n        bdr: pipelineItem.bdr,\n        activityType: \"Pipeline_Move\",\n        description: `Moved from ${previousCategory} (${previousStatus}) to ${validatedData.newCategory} (${validatedData.newStatus})`,\n        pipelineItemId: pipelineId,\n        previousCategory,\n        newCategory: validatedData.newCategory,\n        previousStatus,\n        newStatus: validatedData.newStatus,\n      },\n    });\n    \n    // If this is a transition from \"Call Booked\" to a completion status (excluding no show/rescheduled),\n    // also create a Call_Completed activity log\n    if (previousStatus === 'Call Booked' && \n        validatedData.newStatus !== 'Call Booked' && \n        !['no show', 'rescheduled', 'No Show', 'Rescheduled'].includes(validatedData.newStatus.toLowerCase())) {\n      await prisma.activityLog.create({\n        data: {\n          bdr: pipelineItem.bdr,\n          activityType: 'Call_Completed',\n          description: `Call completed automatically: ${previousStatus} → ${validatedData.newStatus}`,\n          previousStatus: previousStatus,\n          newStatus: validatedData.newStatus,\n          previousCategory: previousCategory,\n          newCategory: validatedData.newCategory,\n          pipelineItemId: pipelineId,\n          leadId: pipelineItem.leadId,\n          timestamp: new Date(),\n        },\n      });\n    }\n    \n    return NextResponse.json(updatedPipelineItem);\n  } catch (error: any) {\n    console.error(\"Error moving pipeline item:\", error);\n    return NextResponse.json(\n      { error: error.message || \"Failed to move pipeline item\" },\n      { status: 400 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5213,5216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5213,5216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from \"@/lib/db\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\n\r\ninterface RouteParams {\r\n  params: {\r\n    id: string;\r\n  };\r\n}\r\n\r\n// GET - Fetch a specific pipeline item\r\nexport async function GET(req: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    const pipelineItemId = Number(id);\r\n    \r\n    if (isNaN(pipelineItemId)) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid pipeline item ID\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const pipelineItem = await prisma.pipelineItem.findUnique({\r\n      where: { id: pipelineItemId },\r\n      include: {\r\n        children: true,\r\n      },\r\n    });\r\n    \r\n    if (!pipelineItem) {\r\n      return NextResponse.json(\r\n        { error: \"Pipeline item not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(pipelineItem);\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error fetching pipeline item:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch pipeline item\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT - Update a pipeline item\r\nexport async function PUT(req: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    const pipelineItemId = Number(id);\r\n    \r\n    if (isNaN(pipelineItemId)) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid pipeline item ID\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const data = await req.json();\r\n    \r\n    // Get the existing pipeline item first\r\n    const existingItem = await prisma.pipelineItem.findUnique({\r\n      where: { id: pipelineItemId },\r\n    });\r\n    \r\n    if (!existingItem) {\r\n      return NextResponse.json(\r\n        { error: \"Pipeline item not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    // Check if status is changing\r\n    const statusChanged = existingItem.status !== data.status;\r\n    const previousStatus = existingItem.status;\r\n    const newStatus = data.status;\r\n    \r\n    // Update the pipeline item with all possible fields\r\n    const pipelineItem = await prisma.pipelineItem.update({\r\n      where: { id: pipelineItemId },\r\n      data: {\r\n        name: data.name,\r\n        company: data.company,\r\n        title: data.title,\r\n        category: data.category,\r\n        status: data.status,\r\n        value: data.value,\r\n        probability: data.probability,\r\n        expectedCloseDate: data.expectedCloseDate,\r\n        callDate: data.callDate,\r\n        link: data.link,\r\n        phone: data.phone,\r\n        notes: data.notes,\r\n        email: data.email,\r\n        lastUpdated: new Date(),\r\n      },\r\n      include: {\r\n        lead: true,\r\n        activityLogs: {\r\n          orderBy: {\r\n            timestamp: 'desc'\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    // If status changed, create an activity log for the status transition\r\n    if (statusChanged) {\r\n      await prisma.activityLog.create({\r\n        data: {\r\n          bdr: pipelineItem.bdr,\r\n          activityType: 'Status_Change',\r\n          description: `Status changed from ${previousStatus} to ${newStatus}`,\r\n          previousStatus: previousStatus,\r\n          newStatus: newStatus,\r\n          previousCategory: existingItem.category,\r\n          newCategory: data.category,\r\n          pipelineItemId: pipelineItemId,\r\n          leadId: pipelineItem.leadId,\r\n          timestamp: new Date(),\r\n        },\r\n      });\r\n      \r\n      // If this is a transition from \"Call Booked\" to a completion status (excluding no show/rescheduled),\r\n      // also create a Call_Completed activity log\r\n      if (previousStatus === 'Call Booked' && \r\n          newStatus !== 'Call Booked' && \r\n          !['no show', 'rescheduled', 'No Show', 'Rescheduled'].includes(newStatus.toLowerCase())) {\r\n        await prisma.activityLog.create({\r\n          data: {\r\n            bdr: pipelineItem.bdr,\r\n            activityType: 'Call_Completed',\r\n            description: `Call completed automatically: ${previousStatus} → ${newStatus}`,\r\n            previousStatus: previousStatus,\r\n            newStatus: newStatus,\r\n            previousCategory: existingItem.category,\r\n            newCategory: data.category,\r\n            pipelineItemId: pipelineItemId,\r\n            leadId: pipelineItem.leadId,\r\n            timestamp: new Date(),\r\n          },\r\n        });\r\n      }\r\n\r\n    }\r\n    \r\n    return NextResponse.json(pipelineItem);\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error updating pipeline item:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to update pipeline item\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(req: NextRequest, { params }: RouteParams) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    const pipelineId = Number(id);\r\n    \r\n    if (isNaN(pipelineId)) {\r\n      return NextResponse.json({ error: \"Invalid pipeline item ID\" }, { status: 400 });\r\n    }\r\n    \r\n    await prisma.pipelineItem.delete({\r\n      where: { id: pipelineId },\r\n    });\r\n    \r\n    return NextResponse.json({ success: true });\r\n  } catch (error: any) {\r\n    console.error(\"Error deleting pipeline item:\", error);\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to delete pipeline item\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\convert-all\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'req' is defined but never used.","line":51,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1628,1631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1628,1631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1654,1657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1654,1657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4619,4622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4619,4622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5245,5248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5245,5248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5381,5384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5381,5384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5820,5823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5820,5823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/db\";\r\n\r\n// Function to determine pipeline category and status based on lead status\r\nfunction determinePipelineDetails(leadStatus: string): { category: string; status: string } {\r\n  switch (leadStatus) {\r\n    case \"Proposal - Profile\":\r\n      return {\r\n        category: \"Pipeline\",\r\n        status: \"Proposal - Profile\"\r\n      };\r\n    case \"Proposal - Media Sales\":\r\n      return {\r\n        category: \"Pipeline\",\r\n        status: \"Proposal - Media\"\r\n      };\r\n    case \"Agreement - Profile\":\r\n      return {\r\n        category: \"Pipeline\",\r\n        status: \"Agreement - Profile\"\r\n      };\r\n    case \"List Out\":\r\n      return {\r\n        category: \"Lists_Media_QA\",\r\n        status: \"List Out\"\r\n      };\r\n    case \"Sold\":\r\n      return {\r\n        category: \"Lists_Media_QA\",\r\n        status: \"Sold\"\r\n      };\r\n    case \"Call Booked\":\r\n      return {\r\n        category: \"Calls\",\r\n        status: \"Call Booked\"\r\n      };\r\n    case \"DECLINED\":\r\n      return {\r\n        category: \"Declined_Rescheduled\",\r\n        status: \"Declined_Rescheduled\"\r\n      };\r\n    default:\r\n      // For \"BDR Followed Up\" and \"Passed Over\", start with a call\r\n      return {\r\n        category: \"Calls\",\r\n        status: \"Call Proposed\"\r\n      };\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    // Get all leads that have already been converted to pipeline\r\n    const convertedLeadIds = await prisma.$queryRaw`\r\n      SELECT \"leadId\" FROM \"PipelineItem\" WHERE \"leadId\" IS NOT NULL\r\n    `;\r\n    \r\n    const leadIdsToExclude = (convertedLeadIds as any[])\r\n      .map((item: any) => item.leadId)\r\n      .filter(Boolean);\r\n    \r\n    // Find all leads that have BDRs assigned and are not in pipeline\r\n    const leads = await prisma.lead.findMany({\r\n      where: {\r\n        bdr: { not: null },\r\n        NOT: {\r\n          id: { in: leadIdsToExclude }\r\n        }\r\n      },\r\n    });\r\n    \r\n    if (leads.length === 0) {\r\n      return NextResponse.json({ \r\n        message: \"No leads found to convert\" \r\n      }, { status: 200 });\r\n    }\r\n\r\n    // Create pipeline items for each lead\r\n    const createdItems = [];\r\n    \r\n    for (const lead of leads) {\r\n      try {\r\n        // Determine pipeline category and status based on lead status\r\n        const { category, status } = determinePipelineDetails(lead.status);\r\n\r\n        // Create pipeline item\r\n        const pipelineItemData = {\r\n          name: lead.name,\r\n          title: lead.title,\r\n          bdr: lead.bdr!, // We know it's not null from the query\r\n          company: lead.company,\r\n          category: category,\r\n          status: status,\r\n          link: lead.link,\r\n          phone: lead.phone,\r\n          notes: lead.notes,\r\n          email: lead.email,\r\n          leadId: lead.id,\r\n          lastUpdated: new Date(),\r\n        };\r\n\r\n        // Use raw SQL to create pipeline item\r\n        const result = await prisma.$queryRaw`\r\n          INSERT INTO \"PipelineItem\" (\r\n            \"name\", \"title\", \"bdr\", \"company\", \"category\", \"status\", \r\n            \"link\", \"phone\", \"notes\", \"email\", \"leadId\", \"lastUpdated\", \"addedDate\"\r\n          ) VALUES (\r\n            ${pipelineItemData.name},\r\n            ${pipelineItemData.title},\r\n            ${pipelineItemData.bdr},\r\n            ${pipelineItemData.company},\r\n            ${pipelineItemData.category},\r\n            ${pipelineItemData.status},\r\n            ${pipelineItemData.link},\r\n            ${pipelineItemData.phone},\r\n            ${pipelineItemData.notes},\r\n            ${pipelineItemData.email},\r\n            ${pipelineItemData.leadId},\r\n            ${pipelineItemData.lastUpdated},\r\n            ${new Date()}\r\n          )\r\n          RETURNING *\r\n        `;\r\n        \r\n        const pipelineItem = Array.isArray(result) ? result[0] : result;\r\n\r\n        // Transfer activity logs (updates) from lead to pipeline item\r\n        const activityLogs = await prisma.activityLog.findMany({\r\n          where: {\r\n            leadId: lead.id,\r\n            activityType: 'BDR_Update'\r\n          },\r\n          orderBy: { timestamp: 'asc' }\r\n        });\r\n        \r\n        // Create new activity logs for the pipeline item with the same content\r\n        if (activityLogs.length > 0) {\r\n          await Promise.all(\r\n            activityLogs.map(log =>\r\n              prisma.activityLog.create({\r\n                data: {\r\n                  bdr: log.bdr,\r\n                  activityType: log.activityType,\r\n                  description: log.description,\r\n                  notes: log.notes,\r\n                  pipelineItemId: (pipelineItem as any).id,\r\n                  timestamp: log.timestamp, // Preserve original timestamp\r\n                },\r\n              })\r\n            )\r\n          );\r\n        }\r\n\r\n        // Use raw SQL to create activity log\r\n        await prisma.$queryRaw`\r\n          INSERT INTO \"ActivityLog\" (\r\n            \"bdr\", \"activityType\", \"description\", \"leadId\", \"pipelineItemId\",\r\n            \"newCategory\", \"newStatus\", \"notes\", \"timestamp\"\r\n          ) VALUES (\r\n            ${lead.bdr!},\r\n            ${'Lead_Converted'},\r\n            ${`Converted lead to ${category} (${status})`},\r\n            ${lead.id},\r\n            ${(pipelineItem as any).id},\r\n            ${category},\r\n            ${status},\r\n            ${`Lead converted to pipeline item with ID: ${(pipelineItem as any).id}`},\r\n            ${new Date()}\r\n          )\r\n        `;\r\n\r\n        createdItems.push(pipelineItem);\r\n      } catch (error) {\r\n        console.error(`Error converting lead ${lead.id}:`, error);\r\n        // Continue with next lead\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      message: `Converted ${createdItems.length} leads to pipeline items`,\r\n      items: createdItems\r\n    }, { status: 201 });\r\n  } catch (error: any) {\r\n    console.error(\"Error converting leads to pipeline items:\", error);\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to convert leads\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\convert-lead\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[415,418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[415,418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3072,3075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3072,3075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/db\";\r\nimport { z } from \"zod\";\r\nimport { allPipelineStatusValues, pipelineCategoryEnum } from \"@/lib/validations\";\r\n\r\n// Schema for validation\r\nconst convertLeadSchema = z.object({\r\n  leadId: z.number(),\r\n  category: z.enum(pipelineCategoryEnum),\r\n  status: z.string().refine(value => allPipelineStatusValues.includes(value as any), {\r\n    message: \"Invalid status for pipeline item\",\r\n  }),\r\n});\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const data = await req.json();\r\n    \r\n    // Validate the request body\r\n    const validatedData = convertLeadSchema.parse(data);\r\n    \r\n    // Find the lead\r\n    const lead = await prisma.lead.findUnique({\r\n      where: { id: validatedData.leadId },\r\n    });\r\n    \r\n    if (!lead) {\r\n      return NextResponse.json({ error: \"Lead not found\" }, { status: 404 });\r\n    }\r\n\r\n    // Check if BDR is assigned\r\n    if (!lead.bdr) {\r\n      return NextResponse.json({ error: \"A BDR must be assigned to this lead before moving to pipeline\" }, { status: 400 });\r\n    }\r\n    \r\n    // Create a pipeline item from the lead\r\n    const pipelineItem = await prisma.pipelineItem.create({\r\n      data: {\r\n        name: lead.name,\r\n        title: lead.title,\r\n        bdr: lead.bdr, // BDR is required in pipeline\r\n        company: lead.company,\r\n        category: validatedData.category,\r\n        status: validatedData.status,\r\n        link: lead.link,\r\n        phone: lead.phone,\r\n        notes: lead.notes,\r\n        email: lead.email,\r\n        leadId: lead.id,\r\n        lastUpdated: new Date(),\r\n      },\r\n    });\r\n    \r\n    // Transfer activity logs (updates) from lead to pipeline item\r\n    const activityLogs = await prisma.activityLog.findMany({\r\n      where: {\r\n        leadId: lead.id,\r\n        activityType: 'BDR_Update'\r\n      },\r\n      orderBy: { timestamp: 'asc' }\r\n    });\r\n    \r\n    // Create new activity logs for the pipeline item with the same content\r\n    if (activityLogs.length > 0) {\r\n      await Promise.all(\r\n        activityLogs.map(log =>\r\n          prisma.activityLog.create({\r\n            data: {\r\n              bdr: log.bdr,\r\n              activityType: log.activityType,\r\n              description: log.description,\r\n              notes: log.notes,\r\n              pipelineItemId: pipelineItem.id,\r\n              timestamp: log.timestamp, // Preserve original timestamp\r\n            },\r\n          })\r\n        )\r\n      );\r\n    }\r\n    \r\n    // Log the activity\r\n    await prisma.activityLog.create({\r\n      data: {\r\n        bdr: lead.bdr,\r\n        activityType: \"Lead_Converted\",\r\n        description: `Converted lead to ${validatedData.category} (${validatedData.status})`,\r\n        leadId: lead.id,\r\n        pipelineItemId: pipelineItem.id,\r\n        newCategory: validatedData.category,\r\n        newStatus: validatedData.status,\r\n        notes: `Lead converted to pipeline item with ID: ${pipelineItem.id}`\r\n      },\r\n    });\r\n    \r\n    return NextResponse.json(pipelineItem, { status: 201 });\r\n  } catch (error: any) {\r\n    console.error(\"Error converting lead to pipeline item:\", error);\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to convert lead\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\convert-leads\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'leadStatusEnum' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pipelineStatusEnum' is defined but never used.","line":4,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":66},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5053,5056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5053,5056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/db\";\r\nimport { z } from \"zod\";\r\nimport { leadStatusEnum, pipelineCategoryEnum, pipelineStatusEnum } from \"@/lib/validations\";\r\n\r\n// Schema for validation\r\nconst bulkConvertLeadSchema = z.object({\r\n  leadIds: z.array(z.number()),\r\n});\r\n\r\n// Function to determine pipeline category and status based on lead status\r\nfunction determinePipelineDetails(leadStatus: string): { category: string; status: string } {\r\n  switch (leadStatus) {\r\n    case \"Proposal - Profile\":\r\n      return {\r\n        category: \"Pipeline\",\r\n        status: \"Proposal - Profile\"\r\n      };\r\n    case \"Proposal - Media Sales\":\r\n      return {\r\n        category: \"Pipeline\",\r\n        status: \"Proposal - Media\"\r\n      };\r\n    case \"Agreement - Profile\":\r\n      return {\r\n        category: \"Pipeline\",\r\n        status: \"Agreement - Profile\"\r\n      };\r\n    case \"List Out\":\r\n      return {\r\n        category: \"Lists_Media_QA\",\r\n        status: \"List Out\"\r\n      };\r\n    case \"Sold\":\r\n      return {\r\n        category: \"Lists_Media_QA\",\r\n        status: \"Sold\"\r\n      };\r\n    case \"Call Booked\":\r\n      return {\r\n        category: \"Calls\",\r\n        status: \"Call Booked\"\r\n      };\r\n    case \"DECLINED\":\r\n      return {\r\n        category: \"Declined_Rescheduled\",\r\n        status: \"Declined_Rescheduled\"\r\n      };\r\n    default:\r\n      // For \"BDR Followed Up\" and \"Passed Over\", start with a call\r\n      return {\r\n        category: \"Calls\",\r\n        status: \"Call Proposed\"\r\n      };\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const data = await req.json();\r\n    \r\n    // Validate the request body\r\n    const validatedData = bulkConvertLeadSchema.parse(data);\r\n    \r\n    // Find all leads\r\n    const leads = await prisma.lead.findMany({\r\n      where: { \r\n        id: { in: validatedData.leadIds },\r\n        bdr: { not: null } // Ensure all leads have BDRs assigned\r\n      },\r\n    });\r\n    \r\n    if (leads.length === 0) {\r\n      return NextResponse.json({ error: \"No valid leads found\" }, { status: 404 });\r\n    }\r\n\r\n    if (leads.length !== validatedData.leadIds.length) {\r\n      return NextResponse.json({ \r\n        error: \"Some leads were not found or don't have BDRs assigned\" \r\n      }, { status: 400 });\r\n    }\r\n    \r\n    // Create pipeline items in a transaction\r\n    const result = await prisma.$transaction(async (tx) => {\r\n      const pipelineItems = await Promise.all(\r\n        leads.map(async (lead) => {\r\n          // Determine pipeline category and status based on lead status\r\n          const { category, status } = determinePipelineDetails(lead.status);\r\n\r\n          // Create pipeline item\r\n          const pipelineItem = await tx.pipelineItem.create({\r\n            data: {\r\n              name: lead.name,\r\n              title: lead.title,\r\n              bdr: lead.bdr!, // We know it's not null from the query\r\n              company: lead.company,\r\n              category: category as typeof pipelineCategoryEnum[number],\r\n              status: status,\r\n              link: lead.link,\r\n              phone: lead.phone,\r\n              notes: lead.notes,\r\n              email: lead.email,\r\n              leadId: lead.id,\r\n              lastUpdated: new Date(),\r\n            },\r\n          });\r\n\r\n          // Transfer activity logs (updates) from lead to pipeline item\r\n          const activityLogs = await tx.activityLog.findMany({\r\n            where: {\r\n              leadId: lead.id,\r\n              activityType: 'BDR_Update'\r\n            },\r\n            orderBy: { timestamp: 'asc' }\r\n          });\r\n          \r\n          // Create new activity logs for the pipeline item with the same content\r\n          if (activityLogs.length > 0) {\r\n            await Promise.all(\r\n              activityLogs.map(log =>\r\n                tx.activityLog.create({\r\n                  data: {\r\n                    bdr: log.bdr,\r\n                    activityType: log.activityType,\r\n                    description: log.description,\r\n                    notes: log.notes,\r\n                    pipelineItemId: pipelineItem.id,\r\n                    timestamp: log.timestamp, // Preserve original timestamp\r\n                  },\r\n                })\r\n              )\r\n            );\r\n          }\r\n\r\n          // Log the activity\r\n          await tx.activityLog.create({\r\n            data: {\r\n              bdr: lead.bdr!,\r\n              activityType: \"Lead_Converted\",\r\n              description: `Converted lead to ${category} (${status})`,\r\n              leadId: lead.id,\r\n              pipelineItemId: pipelineItem.id,\r\n              newCategory: category,\r\n              newStatus: status,\r\n              notes: `Lead converted to pipeline item with ID: ${pipelineItem.id}`\r\n            },\r\n          });\r\n\r\n          return pipelineItem;\r\n        })\r\n      );\r\n\r\n      return pipelineItems;\r\n    });\r\n    \r\n    return NextResponse.json({\r\n      message: `Converted ${result.length} leads to pipeline items`,\r\n      items: result\r\n    }, { status: 201 });\r\n  } catch (error: any) {\r\n    console.error(\"Error converting leads to pipeline items:\", error);\r\n    return NextResponse.json(\r\n      { error: error.message || \"Failed to convert leads\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[956,959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[956,959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1518,1521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1518,1521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2250,2253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2250,2253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2256,2259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2256,2259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { PrismaClient, Resource, Action } from '@prisma/client';\r\nimport { createSublistSchema } from '@/lib/validations';\r\nimport { SecurityService, withSecurity } from '@/lib/security';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// GET - List pipeline items with filters (read-only)\r\nexport async function GET(req: NextRequest) {\r\n  return withSecurity(Resource.PIPELINE, Action.READ, async (context) => {\r\n    const { searchParams } = new URL(req.url);\r\n    const search = (searchParams.get('search') || '').trim();\r\n    const category = searchParams.get('category') || undefined;\r\n    const status = searchParams.get('status') || undefined;\r\n    const bdr = searchParams.get('bdr') || undefined;\r\n    const page = parseInt(searchParams.get('page') || '1', 10);\r\n    const pageSize = parseInt(searchParams.get('pageSize') || '50', 10);\r\n    const skip = (page - 1) * pageSize;\r\n\r\n    const where: any = {};\r\n    if (search) {\r\n      where.OR = [\r\n        { name: { contains: search, mode: 'insensitive' } },\r\n        { company: { contains: search, mode: 'insensitive' } },\r\n        { email: { contains: search, mode: 'insensitive' } },\r\n      ];\r\n    }\r\n    if (category) where.category = category;\r\n    if (status) where.status = status;\r\n\r\n    if (bdr) {\r\n      const targetUser = await prisma.user.findFirst({ where: { name: bdr }, select: { id: true } });\r\n      where.bdrId = targetUser ? targetUser.id : '___NO_MATCH___';\r\n    }\r\n\r\n    const baseQuery: any = {\r\n      where,\r\n      skip,\r\n      take: pageSize,\r\n      orderBy: { lastUpdated: 'desc' },\r\n      include: {\r\n        bdr: { select: { name: true, territoryId: true } },\r\n        children: {\r\n          orderBy: { sortOrder: 'asc' },\r\n          include: { bdr: { select: { name: true, territoryId: true } } },\r\n        },\r\n      },\r\n    };\r\n\r\n    const secureQuery = SecurityService.buildSecureQuery(baseQuery, context, Resource.PIPELINE);\r\n    const countQuery = SecurityService.buildSecureQuery({ where }, context, Resource.PIPELINE);\r\n\r\n    const [itemsRaw, total] = await Promise.all([\r\n      prisma.pipelineItem.findMany(secureQuery),\r\n      prisma.pipelineItem.count(countQuery),\r\n    ]);\r\n\r\n    const mapItem = (item: any): any => ({\r\n      id: item.id,\r\n      name: item.name,\r\n      title: item.title,\r\n      addedDate: item.addedDate,\r\n      lastUpdated: item.lastUpdated,\r\n      bdr: item.bdr?.name || null,\r\n      company: item.company,\r\n      category: item.category,\r\n      status: item.status,\r\n      value: item.value,\r\n      probability: item.probability,\r\n      expectedCloseDate: item.expectedCloseDate,\r\n      callDate: item.callDate,\r\n      link: item.link,\r\n      phone: item.phone,\r\n      notes: item.notes,\r\n      email: item.email,\r\n      leadId: item.leadId,\r\n      parentId: item.parentId,\r\n      isSublist: item.isSublist,\r\n      sublistName: item.sublistName,\r\n      sortOrder: item.sortOrder,\r\n      partnerListSize: item.partnerListSize,\r\n      partnerListSentDate: item.partnerListSentDate,\r\n      firstSaleDate: item.firstSaleDate,\r\n      totalSalesFromList: item.totalSalesFromList,\r\n      children: Array.isArray(item.children) ? item.children.map(mapItem) : [],\r\n    });\r\n\r\n    const items = itemsRaw.map(mapItem);\r\n    const totalPages = Math.ceil(total / pageSize);\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({ items, total, page, pageSize, totalPages }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Cache-Control': 'private, max-age=15, stale-while-revalidate=30',\r\n        },\r\n      }\r\n    );\r\n  }, req);\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    \r\n    // Validate the request body\r\n    const validatedData = createSublistSchema.parse(body);\r\n    \r\n    // Create the sublist\r\n    const sublist = await prisma.pipelineItem.create({\r\n      data: {\r\n        name: validatedData.name,\r\n        bdr: validatedData.bdr,\r\n        category: validatedData.category,\r\n        status: validatedData.status,\r\n        parentId: validatedData.parentId,\r\n        isSublist: true,\r\n        sublistName: validatedData.name,\r\n        sortOrder: validatedData.sortOrder,\r\n        // Set default values for required fields\r\n        title: null,\r\n        company: null,\r\n        value: null,\r\n        probability: null,\r\n        expectedCloseDate: null,\r\n        callDate: null,\r\n        link: null,\r\n        phone: null,\r\n        notes: `Sublist: ${validatedData.name}`,\r\n        email: null,\r\n        leadId: null,\r\n      },\r\n      include: {\r\n        children: {\r\n          orderBy: {\r\n            sortOrder: 'asc',\r\n          },\r\n        },\r\n        parent: true,\r\n      },\r\n    });\r\n\r\n    // Create activity log for sublist creation\r\n    await prisma.activityLog.create({\r\n      data: {\r\n        bdr: validatedData.bdr,\r\n        activityType: 'Note_Added',\r\n        description: `Created sublist: ${validatedData.name}`,\r\n        pipelineItemId: sublist.id,\r\n        notes: `Sublist created in ${validatedData.category} - ${validatedData.status}`,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(sublist);\r\n  } catch (error) {\r\n    console.error('Error creating sublist:', error);\r\n    \r\n    if (error instanceof Error) {\r\n      return NextResponse.json(\r\n        { error: error.message },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Failed to create sublist' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\sublists\\[id]\\reorder\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\sublists\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\pipeline\\sublists\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\advanced\\bdr-performance\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseISO' is defined but never used.","line":3,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'subDays' is defined but never used.","line":3,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1853,1856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1853,1856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activityLogs' is assigned a value but never used.","line":100,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { startOfDay, endOfDay, parseISO, subDays, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const dateRange = searchParams.get('dateRange') || 'week';\r\n    const territory = searchParams.get('territory');\r\n    const experience = searchParams.get('experience');\r\n    const status = searchParams.get('status');\r\n    const minCalls = parseInt(searchParams.get('minCalls') || '0');\r\n    const maxCalls = parseInt(searchParams.get('maxCalls') || '1000');\r\n    const minConversion = parseFloat(searchParams.get('minConversion') || '0');\r\n    const maxConversion = parseFloat(searchParams.get('maxConversion') || '100');\r\n\r\n    // Calculate date range\r\n    let startDate: Date;\r\n    let endDate: Date = new Date();\r\n\r\n    switch (dateRange) {\r\n      case 'today':\r\n        startDate = startOfDay(new Date());\r\n        endDate = endOfDay(new Date());\r\n        break;\r\n      case 'week':\r\n        startDate = startOfWeek(new Date(), { weekStartsOn: 1 });\r\n        endDate = endOfWeek(new Date(), { weekStartsOn: 1 });\r\n        break;\r\n      case 'month':\r\n        startDate = startOfMonth(new Date());\r\n        endDate = endOfMonth(new Date());\r\n        break;\r\n      case 'quarter':\r\n        const now = new Date();\r\n        const quarter = Math.floor(now.getMonth() / 3);\r\n        startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n        endDate = new Date(now.getFullYear(), (quarter + 1) * 3, 0);\r\n        break;\r\n      default:\r\n        startDate = startOfWeek(new Date(), { weekStartsOn: 1 });\r\n        endDate = endOfWeek(new Date(), { weekStartsOn: 1 });\r\n    }\r\n\r\n    // Build where clause for users\r\n    const userWhere: any = {\r\n      role: 'BDR',\r\n      isActive: true\r\n    };\r\n\r\n    if (status && status !== 'all') {\r\n      userWhere.isActive = status === 'active';\r\n    }\r\n\r\n    // Get all BDRs with their basic info\r\n    const bdrs = await prisma.user.findMany({\r\n      where: userWhere,\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        territoryId: true,\r\n        territory: {\r\n          select: {\r\n            name: true\r\n          }\r\n        },\r\n        createdAt: true\r\n      }\r\n    });\r\n\r\n    // Filter by territory if specified\r\n    let filteredBdrs = bdrs;\r\n    if (territory && territory !== 'all') {\r\n      filteredBdrs = bdrs.filter(bdr => bdr.territory?.name?.toLowerCase().includes(territory.toLowerCase()));\r\n    }\r\n\r\n    // Filter by experience level\r\n    if (experience && experience !== 'all') {\r\n      const now = new Date();\r\n      filteredBdrs = filteredBdrs.filter(bdr => {\r\n        const experienceYears = (now.getTime() - bdr.createdAt.getTime()) / (1000 * 60 * 60 * 24 * 365);\r\n        switch (experience) {\r\n          case 'junior':\r\n            return experienceYears < 1;\r\n          case 'mid':\r\n            return experienceYears >= 1 && experienceYears < 3;\r\n          case 'senior':\r\n            return experienceYears >= 3;\r\n          default:\r\n            return true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Get performance data for each BDR\r\n    const performanceData = await Promise.all(\r\n      filteredBdrs.map(async (bdr) => {\r\n        // Get activity logs for the date range\r\n        const activityLogs = await prisma.activityLog.findMany({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            timestamp: {\r\n              gte: startDate,\r\n              lte: endDate\r\n            }\r\n          }\r\n        });\r\n\r\n        // Calculate metrics\r\n        const callsToday = await prisma.activityLog.count({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            activityType: 'call',\r\n            timestamp: {\r\n              gte: startOfDay(new Date()),\r\n              lte: endOfDay(new Date())\r\n            }\r\n          }\r\n        });\r\n\r\n        const callsWeek = await prisma.activityLog.count({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            activityType: 'call',\r\n            timestamp: {\r\n              gte: startOfWeek(new Date(), { weekStartsOn: 1 }),\r\n              lte: endOfWeek(new Date(), { weekStartsOn: 1 })\r\n            }\r\n          }\r\n        });\r\n\r\n        const callsMonth = await prisma.activityLog.count({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            activityType: 'call',\r\n            timestamp: {\r\n              gte: startOfMonth(new Date()),\r\n              lte: endOfMonth(new Date())\r\n            }\r\n          }\r\n        });\r\n\r\n        const agreementsToday = await prisma.pipelineItem.count({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            agreementDate: {\r\n              gte: startOfDay(new Date()),\r\n              lte: endOfDay(new Date())\r\n            }\r\n          }\r\n        });\r\n\r\n        const agreementsWeek = await prisma.pipelineItem.count({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            agreementDate: {\r\n              gte: startOfWeek(new Date(), { weekStartsOn: 1 }),\r\n              lte: endOfWeek(new Date(), { weekStartsOn: 1 })\r\n            }\r\n          }\r\n        });\r\n\r\n        const agreementsMonth = await prisma.pipelineItem.count({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            agreementDate: {\r\n              gte: startOfMonth(new Date()),\r\n              lte: endOfMonth(new Date())\r\n            }\r\n          }\r\n        });\r\n\r\n        // Calculate conversion rate\r\n        const conversionRate = callsWeek > 0 ? (agreementsWeek / callsWeek) * 100 : 0;\r\n\r\n        // Get average call duration (mock data for now)\r\n        const avgCallDuration = Math.random() * 5 + 2; // 2-7 minutes\r\n\r\n        // Get lead metrics\r\n        const leadsAssigned = await prisma.lead.count({\r\n          where: {\r\n            bdrId: bdr.id\r\n          }\r\n        });\r\n\r\n        const leadsContacted = await prisma.lead.count({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            status: 'contacted'\r\n          }\r\n        });\r\n\r\n        // Get follow-ups scheduled\r\n        const followUpsScheduled = await prisma.pipelineItem.count({\r\n          where: {\r\n            bdrId: bdr.id,\r\n            status: 'follow_up'\r\n          }\r\n        });\r\n\r\n        // Calculate weekly goal progress (mock data)\r\n        const weeklyGoalProgress = Math.min(100, Math.random() * 120);\r\n\r\n        // Calculate monthly rank (mock data)\r\n        const monthlyRank = Math.floor(Math.random() * 20) + 1;\r\n\r\n        // Calculate streak (mock data)\r\n        const streak = Math.floor(Math.random() * 10) + 1;\r\n\r\n        // Calculate last week performance (mock data)\r\n        const lastWeekPerformance = Math.random() * 100;\r\n\r\n        // Determine experience level\r\n        const now = new Date();\r\n        const experienceYears = (now.getTime() - bdr.createdAt.getTime()) / (1000 * 60 * 60 * 24 * 365);\r\n        let experienceLevel = 'senior';\r\n        if (experienceYears < 1) experienceLevel = 'junior';\r\n        else if (experienceYears < 3) experienceLevel = 'mid';\r\n\r\n        return {\r\n          id: bdr.id,\r\n          name: bdr.name || 'Unknown BDR',\r\n          callsToday,\r\n          callsWeek,\r\n          callsMonth,\r\n          agreementsToday,\r\n          agreementsWeek,\r\n          agreementsMonth,\r\n          conversionRate: Math.round(conversionRate * 10) / 10,\r\n          avgCallDuration: Math.round(avgCallDuration * 10) / 10,\r\n          leadsAssigned,\r\n          leadsContacted,\r\n          followUpsScheduled,\r\n          weeklyGoalProgress: Math.round(weeklyGoalProgress),\r\n          monthlyRank,\r\n          streak,\r\n          lastWeekPerformance: Math.round(lastWeekPerformance),\r\n          territory: bdr.territory?.name || 'Unassigned',\r\n          experience: experienceLevel,\r\n          status: bdr.isActive ? 'active' : 'inactive'\r\n        };\r\n      })\r\n    );\r\n\r\n    // Apply filters\r\n    let filteredData = performanceData;\r\n\r\n    // Filter by call count\r\n    filteredData = filteredData.filter(bdr => \r\n      bdr.callsWeek >= minCalls && bdr.callsWeek <= maxCalls\r\n    );\r\n\r\n    // Filter by conversion rate\r\n    filteredData = filteredData.filter(bdr => \r\n      bdr.conversionRate >= minConversion && bdr.conversionRate <= maxConversion\r\n    );\r\n\r\n    // Sort by weekly goal progress (descending)\r\n    filteredData.sort((a, b) => b.weeklyGoalProgress - a.weeklyGoalProgress);\r\n\r\n    return NextResponse.json(filteredData);\r\n  } catch (error) {\r\n    console.error('Error fetching BDR performance data:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message,\r\n      data: null\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\advanced\\notifications\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DuplicateAction' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'yesterday' is assigned a value but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1404,1407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1404,1407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'notificationId' is assigned a value but never used.","line":327,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'read' is assigned a value but never used.","line":327,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { startOfDay, endOfDay, subDays, startOfWeek, endOfWeek } from 'date-fns';\r\nimport { WarningSeverity, DuplicateAction } from '@prisma/client';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const userId = searchParams.get('userId');\r\n    const type = searchParams.get('type');\r\n    const priority = searchParams.get('priority');\r\n    const channel = searchParams.get('channel'); // optional logical channel e.g., 'finance'\r\n\r\n    // Get current date ranges\r\n    const today = new Date();\r\n    const yesterday = subDays(today, 1);\r\n    const startOfThisWeek = startOfWeek(today, { weekStartsOn: 1 });\r\n    const endOfThisWeek = endOfWeek(today, { weekStartsOn: 1 });\r\n\r\n    // Generate notifications based on system events, duplicate warnings, and performance\r\n    const notifications: Array<{ id: string; type: 'success'|'warning'|'error'|'info'; title: string; message: string; timestamp: string; read: boolean; priority: 'low'|'medium'|'high'; userId?: string; }> = [];\r\n\r\n    // Recent company conflict alerts (duplicate warnings)\r\n    const recentDuplicateWarnings = await prisma.duplicateWarning.findMany({\r\n      where: {\r\n        createdAt: { gte: subDays(new Date(), 14) },\r\n        warningType: { in: ['COMPANY_NAME', 'COMPANY_DOMAIN'] as any },\r\n      },\r\n      include: {\r\n        triggeredBy: { select: { id: true, name: true } },\r\n        potentialDuplicates: {\r\n          include: { ownedBy: { select: { id: true, name: true } } }\r\n        }\r\n      },\r\n      orderBy: { createdAt: 'desc' },\r\n      take: 100\r\n    });\r\n\r\n    for (const warn of recentDuplicateWarnings) {\r\n      const owners = Array.from(new Set(warn.potentialDuplicates.map(m => m.ownedBy?.name).filter(Boolean))) as string[];\r\n      const ownerIds = Array.from(new Set(warn.potentialDuplicates.map(m => m.ownedBy?.id).filter(Boolean))) as string[];\r\n      const priority: 'high'|'medium'|'low' = warn.severity === WarningSeverity.CRITICAL ? 'high' : warn.severity === WarningSeverity.HIGH ? 'high' : warn.severity === WarningSeverity.MEDIUM ? 'medium' : 'low';\r\n      const title = 'Company conflict detected';\r\n      const message = owners.length > 0\r\n        ? `Similar company recently contacted by ${owners.join(', ')}`\r\n        : `Similar company recently contacted by another BDR`;\r\n      const notif = {\r\n        id: `dup-${warn.id}`,\r\n        type: 'warning' as const,\r\n        title,\r\n        message,\r\n        timestamp: warn.createdAt.toISOString(),\r\n        read: false,\r\n        priority,\r\n      };\r\n      // If we have specific owners, create targeted notifications for them too\r\n      notifications.push(notif);\r\n      for (const oid of ownerIds) {\r\n        notifications.push({ ...notif, id: `dup-${warn.id}-${oid}`, userId: oid });\r\n      }\r\n      // Also notify the user who triggered (so they see context)\r\n      if (warn.triggeredBy?.id) notifications.push({ ...notif, id: `dup-${warn.id}-trigger`, userId: warn.triggeredBy.id });\r\n    }\r\n\r\n    // Finance channel: surface recent finance entries as notifications if requested\r\n    if (!type || type === 'info' || channel === 'finance') {\r\n      const recentFinance = await prisma.financeEntry.findMany({\r\n        orderBy: { createdAt: 'desc' },\r\n        take: 10,\r\n      });\r\n      for (const e of recentFinance) {\r\n        notifications.push({\r\n          id: `finance-${e.id}`,\r\n          type: 'info' as const,\r\n          title: 'New/Updated Finance Deal',\r\n          message: `${e.company} • ${e.status}${e.gbpAmount ? ` • £${e.gbpAmount}` : ''}`,\r\n          timestamp: (e.createdAt || new Date()).toISOString(),\r\n          read: false,\r\n          priority: 'medium' as const,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Performance alerts\r\n    const lowPerformingBdrs = await prisma.user.findMany({\r\n      where: {\r\n        role: 'BDR',\r\n        isActive: true\r\n      },\r\n      include: {\r\n        activityLogs: {\r\n          where: {\r\n            timestamp: {\r\n              gte: startOfThisWeek,\r\n              lte: endOfThisWeek\r\n            },\r\n            activityType: 'call'\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Check for BDRs with low call volume\r\n    lowPerformingBdrs.forEach(bdr => {\r\n      const weeklyCalls = bdr.activityLogs.length;\r\n      if (weeklyCalls < 20) {\r\n        notifications.push({\r\n          id: `low-calls-${bdr.id}`,\r\n          type: 'warning' as const,\r\n          title: 'Low Call Volume Alert',\r\n          message: `${bdr.name} has only made ${weeklyCalls} calls this week (target: 50+)`,\r\n          timestamp: new Date().toISOString(),\r\n          read: false,\r\n          priority: 'medium' as const,\r\n          userId: bdr.id\r\n        });\r\n      }\r\n    });\r\n\r\n    // Check for missed daily targets\r\n    const todayCalls = await prisma.activityLog.count({\r\n      where: {\r\n        activityType: 'call',\r\n        timestamp: {\r\n          gte: startOfDay(today),\r\n          lte: endOfDay(today)\r\n        }\r\n      }\r\n    });\r\n\r\n    if (todayCalls < 100) {\r\n      notifications.push({\r\n        id: 'low-daily-calls',\r\n        type: 'warning' as const,\r\n        title: 'Daily Call Target Alert',\r\n        message: `Only ${todayCalls} calls made today (target: 100+)`,\r\n        timestamp: new Date().toISOString(),\r\n        read: false,\r\n        priority: 'high' as const\r\n      });\r\n    }\r\n\r\n    // Check for high conversion rates (positive notification)\r\n    const highConversionBdrs = await prisma.user.findMany({\r\n      where: {\r\n        role: 'BDR',\r\n        isActive: true\r\n      },\r\n      include: {\r\n        activityLogs: {\r\n          where: {\r\n            timestamp: {\r\n              gte: startOfThisWeek,\r\n              lte: endOfThisWeek\r\n            },\r\n            activityType: 'call'\r\n          }\r\n        },\r\n        pipelineItems: {\r\n          where: {\r\n            agreementDate: {\r\n              gte: startOfThisWeek,\r\n              lte: endOfThisWeek\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    highConversionBdrs.forEach(bdr => {\r\n      const calls = bdr.activityLogs.length;\r\n      const agreements = bdr.pipelineItems.length;\r\n      if (calls > 0 && agreements > 0) {\r\n        const conversionRate = (agreements / calls) * 100;\r\n        if (conversionRate > 20) {\r\n          notifications.push({\r\n            id: `high-conversion-${bdr.id}`,\r\n            type: 'success' as const,\r\n            title: 'High Conversion Rate',\r\n            message: `${bdr.name} achieved ${conversionRate.toFixed(1)}% conversion rate this week!`,\r\n            timestamp: new Date().toISOString(),\r\n            read: false,\r\n            priority: 'medium' as const,\r\n            userId: bdr.id\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // System notifications\r\n    notifications.push({\r\n      id: 'system-maintenance',\r\n      type: 'info' as const,\r\n      title: 'System Maintenance',\r\n      message: 'Scheduled maintenance on Sunday 2-4 AM EST',\r\n      timestamp: new Date().toISOString(),\r\n      read: false,\r\n      priority: 'low' as const\r\n    });\r\n\r\n    // New feature notification\r\n    notifications.push({\r\n      id: 'new-feature',\r\n      type: 'info' as const,\r\n      title: 'New Advanced Reporting Features',\r\n      message: 'Enhanced BDR performance comparison tools are now available',\r\n      timestamp: new Date().toISOString(),\r\n      read: false,\r\n      priority: 'medium' as const\r\n    });\r\n\r\n    // Check for leads that need follow-up\r\n    const leadsNeedingFollowUp = await prisma.lead.count({\r\n      where: {\r\n        status: 'contacted',\r\n        addedDate: {\r\n          lt: subDays(today, 3)\r\n        }\r\n      }\r\n    });\r\n\r\n    if (leadsNeedingFollowUp > 10) {\r\n      notifications.push({\r\n        id: 'follow-up-needed',\r\n        type: 'warning' as const,\r\n        title: 'Follow-up Required',\r\n        message: `${leadsNeedingFollowUp} leads need follow-up contact`,\r\n        timestamp: new Date().toISOString(),\r\n        read: false,\r\n        priority: 'high' as const\r\n      });\r\n    }\r\n\r\n    // Check for pipeline items expiring soon\r\n    const expiringPipelineItems = await prisma.pipelineItem.count({\r\n      where: {\r\n        expectedCloseDate: {\r\n          gte: today,\r\n          lte: new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000) // Next 7 days\r\n        },\r\n        status: {\r\n          not: 'closed'\r\n        }\r\n      }\r\n    });\r\n\r\n    if (expiringPipelineItems > 5) {\r\n      notifications.push({\r\n        id: 'expiring-pipeline',\r\n        type: 'warning' as const,\r\n        title: 'Pipeline Items Expiring',\r\n        message: `${expiringPipelineItems} pipeline items are expected to close this week`,\r\n        timestamp: new Date().toISOString(),\r\n        read: false,\r\n        priority: 'medium' as const\r\n      });\r\n    }\r\n\r\n    // Filter notifications based on query parameters\r\n    let filteredNotifications = notifications;\r\n\r\n    if (userId) {\r\n      filteredNotifications = filteredNotifications.filter(n => !n.userId || n.userId === userId);\r\n    }\r\n\r\n    if (type) {\r\n      filteredNotifications = filteredNotifications.filter(n => n.type === type);\r\n    }\r\n\r\n    if (priority) {\r\n      filteredNotifications = filteredNotifications.filter(n => n.priority === priority);\r\n    }\r\n\r\n    // Sort by priority and timestamp\r\n    filteredNotifications.sort((a, b) => {\r\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\r\n      const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder] || 1;\r\n      const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder] || 1;\r\n      \r\n      if (aPriority !== bPriority) {\r\n        return bPriority - aPriority;\r\n      }\r\n      \r\n      return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();\r\n    });\r\n\r\n    return NextResponse.json(filteredNotifications);\r\n  } catch (error) {\r\n    console.error('Error fetching notifications:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message,\r\n      notifications: []\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { userId, type, title, message, priority = 'medium' } = body;\r\n\r\n    const notification = {\r\n      id: `notification-${Date.now()}`,\r\n      type: type || 'info',\r\n      title,\r\n      message,\r\n      timestamp: new Date().toISOString(),\r\n      read: false,\r\n      priority,\r\n      userId\r\n    };\r\n\r\n    // In a real implementation, you would save this to the database\r\n    // For now, we'll just return the notification\r\n    return NextResponse.json(notification);\r\n  } catch (error) {\r\n    console.error('Error creating notification:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PATCH(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { notificationId, read } = body;\r\n\r\n    // In a real implementation, you would update the notification in the database\r\n    // For now, we'll just return success\r\n    return NextResponse.json({ \r\n      success: true,\r\n      message: 'Notification updated successfully'\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating notification:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message\r\n    }, { status: 500 });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\agreement-tracking\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[467,470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[467,470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { startOfMonth, endOfMonth, subMonths } from 'date-fns';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const bdr = searchParams.get('bdr');\r\n    const monthsParam = parseInt(searchParams.get('months') || '4', 10);\r\n\r\n    const now = new Date();\r\n\r\n    // Build where clause for activity logs\r\n    const where: any = {\r\n      activityType: 'Agreement_Sent',\r\n    };\r\n    if (bdr) {\r\n      where.bdr = bdr;\r\n    }\r\n\r\n    // Fetch logs for last N months\r\n    const oldestMonthStart = startOfMonth(subMonths(now, monthsParam - 1));\r\n    where.timestamp = {\r\n      gte: oldestMonthStart,\r\n      lte: endOfMonth(now),\r\n    };\r\n\r\n    const logs = await prisma.activityLog.findMany({\r\n      select: { timestamp: true, bdr: true },\r\n      where,\r\n    });\r\n\r\n    // Monthly aggregation and trend\r\n    const monthly: Array<{ month: string; count: number }> = [];\r\n    for (let i = monthsParam - 1; i >= 0; i--) {\r\n      const mStart = startOfMonth(subMonths(now, i));\r\n      const mEnd = endOfMonth(subMonths(now, i));\r\n      const count = logs.filter((l) => l.timestamp >= mStart && l.timestamp <= mEnd).length;\r\n      monthly.push({ month: mStart.toISOString().substring(0, 7), count });\r\n    }\r\n\r\n    // BDR breakdown\r\n    const bdrCounts: Record<string, number> = {};\r\n    logs.forEach((l) => {\r\n      if (!l.bdr) return;\r\n      bdrCounts[l.bdr] = (bdrCounts[l.bdr] || 0) + 1;\r\n    });\r\n\r\n    return NextResponse.json({\r\n      range: { months: monthsParam },\r\n      monthly,\r\n      byBdr: bdrCounts,\r\n      generatedAt: now.toISOString(),\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching agreement tracking:', error);\r\n    return NextResponse.json(\r\n      { error: (error as Error).message, agreementTracking: null },\r\n      { status: 500 },\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\alerts\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\analytics\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'subMonths' is defined but never used.","line":3,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addMonths' is defined but never used.","line":3,"column":91,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":100},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nextWeekEnd' is assigned a value but never used.","line":62,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2210,2213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2210,2213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2267,2270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2267,2270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activities' is assigned a value but never used.","line":110,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { startOfWeek, endOfWeek, startOfMonth, endOfMonth, subWeeks, subMonths, addWeeks, addMonths } from 'date-fns';\r\n\r\ninterface BDRAnalytics {\r\n  bdr: string;\r\n  totalItems: number;\r\n  \r\n  // Funnel Metrics\r\n  callsScheduled: number;\r\n  callsConducted: number;\r\n  proposalsSent: number;\r\n  agreementsSigned: number;\r\n  \r\n  // Conversion Rates\r\n  callToProposalRate: number;\r\n  proposalToAgreementRate: number;\r\n  overallConversionRate: number;\r\n  \r\n  // Time-based Performance\r\n  thisWeek: {\r\n    calls: number;\r\n    proposals: number;\r\n    agreements: number;\r\n  };\r\n  thisMonth: {\r\n    calls: number;\r\n    proposals: number;\r\n    agreements: number;\r\n  };\r\n  \r\n  // Forward-looking Pipeline\r\n  upcomingCalls: number;\r\n  pendingProposals: number;\r\n  activeListsOut: number;\r\n  \r\n  // Category Breakdown\r\n  categoryDistribution: Array<{\r\n    category: string;\r\n    count: number;\r\n    percentage: number;\r\n  }>;\r\n  \r\n  // Performance Trends\r\n  weeklyTrend: Array<{\r\n    week: string;\r\n    calls: number;\r\n    proposals: number;\r\n    agreements: number;\r\n  }>;\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const now = new Date();\r\n    \r\n    // Date ranges\r\n    const thisWeekStart = startOfWeek(now, { weekStartsOn: 1 });\r\n    const thisWeekEnd = endOfWeek(now, { weekStartsOn: 1 });\r\n    const thisMonthStart = startOfMonth(now);\r\n    const thisMonthEnd = endOfMonth(now);\r\n    const nextWeekEnd = endOfWeek(addWeeks(now, 1), { weekStartsOn: 1 });\r\n    \r\n    // Get all pipeline items with detailed information\r\n    const pipelineItems = await prisma.pipelineItem.findMany({\r\n      select: {\r\n        id: true,\r\n        bdr: true,\r\n        category: true,\r\n        status: true,\r\n        callDate: true,\r\n        lastUpdated: true,\r\n        addedDate: true,\r\n      },\r\n    });\r\n\r\n    // Get activity logs for more detailed tracking\r\n    const activityLogs = await prisma.activityLog.findMany({\r\n      select: {\r\n        id: true,\r\n        bdr: true,\r\n        activityType: true,\r\n        timestamp: true,\r\n        pipelineItemId: true,\r\n      },\r\n    });\r\n\r\n    // Group data by BDR\r\n    const bdrData: { [key: string]: any[] } = {};\r\n    const bdrActivities: { [key: string]: any[] } = {};\r\n    \r\n    pipelineItems.forEach(item => {\r\n      if (item.bdr) {\r\n        if (!bdrData[item.bdr]) bdrData[item.bdr] = [];\r\n        bdrData[item.bdr].push(item);\r\n      }\r\n    });\r\n\r\n    activityLogs.forEach(log => {\r\n      if (log.bdr) {\r\n        if (!bdrActivities[log.bdr]) bdrActivities[log.bdr] = [];\r\n        bdrActivities[log.bdr].push(log);\r\n      }\r\n    });\r\n\r\n    // Calculate analytics for each BDR\r\n    const bdrAnalytics: BDRAnalytics[] = [];\r\n\r\n    for (const [bdrName, items] of Object.entries(bdrData)) {\r\n      const activities = bdrActivities[bdrName] || [];\r\n      \r\n      // Basic counts\r\n      const totalItems = items.length;\r\n      \r\n      // Funnel analysis\r\n      const callsItems = items.filter(item => item.category === 'Calls');\r\n      const proposalItems = items.filter(item => \r\n        item.status && (item.status.includes('Proposal') || item.status.includes('proposal'))\r\n      );\r\n      const agreementItems = items.filter(item => \r\n        item.status && (item.status.includes('Agreement') || item.status.includes('agreement'))\r\n      );\r\n      \r\n      const callsScheduled = callsItems.length;\r\n      const callsConducted = callsItems.filter(item => \r\n        item.callDate && item.callDate <= now\r\n      ).length;\r\n      const proposalsSent = proposalItems.length;\r\n      const agreementsSigned = agreementItems.length;\r\n      \r\n      // Conversion rates\r\n      const callToProposalRate = callsConducted > 0 ? (proposalsSent / callsConducted) * 100 : 0;\r\n      const proposalToAgreementRate = proposalsSent > 0 ? (agreementsSigned / proposalsSent) * 100 : 0;\r\n      const overallConversionRate = callsConducted > 0 ? (agreementsSigned / callsConducted) * 100 : 0;\r\n      \r\n      // Time-based metrics\r\n      const thisWeekCalls = callsItems.filter(item => \r\n        item.callDate && item.callDate >= thisWeekStart && item.callDate <= thisWeekEnd\r\n      ).length;\r\n      \r\n      const thisWeekProposals = proposalItems.filter(item => \r\n        item.lastUpdated >= thisWeekStart && item.lastUpdated <= thisWeekEnd\r\n      ).length;\r\n      \r\n      const thisWeekAgreements = agreementItems.filter(item => \r\n        item.lastUpdated >= thisWeekStart && item.lastUpdated <= thisWeekEnd\r\n      ).length;\r\n      \r\n      const thisMonthCalls = callsItems.filter(item => \r\n        item.callDate && item.callDate >= thisMonthStart && item.callDate <= thisMonthEnd\r\n      ).length;\r\n      \r\n      const thisMonthProposals = proposalItems.filter(item => \r\n        item.lastUpdated >= thisMonthStart && item.lastUpdated <= thisMonthEnd\r\n      ).length;\r\n      \r\n      const thisMonthAgreements = agreementItems.filter(item => \r\n        item.lastUpdated >= thisMonthStart && item.lastUpdated <= thisMonthEnd\r\n      ).length;\r\n      \r\n      // Forward-looking pipeline\r\n      const upcomingCalls = callsItems.filter(item => \r\n        item.callDate && item.callDate > now\r\n      ).length;\r\n      \r\n      const pendingProposals = proposalItems.filter(item => \r\n        !item.status.includes('Agreement') && !item.status.includes('Declined')\r\n      ).length;\r\n      \r\n      const activeListsOut = items.filter(item => \r\n        item.category === 'Lists_Media_QA'\r\n      ).length;\r\n      \r\n      // Category distribution\r\n      const categoryCount: { [key: string]: number } = {};\r\n      items.forEach(item => {\r\n        if (item.category) {\r\n          categoryCount[item.category] = (categoryCount[item.category] || 0) + 1;\r\n        }\r\n      });\r\n      \r\n      const categoryDistribution = Object.entries(categoryCount).map(([category, count]) => ({\r\n        category,\r\n        count,\r\n        percentage: totalItems > 0 ? (count / totalItems) * 100 : 0\r\n      }));\r\n      \r\n      // Weekly trend (last 4 weeks)\r\n      const weeklyTrend = [];\r\n      for (let i = 3; i >= 0; i--) {\r\n        const weekStart = startOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\r\n        const weekEnd = endOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\r\n        \r\n        const weekCalls = callsItems.filter(item => \r\n          item.callDate && item.callDate >= weekStart && item.callDate <= weekEnd\r\n        ).length;\r\n        \r\n        const weekProposals = proposalItems.filter(item => \r\n          item.lastUpdated >= weekStart && item.lastUpdated <= weekEnd\r\n        ).length;\r\n        \r\n        const weekAgreements = agreementItems.filter(item => \r\n          item.lastUpdated >= weekStart && item.lastUpdated <= weekEnd\r\n        ).length;\r\n        \r\n        weeklyTrend.push({\r\n          week: `Week ${4 - i}`,\r\n          calls: weekCalls,\r\n          proposals: weekProposals,\r\n          agreements: weekAgreements\r\n        });\r\n      }\r\n      \r\n      bdrAnalytics.push({\r\n        bdr: bdrName,\r\n        totalItems,\r\n        callsScheduled,\r\n        callsConducted,\r\n        proposalsSent,\r\n        agreementsSigned,\r\n        callToProposalRate: Math.round(callToProposalRate * 100) / 100,\r\n        proposalToAgreementRate: Math.round(proposalToAgreementRate * 100) / 100,\r\n        overallConversionRate: Math.round(overallConversionRate * 100) / 100,\r\n        thisWeek: {\r\n          calls: thisWeekCalls,\r\n          proposals: thisWeekProposals,\r\n          agreements: thisWeekAgreements\r\n        },\r\n        thisMonth: {\r\n          calls: thisMonthCalls,\r\n          proposals: thisMonthProposals,\r\n          agreements: thisMonthAgreements\r\n        },\r\n        upcomingCalls,\r\n        pendingProposals,\r\n        activeListsOut,\r\n        categoryDistribution,\r\n        weeklyTrend\r\n      });\r\n    }\r\n    \r\n    // Sort by overall performance\r\n    bdrAnalytics.sort((a, b) => b.overallConversionRate - a.overallConversionRate);\r\n    \r\n    // Calculate team averages\r\n    const teamAverages = {\r\n      avgConversionRate: bdrAnalytics.reduce((sum, bdr) => sum + bdr.overallConversionRate, 0) / bdrAnalytics.length,\r\n      avgCallToProposalRate: bdrAnalytics.reduce((sum, bdr) => sum + bdr.callToProposalRate, 0) / bdrAnalytics.length,\r\n      avgProposalToAgreementRate: bdrAnalytics.reduce((sum, bdr) => sum + bdr.proposalToAgreementRate, 0) / bdrAnalytics.length,\r\n      totalUpcomingCalls: bdrAnalytics.reduce((sum, bdr) => sum + bdr.upcomingCalls, 0),\r\n      totalPendingProposals: bdrAnalytics.reduce((sum, bdr) => sum + bdr.pendingProposals, 0),\r\n      totalActiveListsOut: bdrAnalytics.reduce((sum, bdr) => sum + bdr.activeListsOut, 0)\r\n    };\r\n\r\n    return NextResponse.json({\r\n      bdrAnalytics,\r\n      teamAverages,\r\n      generatedAt: now.toISOString()\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching analytics:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message,\r\n      bdrAnalytics: [],\r\n      teamAverages: {}\r\n    }, { status: 500 });\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\bdr\\[bdr]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[755,758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[755,758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { startOfDay, endOfDay, parseISO } from 'date-fns';\r\n\r\nexport async function GET(request: Request, { params }: { params: Promise<{ bdr: string }> }) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const { bdr } = resolvedParams;\r\n    const { searchParams } = new URL(request.url);\r\n    const startDate = searchParams.get('startDate');\r\n    const endDate = searchParams.get('endDate');\r\n\r\n    // Map BDR route param (name) to userId for relational field filtering\r\n    const user = await prisma.user.findFirst({ where: { name: bdr }, select: { id: true } });\r\n    if (!user) {\r\n      return NextResponse.json([], { status: 200 });\r\n    }\r\n\r\n    const where: any = {\r\n      bdrId: user.id,\r\n    };\r\n\r\n    if (startDate && endDate) {\r\n      where.timestamp = {\r\n        gte: startOfDay(parseISO(startDate)),\r\n        lte: endOfDay(parseISO(endDate)),\r\n      };\r\n    }\r\n\r\n    const bdrPerformance = await prisma.activityLog.groupBy({\r\n      by: ['activityType'],\r\n      _count: {\r\n        _all: true,\r\n      },\r\n      where,\r\n    });\r\n\r\n    return NextResponse.json(bdrPerformance);\r\n  } catch (error) {\r\n    console.error('Error fetching BDR performance:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message,\r\n      bdrPerformance: null\r\n    }, { status: 500 });\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\call-volume\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[843,846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[843,846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { startOfDay, endOfDay, parseISO, startOfWeek, endOfWeek } from 'date-fns';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const bdr = searchParams.get('bdr');\r\n    const startDateParam = searchParams.get('startDate');\r\n    const endDateParam = searchParams.get('endDate');\r\n\r\n    // Default: current week range\r\n    const now = new Date();\r\n    const defaultStart = startOfDay(startOfWeek(now, { weekStartsOn: 1 }));\r\n    const defaultEnd = endOfDay(endOfWeek(now, { weekStartsOn: 1 }));\r\n\r\n    const startDate = startDateParam ? startOfDay(parseISO(startDateParam)) : defaultStart;\r\n    const endDate = endDateParam ? endOfDay(parseISO(endDateParam)) : defaultEnd;\r\n\r\n    const where: any = {\r\n      activityType: 'Call_Completed',\r\n      timestamp: {\r\n        gte: startDate,\r\n        lte: endDate,\r\n      },\r\n    };\r\n\r\n    if (bdr) {\r\n      where.bdr = bdr;\r\n    }\r\n\r\n    // Fetch relevant logs\r\n    const logs = await prisma.activityLog.findMany({\r\n      select: {\r\n        timestamp: true,\r\n        bdr: true,\r\n      },\r\n      where,\r\n    });\r\n\r\n    // Aggregate by BDR total\r\n    const bdrTotals: Record<string, number> = {};\r\n    logs.forEach((l) => {\r\n      if (!l.bdr) return;\r\n      bdrTotals[l.bdr] = (bdrTotals[l.bdr] || 0) + 1;\r\n    });\r\n\r\n    // Heatmap data – 7 days × 24h matrix (Mon-Sun)\r\n    const heatmap = Array.from({ length: 7 }, () => Array(24).fill(0));\r\n    logs.forEach((l) => {\r\n      const d = new Date(l.timestamp);\r\n      const dayIdx = (d.getDay() + 6) % 7; // Make Monday=0\r\n      const hour = d.getHours();\r\n      heatmap[dayIdx][hour] += 1;\r\n    });\r\n\r\n    return NextResponse.json({\r\n      range: { startDate, endDate },\r\n      totals: bdrTotals,\r\n      heatmap,\r\n      generatedAt: now.toISOString(),\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching call volume:', error);\r\n    return NextResponse.json(\r\n      { error: (error as Error).message, callVolume: null },\r\n      { status: 500 },\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\conversion\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[297,300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[297,300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[330,333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[330,333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[362,365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[362,365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n// import { requireRole } from '@/lib/authorize';\nimport { prisma } from '@/lib/db';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const bdr = searchParams.get('bdr');\n\n  const pipelineWhere: any = {};\n  const activityWhere: any = {};\n  const financeWhere: any = {};\n  if (bdr && bdr !== 'all') {\n    pipelineWhere.bdr = bdr;\n    activityWhere.bdr = bdr;\n    financeWhere.bdr = bdr;\n  }\n\n  const [callsConducted, proposalsSent, agreementsSigned, listsSent, sales] = await Promise.all([\n    prisma.activityLog.count({ where: { ...activityWhere, activityType: 'Call_Completed' } }),\n    prisma.activityLog.count({ where: { ...activityWhere, activityType: 'Proposal_Sent' } }),\n    prisma.activityLog.count({ where: { ...activityWhere, activityType: 'Agreement_Sent' } }),\n    prisma.activityLog.count({ where: { ...activityWhere, activityType: 'Partner_List_Sent' } }),\n    prisma.financeEntry.count({ where: { ...financeWhere } }), // Count all finance entries as sales\n  ]);\n\n  return NextResponse.json({\n    callsConducted,\n    proposalsSent,\n    agreementsSigned,\n    listsSent,\n    sales,\n  });\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\executive-dashboard\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'requireRole' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4567,4570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4567,4570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5135,5138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5135,5138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thisWeekStart' is assigned a value but never used.","line":297,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":297,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thisWeekEnd' is assigned a value but never used.","line":298,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":298,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thisMonthStart' is assigned a value but never used.","line":299,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":299,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thisMonthEnd' is assigned a value but never used.","line":300,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":300,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thisQuarterStart' is assigned a value but never used.","line":301,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thisQuarterEnd' is assigned a value but never used.","line":302,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":302,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lastMonthStart' is assigned a value but never used.","line":303,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":303,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lastMonthEnd' is assigned a value but never used.","line":304,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":304,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'nextWeekEnd' is assigned a value but never used.","line":305,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":305,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'next2WeeksEnd' is assigned a value but never used.","line":306,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":306,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":309,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10789,10792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10789,10792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10824,10827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10824,10827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11751,11754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11751,11754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":354,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12470,12473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12470,12473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'leads' is assigned a value but never used.","line":373,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":373,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":495,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":495,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17347,17350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17347,17350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/lib/auth\";\r\nimport { prisma } from '@/lib/db';\r\nimport { requireRole } from '@/lib/authorize';\r\nimport { getCache, setCache } from '@/lib/cache';\r\nimport { subDays, startOfQuarter, endOfQuarter, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays } from 'date-fns';\r\nimport { Role } from \"@prisma/client\";\r\nimport {\r\n  calculateKPIs,\r\n  calculateTeamPerformance,\r\n  assessPipelineHealth,\r\n  calculateTrends,\r\n  identifyCriticalActions,\r\n  calculateFinancialSummary,\r\n  generatePredictiveInsights\r\n} from '@/lib/reporting-helpers';\r\n\r\ninterface KPI {\r\n  current: number;\r\n  target: number;\r\n  trend: 'up' | 'down' | 'stable';\r\n  status: 'excellent' | 'good' | 'needs_attention' | 'critical';\r\n}\r\n\r\ninterface ExecutiveDashboard {\r\n  // Key Performance Indicators matching frontend expectations\r\n  kpis: {\r\n    thisWeek: {\r\n      callVolume: KPI;\r\n      agreements: KPI;\r\n      listsOut: KPI;\r\n      sales: KPI;\r\n    };\r\n    lastWeek: {\r\n      callVolume: KPI;\r\n      agreements: KPI;\r\n      listsOut: KPI;\r\n      sales: KPI;\r\n    };\r\n    thisMonth: {\r\n      callVolume: KPI;\r\n      agreements: KPI;\r\n      listsOut: KPI;\r\n      conversionRate: KPI;\r\n    };\r\n    lastMonth: {\r\n      callVolume: KPI;\r\n      agreements: KPI;\r\n      listsOut: KPI;\r\n      conversionRate: KPI;\r\n    };\r\n    teamTargets: {\r\n      weekly: {\r\n        calls: number;\r\n        agreements: number;\r\n        listsOut: number;\r\n        sales: number;\r\n      };\r\n      monthly: {\r\n        calls: number;\r\n        agreements: number;\r\n        listsOut: number;\r\n        sales: number;\r\n      };\r\n    };\r\n  };\r\n  \r\n  // Team Performance Summary\r\n  teamPerformance: {\r\n    totalBDRs: number;\r\n    activeBDRs: number;\r\n    topPerformers: string[];\r\n    needsSupport: string[];\r\n    benchmarkMetrics: {\r\n      avgCallsPerWeek: number;\r\n      avgAgreementsPerMonth: number;\r\n      avgListsPerMonth: number;\r\n      teamConversionRate: number;\r\n    };\r\n  };\r\n  \r\n  // Pipeline Health\r\n  pipelineHealth: {\r\n    upcomingCalls: {\r\n      nextWeek: number;\r\n      next2Weeks: number;\r\n      total: number;\r\n    };\r\n    pendingAgreements: {\r\n      proposalsAwaitingResponse: number;\r\n      agreementsAwaitingLists: number;\r\n      overduePartnerLists: number;\r\n    };\r\n    activeListsOut: {\r\n      total: number;\r\n      smallLists: number;\r\n      mediumLists: number;\r\n      largeLists: number;\r\n      averageListSize: number;\r\n    };\r\n    conversionFunnel: {\r\n      callsBooked: number;\r\n      callsConducted: number;\r\n      proposalsSent: number;\r\n      agreementsSigned: number;\r\n      listsSent: number;\r\n      salesGenerated: number;\r\n    };\r\n  };\r\n  \r\n  // Time-based Trends\r\n  trends: {\r\n    weeklyCallVolume: Array<{\r\n      week: string;\r\n      calls: number;\r\n      target: number;\r\n      variance: number;\r\n    }>;\r\n    monthlyAgreements: Array<{\r\n      month: string;\r\n      agreements: number;\r\n      target: number;\r\n      variance: number;\r\n    }>;\r\n    quarterlyListsOut: Array<{\r\n      quarter: string;\r\n      lists: number;\r\n      conversions: number;\r\n      revenue: number;\r\n    }>;\r\n  };\r\n  \r\n  // Critical Actions Required\r\n  criticalActions: Array<{\r\n    priority: 'urgent' | 'high' | 'medium';\r\n    category: 'calls' | 'agreements' | 'lists' | 'team';\r\n    action: string;\r\n    assignedTo?: string;\r\n    metric?: number;\r\n    deadline?: string;\r\n  }>;\r\n  \r\n  // BDR List\r\n  bdrList: string[];\r\n\r\n  // Revenue & Financial Metrics\r\n  financialSummary: {\r\n    monthlyRevenue: number;\r\n    quarterlyRevenue: number;\r\n    revenuePerBDR: number;\r\n    revenuePerCall: number;\r\n    revenuePerList: number;\r\n    forecastAccuracy: number;\r\n  };\r\n  \r\n  // Predictive Insights\r\n  predictions: {\r\n    expectedCallsNextWeek: number;\r\n    expectedAgreementsNextMonth: number;\r\n    expectedRevenueNextQuarter: number;\r\n    riskFactors: string[];\r\n    opportunities: string[];\r\n  };\r\n}\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    // 1. Get Session securely on the server\r\n    const url = new URL(request.url);\r\n    const isTestBypass = url.searchParams.get('test') === '1' || request.headers.get('x-cypress-test') === '1';\r\n    let session = await getServerSession(authOptions);\r\n    if (!session && isTestBypass) {\r\n      // Provide a minimal mock session in test mode\r\n      session = {\r\n        user: {\r\n          id: 'test-user',\r\n          name: 'Test Admin',\r\n          email: 'test@example.com',\r\n          role: Role.ADMIN,\r\n        }\r\n      } as any;\r\n    }\r\n\r\n    // 2. Check Authentication\r\n    if (!session || !session.user) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const { role, id: userId } = session.user;\r\n\r\n    const { searchParams } = url;\r\n    const period = searchParams.get('period') || 'current'; // current, historical, forecast\r\n    const bdr = searchParams.get('bdr');\r\n    \r\n    // Basic LRU cache (5-min TTL) - include user role in cache key for RBAC\r\n    const cacheKey = `exec-${role}-${userId}-${bdr || 'all'}`;\r\n    const cached = getCache<any>(cacheKey);\r\n    if (cached) {\r\n      return new NextResponse(JSON.stringify(cached), {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Cache-Control': 'private, max-age=60, stale-while-revalidate=120',\r\n        },\r\n      });\r\n    }\r\n\r\n    const now = new Date();\r\n\r\n    // Short-circuit in test bypass mode to avoid DB and return a stable mock\r\n    if (isTestBypass) {\r\n      const mockDashboard: ExecutiveDashboard = {\r\n        kpis: {\r\n          thisWeek: {\r\n            callVolume: { current: 10, target: 40, trend: 'up', status: 'needs_attention' },\r\n            agreements: { current: 3, target: 10, trend: 'stable', status: 'needs_attention' },\r\n            listsOut: { current: 2, target: 4, trend: 'up', status: 'good' },\r\n            sales: { current: 2, target: 5, trend: 'stable', status: 'needs_attention' },\r\n          },\r\n          lastWeek: {\r\n            callVolume: { current: 8, target: 40, trend: 'up', status: 'critical' },\r\n            agreements: { current: 2, target: 10, trend: 'up', status: 'critical' },\r\n            listsOut: { current: 1, target: 4, trend: 'stable', status: 'critical' },\r\n            sales: { current: 1, target: 5, trend: 'stable', status: 'critical' },\r\n          },\r\n          thisMonth: {\r\n            callVolume: { current: 40, target: 160, trend: 'up', status: 'needs_attention' },\r\n            agreements: { current: 12, target: 40, trend: 'up', status: 'needs_attention' },\r\n            listsOut: { current: 6, target: 16, trend: 'up', status: 'needs_attention' },\r\n            conversionRate: { current: 18, target: 20, trend: 'up', status: 'good' },\r\n          },\r\n          lastMonth: {\r\n            callVolume: { current: 35, target: 160, trend: 'up', status: 'critical' },\r\n            agreements: { current: 10, target: 40, trend: 'up', status: 'critical' },\r\n            listsOut: { current: 5, target: 16, trend: 'stable', status: 'needs_attention' },\r\n            conversionRate: { current: 16, target: 20, trend: 'up', status: 'needs_attention' },\r\n          },\r\n          teamTargets: {\r\n            weekly: { calls: 40, agreements: 10, listsOut: 4, sales: 5 },\r\n            monthly: { calls: 160, agreements: 40, listsOut: 16, sales: 20 },\r\n          },\r\n        },\r\n        teamPerformance: {\r\n          totalBDRs: 2,\r\n          activeBDRs: 2,\r\n          topPerformers: ['A'],\r\n          needsSupport: ['B'],\r\n          benchmarkMetrics: {\r\n            avgCallsPerWeek: 20,\r\n            avgAgreementsPerMonth: 6,\r\n            avgListsPerMonth: 3,\r\n            teamConversionRate: 18,\r\n          },\r\n        },\r\n        pipelineHealth: {\r\n          upcomingCalls: { nextWeek: 5, next2Weeks: 8, total: 20 },\r\n          pendingAgreements: { proposalsAwaitingResponse: 3, agreementsAwaitingLists: 2, overduePartnerLists: 1 },\r\n          activeListsOut: { total: 6, smallLists: 3, mediumLists: 2, largeLists: 1, averageListSize: 9 },\r\n          conversionFunnel: { callsBooked: 12, callsConducted: 10, proposalsSent: 4, agreementsSigned: 3, listsSent: 2, salesGenerated: 2 },\r\n        },\r\n        trends: {\r\n          weeklyCallVolume: [\r\n            { week: 'W1', calls: 8, target: 40, variance: -80 },\r\n            { week: 'W2', calls: 10, target: 40, variance: -75 },\r\n            { week: 'W3', calls: 9, target: 40, variance: -78 },\r\n            { week: 'W4', calls: 13, target: 40, variance: -67 },\r\n          ],\r\n          monthlyAgreements: [\r\n            { month: 'May', agreements: 8, target: 20, variance: -60 },\r\n            { month: 'Jun', agreements: 10, target: 20, variance: -50 },\r\n            { month: 'Jul', agreements: 12, target: 20, variance: -40 },\r\n            { month: 'Aug', agreements: 12, target: 20, variance: -40 },\r\n          ],\r\n          quarterlyListsOut: [\r\n            { quarter: 'Q2 2025', lists: 5, conversions: 2, revenue: 3500 },\r\n            { quarter: 'Q3 2025', lists: 6, conversions: 3, revenue: 4500 },\r\n          ],\r\n        },\r\n        criticalActions: [\r\n          { priority: 'urgent', category: 'calls', action: 'Increase call volume this week', metric: 10, deadline: 'End of week' },\r\n        ],\r\n        bdrList: ['A', 'B'],\r\n        financialSummary: { monthlyRevenue: 4500, quarterlyRevenue: 4500, revenuePerBDR: 2250, revenuePerCall: 112, revenuePerList: 750, forecastAccuracy: 85 },\r\n        predictions: { expectedCallsNextWeek: 15, expectedAgreementsNextMonth: 14, expectedRevenueNextQuarter: 5000, riskFactors: ['Low weekly calls'], opportunities: ['Strong trend for lists'] },\r\n      };\r\n      return new NextResponse(JSON.stringify({ dashboard: mockDashboard, generatedAt: now.toISOString(), period: 'current' }), {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Cache-Control': 'private, max-age=60, stale-while-revalidate=120',\r\n        },\r\n      });\r\n    }\r\n    \r\n    // Date ranges\r\n    const thisWeekStart = startOfWeek(now, { weekStartsOn: 1 });\r\n    const thisWeekEnd = endOfWeek(now, { weekStartsOn: 1 });\r\n    const thisMonthStart = startOfMonth(now);\r\n    const thisMonthEnd = endOfMonth(now);\r\n    const thisQuarterStart = startOfQuarter(now);\r\n    const thisQuarterEnd = endOfQuarter(now);\r\n    const lastMonthStart = startOfMonth(subDays(now, 30)); // Last 30 days for historical\r\n    const lastMonthEnd = endOfMonth(subDays(now, 30));\r\n    const nextWeekEnd = endOfWeek(addDays(now, 7), { weekStartsOn: 1 });\r\n    const next2WeeksEnd = endOfWeek(addDays(now, 14), { weekStartsOn: 1 });\r\n    \r\n    // 3. Enforce Authorization (RBAC) - Build where clauses with role-based filtering\r\n    const pipelineWhere: any = {};\r\n    const financeWhere: any = {};\r\n    \r\n    // Role-based data filtering\r\n    if (role === Role.BDR) {\r\n      // BDRs can only see their own data - filter by bdrId (user relation)\r\n      pipelineWhere.bdrId = userId;\r\n      financeWhere.bdrId = userId;\r\n    } else if (role === Role.ADMIN || role === Role.DIRECTOR || role === Role.MANAGER) {\r\n      // Admins can see all data or filter by specific BDR\r\n      if (bdr) {\r\n        const targetUser = await prisma.user.findFirst({ where: { name: bdr }, select: { id: true } });\r\n        if (targetUser) {\r\n          pipelineWhere.bdrId = targetUser.id;\r\n          financeWhere.bdrId = targetUser.id;\r\n        } else {\r\n          pipelineWhere.bdrId = '___NO_MATCH___';\r\n          financeWhere.bdrId = '___NO_MATCH___';\r\n        }\r\n      }\r\n    } else {\r\n      // Unknown role - deny access\r\n      return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\r\n    }\r\n\r\n    const activityLogWhere: any = {\r\n      timestamp: {\r\n        gte: subDays(now, 90) // Last 90 days\r\n      }\r\n    };\r\n\r\n    // Role-based filtering for activity logs - filter by bdrId (user relation)\r\n    if (role === Role.BDR) {\r\n      // BDRs can only see their own activity logs\r\n      activityLogWhere.bdrId = userId;\r\n    } else if ((role === Role.ADMIN || role === Role.DIRECTOR || role === Role.MANAGER) && bdr) {\r\n      // Filter by specific BDR user\r\n      const targetUser = await prisma.user.findFirst({ where: { name: bdr }, select: { id: true } });\r\n      if (targetUser) {\r\n        activityLogWhere.bdrId = targetUser.id;\r\n      } else {\r\n        activityLogWhere.bdrId = '___NO_MATCH___';\r\n      }\r\n    }\r\n\r\n    const leadWhere: any = {};\r\n    // Role-based filtering for leads - filter by bdrId (user relation)\r\n    if (role === Role.BDR) {\r\n      // BDRs can only see their own leads\r\n      leadWhere.bdrId = userId;\r\n    } else if ((role === Role.ADMIN || role === Role.DIRECTOR || role === Role.MANAGER) && bdr) {\r\n      // Filter by specific BDR user (reuse targetUser from above)\r\n      const targetUser = await prisma.user.findFirst({ where: { name: bdr }, select: { id: true } });\r\n      if (targetUser) {\r\n        leadWhere.bdrId = targetUser.id;\r\n      } else {\r\n        leadWhere.bdrId = '___NO_MATCH___';\r\n      }\r\n    }\r\n\r\n    // Get comprehensive data with optimized queries\r\n    const [\r\n      pipelineItems,\r\n      activityLogs,\r\n      leads,\r\n      allBDRs,\r\n      kpiTargetsRaw,\r\n      financeEntries\r\n    ] = await Promise.all([\r\n      prisma.pipelineItem.findMany({\r\n        where: pipelineWhere,\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          bdr: { select: { name: true } },\r\n          category: true,\r\n          status: true,\r\n          addedDate: true,\r\n          lastUpdated: true,\r\n          callDate: true,\r\n          expectedCloseDate: true,\r\n          partnerListSentDate: true,\r\n          partnerListSize: true,\r\n          firstSaleDate: true,\r\n          totalSalesFromList: true,\r\n          value: true,\r\n          isSublist: true,\r\n          parentId: true,\r\n          notes: true,\r\n        },\r\n      }),\r\n      prisma.activityLog.findMany({\r\n        where: activityLogWhere,\r\n        select: {\r\n          id: true,\r\n          bdr: { select: { name: true } },\r\n          activityType: true,\r\n          timestamp: true,\r\n          pipelineItemId: true,\r\n          // Include status transition fields so call completion detection works\r\n          previousStatus: true,\r\n          newStatus: true,\r\n          previousCategory: true,\r\n          newCategory: true,\r\n          notes: true,\r\n        },\r\n        orderBy: { timestamp: 'desc' },\r\n        take: 1000, // Limit to most recent 1000 for performance\r\n      }),\r\n      prisma.lead.findMany({\r\n        where: leadWhere,\r\n        select: {\r\n          id: true,\r\n          bdr: { select: { name: true } },\r\n          status: true,\r\n          addedDate: true,\r\n        },\r\n      }),\r\n      prisma.user.findMany({\r\n        where: { isActive: true },\r\n        select: { name: true }\r\n      }).then(u => u.map(x => x.name || '').filter(Boolean) as string[]),\r\n      prisma.kpiTarget.findMany({\r\n        select: { name: true, value: true }\r\n      }),\r\n      prisma.financeEntry.findMany({\r\n        where: financeWhere,\r\n        select: {\r\n          id: true,\r\n          bdr: { select: { name: true } },\r\n          status: true,\r\n          soldAmount: true,\r\n          gbpAmount: true,\r\n          invoiceDate: true,\r\n          createdAt: true,\r\n          month: true,\r\n        },\r\n        orderBy: { createdAt: 'desc' },\r\n        take: 1000, // Limit to most recent 1000 for performance\r\n      }),\r\n    ]);\r\n\r\n    const kpiTargets = kpiTargetsRaw.reduce((acc: { [key: string]: number }, target: { name: string, value: number }) => {\r\n      acc[target.name] = target.value;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Calculate KPIs\r\n    const kpis = calculateKPIs(\r\n      pipelineItems.map(i => ({ ...i, bdr: i.bdr?.name || '' })),\r\n      activityLogs.map(l => ({ ...l, bdr: l.bdr?.name || '' })),\r\n      kpiTargets,\r\n      now,\r\n      financeEntries.map(f => ({ ...f, bdr: f.bdr?.name || '' }))\r\n    );\r\n    \r\n    // Team Performance Analysis\r\n    const teamPerformance = calculateTeamPerformance(\r\n      pipelineItems.map(i => ({ ...i, bdr: { name: i.bdr?.name || '' } })),\r\n      activityLogs.map(l => ({ ...l, bdr: { name: l.bdr?.name || '' } })),\r\n      financeEntries.map(f => ({ ...f, bdr: { name: f.bdr?.name || '' } }))\r\n    );\r\n    \r\n    // Pipeline Health Assessment\r\n    const pipelineHealth = assessPipelineHealth(\r\n      pipelineItems.map(i => ({ ...i, bdr: i.bdr?.name || '' })),\r\n      activityLogs.map(l => ({ ...l, bdr: l.bdr?.name || '' })),\r\n      now,\r\n      financeEntries.map(f => ({ ...f, bdr: f.bdr?.name || '' }))\r\n    );\r\n    \r\n    // Trend Analysis\r\n    const trends = calculateTrends(\r\n      pipelineItems.map(i => ({ ...i, bdr: i.bdr?.name || '' })),\r\n      activityLogs.map(l => ({ ...l, bdr: l.bdr?.name || '' })),\r\n      now,\r\n      financeEntries.map(f => ({ ...f, bdr: f.bdr?.name || '' }))\r\n    );\r\n    \r\n    // Critical Actions + add company conflict alert count as high-priority actions\r\n    const criticalActions = identifyCriticalActions(pipelineItems, activityLogs, teamPerformance, now);\r\n\r\n    // Count recent duplicate warnings about companies (last 14 days)\r\n    const recentCompanyConflicts = await prisma.duplicateWarning.count({\r\n      where: {\r\n        createdAt: { gte: subDays(now, 14) },\r\n        warningType: { in: ['COMPANY_NAME', 'COMPANY_DOMAIN'] as any },\r\n      }\r\n    });\r\n    if (recentCompanyConflicts > 0) {\r\n      criticalActions.unshift({\r\n        priority: 'high',\r\n        category: 'team',\r\n        action: `${recentCompanyConflicts} recent company conflict alert(s) detected across team`,\r\n        metric: recentCompanyConflicts,\r\n        deadline: 'This week',\r\n      });\r\n    }\r\n    \r\n    // Financial Summary\r\n    const financialSummary = calculateFinancialSummary(pipelineItems, activityLogs, now, financeEntries);\r\n    \r\n    // Predictive Insights\r\n    const predictions = generatePredictiveInsights(pipelineItems, activityLogs, trends, now);\r\n\r\n    const dashboard: ExecutiveDashboard = {\r\n      kpis,\r\n      teamPerformance,\r\n      pipelineHealth,\r\n      trends,\r\n      criticalActions,\r\n      financialSummary,\r\n      predictions,\r\n      bdrList: allBDRs\r\n    };\r\n\r\n    const respBody = {\r\n      dashboard,\r\n      generatedAt: now.toISOString(),\r\n      period,\r\n    };\r\n\r\n    setCache(cacheKey, respBody);\r\n\r\n    return new NextResponse(JSON.stringify(respBody), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Cache-Control': 'private, max-age=60, stale-while-revalidate=120',\r\n      },\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error generating executive dashboard:', error);\r\n    return new NextResponse(JSON.stringify({ \r\n      error: (error as Error).message,\r\n      dashboard: null\r\n    }), { status: 500, headers: { 'Content-Type': 'application/json' } });\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\executive\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'differenceInDays' is defined but never used.","line":5,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thisWeekStart' is assigned a value but never used.","line":86,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thisWeekEnd' is assigned a value but never used.","line":87,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3907,3910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3907,3910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4809,4812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4809,4812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { \r\n  startOfWeek, endOfWeek, startOfMonth, endOfMonth, \r\n  subWeeks, subMonths, addMonths, format, differenceInDays \r\n} from 'date-fns';\r\n\r\ninterface ExecutiveSummary {\r\n  // High-level KPIs\r\n  kpis: {\r\n    totalAgreements: number;\r\n    monthlyGrowthRate: number;\r\n    averageConversionRate: number;\r\n    pipelineHealth: 'Excellent' | 'Good' | 'Fair' | 'Poor';\r\n    forecastAccuracy: number;\r\n  };\r\n\r\n  // Trends and Forecasts\r\n  trends: {\r\n    activityProjection: Array<{\r\n      month: string;\r\n      projected: number;\r\n      actual: number;\r\n    }>;\r\n    activityTrends: Array<{\r\n      week: string;\r\n      calls: number;\r\n      proposals: number;\r\n      agreements: number;\r\n      trend: 'up' | 'down' | 'stable';\r\n    }>;\r\n  };\r\n\r\n  // Team Performance\r\n  teamInsights: {\r\n    topPerformer: {\r\n      name: string;\r\n      conversionRate: number;\r\n      agreements: number;\r\n    };\r\n    underPerformer: {\r\n      name: string;\r\n      conversionRate: number;\r\n      recommendations: string[];\r\n    };\r\n    teamAverage: {\r\n      callsPerWeek: number;\r\n      proposalsPerWeek: number;\r\n      agreementsPerWeek: number;\r\n      conversionRate: number;\r\n    };\r\n  };\r\n\r\n  // Risk Analysis\r\n  riskFactors: Array<{\r\n    type: 'High' | 'Medium' | 'Low';\r\n    description: string;\r\n    impact: string;\r\n    recommendation: string;\r\n  }>;\r\n\r\n  // Opportunities\r\n  opportunities: Array<{\r\n    category: string;\r\n    description: string;\r\n    potentialValue: number;\r\n    timeline: string;\r\n  }>;\r\n\r\n  // Action Items\r\n  actionItems: Array<{\r\n    priority: 'High' | 'Medium' | 'Low';\r\n    item: string;\r\n    owner: string;\r\n    deadline: string;\r\n  }>;\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const now = new Date();\r\n    const thisMonthStart = startOfMonth(now);\r\n    const thisMonthEnd = endOfMonth(now);\r\n    const lastMonthStart = startOfMonth(subMonths(now, 1));\r\n    const lastMonthEnd = endOfMonth(subMonths(now, 1));\r\n    const thisWeekStart = startOfWeek(now, { weekStartsOn: 1 });\r\n    const thisWeekEnd = endOfWeek(now, { weekStartsOn: 1 });\r\n\r\n    // Get all data\r\n    const allPipelineItems = await prisma.pipelineItem.findMany({\r\n      select: {\r\n        id: true,\r\n        bdr: true,\r\n        category: true,\r\n        status: true,\r\n        callDate: true,\r\n        lastUpdated: true,\r\n        addedDate: true,\r\n      },\r\n    });\r\n\r\n    // Agreement calculations\r\n    const thisMonthAgreements = allPipelineItems.filter(item => \r\n      item.status?.includes('Agreement') && \r\n      item.lastUpdated >= thisMonthStart && \r\n      item.lastUpdated <= thisMonthEnd\r\n    ).length;\r\n\r\n    const lastMonthAgreements = allPipelineItems.filter(item => \r\n      item.status?.includes('Agreement') && \r\n      item.lastUpdated >= lastMonthStart && \r\n      item.lastUpdated <= lastMonthEnd\r\n    ).length;\r\n\r\n    const monthlyGrowthRate = lastMonthAgreements > 0 \r\n      ? ((thisMonthAgreements - lastMonthAgreements) / lastMonthAgreements) * 100 \r\n      : 0;\r\n\r\n    // Conversion rate calculations\r\n    const totalCalls = allPipelineItems.filter(item => item.category === 'Calls').length;\r\n    const totalAgreements = allPipelineItems.filter(item => item.status?.includes('Agreement')).length;\r\n    const averageConversionRate = totalCalls > 0 ? (totalAgreements / totalCalls) * 100 : 0;\r\n\r\n    // Pipeline health assessment\r\n    const activePipeline = allPipelineItems.filter(item => \r\n      !item.status?.includes('Agreement') && !item.status?.includes('Declined')\r\n    ).length;\r\n\r\n    let pipelineHealth: 'Excellent' | 'Good' | 'Fair' | 'Poor' = 'Poor';\r\n    if (activePipeline > 50) pipelineHealth = 'Excellent';\r\n    else if (activePipeline > 25) pipelineHealth = 'Good';\r\n    else if (activePipeline > 10) pipelineHealth = 'Fair';\r\n\r\n    // Team performance analysis\r\n    const bdrPerformance: { [key: string]: any } = {};\r\n    \r\n    allPipelineItems.forEach(item => {\r\n      if (!item.bdr) return;\r\n      \r\n      if (!bdrPerformance[item.bdr]) {\r\n        bdrPerformance[item.bdr] = {\r\n          calls: 0,\r\n          proposals: 0,\r\n          agreements: 0,\r\n        };\r\n      }\r\n      \r\n      if (item.category === 'Calls') bdrPerformance[item.bdr].calls++;\r\n      if (item.status?.includes('Proposal')) bdrPerformance[item.bdr].proposals++;\r\n      if (item.status?.includes('Agreement')) {\r\n        bdrPerformance[item.bdr].agreements++;\r\n      }\r\n    });\r\n\r\n    // Calculate conversion rates for each BDR\r\n    Object.keys(bdrPerformance).forEach(bdr => {\r\n      const perf = bdrPerformance[bdr];\r\n      perf.conversionRate = perf.calls > 0 ? (perf.agreements / perf.calls) * 100 : 0;\r\n    });\r\n\r\n    // Find top and underperformer\r\n    const bdrList = Object.entries(bdrPerformance).map(([name, data]: [string, any]) => ({\r\n      name,\r\n      ...data,\r\n    }));\r\n\r\n    const topPerformer = bdrList.reduce((best, current) => \r\n      current.conversionRate > best.conversionRate ? current : best\r\n    );\r\n\r\n    const underPerformer = bdrList.reduce((worst, current) => \r\n      current.conversionRate < worst.conversionRate ? current : worst\r\n    );\r\n\r\n    // Team averages\r\n    const teamAverage = {\r\n      callsPerWeek: Math.round(totalCalls / Object.keys(bdrPerformance).length / 4), // Assuming 4 weeks\r\n      proposalsPerWeek: Math.round(bdrList.reduce((sum, bdr) => sum + bdr.proposals, 0) / Object.keys(bdrPerformance).length / 4),\r\n      agreementsPerWeek: Math.round(totalAgreements / Object.keys(bdrPerformance).length / 4),\r\n      conversionRate: averageConversionRate,\r\n    };\r\n\r\n    // Risk analysis\r\n    const riskFactors = [];\r\n    \r\n    if (averageConversionRate < 10) {\r\n      riskFactors.push({\r\n        type: 'High' as const,\r\n        description: 'Low overall conversion rate',\r\n        impact: 'Reduced agreements and missed targets',\r\n        recommendation: 'Implement sales training and review call scripts',\r\n      });\r\n    }\r\n\r\n    if (activePipeline < 10) {\r\n      riskFactors.push({\r\n        type: 'High' as const,\r\n        description: 'Low pipeline activity',\r\n        impact: 'Future agreement shortfall',\r\n        recommendation: 'Increase prospecting activities and lead generation',\r\n      });\r\n    }\r\n\r\n    if (monthlyGrowthRate < 0) {\r\n      riskFactors.push({\r\n        type: 'Medium' as const,\r\n        description: 'Negative month-over-month growth',\r\n        impact: 'Agreement decline trend',\r\n        recommendation: 'Analyze lost deals and improve conversion processes',\r\n      });\r\n    }\r\n\r\n    // Opportunities\r\n    const opportunities = [];\r\n    \r\n    if (topPerformer.conversionRate > averageConversionRate * 1.5) {\r\n      opportunities.push({\r\n        category: 'Training',\r\n        description: `Replicate ${topPerformer.name}'s successful strategies across the team`,\r\n        potentialValue: (topPerformer.conversionRate - averageConversionRate) * totalCalls * 100, // Estimated value\r\n        timeline: '2-4 weeks',\r\n      });\r\n    }\r\n\r\n    const upcomingCalls = allPipelineItems.filter(item => \r\n      item.category === 'Calls' && item.callDate && item.callDate > now\r\n    ).length;\r\n\r\n    if (upcomingCalls > 20) {\r\n      opportunities.push({\r\n        category: 'Agreements',\r\n        description: 'High volume of upcoming calls presents conversion opportunities',\r\n        potentialValue: upcomingCalls * averageConversionRate * 50, // Estimated deal size\r\n        timeline: '1-2 weeks',\r\n      });\r\n    }\r\n\r\n    // Action items\r\n    const actionItems = [];\r\n    \r\n    if (underPerformer.conversionRate < averageConversionRate * 0.5) {\r\n      actionItems.push({\r\n        priority: 'High' as const,\r\n        item: `Provide additional coaching to ${underPerformer.name}`,\r\n        owner: 'Sales Manager',\r\n        deadline: format(addMonths(now, 0), 'MMM dd'),\r\n      });\r\n    }\r\n\r\n    if (pipelineHealth === 'Poor') {\r\n      actionItems.push({\r\n        priority: 'High' as const,\r\n        item: 'Increase lead generation activities',\r\n        owner: 'Marketing Team',\r\n        deadline: format(addMonths(now, 0), 'MMM dd'),\r\n      });\r\n    }\r\n\r\n    actionItems.push({\r\n      priority: 'Medium' as const,\r\n      item: 'Review and optimize call scripts',\r\n      owner: 'Sales Team',\r\n      deadline: format(addMonths(now, 1), 'MMM dd'),\r\n    });\r\n\r\n    // Generate trends data (simplified)\r\n    const activityProjection = [];\r\n    for (let i = -2; i <= 3; i++) {\r\n      const month = addMonths(now, i);\r\n      const monthAgreements = i <= 0 ? \r\n        allPipelineItems\r\n          .filter(item => \r\n            item.status?.includes('Agreement') && \r\n            item.lastUpdated >= startOfMonth(month) && \r\n            item.lastUpdated <= endOfMonth(month)\r\n          ).length :\r\n        thisMonthAgreements * (1 + (monthlyGrowthRate / 100)) ** i; // Projected\r\n      \r\n      activityProjection.push({\r\n        month: format(month, 'MMM yyyy'),\r\n        projected: i > 0 ? monthAgreements : 0,\r\n        actual: i <= 0 ? monthAgreements : 0,\r\n      });\r\n    }\r\n\r\n    // Activity trends (last 4 weeks)\r\n    const activityTrends = [];\r\n    for (let i = 3; i >= 0; i--) {\r\n      const weekStart = startOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\r\n      const weekEnd = endOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\r\n      \r\n      const weekCalls = allPipelineItems.filter(item => \r\n        item.category === 'Calls' && \r\n        item.callDate && item.callDate >= weekStart && item.callDate <= weekEnd\r\n      ).length;\r\n      \r\n      const weekProposals = allPipelineItems.filter(item => \r\n        item.status?.includes('Proposal') && \r\n        item.lastUpdated >= weekStart && item.lastUpdated <= weekEnd\r\n      ).length;\r\n      \r\n      const weekAgreements = allPipelineItems.filter(item => \r\n        item.status?.includes('Agreement') && \r\n        item.lastUpdated >= weekStart && item.lastUpdated <= weekEnd\r\n      ).length;\r\n      \r\n      activityTrends.push({\r\n        week: `Week ${4 - i}`,\r\n        calls: weekCalls,\r\n        proposals: weekProposals,\r\n        agreements: weekAgreements,\r\n        trend: 'stable' as const, // Simplified\r\n      });\r\n    }\r\n\r\n    const executiveSummary: ExecutiveSummary = {\r\n      kpis: {\r\n        totalAgreements: thisMonthAgreements,\r\n        monthlyGrowthRate: Math.round(monthlyGrowthRate * 100) / 100,\r\n        averageConversionRate: Math.round(averageConversionRate * 100) / 100,\r\n        pipelineHealth,\r\n        forecastAccuracy: 85, // Placeholder\r\n      },\r\n      trends: {\r\n        activityProjection,\r\n        activityTrends,\r\n      },\r\n      teamInsights: {\r\n        topPerformer: {\r\n          name: topPerformer.name,\r\n          conversionRate: Math.round(topPerformer.conversionRate * 100) / 100,\r\n          agreements: topPerformer.agreements,\r\n        },\r\n        underPerformer: {\r\n          name: underPerformer.name,\r\n          conversionRate: Math.round(underPerformer.conversionRate * 100) / 100,\r\n          recommendations: [\r\n            'Schedule 1-on-1 coaching sessions',\r\n            'Shadow top performers on calls',\r\n            'Review and practice objection handling',\r\n          ],\r\n        },\r\n        teamAverage,\r\n      },\r\n      riskFactors,\r\n      opportunities,\r\n      actionItems,\r\n    };\r\n\r\n    return NextResponse.json({\r\n      summary: executiveSummary,\r\n      generatedAt: now.toISOString(),\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error generating executive summary:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message,\r\n      summary: null,\r\n    }, { status: 500 });\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\lists-out\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[561,564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[561,564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { startOfMonth, endOfMonth, subMonths } from 'date-fns';\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const bdr = searchParams.get('bdr');\r\n    const monthsParam = parseInt(searchParams.get('months') || '4', 10);\r\n\r\n    const now = new Date();\r\n\r\n    // Time filter\r\n    const oldestMonthStart = startOfMonth(subMonths(now, monthsParam - 1));\r\n\r\n    // Fetch partner list sent logs\r\n    const logWhere: any = {\r\n      activityType: 'Partner_List_Sent',\r\n      timestamp: { gte: oldestMonthStart, lte: endOfMonth(now) },\r\n    };\r\n    if (bdr) logWhere.bdr = bdr;\r\n    const listLogs = await prisma.activityLog.findMany({ select: { timestamp: true, bdr: true, pipelineItemId: true }, where: logWhere });\r\n\r\n    // Fetch pipeline items linked to these lists for size & conversion\r\n    const pipelineIds = listLogs.map((l) => l.pipelineItemId).filter(Boolean);\r\n    const items = await prisma.pipelineItem.findMany({\r\n      where: { id: { in: pipelineIds as number[] } },\r\n      select: { id: true, partnerListSize: true, status: true, totalSalesFromList: true, bdr: true, partnerListSentDate: true },\r\n    });\r\n\r\n    // Monthly counts\r\n    const monthly: Array<{ month: string; lists: number; avgSize: number }> = [];\r\n    for (let i = monthsParam - 1; i >= 0; i--) {\r\n      const mStart = startOfMonth(subMonths(now, i));\r\n      const mEnd = endOfMonth(subMonths(now, i));\r\n      const monthItems = items.filter((it) => it.partnerListSentDate && it.partnerListSentDate >= mStart && it.partnerListSentDate <= mEnd);\r\n      const lists = monthItems.length;\r\n      const avgSize = lists > 0 ? Math.round(monthItems.reduce((s, it) => s + (it.partnerListSize || 0), 0) / lists) : 0;\r\n      monthly.push({ month: mStart.toISOString().substring(0, 7), lists, avgSize });\r\n    }\r\n\r\n    // Overall stats\r\n    const totalLists = items.length;\r\n    const averageSize = totalLists > 0 ? Math.round(items.reduce((s, it) => s + (it.partnerListSize || 0), 0) / totalLists) : 0;\r\n    const soldLists = items.filter((it) => it.status === 'Sold');\r\n    const conversionRate = totalLists > 0 ? Math.round((soldLists.length / totalLists) * 100 * 100) / 100 : 0;\r\n\r\n    return NextResponse.json({\r\n      range: { months: monthsParam },\r\n      monthly,\r\n      overall: { totalLists, averageSize, conversionRate },\r\n      generatedAt: now.toISOString(),\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching lists out:', error);\r\n    return NextResponse.json(\r\n      { error: (error as Error).message, listsOut: null },\r\n      { status: 500 },\r\n    );\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\monday-style\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'subMonths' is defined but never used.","line":5,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7399,7402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7399,7402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { \r\n  startOfWeek, endOfWeek, startOfMonth, endOfMonth, \r\n  subWeeks, subMonths, format, startOfDay, endOfDay, subDays \r\n} from 'date-fns';\r\n\r\ninterface MondayStyleMetrics {\r\n  // Core Call Metrics\r\n  callsLastWeek: number;\r\n  callsThisWeek: number;\r\n  callsNextWeek: number;\r\n  totalFutureCalls: number;\r\n  mtdCalls: number;\r\n\r\n  // Proposal Metrics\r\n  outstandingProfileProposals: number;\r\n  outstandingMediaProposals: number;\r\n  totalProposalsLastWeek: number;\r\n  totalProposalsThisWeek: number;\r\n\r\n  // Agreement Metrics\r\n  outstandingProfileAgreements: number;\r\n  outstandingMediaAgreements: number;\r\n  totalAgreementsLastWeek: number;\r\n  totalAgreementsThisWeek: number;\r\n\r\n  // Lists Metrics\r\n  totalListsOutLastWeek: number;\r\n  totalListsOutThisWeek: number;\r\n  totalListsSoldLastWeek: number;\r\n  totalListsSoldThisWeek: number;\r\n  outstandingLists: number;\r\n\r\n  // Battery/Progress Tracking\r\n  batteryPercentage: number;\r\n  progressBreakdown: {\r\n    calls: number;\r\n    proposals: number;\r\n    agreements: number;\r\n    lists: number;\r\n  };\r\n\r\n  // Individual BDR Breakdown\r\n  bdrBreakdown: Array<{\r\n    bdr: string;\r\n    callsLastWeek: number;\r\n    callsThisWeek: number;\r\n    callsNextWeek: number;\r\n    proposalsOutstanding: number;\r\n    agreementsOutstanding: number;\r\n    listsOut: number;\r\n    batteryScore: number;\r\n    weeklyTarget: number;\r\n    weeklyProgress: number;\r\n  }>;\r\n\r\n  // Advanced Metrics (Beyond Monday)\r\n  callOutcomes: {\r\n    scheduled: number;\r\n    completed: number;\r\n    noShow: number;\r\n    rescheduled: number;\r\n  };\r\n  \r\n  proposalStatus: {\r\n    sent: number;\r\n    underReview: number;\r\n    approved: number;\r\n    declined: number;\r\n  };\r\n\r\n  agreementStatus: {\r\n    pending: number;\r\n    signed: number;\r\n    cancelled: number;\r\n  };\r\n\r\n  // Time-based Performance\r\n  dailyMetrics: Array<{\r\n    date: string;\r\n    calls: number;\r\n    proposals: number;\r\n    agreements: number;\r\n    lists: number;\r\n  }>;\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const now = new Date();\r\n    \r\n    // Date calculations\r\n    const thisWeekStart = startOfWeek(now, { weekStartsOn: 1 });\r\n    const thisWeekEnd = endOfWeek(now, { weekStartsOn: 1 });\r\n    const lastWeekStart = startOfWeek(subWeeks(now, 1), { weekStartsOn: 1 });\r\n    const lastWeekEnd = endOfWeek(subWeeks(now, 1), { weekStartsOn: 1 });\r\n    const nextWeekStart = startOfWeek(subWeeks(now, -1), { weekStartsOn: 1 });\r\n    const nextWeekEnd = endOfWeek(subWeeks(now, -1), { weekStartsOn: 1 });\r\n    const monthStart = startOfMonth(now);\r\n    const monthEnd = endOfMonth(now);\r\n\r\n    // Get all pipeline items\r\n    const allPipelineItems = await prisma.pipelineItem.findMany({\r\n      select: {\r\n        id: true,\r\n        bdr: true,\r\n        category: true,\r\n        status: true,\r\n        callDate: true,\r\n        lastUpdated: true,\r\n        addedDate: true,\r\n      },\r\n    });\r\n\r\n    // Get activity logs for detailed tracking\r\n    const activityLogs = await prisma.activityLog.findMany({\r\n      where: {\r\n        timestamp: {\r\n          gte: subDays(now, 30), // Last 30 days\r\n        },\r\n      },\r\n      select: {\r\n        id: true,\r\n        bdr: true,\r\n        activityType: true,\r\n        timestamp: true,\r\n        description: true,\r\n        pipelineItemId: true,\r\n      },\r\n    });\r\n\r\n    // Core Call Metrics\r\n    const callItems = allPipelineItems.filter(item => item.category === 'Calls');\r\n    \r\n    const callsLastWeek = callItems.filter(item => \r\n      item.callDate && item.callDate >= lastWeekStart && item.callDate <= lastWeekEnd\r\n    ).length;\r\n    \r\n    const callsThisWeek = callItems.filter(item => \r\n      item.callDate && item.callDate >= thisWeekStart && item.callDate <= thisWeekEnd\r\n    ).length;\r\n    \r\n    const callsNextWeek = callItems.filter(item => \r\n      item.callDate && item.callDate >= nextWeekStart && item.callDate <= nextWeekEnd\r\n    ).length;\r\n    \r\n    const totalFutureCalls = callItems.filter(item => \r\n      item.callDate && item.callDate > now\r\n    ).length;\r\n    \r\n    const mtdCalls = callItems.filter(item => \r\n      item.callDate && item.callDate >= monthStart && item.callDate <= monthEnd\r\n    ).length;\r\n\r\n    // Proposal Metrics\r\n    const proposalItems = allPipelineItems.filter(item => \r\n      item.status && (item.status.includes('Proposal') || item.status.includes('proposal'))\r\n    );\r\n    \r\n    const outstandingProfileProposals = proposalItems.filter(item => \r\n      item.status.includes('Profile') && !item.status.includes('Agreement')\r\n    ).length;\r\n    \r\n    const outstandingMediaProposals = proposalItems.filter(item => \r\n      item.status.includes('Media') && !item.status.includes('Agreement')\r\n    ).length;\r\n    \r\n    const totalProposalsLastWeek = proposalItems.filter(item => \r\n      item.lastUpdated >= lastWeekStart && item.lastUpdated <= lastWeekEnd\r\n    ).length;\r\n    \r\n    const totalProposalsThisWeek = proposalItems.filter(item => \r\n      item.lastUpdated >= thisWeekStart && item.lastUpdated <= thisWeekEnd\r\n    ).length;\r\n\r\n    // Agreement Metrics\r\n    const agreementItems = allPipelineItems.filter(item => \r\n      item.status && (item.status.includes('Agreement') || item.status.includes('agreement'))\r\n    );\r\n    \r\n    const outstandingProfileAgreements = agreementItems.filter(item => \r\n      item.status.includes('Profile')\r\n    ).length;\r\n    \r\n    const outstandingMediaAgreements = agreementItems.filter(item => \r\n      item.status.includes('Media')\r\n    ).length;\r\n    \r\n    const totalAgreementsLastWeek = agreementItems.filter(item => \r\n      item.lastUpdated >= lastWeekStart && item.lastUpdated <= lastWeekEnd\r\n    ).length;\r\n    \r\n    const totalAgreementsThisWeek = agreementItems.filter(item => \r\n      item.lastUpdated >= thisWeekStart && item.lastUpdated <= thisWeekEnd\r\n    ).length;\r\n\r\n    // Lists Metrics\r\n    const listItems = allPipelineItems.filter(item => \r\n      item.category === 'Lists_Media_QA' || item.category === 'Lists'\r\n    );\r\n    \r\n    const totalListsOutLastWeek = listItems.filter(item => \r\n      item.addedDate >= lastWeekStart && item.addedDate <= lastWeekEnd\r\n    ).length;\r\n    \r\n    const totalListsOutThisWeek = listItems.filter(item => \r\n      item.addedDate >= thisWeekStart && item.addedDate <= thisWeekEnd\r\n    ).length;\r\n    \r\n    const totalListsSoldLastWeek = listItems.filter(item => \r\n      item.status && item.status.includes('Agreement') &&\r\n      item.lastUpdated >= lastWeekStart && item.lastUpdated <= lastWeekEnd\r\n    ).length;\r\n    \r\n    const totalListsSoldThisWeek = listItems.filter(item => \r\n      item.status && item.status.includes('Agreement') &&\r\n      item.lastUpdated >= thisWeekStart && item.lastUpdated <= thisWeekEnd\r\n    ).length;\r\n    \r\n    const outstandingLists = listItems.filter(item => \r\n      !item.status || !item.status.includes('Agreement')\r\n    ).length;\r\n\r\n    // Battery/Progress Calculation\r\n    const totalActivity = allPipelineItems.length;\r\n    const completedActivity = agreementItems.length;\r\n    const batteryPercentage = totalActivity > 0 ? (completedActivity / totalActivity) * 100 : 0;\r\n\r\n    const progressBreakdown = {\r\n      calls: callItems.length,\r\n      proposals: proposalItems.length,\r\n      agreements: agreementItems.length,\r\n      lists: listItems.length,\r\n    };\r\n\r\n    // BDR Breakdown\r\n    const bdrData: { [key: string]: any[] } = {};\r\n    allPipelineItems.forEach(item => {\r\n      if (item.bdr) {\r\n        if (!bdrData[item.bdr]) bdrData[item.bdr] = [];\r\n        bdrData[item.bdr].push(item);\r\n      }\r\n    });\r\n\r\n    // Get KPI targets for individual BDRs (fetch once outside the loop)\r\n    const kpiTargetsRaw = await prisma.kpiTarget.findMany();\r\n    const kpiTargets = kpiTargetsRaw.reduce((acc: { [key: string]: number }, target: { name: string, value: number }) => {\r\n      acc[target.name] = target.value;\r\n      return acc;\r\n    }, {});\r\n    \r\n    const bdrBreakdown = Object.entries(bdrData).map(([bdr, items]) => {\r\n      const bdrCalls = items.filter(item => item.category === 'Calls');\r\n      const bdrProposals = items.filter(item => \r\n        item.status && item.status.includes('Proposal')\r\n      );\r\n      const bdrAgreements = items.filter(item => \r\n        item.status && item.status.includes('Agreement')\r\n      );\r\n      const bdrLists = items.filter(item => \r\n        item.category === 'Lists_Media_QA' || item.category === 'Lists'\r\n      );\r\n\r\n      const weeklyTarget = kpiTargets.weeklyAgreements || 3; // Agreements per week\r\n      const weeklyProgress = (bdrAgreements.length / weeklyTarget) * 100;\r\n      const batteryScore = items.length > 0 ? (bdrAgreements.length / items.length) * 100 : 0;\r\n\r\n      return {\r\n        bdr,\r\n        callsLastWeek: bdrCalls.filter(item => \r\n          item.callDate && item.callDate >= lastWeekStart && item.callDate <= lastWeekEnd\r\n        ).length,\r\n        callsThisWeek: bdrCalls.filter(item => \r\n          item.callDate && item.callDate >= thisWeekStart && item.callDate <= thisWeekEnd\r\n        ).length,\r\n        callsNextWeek: bdrCalls.filter(item => \r\n          item.callDate && item.callDate >= nextWeekStart && item.callDate <= nextWeekEnd\r\n        ).length,\r\n        proposalsOutstanding: bdrProposals.filter(item => \r\n          !item.status.includes('Agreement')\r\n        ).length,\r\n        agreementsOutstanding: bdrAgreements.length,\r\n        listsOut: bdrLists.filter(item => \r\n          !item.status || !item.status.includes('Agreement')\r\n        ).length,\r\n        batteryScore: Math.round(batteryScore * 100) / 100,\r\n        weeklyTarget,\r\n        weeklyProgress: Math.round(weeklyProgress * 100) / 100,\r\n      };\r\n    });\r\n\r\n    // Advanced Call Outcomes\r\n    const callOutcomes = {\r\n      scheduled: callItems.filter(item => item.callDate && item.callDate > now).length,\r\n      completed: callItems.filter(item => item.callDate && item.callDate <= now).length,\r\n      noShow: activityLogs.filter(log => \r\n        log.activityType === 'No_Show' || log.description?.includes('no show')\r\n      ).length,\r\n      rescheduled: activityLogs.filter(log => \r\n        log.activityType === 'Rescheduled' || log.description?.includes('reschedule')\r\n      ).length,\r\n    };\r\n\r\n    // Proposal Status\r\n    const proposalStatus = {\r\n      sent: proposalItems.length,\r\n      underReview: proposalItems.filter(item => \r\n        item.status.includes('Proposal') && !item.status.includes('Agreement')\r\n      ).length,\r\n      approved: proposalItems.filter(item => \r\n        item.status.includes('Agreement')\r\n      ).length,\r\n      declined: proposalItems.filter(item => \r\n        item.status.includes('Declined')\r\n      ).length,\r\n    };\r\n\r\n    // Agreement Status\r\n    const agreementStatus = {\r\n      pending: agreementItems.filter(item => \r\n        !item.status.includes('Signed')\r\n      ).length,\r\n      signed: agreementItems.filter(item => \r\n        item.status.includes('Signed')\r\n      ).length,\r\n      cancelled: agreementItems.filter(item => \r\n        item.status.includes('Cancelled')\r\n      ).length,\r\n    };\r\n\r\n    // Daily Metrics (last 7 days)\r\n    const dailyMetrics = [];\r\n    for (let i = 6; i >= 0; i--) {\r\n      const date = subDays(now, i);\r\n      const dayStart = startOfDay(date);\r\n      const dayEnd = endOfDay(date);\r\n      \r\n      const dayItems = allPipelineItems.filter(item => \r\n        item.addedDate >= dayStart && item.addedDate <= dayEnd\r\n      );\r\n      \r\n      dailyMetrics.push({\r\n        date: format(date, 'MMM dd'),\r\n        calls: dayItems.filter(item => item.category === 'Calls').length,\r\n        proposals: dayItems.filter(item => \r\n          item.status && item.status.includes('Proposal')\r\n        ).length,\r\n        agreements: dayItems.filter(item => \r\n          item.status && item.status.includes('Agreement')\r\n        ).length,\r\n        lists: dayItems.filter(item => \r\n          item.category === 'Lists_Media_QA' || item.category === 'Lists'\r\n        ).length,\r\n      });\r\n    }\r\n\r\n    const metrics: MondayStyleMetrics = {\r\n      // Core Metrics\r\n      callsLastWeek,\r\n      callsThisWeek,\r\n      callsNextWeek,\r\n      totalFutureCalls,\r\n      mtdCalls,\r\n      \r\n      // Proposals\r\n      outstandingProfileProposals,\r\n      outstandingMediaProposals,\r\n      totalProposalsLastWeek,\r\n      totalProposalsThisWeek,\r\n      \r\n      // Agreements\r\n      outstandingProfileAgreements,\r\n      outstandingMediaAgreements,\r\n      totalAgreementsLastWeek,\r\n      totalAgreementsThisWeek,\r\n      \r\n      // Lists\r\n      totalListsOutLastWeek,\r\n      totalListsOutThisWeek,\r\n      totalListsSoldLastWeek,\r\n      totalListsSoldThisWeek,\r\n      outstandingLists,\r\n      \r\n      // Battery\r\n      batteryPercentage: Math.round(batteryPercentage * 100) / 100,\r\n      progressBreakdown,\r\n      \r\n      // BDR Data\r\n      bdrBreakdown,\r\n      \r\n      // Advanced Metrics\r\n      callOutcomes,\r\n      proposalStatus,\r\n      agreementStatus,\r\n      dailyMetrics,\r\n    };\r\n\r\n    return NextResponse.json({\r\n      metrics,\r\n      generatedAt: now.toISOString(),\r\n      timeZone: 'UTC',\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching Monday-style metrics:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message,\r\n      metrics: null,\r\n    }, { status: 500 });\r\n  }\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\partner-list-analytics\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'subMonths' is defined but never used.","line":3,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":79},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addDays' is defined but never used.","line":3,"column":89,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":96},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6401,6404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6401,6404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6463,6466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6463,6466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6520,6523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6520,6523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":455,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17616,17619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17616,17619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":472,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":472,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18137,18140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18137,18140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":483,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":483,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18476,18479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18476,18479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":483,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":483,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18500,18503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18500,18503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":525,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19892,19895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19892,19895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":525,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19916,19919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19916,19919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activities' is defined but never used.","line":525,"column":75,"nodeType":null,"messageId":"unusedVar","endLine":525,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":525,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19935,19938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19935,19938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":583,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":583,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21745,21748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21745,21748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":635,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":635,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23526,23529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23526,23529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { startOfWeek, endOfWeek, startOfMonth, endOfMonth, subWeeks, subMonths, format, addDays, subDays, differenceInDays } from 'date-fns';\r\n\r\ninterface PartnerListAnalytics {\r\n  bdr: string;\r\n  \r\n  // List Volume Metrics\r\n  totalListsSent: number;\r\n  listsThisWeek: number;\r\n  listsThisMonth: number;\r\n  activeListsOut: number;           // Lists currently in market\r\n  \r\n  // List Size Distribution\r\n  smallLists: number;               // 3-8 partners\r\n  mediumLists: number;              // 9-15 partners  \r\n  largeLists: number;               // 16+ partners\r\n  averageListSize: number;\r\n  largestList: number;\r\n  smallestList: number;\r\n  \r\n  // Conversion Performance by List Size\r\n  smallListConversionRate: number;  // Conversion rate for small lists\r\n  mediumListConversionRate: number; // Conversion rate for medium lists\r\n  largeListConversionRate: number;  // Conversion rate for large lists\r\n  overallListConversionRate: number;\r\n  \r\n  // Revenue & Value Analysis\r\n  totalRevenueFromLists: number;\r\n  averageRevenuePerList: number;\r\n  averageRevenuePerPartner: number;\r\n  revenueByListSize: {\r\n    small: number;\r\n    medium: number;\r\n    large: number;\r\n  };\r\n  \r\n  // Response & Engagement Metrics\r\n  partnerResponseRate: number;      // % of partners who respond\r\n  partnerInterestRate: number;      // % of partners showing interest\r\n  timeToFirstResponse: number;      // Average days to first partner response\r\n  timeToFirstSale: number;          // Average days to first sale from list\r\n  \r\n  // Current Active Lists\r\n  activePartnerLists: Array<{\r\n    id: number;\r\n    mainLeadName: string;\r\n    company: string;\r\n    listSentDate: string;\r\n    partnerCount: number;\r\n    responsesReceived: number;\r\n    salesCount: number;\r\n    status: string;\r\n    daysActive: number;\r\n  }>;\r\n  \r\n  // Recent Performance\r\n  recentListPerformance: Array<{\r\n    id: number;\r\n    mainLeadName: string;\r\n    company: string;\r\n    listSentDate: string;\r\n    partnerCount: number;\r\n    salesCount: number;\r\n    totalRevenue: number;\r\n    conversionRate: number;\r\n    status: string;\r\n  }>;\r\n  \r\n  // Trend Analysis\r\n  weeklyListTrend: Array<{\r\n    weekStart: string;\r\n    listsSent: number;\r\n    averageListSize: number;\r\n    conversions: number;\r\n    revenue: number;\r\n  }>;\r\n  \r\n  // Optimization Insights\r\n  optimalListSize: number;          // Size that performs best\r\n  bestPerformingListSize: string;   // Category description\r\n  underperformingLists: number;     // Lists with no responses after 2+ weeks\r\n  listSizeRecommendation: string;   // AI-driven recommendation\r\n}\r\n\r\ninterface TeamPartnerListSummary {\r\n  totalActiveListsOut: number;\r\n  totalListsSentThisMonth: number;\r\n  teamAverageListSize: number;\r\n  teamOverallConversionRate: number;\r\n  teamTotalRevenue: number;\r\n  bestPerformingBDR: string;\r\n  listSizeTrend: 'increasing' | 'stable' | 'decreasing';\r\n  conversionTrend: 'improving' | 'stable' | 'declining';\r\n  \r\n  // Key Insights\r\n  insights: Array<{\r\n    type: 'opportunity' | 'concern' | 'recommendation';\r\n    message: string;\r\n    bdr?: string;\r\n    metric?: number;\r\n  }>;\r\n  \r\n  // Performance by List Size (team-wide)\r\n  teamPerformanceBySize: {\r\n    small: { count: number; conversionRate: number; avgRevenue: number; };\r\n    medium: { count: number; conversionRate: number; avgRevenue: number; };\r\n    large: { count: number; conversionRate: number; avgRevenue: number; };\r\n  };\r\n}\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const bdrFilter = searchParams.get('bdr');\r\n    const minListSize = searchParams.get('minListSize') ? parseInt(searchParams.get('minListSize')!) : 0;\r\n    const maxListSize = searchParams.get('maxListSize') ? parseInt(searchParams.get('maxListSize')!) : 999;\r\n    const includeConversionRates = searchParams.get('includeConversionRates') !== 'false';\r\n    const groupBySize = searchParams.get('groupBySize') === 'true';\r\n    \r\n    const now = new Date();\r\n    \r\n    // Date ranges\r\n    const thisWeekStart = startOfWeek(now, { weekStartsOn: 1 });\r\n    const thisWeekEnd = endOfWeek(now, { weekStartsOn: 1 });\r\n    const thisMonthStart = startOfMonth(now);\r\n    const thisMonthEnd = endOfMonth(now);\r\n    \r\n    // Get main pipeline items (parent lists)\r\n    const mainListItems = await prisma.pipelineItem.findMany({\r\n      where: {\r\n        ...(bdrFilter ? { bdr: bdrFilter } : {}),\r\n        category: 'Lists_Media_QA',\r\n        isSublist: true, // This indicates it's a parent list container\r\n        partnerListSize: {\r\n          gte: minListSize,\r\n          lte: maxListSize\r\n        }\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        company: true,\r\n        bdr: true,\r\n        status: true,\r\n        lastUpdated: true,\r\n        addedDate: true,\r\n        partnerListSentDate: true,\r\n        partnerListSize: true,\r\n        firstSaleDate: true,\r\n        totalSalesFromList: true,\r\n        value: true,\r\n        notes: true,\r\n        sublistName: true,\r\n      },\r\n    });\r\n\r\n    // Get individual partner contacts within sublists\r\n    const partnerContacts = await prisma.pipelineItem.findMany({\r\n      where: {\r\n        category: 'Partner_Contacts',\r\n        parentId: { in: mainListItems.map(item => item.id) }\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        company: true,\r\n        bdr: true,\r\n        status: true,\r\n        lastUpdated: true,\r\n        addedDate: true,\r\n        value: true,\r\n        parentId: true,\r\n      },\r\n    });\r\n\r\n    // Get activity logs for partner list tracking\r\n    const activityLogs = await prisma.activityLog.findMany({\r\n      where: {\r\n        ...(bdrFilter ? { bdr: bdrFilter } : {}),\r\n        activityType: {\r\n          in: ['Partner_List_Sent', 'Partner_Added', 'Sale_Recorded', 'Status_Change']\r\n        },\r\n        pipelineItemId: { \r\n          in: [...mainListItems.map(item => item.id), ...partnerContacts.map(contact => contact.id)]\r\n        }\r\n      },\r\n      select: {\r\n        id: true,\r\n        bdr: true,\r\n        activityType: true,\r\n        timestamp: true,\r\n        pipelineItemId: true,\r\n        description: true,\r\n        newStatus: true,\r\n      },\r\n      orderBy: {\r\n        timestamp: 'desc'\r\n      }\r\n    });\r\n\r\n    // Group data by BDR\r\n    const bdrData: { [key: string]: any[] } = {};\r\n    const bdrPartnerContacts: { [key: string]: any[] } = {};\r\n    const bdrActivities: { [key: string]: any[] } = {};\r\n    \r\n    mainListItems.forEach(item => {\r\n      if (item.bdr) {\r\n        if (!bdrData[item.bdr]) bdrData[item.bdr] = [];\r\n        bdrData[item.bdr].push(item);\r\n      }\r\n    });\r\n\r\n    partnerContacts.forEach(contact => {\r\n      if (contact.bdr) {\r\n        if (!bdrPartnerContacts[contact.bdr]) bdrPartnerContacts[contact.bdr] = [];\r\n        bdrPartnerContacts[contact.bdr].push(contact);\r\n      }\r\n    });\r\n\r\n    activityLogs.forEach(log => {\r\n      if (log.bdr) {\r\n        if (!bdrActivities[log.bdr]) bdrActivities[log.bdr] = [];\r\n        bdrActivities[log.bdr].push(log);\r\n      }\r\n    });\r\n\r\n    // Calculate partner list analytics for each BDR\r\n    const bdrPartnerListAnalytics: PartnerListAnalytics[] = [];\r\n\r\n    for (const [bdrName, lists] of Object.entries(bdrData)) {\r\n      const partnerContactsForBdr = bdrPartnerContacts[bdrName] || [];\r\n      const activities = bdrActivities[bdrName] || [];\r\n      \r\n      // Basic list metrics\r\n      const totalListsSent = lists.filter(list => list.partnerListSentDate).length;\r\n      const listsThisWeek = lists.filter(list => \r\n        list.partnerListSentDate && \r\n        list.partnerListSentDate >= thisWeekStart && \r\n        list.partnerListSentDate <= thisWeekEnd\r\n      ).length;\r\n      const listsThisMonth = lists.filter(list => \r\n        list.partnerListSentDate && \r\n        list.partnerListSentDate >= thisMonthStart && \r\n        list.partnerListSentDate <= thisMonthEnd\r\n      ).length;\r\n      \r\n      const activeListsOut = lists.filter(list => \r\n        list.partnerListSentDate && \r\n        !['Sold', 'List Out - Not Sold', 'Free Q&A Offered'].includes(list.status)\r\n      ).length;\r\n      \r\n      // List size analysis\r\n      const listsWithSizes = lists.filter(list => list.partnerListSize && list.partnerListSize > 0);\r\n      const smallLists = listsWithSizes.filter(list => list.partnerListSize! >= 3 && list.partnerListSize! <= 8).length;\r\n      const mediumLists = listsWithSizes.filter(list => list.partnerListSize! >= 9 && list.partnerListSize! <= 15).length;\r\n      const largeLists = listsWithSizes.filter(list => list.partnerListSize! >= 16).length;\r\n      \r\n      const averageListSize = listsWithSizes.length > 0 ? \r\n        listsWithSizes.reduce((sum, list) => sum + (list.partnerListSize || 0), 0) / listsWithSizes.length : 0;\r\n      const largestList = listsWithSizes.length > 0 ? \r\n        Math.max(...listsWithSizes.map(list => list.partnerListSize || 0)) : 0;\r\n      const smallestList = listsWithSizes.length > 0 ? \r\n        Math.min(...listsWithSizes.map(list => list.partnerListSize || 0)) : 0;\r\n      \r\n      // Conversion rates by list size\r\n      const smallListConversionRate = calculateConversionRateBySize(lists, 3, 8);\r\n      const mediumListConversionRate = calculateConversionRateBySize(lists, 9, 15);\r\n      const largeListConversionRate = calculateConversionRateBySize(lists, 16, 999);\r\n      const overallListConversionRate = calculateOverallConversionRate(lists);\r\n      \r\n      // Revenue analysis\r\n      const { totalRevenue, averageRevenuePerList, averageRevenuePerPartner, revenueBySize } = \r\n        calculateRevenueMetrics(lists, partnerContactsForBdr);\r\n      \r\n      // Response and engagement metrics\r\n      const { partnerResponseRate, partnerInterestRate, timeToFirstResponse, timeToFirstSale } = \r\n        calculateEngagementMetrics(lists, partnerContactsForBdr, activities);\r\n      \r\n      // Active partner lists\r\n      const activePartnerLists = lists\r\n        .filter(list => \r\n          list.partnerListSentDate && \r\n          !['Sold', 'List Out - Not Sold', 'Free Q&A Offered'].includes(list.status)\r\n        )\r\n        .map(list => {\r\n          const partnersForList = partnerContactsForBdr.filter(contact => contact.parentId === list.id);\r\n          const responsesReceived = partnersForList.filter(contact => \r\n            contact.status && !['Contacted', 'Not Responsive'].includes(contact.status)\r\n          ).length;\r\n          const salesCount = partnersForList.filter(contact => contact.status === 'Sold').length;\r\n          \r\n          return {\r\n            id: list.id,\r\n            mainLeadName: list.name,\r\n            company: list.company || '',\r\n            listSentDate: format(list.partnerListSentDate!, 'dd/MM/yy'),\r\n            partnerCount: list.partnerListSize || 0,\r\n            responsesReceived,\r\n            salesCount,\r\n            status: list.status,\r\n            daysActive: differenceInDays(now, list.partnerListSentDate!)\r\n          };\r\n        })\r\n        .sort((a, b) => b.daysActive - a.daysActive);\r\n      \r\n      // Recent performance (last 60 days)\r\n      const sixtyDaysAgo = subDays(now, 60);\r\n      const recentListPerformance = lists\r\n        .filter(list => \r\n          list.partnerListSentDate && \r\n          list.partnerListSentDate >= sixtyDaysAgo\r\n        )\r\n        .map(list => {\r\n          const partnersForList = partnerContactsForBdr.filter(contact => contact.parentId === list.id);\r\n          const salesCount = partnersForList.filter(contact => contact.status === 'Sold').length;\r\n          const totalRevenue = partnersForList.reduce((sum, contact) => sum + (contact.value || 0), 0);\r\n          const conversionRate = list.partnerListSize! > 0 ? (salesCount / list.partnerListSize!) * 100 : 0;\r\n          \r\n          return {\r\n            id: list.id,\r\n            mainLeadName: list.name,\r\n            company: list.company || '',\r\n            listSentDate: format(list.partnerListSentDate!, 'dd/MM/yy'),\r\n            partnerCount: list.partnerListSize || 0,\r\n            salesCount,\r\n            totalRevenue,\r\n            conversionRate: Math.round(conversionRate * 100) / 100,\r\n            status: list.status\r\n          };\r\n        })\r\n        .sort((a, b) => new Date(b.listSentDate).getTime() - new Date(a.listSentDate).getTime());\r\n      \r\n      // Weekly trend analysis\r\n      const weeklyListTrend = [];\r\n      for (let i = 3; i >= 0; i--) {\r\n        const weekStart = startOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\r\n        const weekEnd = endOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\r\n        \r\n        const weekLists = lists.filter(list => \r\n          list.partnerListSentDate && \r\n          list.partnerListSentDate >= weekStart && \r\n          list.partnerListSentDate <= weekEnd\r\n        );\r\n        \r\n        const weekListsSent = weekLists.length;\r\n        const weekAverageListSize = weekLists.length > 0 ? \r\n          weekLists.reduce((sum, list) => sum + (list.partnerListSize || 0), 0) / weekLists.length : 0;\r\n        \r\n        const weekConversions = weekLists.filter(list => \r\n          list.firstSaleDate && list.firstSaleDate >= weekStart && list.firstSaleDate <= weekEnd\r\n        ).length;\r\n        \r\n        const weekRevenue = weekLists.reduce((sum, list) => sum + (list.totalSalesFromList || 0), 0);\r\n        \r\n        weeklyListTrend.push({\r\n          weekStart: format(weekStart, 'MMM dd'),\r\n          listsSent: weekListsSent,\r\n          averageListSize: Math.round(weekAverageListSize * 10) / 10,\r\n          conversions: weekConversions,\r\n          revenue: weekRevenue\r\n        });\r\n      }\r\n      \r\n      // Optimization insights\r\n      const optimalListSize = calculateOptimalListSize(lists);\r\n      const bestPerformingListSize = determineBestPerformingSize(smallListConversionRate, mediumListConversionRate, largeListConversionRate);\r\n      const underperformingLists = calculateUnderperformingLists(lists, now);\r\n      const listSizeRecommendation = generateListSizeRecommendation(\r\n        averageListSize, \r\n        smallListConversionRate, \r\n        mediumListConversionRate, \r\n        largeListConversionRate\r\n      );\r\n      \r\n      bdrPartnerListAnalytics.push({\r\n        bdr: bdrName,\r\n        totalListsSent,\r\n        listsThisWeek,\r\n        listsThisMonth,\r\n        activeListsOut,\r\n        smallLists,\r\n        mediumLists,\r\n        largeLists,\r\n        averageListSize: Math.round(averageListSize * 10) / 10,\r\n        largestList,\r\n        smallestList,\r\n        smallListConversionRate: Math.round(smallListConversionRate * 100) / 100,\r\n        mediumListConversionRate: Math.round(mediumListConversionRate * 100) / 100,\r\n        largeListConversionRate: Math.round(largeListConversionRate * 100) / 100,\r\n        overallListConversionRate: Math.round(overallListConversionRate * 100) / 100,\r\n        totalRevenueFromLists: totalRevenue,\r\n        averageRevenuePerList: Math.round(averageRevenuePerList),\r\n        averageRevenuePerPartner: Math.round(averageRevenuePerPartner),\r\n        revenueByListSize: revenueBySize,\r\n        partnerResponseRate: Math.round(partnerResponseRate * 100) / 100,\r\n        partnerInterestRate: Math.round(partnerInterestRate * 100) / 100,\r\n        timeToFirstResponse: Math.round(timeToFirstResponse * 10) / 10,\r\n        timeToFirstSale: Math.round(timeToFirstSale * 10) / 10,\r\n        activePartnerLists,\r\n        recentListPerformance,\r\n        weeklyListTrend,\r\n        optimalListSize,\r\n        bestPerformingListSize,\r\n        underperformingLists,\r\n        listSizeRecommendation\r\n      });\r\n    }\r\n    \r\n    // Sort by overall performance\r\n    bdrPartnerListAnalytics.sort((a, b) => {\r\n      const aScore = a.overallListConversionRate * a.totalListsSent + a.totalRevenueFromLists / 1000;\r\n      const bScore = b.overallListConversionRate * b.totalListsSent + b.totalRevenueFromLists / 1000;\r\n      return bScore - aScore;\r\n    });\r\n    \r\n    // Calculate team summary\r\n    const teamSummary: TeamPartnerListSummary = {\r\n      totalActiveListsOut: bdrPartnerListAnalytics.reduce((sum, bdr) => sum + bdr.activeListsOut, 0),\r\n      totalListsSentThisMonth: bdrPartnerListAnalytics.reduce((sum, bdr) => sum + bdr.listsThisMonth, 0),\r\n      teamAverageListSize: bdrPartnerListAnalytics.reduce((sum, bdr) => sum + bdr.averageListSize, 0) / bdrPartnerListAnalytics.length,\r\n      teamOverallConversionRate: bdrPartnerListAnalytics.reduce((sum, bdr) => sum + bdr.overallListConversionRate, 0) / bdrPartnerListAnalytics.length,\r\n      teamTotalRevenue: bdrPartnerListAnalytics.reduce((sum, bdr) => sum + bdr.totalRevenueFromLists, 0),\r\n      bestPerformingBDR: bdrPartnerListAnalytics[0]?.bdr || '',\r\n      listSizeTrend: assessListSizeTrend(bdrPartnerListAnalytics),\r\n      conversionTrend: assessConversionTrend(bdrPartnerListAnalytics),\r\n      insights: generateTeamInsights(bdrPartnerListAnalytics),\r\n      teamPerformanceBySize: calculateTeamPerformanceBySize(bdrPartnerListAnalytics)\r\n    };\r\n\r\n    return NextResponse.json({\r\n      bdrPartnerListAnalytics,\r\n      teamSummary,\r\n      generatedAt: now.toISOString(),\r\n      filters: {\r\n        bdrFilter,\r\n        minListSize,\r\n        maxListSize,\r\n        includeConversionRates,\r\n        groupBySize\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching partner list analytics:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message,\r\n      bdrPartnerListAnalytics: [],\r\n      teamSummary: null\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Helper functions\r\nfunction calculateConversionRateBySize(lists: any[], minSize: number, maxSize: number): number {\r\n  const filteredLists = lists.filter(list => \r\n    list.partnerListSize && \r\n    list.partnerListSize >= minSize && \r\n    list.partnerListSize <= maxSize &&\r\n    list.partnerListSentDate\r\n  );\r\n  \r\n  if (filteredLists.length === 0) return 0;\r\n  \r\n  const soldLists = filteredLists.filter(list => \r\n    list.firstSaleDate || list.status === 'Sold'\r\n  );\r\n  \r\n  return (soldLists.length / filteredLists.length) * 100;\r\n}\r\n\r\nfunction calculateOverallConversionRate(lists: any[]): number {\r\n  const sentLists = lists.filter(list => list.partnerListSentDate);\r\n  if (sentLists.length === 0) return 0;\r\n  \r\n  const soldLists = sentLists.filter(list => \r\n    list.firstSaleDate || list.status === 'Sold'\r\n  );\r\n  \r\n  return (soldLists.length / sentLists.length) * 100;\r\n}\r\n\r\nfunction calculateRevenueMetrics(lists: any[], partnerContacts: any[]) {\r\n  const totalRevenue = partnerContacts.reduce((sum, contact) => \r\n    sum + (contact.status === 'Sold' ? (contact.value || 0) : 0), 0\r\n  );\r\n  \r\n  const listsWithRevenue = lists.filter(list => list.partnerListSentDate);\r\n  const averageRevenuePerList = listsWithRevenue.length > 0 ? totalRevenue / listsWithRevenue.length : 0;\r\n  \r\n  const totalPartners = partnerContacts.length;\r\n  const averageRevenuePerPartner = totalPartners > 0 ? totalRevenue / totalPartners : 0;\r\n  \r\n  // Revenue by list size\r\n  const revenueBySize = {\r\n    small: 0,\r\n    medium: 0,\r\n    large: 0\r\n  };\r\n  \r\n  lists.forEach(list => {\r\n    if (!list.partnerListSize || !list.partnerListSentDate) return;\r\n    \r\n    const listRevenue = partnerContacts\r\n      .filter(contact => contact.parentId === list.id && contact.status === 'Sold')\r\n      .reduce((sum, contact) => sum + (contact.value || 0), 0);\r\n    \r\n    if (list.partnerListSize >= 3 && list.partnerListSize <= 8) {\r\n      revenueBySize.small += listRevenue;\r\n    } else if (list.partnerListSize >= 9 && list.partnerListSize <= 15) {\r\n      revenueBySize.medium += listRevenue;\r\n    } else if (list.partnerListSize >= 16) {\r\n      revenueBySize.large += listRevenue;\r\n    }\r\n  });\r\n  \r\n  return {\r\n    totalRevenue,\r\n    averageRevenuePerList,\r\n    averageRevenuePerPartner,\r\n    revenueBySize\r\n  };\r\n}\r\n\r\nfunction calculateEngagementMetrics(lists: any[], partnerContacts: any[], activities: any[]) {\r\n  const totalPartners = partnerContacts.length;\r\n  \r\n  if (totalPartners === 0) {\r\n    return {\r\n      partnerResponseRate: 0,\r\n      partnerInterestRate: 0,\r\n      timeToFirstResponse: 0,\r\n      timeToFirstSale: 0\r\n    };\r\n  }\r\n  \r\n  const respondedPartners = partnerContacts.filter(contact => \r\n    contact.status && !['Contacted', 'Not Responsive'].includes(contact.status)\r\n  );\r\n  \r\n  const interestedPartners = partnerContacts.filter(contact => \r\n    contact.status && ['Interested', 'Sold'].includes(contact.status)\r\n  );\r\n  \r\n  const partnerResponseRate = (respondedPartners.length / totalPartners) * 100;\r\n  const partnerInterestRate = (interestedPartners.length / totalPartners) * 100;\r\n  \r\n  // Calculate average time to first response\r\n  let totalResponseTime = 0;\r\n  let responseCount = 0;\r\n  \r\n  respondedPartners.forEach(contact => {\r\n    if (contact.addedDate && contact.lastUpdated && contact.lastUpdated > contact.addedDate) {\r\n      totalResponseTime += differenceInDays(contact.lastUpdated, contact.addedDate);\r\n      responseCount++;\r\n    }\r\n  });\r\n  \r\n  const timeToFirstResponse = responseCount > 0 ? totalResponseTime / responseCount : 0;\r\n  \r\n  // Calculate average time to first sale\r\n  const soldPartners = partnerContacts.filter(contact => contact.status === 'Sold');\r\n  let totalSaleTime = 0;\r\n  let saleCount = 0;\r\n  \r\n  soldPartners.forEach(contact => {\r\n    if (contact.addedDate && contact.lastUpdated) {\r\n      totalSaleTime += differenceInDays(contact.lastUpdated, contact.addedDate);\r\n      saleCount++;\r\n    }\r\n  });\r\n  \r\n  const timeToFirstSale = saleCount > 0 ? totalSaleTime / saleCount : 0;\r\n  \r\n  return {\r\n    partnerResponseRate,\r\n    partnerInterestRate,\r\n    timeToFirstResponse,\r\n    timeToFirstSale\r\n  };\r\n}\r\n\r\nfunction calculateOptimalListSize(lists: any[]): number {\r\n  // Analyze which list size performs best\r\n  const sizeGroups = {\r\n    small: { count: 0, sales: 0 },\r\n    medium: { count: 0, sales: 0 },\r\n    large: { count: 0, sales: 0 }\r\n  };\r\n  \r\n  lists.forEach(list => {\r\n    if (!list.partnerListSize || !list.partnerListSentDate) return;\r\n    \r\n    const hasSale = list.firstSaleDate || list.status === 'Sold';\r\n    \r\n    if (list.partnerListSize >= 3 && list.partnerListSize <= 8) {\r\n      sizeGroups.small.count++;\r\n      if (hasSale) sizeGroups.small.sales++;\r\n    } else if (list.partnerListSize >= 9 && list.partnerListSize <= 15) {\r\n      sizeGroups.medium.count++;\r\n      if (hasSale) sizeGroups.medium.sales++;\r\n    } else if (list.partnerListSize >= 16) {\r\n      sizeGroups.large.count++;\r\n      if (hasSale) sizeGroups.large.sales++;\r\n    }\r\n  });\r\n  \r\n  let bestConversion = 0;\r\n  let optimalSize = 10; // Default\r\n  \r\n  Object.entries(sizeGroups).forEach(([size, data]) => {\r\n    const conversion = data.count > 0 ? data.sales / data.count : 0;\r\n    if (conversion > bestConversion) {\r\n      bestConversion = conversion;\r\n      optimalSize = size === 'small' ? 6 : size === 'medium' ? 12 : 18;\r\n    }\r\n  });\r\n  \r\n  return optimalSize;\r\n}\r\n\r\nfunction determineBestPerformingSize(smallRate: number, mediumRate: number, largeRate: number): string {\r\n  const rates = { small: smallRate, medium: mediumRate, large: largeRate };\r\n  const best = Object.entries(rates).reduce((a, b) => rates[a[0]] > rates[b[0]] ? a : b);\r\n  \r\n  const sizeDescriptions = {\r\n    small: 'Small Lists (3-8 partners)',\r\n    medium: 'Medium Lists (9-15 partners)',\r\n    large: 'Large Lists (16+ partners)'\r\n  };\r\n  \r\n  return sizeDescriptions[best[0] as keyof typeof sizeDescriptions];\r\n}\r\n\r\nfunction calculateUnderperformingLists(lists: any[], currentDate: Date): number {\r\n  const twoWeeksAgo = subDays(currentDate, 14);\r\n  \r\n  return lists.filter(list => \r\n    list.partnerListSentDate && \r\n    list.partnerListSentDate <= twoWeeksAgo && \r\n    !list.firstSaleDate &&\r\n    list.status !== 'Sold' &&\r\n    !list.status.includes('Not Sold')\r\n  ).length;\r\n}\r\n\r\nfunction generateListSizeRecommendation(\r\n  averageSize: number, \r\n  smallRate: number, \r\n  mediumRate: number, \r\n  largeRate: number\r\n): string {\r\n  const bestRate = Math.max(smallRate, mediumRate, largeRate);\r\n  \r\n  if (bestRate === largeRate && averageSize < 12) {\r\n    return 'Consider increasing list sizes to 16+ partners for better conversion rates';\r\n  } else if (bestRate === smallRate && averageSize > 10) {\r\n    return 'Focus on smaller, more targeted lists (6-8 partners) for better results';\r\n  } else if (bestRate === mediumRate) {\r\n    return 'Maintain medium-sized lists (10-12 partners) for optimal balance';\r\n  } else {\r\n    return 'Current list sizing strategy appears optimal';\r\n  }\r\n}\r\n\r\nfunction assessListSizeTrend(analytics: PartnerListAnalytics[]): 'increasing' | 'stable' | 'decreasing' {\r\n  const recentAverageSizes = analytics.map(bdr => {\r\n    const recentTrend = bdr.weeklyListTrend.slice(-2);\r\n    return recentTrend.reduce((sum, week) => sum + week.averageListSize, 0) / recentTrend.length;\r\n  });\r\n  \r\n  const olderAverageSizes = analytics.map(bdr => {\r\n    const olderTrend = bdr.weeklyListTrend.slice(0, 2);\r\n    return olderTrend.reduce((sum, week) => sum + week.averageListSize, 0) / olderTrend.length;\r\n  });\r\n  \r\n  const recentAvg = recentAverageSizes.reduce((sum, size) => sum + size, 0) / recentAverageSizes.length;\r\n  const olderAvg = olderAverageSizes.reduce((sum, size) => sum + size, 0) / olderAverageSizes.length;\r\n  \r\n  const percentChange = olderAvg > 0 ? ((recentAvg - olderAvg) / olderAvg) * 100 : 0;\r\n  \r\n  if (percentChange > 10) return 'increasing';\r\n  if (percentChange < -10) return 'decreasing';\r\n  return 'stable';\r\n}\r\n\r\nfunction assessConversionTrend(analytics: PartnerListAnalytics[]): 'improving' | 'stable' | 'declining' {\r\n  const avgConversionRate = analytics.reduce((sum, bdr) => sum + bdr.overallListConversionRate, 0) / analytics.length;\r\n  \r\n  if (avgConversionRate > 25) return 'improving';\r\n  if (avgConversionRate < 15) return 'declining';\r\n  return 'stable';\r\n}\r\n\r\nfunction generateTeamInsights(analytics: PartnerListAnalytics[]): Array<{\r\n  type: 'opportunity' | 'concern' | 'recommendation';\r\n  message: string;\r\n  bdr?: string;\r\n  metric?: number;\r\n}> {\r\n  const insights = [];\r\n  \r\n  // Find opportunities\r\n  const topPerformer = analytics[0];\r\n  if (topPerformer && topPerformer.overallListConversionRate > 30) {\r\n    insights.push({\r\n      type: 'opportunity' as const,\r\n      message: `${topPerformer.bdr} has exceptional conversion rate of ${topPerformer.overallListConversionRate}% - study their approach`,\r\n      bdr: topPerformer.bdr,\r\n      metric: topPerformer.overallListConversionRate\r\n    });\r\n  }\r\n  \r\n  // Identify concerns\r\n  analytics.forEach(bdr => {\r\n    if (bdr.underperformingLists > 5) {\r\n      insights.push({\r\n        type: 'concern' as const,\r\n        message: `${bdr.bdr} has ${bdr.underperformingLists} underperforming lists requiring attention`,\r\n        bdr: bdr.bdr,\r\n        metric: bdr.underperformingLists\r\n      });\r\n    }\r\n    \r\n    if (bdr.overallListConversionRate < 10 && bdr.totalListsSent > 5) {\r\n      insights.push({\r\n        type: 'concern' as const,\r\n        message: `${bdr.bdr} has low conversion rate of ${bdr.overallListConversionRate}% despite sending ${bdr.totalListsSent} lists`,\r\n        bdr: bdr.bdr,\r\n        metric: bdr.overallListConversionRate\r\n      });\r\n    }\r\n  });\r\n  \r\n  // Generate recommendations\r\n  const teamAvgSize = analytics.reduce((sum, bdr) => sum + bdr.averageListSize, 0) / analytics.length;\r\n  if (teamAvgSize < 8) {\r\n    insights.push({\r\n      type: 'recommendation' as const,\r\n      message: `Team average list size is ${Math.round(teamAvgSize)} - consider larger lists for better reach`,\r\n      metric: teamAvgSize\r\n    });\r\n  }\r\n  \r\n  return insights.slice(0, 5); // Limit to top 5 insights\r\n}\r\n\r\nfunction calculateTeamPerformanceBySize(analytics: PartnerListAnalytics[]) {\r\n  return {\r\n    small: {\r\n      count: analytics.reduce((sum, bdr) => sum + bdr.smallLists, 0),\r\n      conversionRate: analytics.reduce((sum, bdr) => sum + bdr.smallListConversionRate, 0) / analytics.length,\r\n      avgRevenue: analytics.reduce((sum, bdr) => sum + bdr.revenueByListSize.small, 0) / analytics.length\r\n    },\r\n    medium: {\r\n      count: analytics.reduce((sum, bdr) => sum + bdr.mediumLists, 0),\r\n      conversionRate: analytics.reduce((sum, bdr) => sum + bdr.mediumListConversionRate, 0) / analytics.length,\r\n      avgRevenue: analytics.reduce((sum, bdr) => sum + bdr.revenueByListSize.medium, 0) / analytics.length\r\n    },\r\n    large: {\r\n      count: analytics.reduce((sum, bdr) => sum + bdr.largeLists, 0),\r\n      conversionRate: analytics.reduce((sum, bdr) => sum + bdr.largeListConversionRate, 0) / analytics.length,\r\n      avgRevenue: analytics.reduce((sum, bdr) => sum + bdr.revenueByListSize.large, 0) / analytics.length\r\n    }\r\n  };\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\performance\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\stats\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'weekAgo' is assigned a value but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'weekFromNow' is assigned a value but never used.","line":42,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'monthAgo' is assigned a value but never used.","line":43,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Get real lead count\r\n    const totalLeads = await prisma.lead.count();\r\n    \r\n    // Get real BDR data from actual database\r\n    const pipelineItems = await prisma.pipelineItem.findMany({\r\n      select: {\r\n        bdr: true,\r\n        category: true,\r\n        status: true,\r\n        callDate: true,\r\n        lastUpdated: true,\r\n      },\r\n    });\r\n\r\n    // Get finance entries for sales data\r\n    const financeEntries = await prisma.financeEntry.findMany({\r\n      select: {\r\n        bdr: true,\r\n        status: true,\r\n        soldAmount: true,\r\n        gbpAmount: true,\r\n        invoiceDate: true,\r\n        createdAt: true,\r\n        month: true,\r\n      },\r\n    });\r\n\r\n    // Calculate BDR statistics\r\n    const bdrCounts: { [key: string]: number } = {};\r\n    let callsCount = 0;\r\n    let agreementsCount = 0;\r\n    let salesCount = 0;\r\n    let totalRevenue = 0;\r\n    \r\n    const now = new Date();\r\n    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n    const weekFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\r\n    const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n\r\n    pipelineItems.forEach(item => {\r\n      // Count BDR items\r\n      if (item.bdr) {\r\n        bdrCounts[item.bdr] = (bdrCounts[item.bdr] || 0) + 1;\r\n      }\r\n      \r\n      // Count calls\r\n      if (item.category === 'Calls') {\r\n        callsCount++;\r\n      }\r\n      \r\n      // Count agreements\r\n      if (item.status && item.status.includes('Agreement')) {\r\n        agreementsCount++;\r\n      }\r\n    });\r\n\r\n    // Calculate sales statistics from finance entries\r\n    financeEntries.forEach(entry => {\r\n      salesCount++;\r\n      totalRevenue += entry.gbpAmount || 0;\r\n    });\r\n\r\n    // Create BDR stats array\r\n    const bdrStats = Object.entries(bdrCounts).map(([bdr, count]) => ({\r\n      bdr,\r\n      _count: { _all: count }\r\n    }));\r\n\r\n    // Calculate time-based metrics (approximated)\r\n    const callsThisWeek = Math.floor(callsCount * 0.3);\r\n    const agreementsThisMonth = Math.floor(agreementsCount * 0.4);\r\n    const salesThisMonth = financeEntries.filter(entry => {\r\n      const currentMonth = new Date().toISOString().slice(0, 7);\r\n      return entry.month === currentMonth;\r\n    }).length;\r\n    const revenueThisMonth = financeEntries.filter(entry => {\r\n      const currentMonth = new Date().toISOString().slice(0, 7);\r\n      return entry.month === currentMonth;\r\n    }).reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n\r\n    const teamStats = {\r\n      totalLeads,\r\n      totalPipelineItems: pipelineItems.length,\r\n      totalSales: salesCount,\r\n      totalRevenue: totalRevenue,\r\n      callsThisWeek,\r\n      callsLastWeek: Math.max(0, callsThisWeek - 2),\r\n      callsNextWeek: callsThisWeek + 3,\r\n      futureCalls: callsCount - callsThisWeek,\r\n      agreementsThisWeek: Math.floor(agreementsThisMonth / 4),\r\n      agreementsLastWeek: Math.floor(agreementsThisMonth / 4),\r\n      agreementsThisMonth,\r\n      agreementsLastMonth: Math.floor(agreementsThisMonth * 0.8),\r\n      salesThisMonth,\r\n      revenueThisMonth,\r\n    };\r\n\r\n    return NextResponse.json({ teamStats, bdrStats });\r\n  } catch (error) {\r\n    console.error('Error fetching reporting stats:', error);\r\n    return NextResponse.json({ \r\n      error: (error as Error).message,\r\n      teamStats: {\r\n        totalLeads: 0,\r\n        totalPipelineItems: 0,\r\n        totalSales: 0,\r\n        totalRevenue: 0,\r\n        callsThisWeek: 0,\r\n        callsLastWeek: 0,\r\n        callsNextWeek: 0,\r\n        futureCalls: 0,\r\n        agreementsThisWeek: 0,\r\n        agreementsLastWeek: 0,\r\n        agreementsThisMonth: 0,\r\n        agreementsLastMonth: 0,\r\n        salesThisMonth: 0,\r\n        revenueThisMonth: 0,\r\n      },\r\n      bdrStats: []\r\n    }, { status: 500 });\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\team-stats\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[751,754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[751,754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3345,3348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3345,3348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4592,4595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4592,4595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from \"next/server\";\r\nimport { Resource, Action } from \"@prisma/client\";\r\nimport { getAuthenticatedUser, createErrorResponse, createSuccessResponse } from \"@/lib/auth-api\";\r\nimport { hasPermission } from \"@/lib/permissions\";\r\nimport { prisma } from \"@/lib/db\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // Get authenticated user with permissions\r\n    const user = await getAuthenticatedUser(req);\r\n    if (!user) {\r\n      return createErrorResponse(\"Unauthorized\", 401);\r\n    }\r\n\r\n    // Check read permission for reports\r\n    if (!hasPermission(user, Resource.REPORTS, Action.READ)) {\r\n      return createErrorResponse(\"Forbidden\", 403);\r\n    }\r\n\r\n    // Determine territory scope\r\n    let territoryFilter: any = {};\r\n    let territoryName = 'All Territories';\r\n\r\n    if (hasPermission(user, Resource.REPORTS, Action.VIEW_ALL)) {\r\n      // Can see all territories\r\n      territoryFilter = {};\r\n      territoryName = 'Global';\r\n    } else if (hasPermission(user, Resource.REPORTS, Action.VIEW_TEAM)) {\r\n      // Can see their territory or managed territories\r\n      if (user.role === 'MANAGER' && user.managedTerritories && user.managedTerritories.length > 0) {\r\n        const managedTerritoryIds = user.managedTerritories.map(t => t.id);\r\n        territoryFilter = {\r\n          bdr: {\r\n            territoryId: { in: managedTerritoryIds }\r\n          }\r\n        };\r\n        \r\n        // Get territory names\r\n        const territories = await prisma.territory.findMany({\r\n          where: { id: { in: managedTerritoryIds } },\r\n          select: { name: true }\r\n        });\r\n        territoryName = territories.map(t => t.name).join(', ');\r\n      } else if (user.territoryId) {\r\n        territoryFilter = {\r\n          bdr: {\r\n            territoryId: user.territoryId\r\n          }\r\n        };\r\n        \r\n        const territory = await prisma.territory.findUnique({\r\n          where: { id: user.territoryId },\r\n          select: { name: true }\r\n        });\r\n        territoryName = territory?.name || 'Unknown Territory';\r\n      } else {\r\n        // No territory - only their own data\r\n        territoryFilter = {\r\n          bdrId: user.id\r\n        };\r\n        territoryName = 'Personal';\r\n      }\r\n    } else {\r\n      // Can only see their own data\r\n      territoryFilter = {\r\n        bdrId: user.id\r\n      };\r\n      territoryName = 'Personal';\r\n    }\r\n\r\n    // Get leads count\r\n    const totalLeads = await prisma.lead.count({\r\n      where: territoryFilter\r\n    });\r\n\r\n    // Get pipeline items count\r\n    const totalPipeline = await prisma.pipelineItem.count({\r\n      where: territoryFilter\r\n    });\r\n\r\n    // Calculate conversion rate (pipeline items with leads / total leads)\r\n    const pipelineWithLeads = await prisma.pipelineItem.count({\r\n      where: {\r\n        ...territoryFilter,\r\n        leadId: { not: null }\r\n      }\r\n    });\r\n\r\n    const conversionRate = totalLeads > 0 ? Math.round((pipelineWithLeads / totalLeads) * 100) : 0;\r\n\r\n    // Get recent activity count\r\n    const recentActivityCount = await prisma.activityLog.count({\r\n      where: {\r\n        ...territoryFilter,\r\n        timestamp: {\r\n          gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days\r\n        }\r\n      }\r\n    });\r\n\r\n    // Get top performers (if user has team visibility)\r\n    let topPerformers: any[] = [];\r\n    if (hasPermission(user, Resource.USERS, Action.VIEW_TEAM)) {\r\n      const performanceData = await prisma.user.findMany({\r\n        where: {\r\n          isActive: true,\r\n          ...(user.role === 'MANAGER' && user.managedTerritories \r\n            ? { territoryId: { in: user.managedTerritories.map(t => t.id) } }\r\n            : user.territoryId \r\n            ? { territoryId: user.territoryId }\r\n            : { id: user.id })\r\n        },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              leads: true,\r\n              pipelineItems: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: {\r\n          leads: {\r\n            _count: 'desc'\r\n          }\r\n        },\r\n        take: 5\r\n      });\r\n\r\n      topPerformers = performanceData.map(performer => ({\r\n        id: performer.id,\r\n        name: performer.name,\r\n        email: performer.email,\r\n        role: performer.role,\r\n        leadCount: performer._count.leads,\r\n        pipelineCount: performer._count.pipelineItems\r\n      }));\r\n    }\r\n\r\n    return createSuccessResponse({\r\n      territoryName,\r\n      totalLeads,\r\n      totalPipeline,\r\n      conversionRate,\r\n      recentActivityCount,\r\n      topPerformers\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching team stats:\", error);\r\n    return createErrorResponse(error.message || \"Failed to fetch team stats\", 500);\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\reporting\\unified\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BDRConversionFunnel' is defined but never used.","line":31,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lastMonthStart' is assigned a value but never used.","line":229,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lastMonthEnd' is assigned a value but never used.","line":230,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStageForStatus' is assigned a value but never used.","line":283,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":283,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startingVolume' is assigned a value but never used.","line":300,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":300,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":394,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12408,12411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12408,12411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":397,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12553,12556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12553,12556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":400,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12700,12703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12700,12703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":403,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":403,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12850,12853],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12850,12853],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":406,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12992,12995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12992,12995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":413,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13251,13254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13251,13254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":416,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13397,13400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13397,13400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":419,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13545,13548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13545,13548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":422,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13696,13699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13696,13699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":425,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":425,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13839,13842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13839,13842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db';\nimport { \n  startOfWeek, endOfWeek, startOfMonth, endOfMonth, \n  subWeeks, subMonths, format, startOfDay, endOfDay, subDays, addWeeks, addDays\n} from 'date-fns';\n\n// Enhanced conversion funnel stages mapping\ntype PipelineStatus = 'BDR Followed Up' | 'Call Booked' | 'Proposal - Profile' | 'Proposal - Media Sales' | \n                     'Agreement - Profile' | 'List Out' | 'Sold' | 'DECLINED' | 'Passed Over';\n\nconst CONVERSION_FUNNEL_STAGES = [\n  { key: 'call_proposed', label: 'Call Proposed', statuses: ['BDR Followed Up'] as PipelineStatus[] },\n  { key: 'call_booked', label: 'Call Booked', statuses: ['Call Booked'] as PipelineStatus[] },\n  { key: 'proposal_sent', label: 'Proposal Sent', statuses: ['Proposal - Profile', 'Proposal - Media Sales'] as PipelineStatus[] },\n  { key: 'agreement_reached', label: 'Agreement Reached', statuses: ['Agreement - Profile'] as PipelineStatus[] },\n  { key: 'list_out', label: 'List Out', statuses: ['List Out'] as PipelineStatus[] },\n  { key: 'sold', label: 'Sold', statuses: ['Sold'] as PipelineStatus[] },\n  { key: 'declined', label: 'Declined/Q&A', statuses: ['DECLINED', 'Passed Over'] as PipelineStatus[] }\n] as const;\n\ninterface ConversionFunnelStage {\n  stage: string;\n  count: number;\n  percentage: number;\n  conversionRate: number;\n  teamAverage: number;\n  dropoffRate: number;\n}\n\ninterface BDRConversionFunnel {\n  bdr: string;\n  stages: ConversionFunnelStage[];\n  totalItems: number;\n  conversionEfficiency: number;\n}\n\ninterface DetailedBDRMetrics {\n  bdr: string;\n  \n  // Core metrics\n  totalItems: number;\n  conversionEfficiency: number;\n  activityScore: number;\n  \n  // Conversion funnel\n  conversionFunnel: ConversionFunnelStage[];\n  \n  // Time-based metrics\n  thisWeek: {\n    callsProposed: number;\n    callsBooked: number;\n    proposalsSent: number;\n    agreementsSigned: number;\n    listsOut: number;\n    sold: number;\n  };\n  thisMonth: {\n    callsProposed: number;\n    callsBooked: number;\n    proposalsSent: number;\n    agreementsSigned: number;\n    listsOut: number;\n    sold: number;\n  };\n  \n  // Forecast metrics (most important)\n  forecast: {\n    upcomingCalls: number;\n    pendingAgreements: number;\n    listsOut: number;\n    projectedClosures: number;\n    nextWeekCallsScheduled: number;\n    next30DaysRevenuePotential: number;\n  };\n  \n  // Performance tracking\n  weeklyTarget: number;\n  weeklyProgress: number;\n  monthlyTarget: number;\n  monthlyProgress: number;\n  \n  // Conversion rates\n  callToProposalRate: number;\n  proposalToAgreementRate: number;\n  agreementToSoldRate: number;\n  overallConversionRate: number;\n  \n  // Category breakdown\n  categoryDistribution: Array<{\n    category: string;\n    count: number;\n    percentage: number;\n  }>;\n  \n  // Trend analysis\n  weeklyTrend: Array<{\n    week: string;\n    callsProposed: number;\n    callsBooked: number;\n    proposalsSent: number;\n    agreements: number;\n    sold: number;\n  }>;\n  \n  // Performance vs team\n  vsTeamAverage: {\n    conversionRate: { value: number; comparison: 'above' | 'below' | 'average' };\n    activityScore: { value: number; comparison: 'above' | 'below' | 'average' };\n    efficiency: { value: number; comparison: 'above' | 'below' | 'average' };\n  };\n}\n\ninterface EnhancedUnifiedReportingData {\n  // Executive Overview\n  executiveOverview: {\n    totalLeads: number;\n    totalPipelineItems: number;\n    teamActivityScore: number;\n    overallConversionRate: number;\n    totalRevenuePotential: number;\n    monthlyRecurringRevenue: number;\n  };\n\n  // Team Conversion Funnel (Primary Focus)\n  teamConversionFunnel: {\n    stages: ConversionFunnelStage[];\n    totalFunnelVolume: number;\n    overallEfficiency: number;\n    biggestDropoff: { stage: string; rate: number };\n    \"improvement opportunities\": string[];\n  };\n\n  // Forecasting Metrics (Primary Focus)\n  forecastMetrics: {\n    upcomingCalls: {\n      today: number;\n      tomorrow: number;\n      thisWeek: number;\n      nextWeek: number;\n      next30Days: number;\n    };\n    pendingAgreements: {\n      total: number;\n      profile: number;\n      media: number;\n      averageValue: number;\n      totalValue: number;\n    };\n    listsOut: {\n      total: number;\n      thisWeek: number;\n      averageDaysToClose: number;\n      conversionRate: number;\n    };\n    revenue: {\n      projectedThisMonth: number;\n      projectedNext30Days: number;\n      pipelineValue: number;\n      weightedPipelineValue: number;\n    };\n  };\n\n  // Individual BDR Performance (Enhanced)\n  bdrPerformance: DetailedBDRMetrics[];\n\n  // Team Analytics\n  teamAnalytics: {\n    topPerformer: { bdr: string; metric: string; value: number };\n    needsAttention: { bdr: string; issue: string };\n    teamAverages: {\n      conversionRate: number;\n      activityScore: number;\n      callToProposalRate: number;\n      proposalToAgreementRate: number;\n      agreementToSoldRate: number;\n    };\n    weekOverWeekGrowth: number;\n    monthOverMonthGrowth: number;\n  };\n\n  // Activity Analysis\n  activityAnalysis: {\n    dailyMetrics: Array<{\n      date: string;\n      callsProposed: number;\n      callsBooked: number;\n      proposalsSent: number;\n      agreements: number;\n      sold: number;\n      totalActivity: number;\n    }>;\n    weeklyComparison: Array<{\n      period: string;\n      callsProposed: number;\n      callsBooked: number;\n      proposalsSent: number;\n      agreements: number;\n      sold: number;\n    }>;\n    activityHeatmap: Array<{\n      bdr: string;\n      day: string;\n      activity: number;\n    }>;\n  };\n\n  // Performance Insights\n  insights: {\n    topOpportunities: string[];\n    criticalAlerts: string[];\n    recommendations: string[];\n  };\n}\n\nexport async function GET() {\n  try {\n    const now = new Date();\n    \n    // Date calculations\n    const thisWeekStart = startOfWeek(now, { weekStartsOn: 1 });\n    const thisWeekEnd = endOfWeek(now, { weekStartsOn: 1 });\n    const lastWeekStart = startOfWeek(subWeeks(now, 1), { weekStartsOn: 1 });\n    const lastWeekEnd = endOfWeek(subWeeks(now, 1), { weekStartsOn: 1 });\n    const nextWeekStart = startOfWeek(addWeeks(now, 1), { weekStartsOn: 1 });\n    const nextWeekEnd = endOfWeek(addWeeks(now, 1), { weekStartsOn: 1 });\n    const monthStart = startOfMonth(now);\n    const monthEnd = endOfMonth(now);\n    const lastMonthStart = startOfMonth(subMonths(now, 1));\n    const lastMonthEnd = endOfMonth(subMonths(now, 1));\n\n    // Get all data in parallel\n    const [allPipelineItems, allLeads, activityLogs, financeEntries] = await Promise.all([\n      prisma.pipelineItem.findMany({\n        select: {\n          id: true,\n          bdr: true,\n          category: true,\n          status: true,\n          callDate: true,\n          lastUpdated: true,\n          addedDate: true,\n          value: true,\n          probability: true,\n          expectedCloseDate: true,\n          company: true,\n          name: true,\n        },\n      }),\n      prisma.lead.count(),\n      prisma.activityLog.findMany({\n        where: {\n          timestamp: {\n            gte: subDays(now, 60), // Extended to 60 days for better analysis\n          },\n        },\n        select: {\n          id: true,\n          bdr: true,\n          activityType: true,\n          timestamp: true,\n          description: true,\n          pipelineItemId: true,\n          previousStatus: true,\n          newStatus: true,\n        },\n      }),\n      prisma.financeEntry.findMany({\n        select: {\n          id: true,\n          bdr: true,\n          status: true,\n          soldAmount: true,\n          gbpAmount: true,\n          invoiceDate: true,\n          createdAt: true,\n          month: true,\n        },\n      }),\n    ]);\n\n    // Helper function to get stage for status\n    const getStageForStatus = (status: string): string | null => {\n      const stage = CONVERSION_FUNNEL_STAGES.find(s => s.statuses.includes(status as PipelineStatus));\n      return stage ? stage.key : null;\n    };\n\n    // Helper function to calculate conversion funnel for team or individual BDR\n    const calculateConversionFunnel = (items: typeof allPipelineItems): ConversionFunnelStage[] => {\n      const totalItems = items.length;\n      if (totalItems === 0) return [];\n\n      const stageCounts = CONVERSION_FUNNEL_STAGES.map(stage => ({\n        ...stage,\n        count: items.filter(item => stage.statuses.includes(item.status as PipelineStatus)).length\n      }));\n\n      // Calculate progression through funnel (excluding declined path)\n      const progressiveStages = stageCounts.filter(s => s.key !== 'declined');\n      const startingVolume = progressiveStages.reduce((sum, s) => sum + s.count, 0);\n\n      return CONVERSION_FUNNEL_STAGES.map((stage, index) => {\n        const stageData = stageCounts.find(s => s.key === stage.key)!;\n        const count = stageData.count;\n        const percentage = totalItems > 0 ? (count / totalItems) * 100 : 0;\n        \n        // Calculate conversion rate from previous stage\n        let conversionRate = 100;\n        let dropoffRate = 0;\n        \n        if (index > 0 && stage.key !== 'declined') {\n          const previousStage = progressiveStages[index - 1];\n          if (previousStage && previousStage.count > 0) {\n            conversionRate = (count / previousStage.count) * 100;\n            dropoffRate = 100 - conversionRate;\n          }\n        }\n\n        return {\n          stage: stage.label,\n          count,\n          percentage: Math.round(percentage * 100) / 100,\n          conversionRate: Math.round(conversionRate * 100) / 100,\n          teamAverage: 0, // Will be calculated later\n          dropoffRate: Math.round(dropoffRate * 100) / 100\n        };\n      });\n    };\n\n    // Calculate team conversion funnel\n    const teamFunnelStages = calculateConversionFunnel(allPipelineItems);\n    const totalFunnelVolume = allPipelineItems.length;\n    const overallConversionRate = totalFunnelVolume > 0 ? \n      (teamFunnelStages.find(s => s.stage === 'Sold')?.count || 0) / totalFunnelVolume * 100 : 0;\n\n    // Find biggest dropoff\n    const dropoffRates = teamFunnelStages.filter(s => s.dropoffRate > 0);\n    const biggestDropoff = dropoffRates.reduce((max, stage) => \n      stage.dropoffRate > max.rate ? { stage: stage.stage, rate: stage.dropoffRate } : max,\n      { stage: '', rate: 0 }\n    );\n\n    // Group items by BDR for detailed analysis\n    const bdrData: { [key: string]: typeof allPipelineItems } = {};\n    allPipelineItems.forEach(item => {\n      if (item.bdr) {\n        if (!bdrData[item.bdr]) bdrData[item.bdr] = [];\n        bdrData[item.bdr].push(item);\n      }\n    });\n\n    // Group finance entries by BDR for sales analysis\n    const bdrFinanceData: { [key: string]: typeof financeEntries } = {};\n    financeEntries.forEach(entry => {\n      if (entry.bdr) {\n        if (!bdrFinanceData[entry.bdr]) bdrFinanceData[entry.bdr] = [];\n        bdrFinanceData[entry.bdr].push(entry);\n      }\n    });\n\n    // Get KPI targets for individual BDRs (fetch once outside the loop)\n    const kpiTargetsRaw = await prisma.kpiTarget.findMany();\n    const kpiTargets = kpiTargetsRaw.reduce((acc: { [key: string]: number }, target: { name: string, value: number }) => {\n      acc[target.name] = target.value;\n      return acc;\n    }, {});\n    \n    // Calculate detailed BDR metrics\n    const bdrPerformance: DetailedBDRMetrics[] = Object.entries(bdrData).map(([bdrName, items]) => {\n      const bdrActivityLogs = activityLogs.filter(log => log.bdr === bdrName);\n      const bdrFinanceEntries = bdrFinanceData[bdrName] || [];\n      \n      // Calculate conversion funnel for this BDR\n      const bdrFunnel = calculateConversionFunnel(items);\n      \n      // Time-based metrics\n      const thisWeekItems = items.filter(item => \n        item.lastUpdated >= thisWeekStart && item.lastUpdated <= thisWeekEnd\n      );\n      const thisMonthItems = items.filter(item => \n        item.lastUpdated >= monthStart && item.lastUpdated <= monthEnd\n      );\n\n      // Sales metrics from finance entries\n      const thisWeekSales = bdrFinanceEntries.filter(entry => \n        entry.createdAt >= thisWeekStart && entry.createdAt <= thisWeekEnd\n      );\n      const thisMonthSales = bdrFinanceEntries.filter(entry => \n        entry.createdAt >= monthStart && entry.createdAt <= monthEnd\n      );\n\n      const thisWeek = {\n        callsProposed: thisWeekItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[0].statuses.includes(item.status as any)\n        ).length,\n        callsBooked: thisWeekItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[1].statuses.includes(item.status as any)\n        ).length,\n        proposalsSent: thisWeekItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[2].statuses.includes(item.status as any)\n        ).length,\n        agreementsSigned: thisWeekItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[3].statuses.includes(item.status as any)\n        ).length,\n        listsOut: thisWeekItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[4].statuses.includes(item.status as any)\n        ).length,\n        sold: thisWeekSales.length, // Use finance entries for sales count\n      };\n\n      const thisMonth = {\n        callsProposed: thisMonthItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[0].statuses.includes(item.status as any)\n        ).length,\n        callsBooked: thisMonthItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[1].statuses.includes(item.status as any)\n        ).length,\n        proposalsSent: thisMonthItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[2].statuses.includes(item.status as any)\n        ).length,\n        agreementsSigned: thisMonthItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[3].statuses.includes(item.status as any)\n        ).length,\n        listsOut: thisMonthItems.filter(item => \n          CONVERSION_FUNNEL_STAGES[4].statuses.includes(item.status as any)\n        ).length,\n        sold: thisMonthSales.length, // Use finance entries for sales count\n      };\n\n      // Forecasting metrics (most important)\n      const upcomingCalls = items.filter(item => \n        item.status === 'Call Booked' && \n        item.callDate && \n        item.callDate > now\n      ).length;\n\n      const pendingAgreements = items.filter(item => \n        item.status === 'Agreement - Profile'\n      ).length;\n\n      const listsOut = items.filter(item => \n        item.status === 'List Out'\n      ).length;\n\n      const nextWeekCalls = items.filter(item => \n        item.status === 'Call Booked' && \n        item.callDate && \n        item.callDate >= nextWeekStart && \n        item.callDate <= nextWeekEnd\n      ).length;\n\n      // Revenue potential calculation from finance entries\n      const bdrRevenue = bdrFinanceEntries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\n      const next30DaysRevenuePotential = bdrRevenue * 0.1; // Estimate 10% of current revenue for next 30 days\n\n      // Conversion rates\n      const callToProposalCount = items.filter(item => \n        ['Proposal - Profile', 'Proposal - Media Sales', 'Agreement - Profile', 'List Out', 'Sold'].includes(item.status)\n      ).length;\n      const proposalToAgreementCount = items.filter(item => \n        ['Agreement - Profile', 'List Out', 'Sold'].includes(item.status)\n      ).length;\n      const agreementToSoldCount = bdrFinanceEntries.length; // Use finance entries count as sold count\n      const totalProposals = items.filter(item => \n        ['Proposal - Profile', 'Proposal - Media Sales'].includes(item.status)\n      ).length;\n\n      const callToProposalRate = items.length > 0 ? (callToProposalCount / items.length) * 100 : 0;\n      const proposalToAgreementRate = totalProposals > 0 ? (proposalToAgreementCount / totalProposals) * 100 : 0;\n      const agreementToSoldRate = pendingAgreements > 0 ? (agreementToSoldCount / pendingAgreements) * 100 : 0;\n      const overallConversionRate = items.length > 0 ? (agreementToSoldCount / items.length) * 100 : 0;\n\n      // Activity score calculation\n      const recentActivityCount = bdrActivityLogs.filter(log => \n        log.timestamp >= subDays(now, 7)\n      ).length;\n      const activityScore = Math.min(100, (recentActivityCount / Math.max(items.length, 1)) * 100);\n\n      // Category distribution\n      const categoryCount: { [key: string]: number } = {};\n      items.forEach(item => {\n        if (item.category) {\n          categoryCount[item.category] = (categoryCount[item.category] || 0) + 1;\n        }\n      });\n      \n      const categoryDistribution = Object.entries(categoryCount).map(([category, count]) => ({\n        category,\n        count,\n        percentage: items.length > 0 ? (count / items.length) * 100 : 0\n      }));\n\n      // Weekly trend analysis\n      const weeklyTrend = [];\n      for (let i = 4; i >= 0; i--) {\n        const weekStart = startOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\n        const weekEnd = endOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\n        \n        const weekItems = items.filter(item => \n          item.lastUpdated >= weekStart && item.lastUpdated <= weekEnd\n        );\n        \n        const weekSales = bdrFinanceEntries.filter(entry => \n          entry.createdAt >= weekStart && entry.createdAt <= weekEnd\n        );\n        \n        weeklyTrend.push({\n          week: `Week ${5 - i}`,\n          callsProposed: weekItems.filter(item => item.status === 'BDR Followed Up').length,\n          callsBooked: weekItems.filter(item => item.status === 'Call Booked').length,\n          proposalsSent: weekItems.filter(item => \n            ['Proposal - Profile', 'Proposal - Media Sales'].includes(item.status)\n          ).length,\n          agreements: weekItems.filter(item => item.status === 'Agreement - Profile').length,\n          sold: weekSales.length // Use finance entries for sales count\n        });\n      }\n\n      // Targets and progress using new KPI targets\n      const weeklyTarget = kpiTargets.weeklyAgreements || 3; // Agreements per week\n      const monthlyTarget = kpiTargets.monthlyAgreements || 12; // Agreements per month\n      const weeklyProgress = (thisWeek.agreementsSigned / weeklyTarget) * 100;\n      const monthlyProgress = (thisMonth.agreementsSigned / monthlyTarget) * 100;\n\n      // Conversion efficiency score\n      const conversionEfficiency = (overallConversionRate + activityScore) / 2;\n\n      return {\n        bdr: bdrName,\n        totalItems: items.length,\n        conversionEfficiency: Math.round(conversionEfficiency * 100) / 100,\n        activityScore: Math.round(activityScore * 100) / 100,\n        conversionFunnel: bdrFunnel,\n        thisWeek,\n        thisMonth,\n        forecast: {\n          upcomingCalls,\n          pendingAgreements,\n          listsOut,\n          projectedClosures: Math.round(pendingAgreements * 0.7), // 70% estimated close rate\n          nextWeekCallsScheduled: nextWeekCalls,\n          next30DaysRevenuePotential: Math.round(next30DaysRevenuePotential)\n        },\n        weeklyTarget,\n        weeklyProgress: Math.round(weeklyProgress * 100) / 100,\n        monthlyTarget,\n        monthlyProgress: Math.round(monthlyProgress * 100) / 100,\n        callToProposalRate: Math.round(callToProposalRate * 100) / 100,\n        proposalToAgreementRate: Math.round(proposalToAgreementRate * 100) / 100,\n        agreementToSoldRate: Math.round(agreementToSoldRate * 100) / 100,\n        overallConversionRate: Math.round(overallConversionRate * 100) / 100,\n        categoryDistribution,\n        weeklyTrend,\n        vsTeamAverage: {\n          conversionRate: { \n            value: overallConversionRate, \n            comparison: overallConversionRate > overallConversionRate ? 'above' : 'below' \n          },\n          activityScore: { \n            value: activityScore, \n            comparison: activityScore > 50 ? 'above' : 'below' \n          },\n          efficiency: { \n            value: conversionEfficiency, \n            comparison: conversionEfficiency > 50 ? 'above' : 'below' \n          }\n        }\n      };\n    });\n\n    // Calculate team averages\n    const teamAverages = {\n      conversionRate: bdrPerformance.length > 0 ? \n        bdrPerformance.reduce((sum, bdr) => sum + bdr.overallConversionRate, 0) / bdrPerformance.length : 0,\n      activityScore: bdrPerformance.length > 0 ? \n        bdrPerformance.reduce((sum, bdr) => sum + bdr.activityScore, 0) / bdrPerformance.length : 0,\n      callToProposalRate: bdrPerformance.length > 0 ? \n        bdrPerformance.reduce((sum, bdr) => sum + bdr.callToProposalRate, 0) / bdrPerformance.length : 0,\n      proposalToAgreementRate: bdrPerformance.length > 0 ? \n        bdrPerformance.reduce((sum, bdr) => sum + bdr.proposalToAgreementRate, 0) / bdrPerformance.length : 0,\n      agreementToSoldRate: bdrPerformance.length > 0 ? \n        bdrPerformance.reduce((sum, bdr) => sum + bdr.agreementToSoldRate, 0) / bdrPerformance.length : 0,\n    };\n\n    // Update BDR performance with team averages for comparison\n    bdrPerformance.forEach(bdr => {\n      bdr.vsTeamAverage = {\n        conversionRate: { \n          value: bdr.overallConversionRate, \n          comparison: bdr.overallConversionRate > teamAverages.conversionRate ? 'above' : \n                     bdr.overallConversionRate < teamAverages.conversionRate ? 'below' : 'average'\n        },\n        activityScore: { \n          value: bdr.activityScore, \n          comparison: bdr.activityScore > teamAverages.activityScore ? 'above' : \n                     bdr.activityScore < teamAverages.activityScore ? 'below' : 'average'\n        },\n        efficiency: { \n          value: bdr.conversionEfficiency, \n          comparison: bdr.conversionEfficiency > (teamAverages.conversionRate + teamAverages.activityScore) / 2 ? 'above' : 'below'\n        }\n      };\n    });\n\n    // Calculate executive overview\n    const totalRevenuePotential = allPipelineItems\n      .filter(item => item.value && item.probability)\n      .reduce((sum, item) => sum + (item.value! * (item.probability! / 100)), 0);\n\n    const monthlyRecurringRevenue = financeEntries\n      .filter(entry => {\n        const currentMonth = new Date().toISOString().slice(0, 7);\n        return entry.month === currentMonth;\n      })\n      .reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\n\n    // Daily metrics for activity analysis\n    const dailyMetrics = [];\n    for (let i = 7; i >= 0; i--) {\n      const date = subDays(now, i);\n      const dayStart = startOfDay(date);\n      const dayEnd = endOfDay(date);\n      \n      const dayItems = allPipelineItems.filter(item => \n        item.addedDate >= dayStart && item.addedDate <= dayEnd\n      );\n      \n      const daySales = financeEntries.filter(entry => \n        entry.invoiceDate && \n        entry.invoiceDate >= dayStart && entry.invoiceDate <= dayEnd\n      );\n      \n      const dayMetrics = {\n        date: format(date, 'MMM dd'),\n        callsProposed: dayItems.filter(item => item.status === 'BDR Followed Up').length,\n        callsBooked: dayItems.filter(item => item.status === 'Call Booked').length,\n        proposalsSent: dayItems.filter(item => \n          ['Proposal - Profile', 'Proposal - Media Sales'].includes(item.status)\n        ).length,\n        agreements: dayItems.filter(item => item.status === 'Agreement - Profile').length,\n        sold: daySales.length, // Use finance entries for sales count\n        totalActivity: dayItems.length\n      };\n      \n      dailyMetrics.push(dayMetrics);\n    }\n\n    // Forecasting metrics\n    const upcomingCallsData = {\n      today: allPipelineItems.filter(item => \n        item.status === 'Call Booked' && \n        item.callDate && \n        startOfDay(item.callDate).getTime() === startOfDay(now).getTime()\n      ).length,\n      tomorrow: allPipelineItems.filter(item => \n        item.status === 'Call Booked' && \n        item.callDate && \n        startOfDay(item.callDate).getTime() === startOfDay(addDays(now, 1)).getTime()\n      ).length,\n      thisWeek: allPipelineItems.filter(item => \n        item.status === 'Call Booked' && \n        item.callDate && \n        item.callDate >= thisWeekStart && \n        item.callDate <= thisWeekEnd\n      ).length,\n      nextWeek: allPipelineItems.filter(item => \n        item.status === 'Call Booked' && \n        item.callDate && \n        item.callDate >= nextWeekStart && \n        item.callDate <= nextWeekEnd\n      ).length,\n      next30Days: allPipelineItems.filter(item => \n        item.status === 'Call Booked' && \n        item.callDate && \n        item.callDate >= now && \n        item.callDate <= addDays(now, 30)\n      ).length\n    };\n\n    const pendingAgreementsData = {\n      total: allPipelineItems.filter(item => item.status === 'Agreement - Profile').length,\n      profile: allPipelineItems.filter(item => item.status === 'Agreement - Profile').length,\n      media: allPipelineItems.filter(item => item.status === 'Agreement - Profile').length, // Adjust if media agreements exist\n      averageValue: 0,\n      totalValue: 0\n    };\n\n    const agreementValues = allPipelineItems\n      .filter(item => item.status === 'Agreement - Profile' && item.value)\n      .map(item => item.value!);\n    \n    if (agreementValues.length > 0) {\n      pendingAgreementsData.averageValue = agreementValues.reduce((sum, val) => sum + val, 0) / agreementValues.length;\n      pendingAgreementsData.totalValue = agreementValues.reduce((sum, val) => sum + val, 0);\n    }\n\n    // Compile enhanced unified data\n    const enhancedUnifiedData: EnhancedUnifiedReportingData = {\n      executiveOverview: {\n        totalLeads: allLeads,\n        totalPipelineItems: allPipelineItems.length,\n        teamActivityScore: Math.round(teamAverages.activityScore * 100) / 100,\n        overallConversionRate: Math.round(overallConversionRate * 100) / 100,\n        totalRevenuePotential: Math.round(totalRevenuePotential),\n        monthlyRecurringRevenue: Math.round(monthlyRecurringRevenue),\n      },\n\n      teamConversionFunnel: {\n        stages: teamFunnelStages,\n        totalFunnelVolume,\n        overallEfficiency: Math.round((overallConversionRate + teamAverages.activityScore) / 2 * 100) / 100,\n        biggestDropoff,\n        \"improvement opportunities\": [\n          biggestDropoff.rate > 50 ? `High dropoff at ${biggestDropoff.stage} (${biggestDropoff.rate}%)` : '',\n          teamAverages.activityScore < 50 ? 'Low team activity score - increase engagement' : '',\n          overallConversionRate < 20 ? 'Low overall conversion rate - review qualification process' : ''\n        ].filter(Boolean)\n      },\n\n      forecastMetrics: {\n        upcomingCalls: upcomingCallsData,\n        pendingAgreements: pendingAgreementsData,\n        listsOut: {\n          total: allPipelineItems.filter(item => item.status === 'List Out').length,\n          thisWeek: allPipelineItems.filter(item => \n            item.status === 'List Out' && \n            item.lastUpdated >= thisWeekStart && \n            item.lastUpdated <= thisWeekEnd\n          ).length,\n          averageDaysToClose: 14, // Placeholder - could be calculated from historical data\n          conversionRate: 65 // Placeholder - could be calculated from historical data\n        },\n        revenue: {\n          projectedThisMonth: Math.round(bdrPerformance.reduce((sum, bdr) => sum + bdr.forecast.next30DaysRevenuePotential, 0)),\n          projectedNext30Days: Math.round(bdrPerformance.reduce((sum, bdr) => sum + bdr.forecast.next30DaysRevenuePotential, 0)),\n          pipelineValue: Math.round(totalRevenuePotential),\n          weightedPipelineValue: Math.round(totalRevenuePotential * 0.6) // 60% weighted average\n        }\n      },\n\n      bdrPerformance: bdrPerformance.sort((a, b) => b.conversionEfficiency - a.conversionEfficiency),\n\n      teamAnalytics: {\n        topPerformer: bdrPerformance.length > 0 ? \n          { bdr: bdrPerformance[0].bdr, metric: 'Conversion Efficiency', value: bdrPerformance[0].conversionEfficiency } :\n          { bdr: '', metric: '', value: 0 },\n        needsAttention: bdrPerformance.length > 0 ? \n          bdrPerformance.reduce((min, bdr) => bdr.activityScore < min.score ? \n            { bdr: bdr.bdr, issue: `Low activity score (${bdr.activityScore}%)`, score: bdr.activityScore } : min,\n            { bdr: '', issue: '', score: 100 }\n          ) : { bdr: '', issue: '' },\n        teamAverages,\n        weekOverWeekGrowth: 0, // Would need historical data to calculate\n        monthOverMonthGrowth: 0 // Would need historical data to calculate\n      },\n\n      activityAnalysis: {\n        dailyMetrics,\n        weeklyComparison: [\n          {\n            period: 'Last Week',\n            callsProposed: allPipelineItems.filter(item => \n              item.status === 'BDR Followed Up' && \n              item.lastUpdated >= lastWeekStart && \n              item.lastUpdated <= lastWeekEnd\n            ).length,\n            callsBooked: allPipelineItems.filter(item => \n              item.status === 'Call Booked' && \n              item.lastUpdated >= lastWeekStart && \n              item.lastUpdated <= lastWeekEnd\n            ).length,\n            proposalsSent: allPipelineItems.filter(item => \n              ['Proposal - Profile', 'Proposal - Media Sales'].includes(item.status) && \n              item.lastUpdated >= lastWeekStart && \n              item.lastUpdated <= lastWeekEnd\n            ).length,\n            agreements: allPipelineItems.filter(item => \n              item.status === 'Agreement - Profile' && \n              item.lastUpdated >= lastWeekStart && \n              item.lastUpdated <= lastWeekEnd\n            ).length,\n            sold: financeEntries.filter(entry => \n              entry.createdAt >= lastWeekStart && \n              entry.createdAt <= lastWeekEnd\n            ).length, // Use finance entries for sales count\n          },\n          {\n            period: 'This Week',\n            callsProposed: allPipelineItems.filter(item => \n              item.status === 'BDR Followed Up' && \n              item.lastUpdated >= thisWeekStart && \n              item.lastUpdated <= thisWeekEnd\n            ).length,\n            callsBooked: allPipelineItems.filter(item => \n              item.status === 'Call Booked' && \n              item.lastUpdated >= thisWeekStart && \n              item.lastUpdated <= thisWeekEnd\n            ).length,\n            proposalsSent: allPipelineItems.filter(item => \n              ['Proposal - Profile', 'Proposal - Media Sales'].includes(item.status) && \n              item.lastUpdated >= thisWeekStart && \n              item.lastUpdated <= thisWeekEnd\n            ).length,\n            agreements: allPipelineItems.filter(item => \n              item.status === 'Agreement - Profile' && \n              item.lastUpdated >= thisWeekStart && \n              item.lastUpdated <= thisWeekEnd\n            ).length,\n            sold: financeEntries.filter(entry => \n              entry.createdAt >= thisWeekStart && \n              entry.createdAt <= thisWeekEnd\n            ).length, // Use finance entries for sales count\n          }\n        ],\n        activityHeatmap: [] // Placeholder for future implementation\n      },\n\n      insights: {\n        topOpportunities: [\n          bdrPerformance.length > 0 && bdrPerformance[0].forecast.upcomingCalls > 5 ? \n            `${bdrPerformance[0].bdr} has ${bdrPerformance[0].forecast.upcomingCalls} upcoming calls` : '',\n          pendingAgreementsData.total > 10 ? \n            `${pendingAgreementsData.total} pending agreements worth $${Math.round(pendingAgreementsData.totalValue).toLocaleString()}` : '',\n          upcomingCallsData.next30Days > 20 ? \n            `${upcomingCallsData.next30Days} calls scheduled for next 30 days` : ''\n        ].filter(Boolean),\n        criticalAlerts: [\n          teamAverages.activityScore < 30 ? 'Low team activity detected' : '',\n          overallConversionRate < 10 ? 'Very low conversion rate needs attention' : '',\n          upcomingCallsData.tomorrow === 0 ? 'No calls scheduled for tomorrow' : ''\n        ].filter(Boolean),\n        recommendations: [\n          biggestDropoff.rate > 40 ? `Focus on improving ${biggestDropoff.stage} conversion` : '',\n          teamAverages.activityScore < 50 ? 'Increase team activity and engagement' : '',\n          bdrPerformance.some(bdr => bdr.forecast.upcomingCalls === 0) ? 'Some BDRs have no upcoming calls scheduled' : ''\n        ].filter(Boolean)\n      }\n    };\n\n    return NextResponse.json({\n      ...enhancedUnifiedData,\n      generatedAt: now.toISOString(),\n      dataSource: 'enhanced_unified_reporting_v2'\n    });\n\n  } catch (error) {\n    console.error('Error fetching enhanced unified reporting data:', error);\n    return NextResponse.json({ \n      error: (error as Error).message,\n    }, { status: 500 });\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\sessions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\templates\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[987,990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[987,990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1008,1011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1008,1011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1067,1070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1067,1070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1756,1759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1756,1759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2553,2556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2553,2556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2574,2577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2574,2577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2633,2636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2633,2636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3331,3334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3331,3334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { sanitizeEmailHtml } from '@/lib/html';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\n\r\ninterface Params {\r\n  params: { id: string } | Promise<{ id: string }>;\r\n}\r\n\r\n// GET /api/templates/[id]\r\nexport async function GET(req: NextRequest, { params }: Params) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    const data = await withSecurity(Resource.TEMPLATES, Action.READ, async () => {\r\n      const tpl = await prisma.template.findUnique({\r\n        where: { id },\r\n        include: { category: true, createdBy: { select: { id: true, name: true } }, updatedBy: { select: { id: true, name: true } } },\r\n      });\r\n      if (!tpl) return NextResponse.json({ error: 'Template not found' }, { status: 404 });\r\n      return tpl;\r\n    }, req);\r\n\r\n    if ('status' in (data as any)) return data as any;\r\n    return NextResponse.json(data);\r\n  } catch (err: any) {\r\n    console.error('Template GET failed:', err);\r\n    await SecurityService.logAction({ action: 'READ', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to fetch template', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT /api/templates/[id]\r\nexport async function PUT(req: NextRequest, { params }: Params) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    const body = await req.json();\r\n    const data = await withSecurity(Resource.TEMPLATES, Action.UPDATE, async (context) => {\r\n      const { title, content, type, tags, categoryId, isArchived } = body as any;\r\n      const exists = await prisma.template.findUnique({ where: { id } });\r\n      if (!exists) return NextResponse.json({ error: 'Template not found' }, { status: 404 });\r\n\r\n      const updated = await prisma.template.update({\r\n        where: { id },\r\n        data: {\r\n          title: title ?? exists.title,\r\n          content: typeof content === 'string' ? sanitizeEmailHtml(content) : exists.content,\r\n          type: type ?? exists.type,\r\n          tags: tags ?? exists.tags,\r\n          categoryId: typeof categoryId === 'undefined' ? exists.categoryId : categoryId,\r\n          isArchived: typeof isArchived === 'boolean' ? isArchived : exists.isArchived,\r\n          updatedById: context.userId,\r\n        },\r\n      });\r\n      return updated;\r\n    }, req);\r\n\r\n    if ('status' in (data as any)) return data as any;\r\n    return NextResponse.json(data);\r\n  } catch (err: any) {\r\n    console.error('Template PUT failed:', err);\r\n    await SecurityService.logAction({ action: 'UPDATE', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to update template', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE /api/templates/[id]\r\nexport async function DELETE(req: NextRequest, { params }: Params) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    await withSecurity(Resource.TEMPLATES, Action.DELETE, async () => {\r\n      await prisma.template.delete({ where: { id } });\r\n    }, req);\r\n\r\n    return NextResponse.json({ ok: true });\r\n  } catch (err: any) {\r\n    console.error('Template DELETE failed:', err);\r\n    await SecurityService.logAction({ action: 'DELETE', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to delete template', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\templates\\categories\\[id]\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1305,1308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1305,1308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1326,1329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1326,1329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1385,1388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1385,1388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2408,2411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2408,2411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\n\r\ninterface Params { params: { id: string } | Promise<{ id: string }>; }\r\n\r\n// PUT /api/templates/categories/[id]\r\nexport async function PUT(req: NextRequest, { params }: Params) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    const body = await req.json();\r\n    const data = await withSecurity(Resource.TEMPLATES, Action.UPDATE, async () => {\r\n      const { name, description, sortOrder } = body as { name?: string; description?: string; sortOrder?: number };\r\n      const exists = await prisma.templateCategory.findUnique({ where: { id } });\r\n      if (!exists) return NextResponse.json({ error: 'Category not found' }, { status: 404 });\r\n      const updated = await prisma.templateCategory.update({\r\n        where: { id },\r\n        data: {\r\n          name: name ?? exists.name,\r\n          description: typeof description === 'undefined' ? exists.description : description,\r\n          sortOrder: typeof sortOrder === 'number' ? sortOrder : exists.sortOrder,\r\n        }\r\n      });\r\n      return updated;\r\n    }, req);\r\n    if ('status' in (data as any)) return data as any;\r\n    return NextResponse.json(data);\r\n  } catch (err: any) {\r\n    console.error('Template category PUT failed:', err);\r\n    await SecurityService.logAction({ action: 'UPDATE', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to update category', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE /api/templates/categories/[id]\r\nexport async function DELETE(req: NextRequest, { params }: Params) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const id = resolvedParams.id;\r\n    await withSecurity(Resource.TEMPLATES, Action.DELETE, async () => {\r\n      // Disallow delete if category has templates unless move is specified\r\n      const count = await prisma.template.count({ where: { categoryId: id } });\r\n      if (count > 0) {\r\n        return NextResponse.json({ error: 'Category not empty. Move templates first.' }, { status: 400 });\r\n      }\r\n      await prisma.templateCategory.delete({ where: { id } });\r\n    }, req);\r\n    return NextResponse.json({ ok: true });\r\n  } catch (err: any) {\r\n    console.error('Template category DELETE failed:', err);\r\n    await SecurityService.logAction({ action: 'DELETE', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to delete category', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\templates\\categories\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[879,882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[879,882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1843,1846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1843,1846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1864,1867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1864,1867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1940,1943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1940,1943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\n\r\n// GET /api/templates/categories - list categories\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const data = await withSecurity(Resource.TEMPLATES, Action.READ, async () => {\r\n      const categories = await prisma.templateCategory.findMany({ orderBy: [{ sortOrder: 'asc' }, { name: 'asc' }] });\r\n      const counts = await prisma.template.groupBy({ by: ['categoryId'], _count: { _all: true } });\r\n      const countsMap = new Map(counts.map(c => [c.categoryId, c._count._all]));\r\n      return categories.map(c => ({ ...c, templateCount: countsMap.get(c.id) || 0 }));\r\n    }, req);\r\n    return NextResponse.json({ categories: data });\r\n  } catch (err: any) {\r\n    console.error('Template categories GET failed:', err);\r\n    await SecurityService.logAction({ action: 'LIST', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to load categories', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST /api/templates/categories - create category\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const data = await withSecurity(Resource.TEMPLATES, Action.CREATE, async () => {\r\n      const { name, description, sortOrder } = body as { name: string; description?: string; sortOrder?: number };\r\n      if (!name) return NextResponse.json({ error: 'Name is required' }, { status: 400 });\r\n      const category = await prisma.templateCategory.create({ data: { name, description: description || null, sortOrder: sortOrder ?? 0 } });\r\n      return category;\r\n    }, req);\r\n    if ('status' in (data as any)) return data as any;\r\n    return NextResponse.json(data, { status: 201 });\r\n  } catch (err: any) {\r\n    console.error('Template categories POST failed:', err);\r\n    await SecurityService.logAction({ action: 'CREATE', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to create category', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\templates\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[975,978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[975,978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2001,2004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2001,2004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3021,3024],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3021,3024],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3287,3290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3287,3290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3308,3311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3308,3311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3423,3426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3423,3426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { sanitizeEmailHtml } from '@/lib/html';\r\nimport { withSecurity, SecurityService } from '@/lib/security';\r\nimport { Action, Resource } from '@prisma/client';\r\n\r\n// GET /api/templates - list templates with optional filters\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const data = await withSecurity(Resource.TEMPLATES, Action.READ, async () => {\r\n      const { searchParams } = new URL(req.url);\r\n      const search = searchParams.get('search') || '';\r\n      const type = searchParams.get('type') || undefined;\r\n      const categoryId = searchParams.get('categoryId') || undefined;\r\n      const includeArchived = searchParams.get('includeArchived') === '1';\r\n      const page = parseInt(searchParams.get('page') || '1');\r\n      const pageSize = parseInt(searchParams.get('pageSize') || '50');\r\n      const skip = (page - 1) * pageSize;\r\n\r\n      const where: any = {};\r\n      if (!includeArchived) where.isArchived = false;\r\n      if (categoryId) where.categoryId = categoryId;\r\n      if (type) where.type = type;\r\n      if (search) {\r\n        where.OR = [\r\n          { title: { contains: search, mode: 'insensitive' } },\r\n          { content: { contains: search, mode: 'insensitive' } },\r\n          { tags: { has: search } },\r\n        ];\r\n      }\r\n\r\n      const [items, total] = await Promise.all([\r\n        prisma.template.findMany({\r\n          where,\r\n          orderBy: [{ isArchived: 'asc' }, { updatedAt: 'desc' }],\r\n          include: { category: true, createdBy: { select: { id: true, name: true } }, updatedBy: { select: { id: true, name: true } } },\r\n          skip,\r\n          take: pageSize,\r\n        }),\r\n        prisma.template.count({ where }),\r\n      ]);\r\n\r\n      return {\r\n        items,\r\n        total,\r\n        page,\r\n        pageSize,\r\n        totalPages: Math.ceil(total / pageSize),\r\n      };\r\n    }, req);\r\n\r\n    return NextResponse.json(data);\r\n  } catch (err: any) {\r\n    console.error('Templates GET failed:', err);\r\n    await SecurityService.logAction({ action: 'LIST', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to load templates', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST /api/templates - create new template\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const data = await withSecurity(Resource.TEMPLATES, Action.CREATE, async (context) => {\r\n      const { title, content, type, tags, categoryId } = body as {\r\n        title: string; content: string; type?: string; tags?: string[]; categoryId?: string | null;\r\n      };\r\n\r\n      if (!title || !content) {\r\n        return NextResponse.json({ error: 'Title and content are required' }, { status: 400 });\r\n      }\r\n\r\n      const template = await prisma.template.create({\r\n        data: {\r\n          title,\r\n          content: sanitizeEmailHtml(content),\r\n          type: (type as any) || 'GENERAL',\r\n          tags: tags || [],\r\n          categoryId: categoryId || null,\r\n          createdById: context.userId,\r\n          updatedById: context.userId,\r\n        },\r\n      });\r\n\r\n      return template;\r\n    }, req);\r\n\r\n    if ('status' in (data as any)) return data as any; // early return if validation response\r\n    return NextResponse.json(data, { status: 201 });\r\n  } catch (err: any) {\r\n    console.error('Templates POST failed:', err);\r\n    await SecurityService.logAction({ action: 'CREATE', resource: 'TEMPLATES', success: false, errorMsg: err?.message }, req);\r\n    return NextResponse.json({ error: 'Failed to create template', detail: err?.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\territories\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[959,962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[959,962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from \"next/server\";\r\nimport { getAuthenticatedUser, createErrorResponse, createSuccessResponse } from \"@/lib/auth-api\";\r\nimport { hasPermission } from \"@/lib/permissions\";\r\nimport { Resource, Action } from \"@prisma/client\";\r\nimport { prisma } from \"@/lib/db\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const user = await getAuthenticatedUser(req);\r\n    if (!user) return createErrorResponse(\"Unauthorized\", 401);\r\n\r\n    // Allow users with USERS:READ or REPORTS:READ to list territories\r\n    if (!hasPermission(user, Resource.USERS, Action.READ) && !hasPermission(user, Resource.REPORTS, Action.READ)) {\r\n      return createErrorResponse(\"Forbidden\", 403);\r\n    }\r\n\r\n    const territories = await prisma.territory.findMany({\r\n      where: { isActive: true },\r\n      select: { id: true, name: true },\r\n      orderBy: { name: 'asc' },\r\n    });\r\n\r\n    return createSuccessResponse({ territories });\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching territories:\", error);\r\n    return createErrorResponse(error.message || \"Failed to fetch territories\", 500);\r\n  }\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\api\\users\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1163,1166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1163,1166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3963,3966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3963,3966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from \"next/server\";\r\nimport { Resource, Action } from \"@prisma/client\";\r\nimport { getAuthenticatedUser, createErrorResponse, createSuccessResponse } from \"@/lib/auth-api\";\r\nimport { hasPermission } from \"@/lib/permissions\";\r\nimport { prisma } from \"@/lib/db\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // Get authenticated user with permissions\r\n    const user = await getAuthenticatedUser(req);\r\n    if (!user) {\r\n      return createErrorResponse(\"Unauthorized\", 401);\r\n    }\r\n\r\n    const { searchParams } = new URL(req.url);\r\n    const includeStats = searchParams.get('includeStats') === 'true';\r\n    const q = (searchParams.get('search') || '').trim();\r\n    const forMessaging = q.length > 0;\r\n\r\n    // Allow minimal user search when used for messaging, even if the role\r\n    // doesn't have full USERS:READ permission.\r\n    if (!hasPermission(user, Resource.USERS, Action.READ)) {\r\n      if (!(forMessaging && hasPermission(user, Resource.MESSAGING, Action.READ))) {\r\n        return createErrorResponse(\"Forbidden\", 403);\r\n      }\r\n    }\r\n\r\n    // Determine what users the current user can see\r\n    let userFilter: any = {};\r\n\r\n    if (hasPermission(user, Resource.USERS, Action.READ)) {\r\n      if (hasPermission(user, Resource.USERS, Action.VIEW_ALL)) {\r\n        // Can see all users\r\n        userFilter = {};\r\n      } else if (hasPermission(user, Resource.USERS, Action.VIEW_TEAM)) {\r\n        // Can see users in their territory or managed territories\r\n        if (user.role === 'MANAGER' && user.managedTerritories && user.managedTerritories.length > 0) {\r\n          const managedTerritoryIds = user.managedTerritories.map(t => t.id);\r\n          userFilter = {\r\n            OR: [\r\n              { territoryId: { in: managedTerritoryIds } },\r\n              { id: user.id } // Plus themselves\r\n            ]\r\n          };\r\n        } else if (user.territoryId) {\r\n          userFilter = {\r\n            OR: [\r\n              { territoryId: user.territoryId },\r\n              { id: user.id } // Plus themselves\r\n            ]\r\n          };\r\n        } else {\r\n          // If no territory, can only see themselves\r\n          userFilter = { id: user.id };\r\n        }\r\n      } else {\r\n        // Can only see themselves\r\n        userFilter = { id: user.id };\r\n      }\r\n    } else if (forMessaging && hasPermission(user, Resource.MESSAGING, Action.READ)) {\r\n      // For chat user search, allow searching active users across org\r\n      userFilter = {};\r\n    }\r\n\r\n    const users = await prisma.user.findMany({\r\n      where: {\r\n        ...userFilter,\r\n        isActive: true,\r\n        ...(q\r\n          ? {\r\n              OR: [\r\n                { name: { contains: q, mode: 'insensitive' } },\r\n                { email: { contains: q, mode: 'insensitive' } },\r\n              ],\r\n            }\r\n          : {}),\r\n      },\r\n      include: {\r\n        territory: {\r\n          select: {\r\n            id: true,\r\n            name: true\r\n          }\r\n        },\r\n        ...(includeStats && {\r\n          _count: {\r\n            select: {\r\n              leads: true,\r\n              pipelineItems: true,\r\n              activityLogs: true\r\n            }\r\n          }\r\n        })\r\n      },\r\n      orderBy: [\r\n        { role: 'asc' },\r\n        { name: 'asc' }\r\n      ]\r\n    });\r\n\r\n    const payload = users.map(user => ({\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        role: user.role,\r\n        territory: user.territory,\r\n        lastLoginAt: user.lastLoginAt,\r\n        createdAt: user.createdAt,\r\n        ...(includeStats && { _count: user._count })\r\n      }));\r\n\r\n    // If request is clearly for messaging search (has search query), return a flat users array\r\n    if ((searchParams.get('search') || '').trim()) {\r\n      return createSuccessResponse({ users: payload });\r\n    }\r\n    // Back-compat default shape\r\n    return createSuccessResponse({ data: { users: payload } });\r\n\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching users:\", error);\r\n    return createErrorResponse(error.message || \"Failed to fetch users\", 500);\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\auth\\login\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { Suspense, useState } from \"react\";\r\nimport { signIn, getSession } from \"next-auth/react\";\r\nimport { useRouter, useSearchParams } from \"next/navigation\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport * as z from \"zod\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\r\nimport { Shield, Eye, EyeOff, Smartphone, Monitor } from \"lucide-react\";\r\n\r\nconst loginSchema = z.object({\r\n  email: z.string().email(\"Please enter a valid email address\"),\r\n  password: z.string().min(1, \"Password is required\"),\r\n});\r\n\r\ntype LoginFormData = z.infer<typeof loginSchema>;\r\n\r\nfunction LoginFormComponent() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n  const callbackUrl = searchParams.get(\"callbackUrl\") || \"/\";\r\n\r\n  const form = useForm<LoginFormData>({\r\n    resolver: zodResolver(loginSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: LoginFormData) {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await signIn(\"credentials\", {\r\n        email: values.email,\r\n        password: values.password,\r\n        redirect: false,\r\n      });\r\n\r\n      if (result?.error) {\r\n        setError(\"Invalid email or password. Please try again.\");\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Check if sign in was successful by getting the session\r\n      const session = await getSession();\r\n      if (session) {\r\n        router.push(callbackUrl);\r\n        router.refresh();\r\n      } else {\r\n        setError(\"Login failed. Please try again.\");\r\n        setIsLoading(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      setError(\"An unexpected error occurred. Please try again.\");\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-background to-muted p-4\">\r\n      <div className=\"w-full max-w-md space-y-8\">\r\n        {/* Logo and Branding */}\r\n        <div className=\"text-center space-y-2\">\r\n          <div className=\"mx-auto w-16 h-16 bg-primary rounded-full flex items-center justify-center mb-4\">\r\n            <Shield className=\"w-8 h-8 text-primary-foreground\" />\r\n          </div>\r\n          <h1 className=\"text-2xl font-bold text-foreground\">EMG CRM</h1>\r\n          <p className=\"text-sm text-muted-foreground\">Welcome back to your workspace</p>\r\n        </div>\r\n\r\n        <Card className=\"border-0 shadow-lg\">\r\n          <CardHeader className=\"space-y-1 text-center pb-4\">\r\n            <CardTitle className=\"text-xl font-semibold\">\r\n              Sign In\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Enter your credentials to access your dashboard\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <Form {...form}>\r\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\r\n                {error && (\r\n                  <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm\">\r\n                    {error}\r\n                  </div>\r\n                )}\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"email\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"text-sm font-medium\">Email Address</FormLabel>\r\n                      <FormControl>\r\n                        <Input\r\n                          type=\"email\"\r\n                          placeholder=\"you@company.com\"\r\n                          disabled={isLoading}\r\n                          className=\"h-11\"\r\n                          {...field}\r\n                        />\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <FormField\r\n                  control={form.control}\r\n                  name=\"password\"\r\n                  render={({ field }) => (\r\n                    <FormItem>\r\n                      <FormLabel className=\"text-sm font-medium\">Password</FormLabel>\r\n                      <FormControl>\r\n                        <div className=\"relative\">\r\n                          <Input\r\n                            type={showPassword ? \"text\" : \"password\"}\r\n                            placeholder=\"Enter your password\"\r\n                            disabled={isLoading}\r\n                            className=\"h-11 pr-10\"\r\n                            {...field}\r\n                          />\r\n                          <Button\r\n                            type=\"button\"\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\r\n                            onClick={() => setShowPassword(!showPassword)}\r\n                            disabled={isLoading}\r\n                          >\r\n                            {showPassword ? (\r\n                              <EyeOff className=\"h-4 w-4\" />\r\n                            ) : (\r\n                              <Eye className=\"h-4 w-4\" />\r\n                            )}\r\n                          </Button>\r\n                        </div>\r\n                      </FormControl>\r\n                      <FormMessage />\r\n                    </FormItem>\r\n                  )}\r\n                />\r\n\r\n                <Button \r\n                  type=\"submit\" \r\n                  className=\"w-full h-11 text-base font-medium\" \r\n                  disabled={isLoading}\r\n                >\r\n                  {isLoading ? (\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent\"></div>\r\n                      Signing in...\r\n                    </div>\r\n                  ) : (\r\n                    \"Sign In\"\r\n                  )}\r\n                </Button>\r\n              </form>\r\n            </Form>\r\n\r\n            {/* Demo credentials and additional info */}\r\n            <div className=\"space-y-4 pt-2\">\r\n              <div className=\"relative\">\r\n                <div className=\"absolute inset-0 flex items-center\">\r\n                  <span className=\"w-full border-t\" />\r\n                </div>\r\n                <div className=\"relative flex justify-center text-xs uppercase\">\r\n                  <span className=\"bg-background px-2 text-muted-foreground\">Demo Access</span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"bg-muted/50 rounded-lg p-3 space-y-2\">\r\n                <p className=\"text-xs font-medium text-muted-foreground text-center\">\r\n                  Demo Credentials\r\n                </p>\r\n                <p className=\"text-sm text-center font-mono\">\r\n                  <span className=\"font-medium\">Email:</span> admin@emgcrm.com<br/>\r\n                  <span className=\"font-medium\">Password:</span> admin123\r\n                </p>\r\n              </div>\r\n\r\n              {/* Device-specific messaging */}\r\n              <div className=\"flex items-center justify-center gap-4 text-xs text-muted-foreground\">\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Monitor className=\"h-3 w-3\" />\r\n                  <span className=\"hidden sm:inline\">Desktop optimized</span>\r\n                  <span className=\"sm:hidden\">Desktop</span>\r\n                </div>\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Smartphone className=\"h-3 w-3\" />\r\n                  <span className=\"hidden sm:inline\">Mobile friendly</span>\r\n                  <span className=\"sm:hidden\">Mobile</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Footer */}\r\n        <div className=\"text-center text-xs text-muted-foreground\">\r\n          <p>© 2025 EMG CRM. Secure access to your workspace.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function LoginPage() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <LoginFormComponent />\r\n    </Suspense>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\chat\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1076,1079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1076,1079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":45,"column":41,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":45,"endColumn":73},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'active'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [active, active.id, qc]","fix":{"range":[2128,2144],"text":"[active, active.id, qc]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { ChatSidebar } from '@/components/chat/ChatSidebar';\nimport { ChatWindow } from '@/components/chat/ChatWindow';\nimport { ChatHeader } from '@/components/chat/ChatHeader';\nimport { SearchBar } from '@/components/chat/SearchBar';\nimport { ChatDesktopNotifications } from '@/components/chat/notifications-client';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, MessageCircle } from 'lucide-react';\n\nexport default function ChatPage() {\n  const qc = useQueryClient();\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const [userId, setUserId] = useState<string | null>(null);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { data } = useQuery({\n    queryKey: ['conversations'],\n    queryFn: async () => {\n      const res = await fetch('/api/chat/conversations');\n      if (!res.ok) throw new Error('Failed to load conversations');\n      return (await res.json()).conversations as any[];\n    },\n  });\n\n  useEffect(() => {\n    // Resolve session user id for desktop notifications and UI hints\n    let cancelled = false;\n    (async () => {\n      try {\n        const res = await fetch('/api/auth/session');\n        if (!res.ok) return;\n        const json = await res.json();\n        if (cancelled) return;\n        setUserId(json?.user?.id || null);\n      } catch {}\n    })();\n    return () => { cancelled = true; };\n  }, []);\n\n  const active = useMemo(() => data?.find((c) => c.id === activeId) || data?.[0], [data, activeId]);\n\n  useEffect(() => {\n    if (!active) return;\n    const { subscribeToConversation } = require('@/lib/realtime-client');\n    const channel = subscribeToConversation(active.id);\n    const handler = () => qc.invalidateQueries({ queryKey: ['messages', active.id] });\n    channel.bind('message:new', handler);\n    channel.bind('message:edit', handler);\n    channel.bind('message:delete', handler);\n    channel.bind('message:read', handler);\n    return () => { channel.unbind_all(); channel.unsubscribe(); };\n  }, [active?.id, qc]);\n\n  return (\n    <div className=\"h-[calc(100vh-120px)] w-full overflow-hidden\">\n      {userId ? <ChatDesktopNotifications userId={userId} /> : null}\n      <div className=\"flex h-full rounded-lg border bg-background relative\">\n        {/* Mobile sidebar overlay */}\n        {sidebarOpen && (\n          <div className=\"fixed inset-0 z-40 bg-black/50 md:hidden\" onClick={() => setSidebarOpen(false)} />\n        )}\n        \n        {/* Sidebar */}\n        <aside className={`\n          ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}\n          md:translate-x-0 md:static fixed inset-y-0 left-0 z-50\n          w-[320px] shrink-0 border-r bg-card transition-transform duration-300 ease-in-out\n        `}>\n          <ChatSidebar activeId={active?.id} onSelect={(id) => {\n            setActiveId(id);\n            setSidebarOpen(false); // Close sidebar on mobile after selection\n          }} />\n        </aside>\n        \n        <main className=\"flex min-w-0 flex-1 flex-col\">\n          {active ? (\n            <>\n              {/* Mobile chat header with back button */}\n              <div className=\"md:hidden flex items-center gap-2 p-3 border-b bg-card\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setSidebarOpen(true)}\n                  aria-label=\"Open conversations\"\n                >\n                  <ArrowLeft className=\"h-5 w-5\" />\n                </Button>\n                <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n                  <MessageCircle className=\"h-5 w-5 text-muted-foreground shrink-0\" />\n                  <span className=\"font-medium truncate\">{active.name || 'Direct message'}</span>\n                </div>\n              </div>\n              \n              {/* Desktop chat header */}\n              <div className=\"hidden md:block\">\n                <ChatHeader conversation={active} onChanged={() => qc.invalidateQueries({ queryKey: ['conversations'] })} />\n              </div>\n              \n              <SearchBar conversationId={active.id} />\n              <div className=\"flex-1 min-h-0\">\n                <ChatWindow conversationId={active.id} currentUserId={userId || undefined} />\n              </div>\n            </>\n          ) : (\n            <div className=\"flex h-full flex-col items-center justify-center text-center p-8\">\n              {/* Mobile: Show button to open sidebar */}\n              <div className=\"md:hidden mb-6\">\n                <Button onClick={() => setSidebarOpen(true)} size=\"lg\" className=\"gap-2\">\n                  <MessageCircle className=\"h-5 w-5\" />\n                  View Conversations\n                </Button>\n              </div>\n              \n              {/* Desktop: Show welcome message */}\n              <div className=\"hidden md:block text-muted-foreground\">\n                <MessageCircle className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-medium mb-2\">Welcome to Chat</h3>\n                <p className=\"text-sm max-w-sm\">Select a conversation from the sidebar or start a new one to begin messaging.</p>\n              </div>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\editorial\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EditorialBoardItem' is defined but never used.","line":4,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toast' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1682,1685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1682,1685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1786,1789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1786,1789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { EditorialBoardTable, type EditorialBoardItem } from '@/components/editorial-board-table';\r\nimport { useSession } from 'next-auth/react';\r\nimport { toast } from 'sonner';\r\nimport { Button } from '@/components/ui/button';\r\nimport { RefreshCw, Download } from 'lucide-react';\r\nimport { useEditorialItems, useAutoSyncFromPipeline } from '@/lib/editorial-hooks';\r\n\r\ninterface BdrOption {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport default function EditorialPage() {\r\n  const { data: session } = useSession();\r\n  const [selectedBdr, setSelectedBdr] = useState<string>('all');\r\n  const [availableBdrs, setAvailableBdrs] = useState<BdrOption[]>([]);\r\n\r\n  // Use the custom hook for fetching editorial items\r\n  const { \r\n    data: editorialData, \r\n    isLoading, \r\n    refetch: refetchItems \r\n  } = useEditorialItems({\r\n    bdr: selectedBdr === 'all' ? undefined : selectedBdr,\r\n  });\r\n\r\n  const { mutate: autoSync, isPending: isAutoSyncing } = useAutoSyncFromPipeline();\r\n\r\n  const fetchBdrs = async () => {\r\n    try {\r\n      const response = await fetch('/api/users');\r\n      if (!response.ok) {\r\n        // If we don't have permission to fetch users, just continue without BDR filtering\r\n        if (response.status === 403) {\r\n          console.warn('No permission to fetch users for BDR filtering');\r\n          return;\r\n        }\r\n        throw new Error('Failed to fetch users');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      // Handle both response formats (data.users or users)\r\n      const users = data.data?.users || data.users || [];\r\n      const bdrs = users\r\n        ?.filter((user: any) => ['BDR', 'TEAM_LEAD', 'MANAGER', 'DIRECTOR', 'ADMIN'].includes(user.role))\r\n        ?.map((user: any) => ({\r\n          id: user.id,\r\n          name: user.name || user.email,\r\n        })) || [];\r\n      \r\n      setAvailableBdrs(bdrs);\r\n    } catch (error) {\r\n      console.error('Error fetching BDRs:', error);\r\n      // Continue without BDR filtering if this fails\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (session) {\r\n      fetchBdrs();\r\n    }\r\n  }, [session]);\r\n\r\n  const handleBdrChange = (bdr: string) => {\r\n    setSelectedBdr(bdr);\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    refetchItems();\r\n  };\r\n\r\n  const handleAutoSync = () => {\r\n    autoSync();\r\n  };\r\n\r\n  if (!session) {\r\n    return (\r\n      <div className=\"container py-10\">\r\n        <div className=\"text-center\">\r\n          <p>Please log in to access the editorial board.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container py-6 space-y-6\">\r\n      <div className=\"flex justify-between items-start\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Editorial Board</h1>\r\n          <p className=\"text-muted-foreground mt-2\">\r\n            Manage leads for list out, Q&A, and interview opportunities with your production team.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex gap-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={handleRefresh}\r\n            disabled={isLoading}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\r\n            Refresh\r\n          </Button>\r\n          <Button\r\n            onClick={handleAutoSync}\r\n            disabled={isAutoSyncing}\r\n            className=\"bg-purple-600 hover:bg-purple-700\"\r\n          >\r\n            <Download className={`h-4 w-4 mr-2 ${isAutoSyncing ? 'animate-pulse' : ''}`} />\r\n            Auto-Sync from Pipeline\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <EditorialBoardTable\r\n        items={editorialData?.items || []}\r\n        isLoading={isLoading}\r\n        onRefresh={handleRefresh}\r\n        selectedBdr={selectedBdr === 'all' ? undefined : selectedBdr}\r\n        onBdrChange={handleBdrChange}\r\n        availableBdrs={availableBdrs}\r\n      />\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\email-verification\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":11,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":80},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":338,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11171,11327],"text":"\r\n                Enter a person&apos;s name and domain to discover their email address. We'll test common email formats to find valid addresses.\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11171,11327],"text":"\r\n                Enter a person&lsquo;s name and domain to discover their email address. We'll test common email formats to find valid addresses.\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11171,11327],"text":"\r\n                Enter a person&#39;s name and domain to discover their email address. We'll test common email formats to find valid addresses.\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11171,11327],"text":"\r\n                Enter a person&rsquo;s name and domain to discover their email address. We'll test common email formats to find valid addresses.\r\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":338,"column":85,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11171,11327],"text":"\r\n                Enter a person's name and domain to discover their email address. We&apos;ll test common email formats to find valid addresses.\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11171,11327],"text":"\r\n                Enter a person's name and domain to discover their email address. We&lsquo;ll test common email formats to find valid addresses.\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11171,11327],"text":"\r\n                Enter a person's name and domain to discover their email address. We&#39;ll test common email formats to find valid addresses.\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11171,11327],"text":"\r\n                Enter a person's name and domain to discover their email address. We&rsquo;ll test common email formats to find valid addresses.\r\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { CheckCircle, XCircle, AlertCircle, Loader2, Mail, Upload, Search, User } from 'lucide-react';\r\n\r\ninterface EmailResult {\r\n  email: string;\r\n  user: string;\r\n  domain: string;\r\n  mx: string;\r\n  code: 'ok' | 'ko' | 'mb';\r\n  message: string;\r\n}\r\n\r\ninterface VerificationResponse {\r\n  success: boolean;\r\n  results: EmailResult[];\r\n  total: number;\r\n  verified: number;\r\n  invalid: number;\r\n  unverifiable: number;\r\n  error?: string;\r\n}\r\n\r\ninterface EmailFindResult extends EmailResult {\r\n  status: 'Valid' | 'Invalid' | 'Unverifiable';\r\n}\r\n\r\ninterface EmailFindResponse {\r\n  success: boolean;\r\n  results: EmailFindResult[];\r\n  validEmails: EmailFindResult[];\r\n  totalTested: number;\r\n  validCount: number;\r\n  invalidCount: number;\r\n  unverifiableCount: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  domain: string;\r\n  error?: string;\r\n}\r\n\r\nexport default function EmailVerificationPage() {\r\n  // Verification tab state\r\n  const [emails, setEmails] = useState('');\r\n  const [results, setResults] = useState<EmailResult[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [summary, setSummary] = useState<Omit<VerificationResponse, 'results' | 'success'> | null>(null);\r\n  \r\n  // Find email tab state\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [domain, setDomain] = useState('');\r\n  const [findResults, setFindResults] = useState<EmailFindResult[]>([]);\r\n  const [findValidEmails, setFindValidEmails] = useState<EmailFindResult[]>([]);\r\n  const [isFindLoading, setIsFindLoading] = useState(false);\r\n  const [findSummary, setFindSummary] = useState<Omit<EmailFindResponse, 'results' | 'validEmails' | 'success'> | null>(null);\r\n\r\n  const parseEmails = (text: string): string[] => {\r\n    const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g;\r\n    const matches = text.match(emailRegex);\r\n    return matches ? [...new Set(matches)] : [];\r\n  };\r\n\r\n  const handleVerification = async () => {\r\n    const emailList = parseEmails(emails);\r\n    \r\n    if (emailList.length === 0) {\r\n      alert('Please enter at least one valid email address');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setResults([]);\r\n    setSummary(null);\r\n\r\n    try {\r\n      // Get authentication token\r\n      const tokenResponse = await fetch('/api/email-verification/token');\r\n      const tokenData = await tokenResponse.json();\r\n\r\n      if (!tokenData.success) {\r\n        throw new Error('Failed to get authentication token');\r\n      }\r\n\r\n      // Verify emails\r\n      const verificationResponse = await fetch('/api/email-verification/verify', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          emails: emailList,\r\n          token: tokenData.token,\r\n        }),\r\n      });\r\n\r\n      const data: VerificationResponse = await verificationResponse.json();\r\n\r\n      if (data.success) {\r\n        setResults(data.results);\r\n        setSummary({\r\n          total: data.total,\r\n          verified: data.verified,\r\n          invalid: data.invalid,\r\n          unverifiable: data.unverifiable,\r\n        });\r\n      } else {\r\n        throw new Error(data.error || 'Verification failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Verification error:', error);\r\n      alert(`Error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFindEmail = async () => {\r\n    if (!firstName.trim() || !lastName.trim() || !domain.trim()) {\r\n      alert('Please fill in all fields: first name, last name, and domain');\r\n      return;\r\n    }\r\n\r\n    setIsFindLoading(true);\r\n    setFindResults([]);\r\n    setFindValidEmails([]);\r\n    setFindSummary(null);\r\n\r\n    try {\r\n      // Get authentication token\r\n      const tokenResponse = await fetch('/api/email-verification/token');\r\n      const tokenData = await tokenResponse.json();\r\n\r\n      if (!tokenData.success) {\r\n        throw new Error('Failed to get authentication token');\r\n      }\r\n\r\n      // Find emails\r\n      const findResponse = await fetch('/api/email-verification/find', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          firstName: firstName.trim(),\r\n          lastName: lastName.trim(),\r\n          domain: domain.trim(),\r\n          token: tokenData.token,\r\n        }),\r\n      });\r\n\r\n      const data: EmailFindResponse = await findResponse.json();\r\n\r\n      if (data.success) {\r\n        setFindResults(data.results);\r\n        setFindValidEmails(data.validEmails);\r\n        setFindSummary({\r\n          totalTested: data.totalTested,\r\n          validCount: data.validCount,\r\n          invalidCount: data.invalidCount,\r\n          unverifiableCount: data.unverifiableCount,\r\n          firstName: data.firstName,\r\n          lastName: data.lastName,\r\n          domain: data.domain,\r\n        });\r\n      } else {\r\n        throw new Error(data.error || 'Email finding failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Find email error:', error);\r\n      alert(`Error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`);\r\n    } finally {\r\n      setIsFindLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (code: string) => {\r\n    switch (code) {\r\n      case 'ok':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'ko':\r\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'mb':\r\n        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\r\n      default:\r\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (code: string) => {\r\n    switch (code) {\r\n      case 'ok':\r\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Valid</Badge>;\r\n      case 'ko':\r\n        return <Badge variant=\"destructive\">Invalid</Badge>;\r\n      case 'mb':\r\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">Unverifiable</Badge>;\r\n      default:\r\n        return <Badge variant=\"destructive\">Invalid</Badge>;\r\n    }\r\n  };\r\n\r\n  const exportResults = () => {\r\n    if (results.length === 0) return;\r\n\r\n    const csv = [\r\n      ['Email', 'Status', 'Message', 'User', 'Domain', 'MX Server'].join(','),\r\n      ...results.map(result => [\r\n        result.email,\r\n        result.code === 'ok' ? 'Valid' : result.code === 'ko' ? 'Invalid' : 'Unverifiable',\r\n        result.message,\r\n        result.user,\r\n        result.domain,\r\n        result.mx\r\n      ].map(field => `\"${field}\"`).join(','))\r\n    ].join('\\n');\r\n\r\n    const blob = new Blob([csv], { type: 'text/csv' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `email-verification-results-${new Date().toISOString().split('T')[0]}.csv`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const exportFindResults = () => {\r\n    if (findResults.length === 0) return;\r\n\r\n    const csv = [\r\n      ['Email', 'Status', 'Message', 'User', 'Domain', 'MX Server'].join(','),\r\n      ...findResults.map(result => [\r\n        result.email,\r\n        result.status,\r\n        result.message,\r\n        result.user,\r\n        result.domain,\r\n        result.mx\r\n      ].map(field => `\"${field}\"`).join(','))\r\n    ].join('\\n');\r\n\r\n    const blob = new Blob([csv], { type: 'text/csv' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `email-find-results-${findSummary?.firstName || 'unknown'}-${findSummary?.lastName || 'unknown'}-${new Date().toISOString().split('T')[0]}.csv`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-6 space-y-6\">\r\n      <div className=\"flex items-center gap-2 mb-6\">\r\n        <Mail className=\"h-6 w-6\" />\r\n        <h1 className=\"text-2xl font-bold\">Email Verification</h1>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"verify\" className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-2\">\r\n          <TabsTrigger value=\"verify\" className=\"flex items-center gap-2\">\r\n            <CheckCircle className=\"h-4 w-4\" />\r\n            Verify Emails\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"find\" className=\"flex items-center gap-2\">\r\n            <Search className=\"h-4 w-4\" />\r\n            Find Email\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"verify\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Verify Email Addresses</CardTitle>\r\n              <CardDescription>\r\n                Enter email addresses to verify their validity. You can paste multiple emails separated by commas, spaces, or new lines.\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n          <Textarea\r\n            placeholder=\"Enter email addresses here... (e.g., john@example.com, jane@domain.com)\"\r\n            value={emails}\r\n            onChange={(e) => setEmails(e.target.value)}\r\n            rows={6}\r\n            className=\"min-h-32\"\r\n          />\r\n          \r\n          <div className=\"flex gap-2\">\r\n            <Button \r\n              onClick={handleVerification} \r\n              disabled={isLoading || !emails.trim()}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              {isLoading ? (\r\n                <>\r\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                  Verifying...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <CheckCircle className=\"h-4 w-4\" />\r\n                  Verify Emails\r\n                </>\r\n              )}\r\n            </Button>\r\n            \r\n            {results.length > 0 && (\r\n              <Button \r\n                onClick={exportResults}\r\n                variant=\"outline\"\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <Upload className=\"h-4 w-4\" />\r\n                Export CSV\r\n              </Button>\r\n            )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"find\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Find Email Address</CardTitle>\r\n              <CardDescription>\r\n                Enter a person's name and domain to discover their email address. We'll test common email formats to find valid addresses.\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div>\r\n                  <label className=\"text-sm font-medium mb-2 block\">First Name</label>\r\n                  <Input\r\n                    placeholder=\"e.g., Dan\"\r\n                    value={firstName}\r\n                    onChange={(e) => setFirstName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium mb-2 block\">Last Name</label>\r\n                  <Input\r\n                    placeholder=\"e.g., Reeves\"\r\n                    value={lastName}\r\n                    onChange={(e) => setLastName(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label className=\"text-sm font-medium mb-2 block\">Domain</label>\r\n                  <Input\r\n                    placeholder=\"e.g., busenq.com\"\r\n                    value={domain}\r\n                    onChange={(e) => setDomain(e.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"flex gap-2\">\r\n                <Button \r\n                  onClick={handleFindEmail} \r\n                  disabled={isFindLoading || !firstName.trim() || !lastName.trim() || !domain.trim()}\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  {isFindLoading ? (\r\n                    <>\r\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                      Finding...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Search className=\"h-4 w-4\" />\r\n                      Find Email\r\n                    </>\r\n                  )}\r\n                </Button>\r\n                \r\n                {findResults.length > 0 && (\r\n                  <Button \r\n                    onClick={exportFindResults}\r\n                    variant=\"outline\"\r\n                    className=\"flex items-center gap-2\"\r\n                  >\r\n                    <Upload className=\"h-4 w-4\" />\r\n                    Export CSV\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Verification Summary */}\r\n      {summary && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Verification Summary</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold\">{summary.total}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Total</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">{summary.verified}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Valid</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-red-600\">{summary.invalid}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Invalid</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-yellow-600\">{summary.unverifiable}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Unverifiable</div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Find Email Summary */}\r\n      {findSummary && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Email Search Summary</CardTitle>\r\n            <CardDescription>\r\n              Search results for {findSummary.firstName} {findSummary.lastName} @ {findSummary.domain}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold\">{findSummary.totalTested}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Total Tested</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-green-600\">{findSummary.validCount}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Valid Found</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-red-600\">{findSummary.invalidCount}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Invalid</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-yellow-600\">{findSummary.unverifiableCount}</div>\r\n                <div className=\"text-sm text-muted-foreground\">Unverifiable</div>\r\n              </div>\r\n            </div>\r\n            \r\n            {findValidEmails.length > 0 && (\r\n              <div className=\"mt-6\">\r\n                <h3 className=\"text-lg font-semibold mb-3 text-green-600 flex items-center gap-2\">\r\n                  <CheckCircle className=\"h-5 w-5\" />\r\n                  Valid Email Addresses Found\r\n                </h3>\r\n                <div className=\"space-y-2\">\r\n                  {findValidEmails.map((email, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between bg-green-50 dark:bg-green-900/20 p-3 rounded-lg border border-green-200 dark:border-green-800\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n                        <span className=\"font-mono font-medium\">{email.email}</span>\r\n                      </div>\r\n                      <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\r\n                        {email.message}\r\n                      </Badge>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Verification Results */}\r\n      {results.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Verification Results</CardTitle>\r\n            <CardDescription>\r\n              Detailed results for each email address\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Email</TableHead>\r\n                    <TableHead>Status</TableHead>\r\n                    <TableHead>Message</TableHead>\r\n                    <TableHead>User</TableHead>\r\n                    <TableHead>Domain</TableHead>\r\n                    <TableHead>MX Server</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {results.map((result, index) => (\r\n                    <TableRow key={index}>\r\n                      <TableCell className=\"font-mono text-sm\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getStatusIcon(result.code)}\r\n                          {result.email}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>{getStatusBadge(result.code)}</TableCell>\r\n                      <TableCell className=\"text-sm\">{result.message}</TableCell>\r\n                      <TableCell className=\"text-sm\">{result.user}</TableCell>\r\n                      <TableCell className=\"text-sm\">{result.domain}</TableCell>\r\n                      <TableCell className=\"text-sm font-mono\">{result.mx}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Find Email Results */}\r\n      {findResults.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Email Search Results</CardTitle>\r\n            <CardDescription>\r\n              All tested email patterns for {findSummary?.firstName} {findSummary?.lastName}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Email Pattern</TableHead>\r\n                    <TableHead>Status</TableHead>\r\n                    <TableHead>Message</TableHead>\r\n                    <TableHead>User</TableHead>\r\n                    <TableHead>Domain</TableHead>\r\n                    <TableHead>MX Server</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {findResults.map((result, index) => (\r\n                    <TableRow key={index} className={result.code === 'ok' ? 'bg-green-50 dark:bg-green-900/20' : ''}>\r\n                      <TableCell className=\"font-mono text-sm\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getStatusIcon(result.code)}\r\n                          {result.email}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>{getStatusBadge(result.code)}</TableCell>\r\n                      <TableCell className=\"text-sm\">{result.message}</TableCell>\r\n                      <TableCell className=\"text-sm\">{result.user}</TableCell>\r\n                      <TableCell className=\"text-sm\">{result.domain}</TableCell>\r\n                      <TableCell className=\"text-sm font-mono\">{result.mx}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\finance\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":13,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":88},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3234,3237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3234,3237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3690,3693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3690,3693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3913,3916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3913,3916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchEntries'. Either include it or remove the dependency array.","line":154,"column":6,"nodeType":"ArrayExpression","endLine":154,"endColumn":63,"suggestions":[{"desc":"Update the dependencies array to be: [pagination.page, pagination.pageSize, filters, viewMode, fetchEntries]","fix":{"range":[5301,5358],"text":"[pagination.page, pagination.pageSize, filters, viewMode, fetchEntries]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6757,6760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6757,6760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusColor' is assigned a value but never used.","line":213,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":23},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":292,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10356,10376],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10356,10376],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10356,10376],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10356,10376],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":292,"column":81,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10385,10477],"text":" Sum of all &apos;gbpAmount' fields from finance entries where invoiceDate is within current year"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10385,10477],"text":" Sum of all &lsquo;gbpAmount' fields from finance entries where invoiceDate is within current year"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10385,10477],"text":" Sum of all &#39;gbpAmount' fields from finance entries where invoiceDate is within current year"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10385,10477],"text":" Sum of all &rsquo;gbpAmount' fields from finance entries where invoiceDate is within current year"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":292,"column":91,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10385,10477],"text":" Sum of all 'gbpAmount&apos; fields from finance entries where invoiceDate is within current year"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10385,10477],"text":" Sum of all 'gbpAmount&lsquo; fields from finance entries where invoiceDate is within current year"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10385,10477],"text":" Sum of all 'gbpAmount&#39; fields from finance entries where invoiceDate is within current year"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10385,10477],"text":" Sum of all 'gbpAmount&rsquo; fields from finance entries where invoiceDate is within current year"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":317,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11897,11917],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11897,11917],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11897,11917],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11897,11917],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":318,"column":91,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12055,12113],"text":" Percentage of deals with &apos;Paid' status out of total deals"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12055,12113],"text":" Percentage of deals with &lsquo;Paid' status out of total deals"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12055,12113],"text":" Percentage of deals with &#39;Paid' status out of total deals"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12055,12113],"text":" Percentage of deals with &rsquo;Paid' status out of total deals"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":318,"column":96,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12055,12113],"text":" Percentage of deals with 'Paid&apos; status out of total deals"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12055,12113],"text":" Percentage of deals with 'Paid&lsquo; status out of total deals"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12055,12113],"text":" Percentage of deals with 'Paid&#39; status out of total deals"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12055,12113],"text":" Percentage of deals with 'Paid&rsquo; status out of total deals"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":343,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13544,13564],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13544,13564],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13544,13564],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13544,13564],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":343,"column":87,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13573,13663],"text":" For entries with &apos;Overdue' status, calculate days between dueDate and today, then average"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13573,13663],"text":" For entries with &lsquo;Overdue' status, calculate days between dueDate and today, then average"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13573,13663],"text":" For entries with &#39;Overdue' status, calculate days between dueDate and today, then average"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13573,13663],"text":" For entries with &rsquo;Overdue' status, calculate days between dueDate and today, then average"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":343,"column":95,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13573,13663],"text":" For entries with 'Overdue&apos; status, calculate days between dueDate and today, then average"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13573,13663],"text":" For entries with 'Overdue&lsquo; status, calculate days between dueDate and today, then average"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13573,13663],"text":" For entries with 'Overdue&#39; status, calculate days between dueDate and today, then average"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13573,13663],"text":" For entries with 'Overdue&rsquo; status, calculate days between dueDate and today, then average"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":369,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15205,15225],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15205,15225],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15205,15225],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15205,15225],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":397,"column":81,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16925,16967],"text":" Completed transactions with &apos;Paid' status"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16925,16967],"text":" Completed transactions with &lsquo;Paid' status"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16925,16967],"text":" Completed transactions with &#39;Paid' status"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16925,16967],"text":" Completed transactions with &rsquo;Paid' status"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":397,"column":86,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16925,16967],"text":" Completed transactions with 'Paid&apos; status"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16925,16967],"text":" Completed transactions with 'Paid&lsquo; status"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16925,16967],"text":" Completed transactions with 'Paid&#39; status"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16925,16967],"text":" Completed transactions with 'Paid&rsquo; status"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":499,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[23272,23292],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[23272,23292],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[23272,23292],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[23272,23292],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Navbar } from '@/components/ui/navbar';\nimport { FinanceTable } from '@/components/finance-table';\nimport { FinanceForm } from '@/components/finance-form';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Plus, DollarSign, TrendingUp, TrendingDown, Activity, AlertCircle, CheckCircle, Clock, BarChart3, PieChart, Target, HelpCircle } from 'lucide-react';\nimport { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';\n\ninterface FinanceEntry {\n  id: number;\n  company: string;\n  bdr: string;\n  leadGen: boolean;\n  status: string;\n  invoiceDate: Date | null;\n  dueDate: Date | null;\n  soldAmount: number | null;\n  gbpAmount: number | null;\n  exchangeRate: number | null;\n  exchangeRateDate: Date | null;\n  actualGbpReceived: number | null;\n  notes: string | null;\n  commissionPaid: boolean;\n  month: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface FinanceAnalytics {\n  totalRevenue: number;\n  ytdRevenue: number;\n  monthlyRevenue: number;\n  quarterlyRevenue: number;\n  averageDealSize: number;\n  conversionRate: number;\n  overdueDays: number;\n  monthlyGrowth: number;\n  totalDeals: number;\n  ytdDeals: number;\n  monthlyDeals: number;\n  averagePaymentTime: number;\n  statusBreakdown: { [key: string]: number };\n  monthlyTrends: Array<{ month: string; revenue: number; deals: number }>;\n  bdrPerformance: Array<{ bdr: string; revenue: number; deals: number; avgDealSize: number }>;\n  paymentStatus: {\n    paid: number;\n    pending: number;\n    overdue: number;\n  };\n}\n\nexport default function FinancePage() {\n  const [entries, setEntries] = useState<FinanceEntry[]>([]);\n  const [groupedEntries, setGroupedEntries] = useState<{ [key: string]: FinanceEntry[] }>({});\n  const [analytics, setAnalytics] = useState<FinanceAnalytics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [analyticsLoading, setAnalyticsLoading] = useState(true);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<FinanceEntry | null>(null);\n  const [viewMode, setViewMode] = useState<'analytics' | 'table' | 'groups'>('analytics');\n  const [pagination, setPagination] = useState({\n    page: 1,\n    pageSize: 10,\n    total: 0,\n    totalPages: 0,\n  });\n  const [filters, setFilters] = useState({\n    search: '',\n    status: '',\n    bdr: '',\n    month: '',\n  });\n\n  const fetchAnalytics = async () => {\n    try {\n      setAnalyticsLoading(true);\n      const response = await fetch('/api/finance?analytics=true');\n      if (response.ok) {\n        const data = await response.json();\n        setAnalytics(data.analytics);\n      }\n    } catch (error) {\n      console.error('Error fetching finance analytics:', error);\n    } finally {\n      setAnalyticsLoading(false);\n    }\n  };\n\n  const convertDateStrings = (entries: any[]): FinanceEntry[] => {\n    return entries.map(entry => ({\n      ...entry,\n      invoiceDate: entry.invoiceDate ? new Date(entry.invoiceDate) : null,\n      dueDate: entry.dueDate ? new Date(entry.dueDate) : null,\n      exchangeRateDate: entry.exchangeRateDate ? new Date(entry.exchangeRateDate) : null,\n      createdAt: new Date(entry.createdAt),\n      updatedAt: new Date(entry.updatedAt),\n    }));\n  };\n\n  const convertGroupedEntries = (groupedData: any): { [key: string]: FinanceEntry[] } => {\n    const converted: { [key: string]: FinanceEntry[] } = {};\n    for (const [key, entries] of Object.entries(groupedData)) {\n      converted[key] = convertDateStrings(entries as any[]);\n    }\n    return converted;\n  };\n\n  const fetchEntries = async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams({\n        ...(viewMode === 'table' && { page: pagination.page.toString() }),\n        ...(viewMode === 'table' && { pageSize: pagination.pageSize.toString() }),\n        ...(viewMode === 'groups' && { groupByMonth: 'true' }),\n        ...(filters.search && { search: filters.search }),\n        ...(filters.status && { status: filters.status }),\n        ...(filters.bdr && { bdr: filters.bdr }),\n        ...(filters.month && { month: filters.month }),\n      });\n      \n      const response = await fetch(`/api/finance?${params}`);\n      if (response.ok) {\n        const data = await response.json();\n        \n        if (viewMode === 'groups') {\n          setGroupedEntries(convertGroupedEntries(data.groupedEntries || {}));\n        } else if (viewMode === 'table') {\n          setEntries(convertDateStrings(data.financeEntries || []));\n          setPagination({\n            page: data.page,\n            pageSize: data.pageSize,\n            total: data.total,\n            totalPages: data.totalPages,\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching finance entries:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchEntries();\n    fetchAnalytics();\n  }, [pagination.page, pagination.pageSize, filters, viewMode]);\n\n  const handleFormSubmit = async (data: Omit<FinanceEntry, 'id' | 'createdAt' | 'updatedAt'>) => {\n    try {\n      const url = editingEntry ? `/api/finance/${editingEntry.id}` : '/api/finance';\n      const method = editingEntry ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (response.ok) {\n        setIsFormOpen(false);\n        setEditingEntry(null);\n        fetchEntries();\n      } else {\n        console.error('Error saving entry:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error saving entry:', error);\n    }\n  };\n\n  const handleEdit = (entry: FinanceEntry) => {\n    setEditingEntry(entry);\n    setIsFormOpen(true);\n  };\n\n  const handleDelete = async (id: number) => {\n    try {\n      const response = await fetch(`/api/finance/${id}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        fetchEntries();\n      }\n    } catch (error) {\n      console.error('Error deleting entry:', error);\n    }\n  };\n\n  const handleCreate = () => {\n    setEditingEntry(null);\n    setIsFormOpen(true);\n  };\n\n  const handlePaginationChange = (page: number, pageSize: number) => {\n    setPagination(prev => ({ ...prev, page, pageSize }));\n  };\n\n  const handleFiltersChange = (newFilters: any) => {\n    setFilters(newFilters);\n    setPagination(prev => ({ ...prev, page: 1 }));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Paid': return 'text-green-600 bg-green-50 border-green-200';\n      case 'Pending': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'Overdue': return 'text-red-600 bg-red-50 border-red-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getTrendIcon = (value: number) => {\n    if (value > 0) return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n    if (value < 0) return <TrendingDown className=\"h-4 w-4 text-red-600\" />;\n    return <Activity className=\"h-4 w-4 text-gray-600\" />;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-GB', { \n      style: 'currency', \n      currency: 'GBP' \n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Navbar />\n      <div className=\"p-4 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold\">Finance Overview & Board</h1>\n          <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Finance Entry\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <FinanceForm\n                entry={editingEntry}\n                onSubmit={handleFormSubmit}\n                onCancel={() => {\n                  setIsFormOpen(false);\n                  setEditingEntry(null);\n                }}\n              />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as 'analytics' | 'table' | 'groups')} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"analytics\">Finance Analytics</TabsTrigger>\n            <TabsTrigger value=\"groups\">Monthly Groups</TabsTrigger>\n            <TabsTrigger value=\"table\">Data Table</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            {analyticsLoading ? (\n              <div className=\"flex items-center justify-center min-h-[400px]\">\n                <div className=\"text-center\">\n                  <Activity className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n                  <p>Loading finance analytics...</p>\n                </div>\n              </div>\n            ) : analytics ? (\n              <>\n                {/* Key Financial Metrics */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card className=\"border-2 border-green-200 bg-green-50\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <DollarSign className=\"h-4 w-4\" />\n                        Year-to-Date Revenue\n                        {getTrendIcon(analytics.monthlyGrowth)}\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-gray-400 hover:text-gray-600\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total revenue generated from January 1st to current date</p>\n                            <p><strong>How it's calculated:</strong> Sum of all 'gbpAmount' fields from finance entries where invoiceDate is within current year</p>\n                            <p><strong>Monthly trend:</strong> Growth percentage compared to previous month revenue</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{formatCurrency(analytics.ytdRevenue)}</div>\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        This Month: {formatCurrency(analytics.monthlyRevenue)} • {analytics.ytdDeals} deals YTD\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-2 border-blue-200 bg-blue-50\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Target className=\"h-4 w-4\" />\n                        Average Deal Size\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-gray-400 hover:text-gray-600\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Average financial value per completed deal</p>\n                            <p><strong>How it's calculated:</strong> Total revenue (gbpAmount) ÷ Total number of finance entries</p>\n                            <p><strong>Conversion rate:</strong> Percentage of deals with 'Paid' status out of total deals</p>\n                            <p><strong>Use case:</strong> Helps identify deal quality and pricing strategy effectiveness</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{formatCurrency(analytics.averageDealSize)}</div>\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        Conversion: {analytics.conversionRate.toFixed(1)}% • {analytics.totalDeals} total deals\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-2 border-yellow-200 bg-yellow-50\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        Payment Health\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-gray-400 hover:text-gray-600\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Average number of days payments are overdue</p>\n                            <p><strong>How it's calculated:</strong> For entries with 'Overdue' status, calculate days between dueDate and today, then average</p>\n                            <p><strong>Payment time:</strong> Average days from invoice to payment for completed transactions</p>\n                            <p><strong>Cash flow indicator:</strong> Lower numbers indicate better cash flow management</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{Math.round(analytics.overdueDays)} days</div>\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        Avg payment time: {Math.round(analytics.averagePaymentTime)} days\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-2 border-purple-200 bg-purple-50\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <TrendingUp className=\"h-4 w-4\" />\n                        Monthly Growth\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-gray-400 hover:text-gray-600\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Revenue growth percentage from previous month</p>\n                            <p><strong>How it's calculated:</strong> ((Current month revenue - Previous month revenue) ÷ Previous month revenue) × 100</p>\n                            <p><strong>Quarterly context:</strong> {formatCurrency(analytics.quarterlyRevenue)} revenue this quarter</p>\n                            <p><strong>Growth indicators:</strong> Positive = growth, Negative = decline, 0 = flat</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{analytics.monthlyGrowth > 0 ? '+' : ''}{analytics.monthlyGrowth.toFixed(1)}%</div>\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        Quarterly: {formatCurrency(analytics.quarterlyRevenue)} • {analytics.monthlyDeals} deals this month\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Payment Status Overview */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <PieChart className=\"h-5 w-5\" />\n                      Payment Status Distribution\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <HelpCircle className=\"h-4 w-4 text-gray-400 hover:text-gray-600\" />\n                        </TooltipTrigger>\n                        <TooltipContent className=\"max-w-xs\">\n                          <p><strong>What it shows:</strong> Current payment status breakdown across all finance entries</p>\n                          <p><strong>Paid:</strong> Completed transactions with 'Paid' status</p>\n                          <p><strong>Pending:</strong> Invoices sent but payment not yet received</p>\n                          <p><strong>Overdue:</strong> Payments past their due date requiring follow-up</p>\n                          <p><strong>Use case:</strong> Monitor cash flow health and identify collection priorities</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </CardTitle>\n                    <CardDescription>Track payment collection efficiency and cash flow health</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div className=\"text-center p-4 border rounded-lg bg-green-50\">\n                        <div className=\"text-3xl font-bold text-green-600\">{analytics.paymentStatus.paid}</div>\n                        <div className=\"text-sm text-gray-600 mt-2\">Paid</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {analytics.totalDeals > 0 ? Math.round((analytics.paymentStatus.paid / analytics.totalDeals) * 100) : 0}% of total\n                        </div>\n                      </div>\n                      <div className=\"text-center p-4 border rounded-lg bg-yellow-50\">\n                        <div className=\"text-3xl font-bold text-yellow-600\">{analytics.paymentStatus.pending}</div>\n                        <div className=\"text-sm text-gray-600 mt-2\">Pending</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {analytics.totalDeals > 0 ? Math.round((analytics.paymentStatus.pending / analytics.totalDeals) * 100) : 0}% of total\n                        </div>\n                      </div>\n                      <div className=\"text-center p-4 border rounded-lg bg-red-50\">\n                        <div className=\"text-3xl font-bold text-red-600\">{analytics.paymentStatus.overdue}</div>\n                        <div className=\"text-sm text-gray-600 mt-2\">Overdue</div>\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {analytics.totalDeals > 0 ? Math.round((analytics.paymentStatus.overdue / analytics.totalDeals) * 100) : 0}% of total\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* BDR Performance */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"h-5 w-5\" />\n                      BDR Financial Performance\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <HelpCircle className=\"h-4 w-4 text-gray-400 hover:text-gray-600\" />\n                        </TooltipTrigger>\n                        <TooltipContent className=\"max-w-xs\">\n                          <p><strong>What it shows:</strong> Financial performance metrics by individual Business Development Representative</p>\n                          <p><strong>Revenue:</strong> Total gbpAmount from finance entries attributed to each BDR</p>\n                          <p><strong>Deals:</strong> Count of finance entries per BDR</p>\n                          <p><strong>Avg Deal Size:</strong> Revenue ÷ Number of deals per BDR</p>\n                          <p><strong>Sorting:</strong> BDRs ranked by total revenue (highest first)</p>\n                          <p><strong>Use case:</strong> Identify top revenue generators and coaching opportunities</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </CardTitle>\n                    <CardDescription>Individual revenue contribution and deal quality analysis</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {analytics.bdrPerformance.map((bdr, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-blue-100 text-blue-600 text-sm font-bold\">\n                              #{index + 1}\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{bdr.bdr}</div>\n                              <div className=\"text-sm text-gray-600\">\n                                {bdr.deals} deals • {((bdr.revenue / analytics.ytdRevenue) * 100).toFixed(1)}% of YTD revenue\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-bold\">{formatCurrency(bdr.revenue)}</div>\n                            <div className=\"text-sm text-gray-600\">\n                              Avg: {formatCurrency(bdr.avgDealSize)}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                      {analytics.bdrPerformance.length === 0 && (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          No BDR performance data available\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Monthly Trends */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"h-5 w-5\" />\n                      6-Month Revenue Trends\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <HelpCircle className=\"h-4 w-4 text-gray-400 hover:text-gray-600\" />\n                        </TooltipTrigger>\n                        <TooltipContent className=\"max-w-xs\">\n                          <p><strong>What it shows:</strong> Revenue and deal volume patterns over the last 6 months</p>\n                          <p><strong>How it's calculated:</strong> Finance entries grouped by month field, summing gbpAmount per month</p>\n                          <p><strong>Progress bars:</strong> Relative to highest revenue month in the period</p>\n                          <p><strong>Deal volume:</strong> Count of finance entries per month</p>\n                          <p><strong>Use case:</strong> Identify seasonal patterns, growth trends, and forecasting</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </CardTitle>\n                    <CardDescription>Historical performance analysis for trend identification and forecasting</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {analytics.monthlyTrends.map((month, index) => {\n                        const maxRevenue = Math.max(...analytics.monthlyTrends.map(m => m.revenue));\n                        const avgDealSize = month.deals > 0 ? month.revenue / month.deals : 0;\n                        const isCurrentMonth = index === analytics.monthlyTrends.length - 1;\n                        return (\n                          <div key={index} className={`flex items-center justify-between p-3 border rounded-lg ${isCurrentMonth ? 'bg-blue-50 border-blue-200' : 'hover:bg-gray-50'}`}>\n                            <div>\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"font-medium\">{month.month}</div>\n                                {isCurrentMonth && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">Current</Badge>\n                                )}\n                              </div>\n                              <div className=\"text-sm text-gray-600\">\n                                {month.deals} deals • Avg: {formatCurrency(avgDealSize)}\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-bold\">{formatCurrency(month.revenue)}</div>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <Progress \n                                  value={maxRevenue > 0 ? (month.revenue / maxRevenue) * 100 : 0} \n                                  className=\"w-24\" \n                                />\n                                <span className=\"text-xs text-gray-500 min-w-[35px]\">\n                                  {maxRevenue > 0 ? Math.round((month.revenue / maxRevenue) * 100) : 0}%\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                      {analytics.monthlyTrends.length === 0 && (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          No monthly trend data available\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            ) : (\n              <div className=\"flex items-center justify-center min-h-[400px]\">\n                <div className=\"text-center\">\n                  <AlertCircle className=\"h-8 w-8 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">No analytics data available</p>\n                </div>\n              </div>\n            )}\n          </TabsContent>\n        \n          <TabsContent value=\"groups\">\n            <FinanceTable\n              data={[]}\n              groupedData={groupedEntries}\n              isLoading={loading}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n              onCreate={handleCreate}\n              pagination={pagination}\n              onPaginationChange={handlePaginationChange}\n              filters={filters}\n              onFiltersChange={handleFiltersChange}\n              viewMode=\"groups\"\n              onViewModeChange={() => {}}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"table\">\n            <FinanceTable\n              data={entries}\n              groupedData={{}}\n              isLoading={loading}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n              onCreate={handleCreate}\n              pagination={pagination}\n              onPaginationChange={handlePaginationChange}\n              filters={filters}\n              onFiltersChange={handleFiltersChange}\n              viewMode=\"table\"\n              onViewModeChange={() => {}}\n            />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Image' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport \"./globals.css\";\r\nimport { Toaster } from \"@/components/ui/sonner\";\r\nimport { ThemeProvider } from \"@/components/theme-provider\";\r\nimport { ThemeToggle } from \"@/components/theme-toggle\";\r\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\r\nimport { UserNav } from \"@/components/user-nav\";\r\nimport { Providers } from \"@/components/providers\";\r\nimport { ContextAwareNav } from \"@/components/context-aware-nav\";\r\nimport { RealTimeNotifications } from \"@/components/real-time-notifications\";\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const isPerfMode = process.env.NEXT_PUBLIC_PERF_MODE === '1';\r\n  return (\r\n    <html lang=\"en\" suppressHydrationWarning>\r\n      <body className=\"font-sans antialiased\">\r\n        <Providers>\r\n          <ThemeProvider\r\n            attribute=\"class\"\r\n            defaultTheme=\"system\"\r\n            enableSystem\r\n            disableTransitionOnChange\r\n          >\r\n            <TooltipProvider>\r\n              {/* Background decorative layers (disabled in perf mode) */}\r\n              {!isPerfMode && (\r\n                <div className=\"pointer-events-none fixed inset-0 -z-10 overflow-hidden\">\r\n                  <div className=\"absolute -top-28 -left-24 h-[420px] w-[420px] rounded-full bg-[radial-gradient(closest-side,theme(colors.primary)/35%,transparent)] blur-3xl\" />\r\n                  <div className=\"absolute -bottom-32 -right-24 h-[520px] w-[520px] rounded-full bg-[radial-gradient(closest-side,theme(colors.chart-3)/28%,transparent)] blur-[80px]\" />\r\n                  <div className=\"absolute top-1/3 left-1/2 h-[280px] w-[480px] -translate-x-1/2 -translate-y-1/2 rounded-[40%] bg-[conic-gradient(from_30deg,theme(colors.accent)/22%,transparent_60%)] blur-3xl\" />\r\n                </div>\r\n              )}\r\n\r\n              <div className={isPerfMode ? 'min-h-screen bg-background' : \"min-h-screen bg-background/80 [background-image:radial-gradient(1200px_600px_at_100%_-10%,color-mix(in_oklab,theme(colors.primary),transparent_85%),transparent),radial-gradient(1000px_500px_at_0%_110%,color-mix(in_oklab,theme(colors.accent),transparent_85%),transparent)]\"}>\r\n                {/* Context-aware navigation */}\r\n                <ContextAwareNav />\r\n                \r\n                {/* Main header - visible on mobile, hidden on desktop when nav is shown */}\r\n                <header className={isPerfMode ? 'border-b bg-background md:hidden' : \"border-b/60 bg-background/40 backdrop-blur-xl supports-[backdrop-filter]:bg-background/30 shadow-[0_10px_30px_-10px_color-mix(in_oklab,theme(colors.primary),transparent_92%)] md:hidden\"}>\r\n                  <div className=\"flex h-14 items-center justify-between px-4\">\r\n                    <div className=\"flex items-center gap-4\">\r\n                      <ThemeToggle />\r\n                      <RealTimeNotifications showAlertBanner={false} />\r\n                      <UserNav />\r\n                    </div>\r\n                  </div>\r\n                </header>\r\n\r\n                {/* Desktop header in navigation area */}\r\n                <div className=\"hidden md:block\">\r\n                  <div className=\"md:pl-64\">\r\n                    <header className={isPerfMode ? 'border-b bg-background' : \"border-b/60 bg-background/40 backdrop-blur-xl supports-[backdrop-filter]:bg-background/30 shadow-[0_10px_30px_-10px_color-mix(in_oklab,theme(colors.primary),transparent_92%)]\"}>\r\n                      <div className=\"flex h-14 items-center justify-end px-6\">\r\n                        <div className=\"flex items-center gap-4\">\r\n                          <ThemeToggle />\r\n                          <RealTimeNotifications showAlertBanner={false} />\r\n                          <UserNav />\r\n                        </div>\r\n                      </div>\r\n                    </header>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Main content area */}\r\n                <div className=\"md:pl-64\">\r\n                  <main className=\"container mx-auto max-w-[95%] 2xl:max-w-[88%] px-2 sm:px-4 md:px-8 py-6 md:py-10\">\r\n                    <div className={isPerfMode ? 'rounded-2xl border bg-background p-4 md:p-8' : \"rounded-2xl border border-white/20 dark:border-white/10 bg-white/60 dark:bg-white/5 backdrop-blur-xl shadow-[0_15px_40px_-20px_color-mix(in_oklab,theme(colors.primary),transparent_88%)] p-4 md:p-8\"}>\r\n                      {children}\r\n                    </div>\r\n                  </main>\r\n                </div>\r\n              </div>\r\n              <Toaster />\r\n            </TooltipProvider>\r\n          </ThemeProvider>\r\n        </Providers>\r\n      </body>\r\n    </html>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\leads\\[id]\\edit\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[778,781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[778,781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[941,944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[941,944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { LeadForm } from '@/components/lead-form';\r\nimport { useLead, useUpdateLead, useConvertLeadToPipeline } from '@/lib/hooks';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { useRouter } from 'next/navigation';\r\nimport { use } from 'react';\r\n\r\nexport default function EditLeadPage({ params }: { params: Promise<{ id: string }> }) {\r\n  const router = useRouter();\r\n  const { id } = use(params);\r\n  const leadId = Number(id);\r\n  \r\n  const { data: lead, isLoading: isLoadingLead, isError } = useLead(leadId);\r\n  const { mutate: updateLead, isPending } = useUpdateLead();\r\n  const { mutate: convertLead } = useConvertLeadToPipeline();\r\n  \r\n  const handleSubmit = (data: any) => {\r\n    updateLead(data, {\r\n      onSuccess: () => {\r\n        router.push('/leads');\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSaveAndAddToPipeline = (data: any) => {\r\n    updateLead(data, {\r\n      onSuccess: (updated) => {\r\n        convertLead(\r\n          { leadId: updated.id, category: 'Pipeline', status: 'Proposal - Media' },\r\n          { onSuccess: () => router.push('/pipeline') }\r\n        );\r\n      }\r\n    });\r\n  };\r\n  \r\n  if (isLoadingLead) {\r\n    return (\r\n      <div className=\"container py-10\">\r\n        <Card>\r\n          <CardContent className=\"p-10 text-center\">\r\n            Loading lead...\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (isError || !lead) {\r\n    return (\r\n      <div className=\"container py-10\">\r\n        <Card>\r\n          <CardContent className=\"p-10 text-center\">\r\n            Lead not found or error loading data.\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container py-10\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Edit Lead: {lead.name}</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <LeadForm \r\n            lead={lead} \r\n            onSubmit={handleSubmit} \r\n            onSaveAndAddToPipeline={handleSaveAndAddToPipeline}\r\n            isSubmitting={isPending} \r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\leads\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\leads\\new\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[502,505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[502,505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[667,670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[667,670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { LeadForm } from '@/components/lead-form';\r\nimport { useCreateLead, useConvertLeadToPipeline } from '@/lib/hooks';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function NewLeadPage() {\r\n  const router = useRouter();\r\n  const { mutate: createLead, isPending } = useCreateLead();\r\n  const { mutate: convertLead } = useConvertLeadToPipeline();\r\n  \r\n  const handleSubmit = (data: any) => {\r\n    createLead(data, {\r\n      onSuccess: () => {\r\n        router.push('/leads');\r\n      }\r\n    });\r\n  };\r\n  \r\n  const handleSaveAndAddToPipeline = (data: any) => {\r\n    createLead(data, {\r\n      onSuccess: (created) => {\r\n        convertLead(\r\n          { leadId: created.id, category: 'Pipeline', status: 'Proposal - Media' },\r\n          { onSuccess: () => router.push('/pipeline') }\r\n        );\r\n      }\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <div className=\"container py-10\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Create New Lead</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <LeadForm onSubmit={handleSubmit} onSaveAndAddToPipeline={handleSaveAndAddToPipeline} isSubmitting={isPending} />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\leads\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Lead' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":52,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'prev' is defined but never used.","line":70,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4004,4007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4004,4007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4026,4029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4026,4029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4115,4118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4115,4118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4348,4351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4348,4351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4370,4373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4370,4373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4623,4626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4623,4626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4645,4648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4645,4648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4734,4737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4734,4737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4971,4974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4971,4974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4993,4996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4993,4996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5082,5085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5082,5085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { LeadsTable } from '@/components/leads-table';\r\n// import { KanbanView } from '@/components/kanban-view'; // Disabled - available for future restoration\r\nimport { useLeadColumns } from '@/components/lead-columns';\r\nimport { useLeads, useBdrManager } from '@/lib/hooks';\r\n// import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; // Disabled - available for future restoration\r\nimport { ErrorBoundary } from 'react-error-boundary';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuCheckboxItem,\r\n} from '@/components/ui/dropdown-menu';\r\nimport { Columns, Filter, Plus, Sparkles } from 'lucide-react';\r\nimport { leadSourceEnum, leadStatusEnum } from '@/lib/validations';\r\nimport { VisibilityState } from '@tanstack/react-table';\r\nimport { Lead } from '@/lib/hooks';\r\nimport { Navbar } from '@/components/ui/navbar';\r\nimport { AddBdrDialog } from '@/components/ui/add-bdr-dialog';\r\nimport { useRouter } from 'next/navigation';\r\nimport { LeadsSavedViews, LeadsView } from '@/components/leads-saved-views';\r\n\r\nfunction ErrorFallback({ error, resetErrorBoundary }: { error: Error; resetErrorBoundary: () => void }) {\r\n  return (\r\n    <div className=\"rounded-lg bg-destructive/10 p-6 text-center\">\r\n      <h2 className=\"mb-2 text-lg font-semibold\">Error loading leads</h2>\r\n      <p className=\"mb-4 text-sm text-muted-foreground\">{error.message}</p>\r\n      <Button onClick={resetErrorBoundary}>Try again</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LeadsContent() {\r\n  const [pageIndex, setPageIndex] = useState(0);\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [globalFilter, setGlobalFilter] = useState('');\r\n  const [filters, setFilters] = useState<Record<string, string>>({});\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n  // Initialize to a fixed value to avoid hydration mismatch; read real value after mount\r\n  const [beginnerMode, setBeginnerMode] = useState<boolean>(false);\r\n  const resizeTimeout = useRef<NodeJS.Timeout | null>(null);\r\n  const isUpdatingVisibility = useRef(false);\r\n  const { bdrs, addBdr } = useBdrManager();\r\n  const router = useRouter();\r\n\r\n  const { data, isLoading, error } = useLeads({\r\n    page: pageIndex + 1,\r\n    pageSize,\r\n    search: globalFilter || undefined,\r\n    ...filters\r\n  });\r\n\r\n  const leads = data?.leads ?? [];\r\n  const total = data?.total ?? 0;\r\n  const pageCount = Math.ceil(total / pageSize);\r\n\r\n  const columns = useLeadColumns();\r\n\r\n  // Safe column visibility setter to prevent infinite loops\r\n  const safeSetColumnVisibility = useCallback((newState: VisibilityState) => {\r\n    if (isUpdatingVisibility.current) return;\r\n    isUpdatingVisibility.current = true;\r\n    \r\n    setColumnVisibility(prev => {\r\n      // Replace visibility entirely to ensure predictable layouts\r\n      const updated = { ...newState };\r\n      \r\n      // Schedule a reset of the updating flag after this render cycle\r\n      setTimeout(() => {\r\n        isUpdatingVisibility.current = false;\r\n      }, 0);\r\n      \r\n      return updated;\r\n    });\r\n  }, []);\r\n\r\n  const handleAddBdr = (newBdr: string) => {\r\n    const success = addBdr(newBdr);\r\n    if (success) {\r\n      // Update the BDR filter if it's currently set\r\n      if (filters.bdr) {\r\n        setFilters(prev => ({ ...prev, bdr: newBdr }));\r\n      }\r\n    }\r\n    return success;\r\n  };\r\n\r\n  // Create a memoized function to update visibility based on screen size\r\n  const updateColumnVisibility = useCallback(() => {\r\n    // Get screen width\r\n    const width = window.innerWidth;\r\n    const newVisibility: VisibilityState = {};\r\n    \r\n    if (beginnerMode) {\r\n      // Beginner: show only high priority columns on all screen sizes\r\n      columns.forEach(column => {\r\n        const colId = (column as any).id ?? (column as any).accessorKey;\r\n        if (!colId) return;\r\n        const priority = (column.meta as any)?.priority;\r\n        newVisibility[colId] = priority === 'high';\r\n      });\r\n    } else if (width >= 1280) {\r\n      // Advanced large screens: show all columns\r\n      columns.forEach(column => {\r\n        const colId = (column as any).id ?? (column as any).accessorKey;\r\n        if (!colId) return;\r\n        newVisibility[colId] = true;\r\n      });\r\n    } else if (width >= 768) {\r\n      // Advanced medium screens: show high and medium\r\n      columns.forEach(column => {\r\n        const colId = (column as any).id ?? (column as any).accessorKey;\r\n        if (!colId) return;\r\n        const priority = (column.meta as any)?.priority;\r\n        newVisibility[colId] = priority === 'high' || priority === 'medium';\r\n      });\r\n    } else {\r\n      // Advanced small screens: show only high\r\n      columns.forEach(column => {\r\n        const colId = (column as any).id ?? (column as any).accessorKey;\r\n        if (!colId) return;\r\n        const priority = (column.meta as any)?.priority;\r\n        newVisibility[colId] = priority === 'high';\r\n      });\r\n    }\r\n\r\n    safeSetColumnVisibility(newVisibility);\r\n  }, [columns, safeSetColumnVisibility, beginnerMode]);\r\n\r\n  // Set default column visibility based on screen size and beginner mode\r\n  useEffect(() => {\r\n    // Initialize column visibility\r\n    updateColumnVisibility();\r\n\r\n    // Debounced resize handler to prevent excessive updates\r\n    const handleResize = () => {\r\n      if (resizeTimeout.current) {\r\n        clearTimeout(resizeTimeout.current);\r\n      }\r\n      \r\n      resizeTimeout.current = setTimeout(() => {\r\n        updateColumnVisibility();\r\n        resizeTimeout.current = null;\r\n      }, 200); // 200ms debounce\r\n    };\r\n\r\n    // Add event listener\r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      if (resizeTimeout.current) {\r\n        clearTimeout(resizeTimeout.current);\r\n      }\r\n    };\r\n  }, [updateColumnVisibility]);\r\n\r\n  // Read beginner mode from localStorage after mount to avoid hydration mismatch\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const stored = window.localStorage.getItem('leads.beginnerMode');\r\n      if (stored !== null) {\r\n        setBeginnerMode(stored === 'true');\r\n      } else {\r\n        // Default to true if not set\r\n        setBeginnerMode(true);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Persist beginner mode\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      window.localStorage.setItem('leads.beginnerMode', beginnerMode ? 'true' : 'false');\r\n    }\r\n  }, [beginnerMode]);\r\n\r\n  // Recompute column visibility when beginner mode toggles\r\n  useEffect(() => {\r\n    updateColumnVisibility();\r\n  }, [beginnerMode, updateColumnVisibility]);\r\n\r\n  const handlePaginationChange = (newPageIndex: number, newPageSize: number) => {\r\n    setPageIndex(newPageIndex);\r\n    setPageSize(newPageSize);\r\n  };\r\n\r\n  const handleGlobalFilterChange = (value: string) => {\r\n    setGlobalFilter(value);\r\n    setPageIndex(0);\r\n  };\r\n\r\n  const handleFilterChange = (columnId: string, value: string) => {\r\n    setFilters(prev => {\r\n      const newFilters = { ...prev };\r\n      if (value === 'all') {\r\n        delete newFilters[columnId];\r\n      } else {\r\n        newFilters[columnId] = value;\r\n      }\r\n      return newFilters;\r\n    });\r\n    setPageIndex(0);\r\n  };\r\n\r\n  const getActiveFilters = () => {\r\n    const activeFilters = Object.entries(filters).map(([key, value]) => {\r\n      const label = key.toUpperCase();\r\n      return `${label}: ${value}`;\r\n    });\r\n    return activeFilters.length ? activeFilters.join(', ') : 'Filter';\r\n  };\r\n\r\n  // Handle column visibility changes from the dropdown\r\n  const handleColumnVisibilityChange = useCallback((columnId: string, isVisible: boolean) => {\r\n    safeSetColumnVisibility({\r\n      ...columnVisibility,\r\n      [columnId]: isVisible\r\n    });\r\n  }, [columnVisibility, safeSetColumnVisibility]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex flex-wrap items-center justify-between gap-2\">\r\n          <div className=\"flex gap-2\">\r\n            <Button \r\n              onClick={() => router.push('/leads/new')}\r\n              className=\"h-9\"\r\n            >\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              Add New Lead\r\n            </Button>\r\n            <Button\r\n              variant={beginnerMode ? 'secondary' : 'outline'}\r\n              className=\"h-9 px-3\"\r\n              onClick={() => setBeginnerMode((v) => !v)}\r\n            >\r\n              <Sparkles className=\"h-4 w-4 mr-2\" />\r\n              {beginnerMode ? 'Beginner Mode' : 'Advanced Mode'}\r\n            </Button>\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" className=\"h-9 px-3\">\r\n                  <Columns className=\"h-4 w-4 sm:mr-2\" />\r\n                  <span className=\"hidden sm:inline\">Columns</span>\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\r\n                <DropdownMenuLabel>Toggle Columns</DropdownMenuLabel>\r\n                <DropdownMenuSeparator />\r\n                {columns.map((column) => {\r\n                  // Skip checkbox column\r\n                  if (column.id === 'select') return null;\r\n                  \r\n                  // Skip columns without IDs\r\n                  if (!column.id) return null;\r\n                  \r\n                  // Get a readable header name\r\n                  let headerName = column.id;\r\n                  if (typeof column.header === 'string') {\r\n                    headerName = column.header;\r\n                  } else if (column.id) {\r\n                    // Format the ID as readable text\r\n                    headerName = column.id\r\n                      .replace(/([A-Z])/g, ' $1') // Insert space before capital letters\r\n                      .replace(/^./, str => str.toUpperCase()); // Capitalize first letter\r\n                  }\r\n                  \r\n                  return (\r\n                    <DropdownMenuCheckboxItem\r\n                      key={column.id}\r\n                      checked={!!columnVisibility[column.id]}\r\n                      onCheckedChange={(checked) => {\r\n                        handleColumnVisibilityChange(column.id!, checked);\r\n                      }}\r\n                      disabled={beginnerMode}\r\n                    >\r\n                      {headerName}\r\n                    </DropdownMenuCheckboxItem>\r\n                  );\r\n                })}\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" className=\"h-9 px-3\">\r\n                  <Filter className=\"h-4 w-4 sm:mr-2\" />\r\n                  <span className=\"hidden sm:inline\">{getActiveFilters()}</span>\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\r\n                <DropdownMenuLabel>Filter By</DropdownMenuLabel>\r\n                <DropdownMenuSeparator />\r\n                <DropdownMenuItem \r\n                  className={filters.status ? 'bg-muted' : ''}\r\n                  onClick={() => setFilters(prev => {\r\n                    const newFilters = { ...prev };\r\n                    if (newFilters.status) {\r\n                      delete newFilters.status;\r\n                    } else {\r\n                      newFilters.status = leadStatusEnum[0];\r\n                    }\r\n                    return newFilters;\r\n                  })}\r\n                >\r\n                  Status {filters.status && '✓'}\r\n                </DropdownMenuItem>\r\n                <DropdownMenuItem \r\n                  className={filters.source ? 'bg-muted' : ''}\r\n                  onClick={() => setFilters(prev => {\r\n                    const newFilters = { ...prev };\r\n                    if (newFilters.source) {\r\n                      delete newFilters.source;\r\n                    } else {\r\n                      newFilters.source = leadSourceEnum[0];\r\n                    }\r\n                    return newFilters;\r\n                  })}\r\n                >\r\n                  Source {filters.source && '✓'}\r\n                </DropdownMenuItem>\r\n                <DropdownMenuItem \r\n                  className={filters.bdr ? 'bg-muted' : ''}\r\n                  onClick={() => setFilters(prev => {\r\n                    const newFilters = { ...prev };\r\n                    if (newFilters.bdr) {\r\n                      delete newFilters.bdr;\r\n                    } else {\r\n                      newFilters.bdr = bdrs[0] || '';\r\n                    }\r\n                    return newFilters;\r\n                  })}\r\n                >\r\n                  BDR {filters.bdr && '✓'}\r\n                </DropdownMenuItem>\r\n                <DropdownMenuSeparator />\r\n                <DropdownMenuItem asChild>\r\n                  <AddBdrDialog onAddBdr={handleAddBdr} />\r\n                </DropdownMenuItem>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          </div>\r\n          <LeadsSavedViews\r\n            filters={filters}\r\n            columnVisibility={columnVisibility as Record<string, boolean>}\r\n            onApply={(view: LeadsView) => {\r\n              setFilters(view.filters);\r\n              safeSetColumnVisibility(view.columnVisibility as unknown as VisibilityState);\r\n            }}\r\n          />\r\n        </div>\r\n        {/* Enterprise control surface */}\r\n        <div className=\"rounded-xl border border-white/30 dark:border-white/10 bg-white/60 dark:bg-white/[0.05] backdrop-blur p-3\">\r\n          <div className=\"text-sm text-muted-foreground\">Use the search, filters and saved views to quickly segment leads.</div>\r\n        </div>\r\n        <LeadsTable\r\n          data={leads}\r\n          columns={columns}\r\n          pageCount={pageCount}\r\n          pageIndex={pageIndex}\r\n          pageSize={pageSize}\r\n          total={total}\r\n          onPaginationChange={handlePaginationChange}\r\n          onGlobalFilterChange={handleGlobalFilterChange}\r\n          filters={filters}\r\n          onFilterChange={handleFilterChange}\r\n          isLoading={isLoading}\r\n          columnVisibility={columnVisibility}\r\n          onColumnVisibilityChange={safeSetColumnVisibility}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function LeadsPage() {\r\n  return (\r\n    <ErrorBoundary FallbackComponent={ErrorFallback}>\r\n      <LeadsContent />\r\n    </ErrorBoundary>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\onboarding\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":181,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5527,5567],"text":"Let&apos;s set up your account to get started"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5527,5567],"text":"Let&lsquo;s set up your account to get started"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5527,5567],"text":"Let&#39;s set up your account to get started"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5527,5567],"text":"Let&rsquo;s set up your account to get started"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":245,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8270,8321],"text":"Welcome to the EMG CRM system! You&apos;ve been granted "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8270,8321],"text":"Welcome to the EMG CRM system! You&lsquo;ve been granted "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8270,8321],"text":"Welcome to the EMG CRM system! You&#39;ve been granted "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8270,8321],"text":"Welcome to the EMG CRM system! You&rsquo;ve been granted "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":279,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10250,10319],"text":"Let&apos;s set up your profile information to personalize your experience."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10250,10319],"text":"Let&lsquo;s set up your profile information to personalize your experience."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10250,10319],"text":"Let&#39;s set up your profile information to personalize your experience."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10250,10319],"text":"Let&rsquo;s set up your profile information to personalize your experience."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":318,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11946,12007],"text":"For security, please set a new password that you&apos;ll remember."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11946,12007],"text":"For security, please set a new password that you&lsquo;ll remember."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11946,12007],"text":"For security, please set a new password that you&#39;ll remember."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11946,12007],"text":"For security, please set a new password that you&rsquo;ll remember."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":377,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[14793,14808],"text":"You&apos;re All Set!"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[14793,14808],"text":"You&lsquo;re All Set!"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[14793,14808],"text":"You&#39;re All Set!"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[14793,14808],"text":"You&rsquo;re All Set!"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useSession } from 'next-auth/react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { CheckCircle, User, Shield, Key, ArrowRight, Eye, EyeOff } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n\r\ninterface OnboardingStep {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  completed: boolean;\r\n}\r\n\r\nexport default function OnboardingPage() {\r\n  const { data: session, status } = useSession();\r\n  const router = useRouter();\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    newPassword: '',\r\n    confirmPassword: '',\r\n  });\r\n\r\n  const [steps, setSteps] = useState<OnboardingStep[]>([\r\n    {\r\n      id: 'welcome',\r\n      title: 'Welcome to EMG CRM',\r\n      description: 'Learn about your role and access',\r\n      completed: false,\r\n    },\r\n    {\r\n      id: 'profile',\r\n      title: 'Complete Your Profile',\r\n      description: 'Set up your name and preferences',\r\n      completed: false,\r\n    },\r\n    {\r\n      id: 'security',\r\n      title: 'Set Up Security',\r\n      description: 'Change your password for security',\r\n      completed: false,\r\n    },\r\n    {\r\n      id: 'finish',\r\n      title: 'Ready to Start',\r\n      description: 'Your account is configured',\r\n      completed: false,\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (session?.user) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        name: session.user.name || '',\r\n      }));\r\n    }\r\n  }, [session]);\r\n\r\n  // Redirect if already completed onboarding (user has a name set)\r\n  useEffect(() => {\r\n    if (status !== 'loading' && session?.user?.name && session.user.name.trim().length > 0) {\r\n      router.push('/');\r\n    }\r\n  }, [session, status, router]);\r\n\r\n  const markStepCompleted = (stepIndex: number) => {\r\n    setSteps(prev => prev.map((step, index) => \r\n      index === stepIndex ? { ...step, completed: true } : step\r\n    ));\r\n  };\r\n\r\n  const nextStep = () => {\r\n    if (currentStep < steps.length - 1) {\r\n      markStepCompleted(currentStep);\r\n      setCurrentStep(prev => prev + 1);\r\n    }\r\n  };\r\n\r\n  const handleProfileUpdate = async () => {\r\n    if (!formData.name.trim()) {\r\n      toast.error('Please enter your full name');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`/api/admin/users/${session?.user?.id}`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ name: formData.name }),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const error = await res.json();\r\n        throw new Error(error.error || 'Failed to update profile');\r\n      }\r\n\r\n      toast.success('Profile updated successfully');\r\n      nextStep();\r\n    } catch (error) {\r\n      toast.error(error instanceof Error ? error.message : 'An error occurred');\r\n    }\r\n  };\r\n\r\n  const handlePasswordUpdate = async () => {\r\n    if (!formData.newPassword || !formData.confirmPassword) {\r\n      toast.error('Please enter and confirm your new password');\r\n      return;\r\n    }\r\n\r\n    if (formData.newPassword.length < 6) {\r\n      toast.error('Password must be at least 6 characters');\r\n      return;\r\n    }\r\n\r\n    if (formData.newPassword !== formData.confirmPassword) {\r\n      toast.error('Passwords do not match');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`/api/admin/users/${session?.user?.id}`, {\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ password: formData.newPassword }),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const error = await res.json();\r\n        throw new Error(error.error || 'Failed to update password');\r\n      }\r\n\r\n      toast.success('Password updated successfully');\r\n      nextStep();\r\n    } catch (error) {\r\n      toast.error(error instanceof Error ? error.message : 'An error occurred');\r\n    }\r\n  };\r\n\r\n  const finishOnboarding = () => {\r\n    markStepCompleted(currentStep);\r\n    toast.success('Welcome to EMG CRM! Your account is ready to use.');\r\n    router.push('/');\r\n  };\r\n\r\n  // Handle loading and authentication states\r\n  if (status === 'loading') {\r\n    return <div className=\"min-h-screen bg-background flex items-center justify-center p-6\">\r\n      <div className=\"text-center\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\r\n        <p>Loading...</p>\r\n      </div>\r\n    </div>;\r\n  }\r\n\r\n  if (status === 'unauthenticated' || !session) {\r\n    if (typeof window !== 'undefined') {\r\n      router.push('/auth/login');\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const isAdmin = session.user?.role === 'ADMIN';\r\n  const progress = ((currentStep + 1) / steps.length) * 100;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-6\">\r\n      <div className=\"max-w-2xl w-full space-y-6\">\r\n        <div className=\"text-center space-y-2\">\r\n          <h1 className=\"text-3xl font-bold\">Welcome to EMG CRM</h1>\r\n          <p className=\"text-muted-foreground\">Let's set up your account to get started</p>\r\n        </div>\r\n\r\n        {/* Progress Bar */}\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex justify-between text-sm\">\r\n                <span>Setup Progress</span>\r\n                <span>{Math.round(progress)}% Complete</span>\r\n              </div>\r\n              <Progress value={progress} />\r\n            </div>\r\n            \r\n            <div className=\"mt-4 grid grid-cols-1 md:grid-cols-4 gap-2\">\r\n              {steps.map((step, index) => (\r\n                <div\r\n                  key={step.id}\r\n                  className={`flex items-center gap-2 p-2 rounded text-xs ${\r\n                    index === currentStep\r\n                      ? 'bg-primary text-primary-foreground'\r\n                      : step.completed\r\n                      ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100'\r\n                      : 'bg-muted text-muted-foreground'\r\n                  }`}\r\n                >\r\n                  {step.completed ? (\r\n                    <CheckCircle className=\"h-3 w-3\" />\r\n                  ) : (\r\n                    <div className=\"h-3 w-3 rounded-full border border-current\" />\r\n                  )}\r\n                  <span className=\"font-medium\">{step.title}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Step Content */}\r\n        <Card className=\"min-h-96\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              {currentStep === 0 && <Shield className=\"h-5 w-5\" />}\r\n              {currentStep === 1 && <User className=\"h-5 w-5\" />}\r\n              {currentStep === 2 && <Key className=\"h-5 w-5\" />}\r\n              {currentStep === 3 && <CheckCircle className=\"h-5 w-5\" />}\r\n              {steps[currentStep].title}\r\n            </CardTitle>\r\n            <CardDescription>{steps[currentStep].description}</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-6\">\r\n            \r\n            {/* Welcome Step */}\r\n            {currentStep === 0 && (\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <h3 className=\"text-lg font-medium\">Hello, {session.user.email}</h3>\r\n                  <Badge variant={isAdmin ? \"default\" : \"secondary\"} className=\"gap-1\">\r\n                    {isAdmin ? <Shield className=\"h-3 w-3\" /> : <User className=\"h-3 w-3\" />}\r\n                    {session.user.role}\r\n                  </Badge>\r\n                </div>\r\n                \r\n                <div className=\"space-y-3\">\r\n                  <p>Welcome to the EMG CRM system! You've been granted <strong>{session.user.role}</strong> access.</p>\r\n                  \r\n                  {isAdmin ? (\r\n                    <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\r\n                      <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Admin Access</h4>\r\n                      <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\r\n                        <li>• Full access to all leads, pipeline, and financial data</li>\r\n                        <li>• User management and system administration</li>\r\n                        <li>• Advanced reporting and analytics</li>\r\n                        <li>• System configuration and settings</li>\r\n                      </ul>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\r\n                      <h4 className=\"font-medium text-green-900 dark:text-green-100 mb-2\">BDR Access</h4>\r\n                      <ul className=\"text-sm text-green-800 dark:text-green-200 space-y-1\">\r\n                        <li>• Access to your assigned leads and pipeline items</li>\r\n                        <li>• Track your activities and performance</li>\r\n                        <li>• Manage your calls, agreements, and partner lists</li>\r\n                        <li>• View your individual reporting dashboard</li>\r\n                      </ul>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                <Button onClick={nextStep} className=\"w-full\">\r\n                  Get Started <ArrowRight className=\"h-4 w-4 ml-2\" />\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Profile Step */}\r\n            {currentStep === 1 && (\r\n              <div className=\"space-y-4\">\r\n                <p>Let's set up your profile information to personalize your experience.</p>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"full-name\">Full Name</Label>\r\n                    <Input\r\n                      id=\"full-name\"\r\n                      value={formData.name}\r\n                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n                      placeholder=\"Enter your full name\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label>Email Address</Label>\r\n                    <Input value={session.user.email || ''} disabled />\r\n                    <p className=\"text-xs text-muted-foreground mt-1\">Your email cannot be changed during onboarding.</p>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label>Role</Label>\r\n                    <div className=\"mt-1\">\r\n                      <Badge variant={isAdmin ? \"default\" : \"secondary\"} className=\"gap-1\">\r\n                        {isAdmin ? <Shield className=\"h-3 w-3\" /> : <User className=\"h-3 w-3\" />}\r\n                        {session.user.role}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <Button onClick={handleProfileUpdate} className=\"w-full\">\r\n                  Continue <ArrowRight className=\"h-4 w-4 ml-2\" />\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Security Step */}\r\n            {currentStep === 2 && (\r\n              <div className=\"space-y-4\">\r\n                <p>For security, please set a new password that you'll remember.</p>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"new-password\">New Password</Label>\r\n                    <div className=\"relative\">\r\n                      <Input\r\n                        id=\"new-password\"\r\n                        type={showPassword ? \"text\" : \"password\"}\r\n                        value={formData.newPassword}\r\n                        onChange={(e) => setFormData({ ...formData, newPassword: e.target.value })}\r\n                        placeholder=\"Enter new password (min 6 characters)\"\r\n                      />\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        className=\"absolute right-0 top-0 h-full px-3\"\r\n                        onClick={() => setShowPassword(!showPassword)}\r\n                      >\r\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\r\n                    <Input\r\n                      id=\"confirm-password\"\r\n                      type={showPassword ? \"text\" : \"password\"}\r\n                      value={formData.confirmPassword}\r\n                      onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}\r\n                      placeholder=\"Confirm your new password\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"text-sm text-muted-foreground space-y-1\">\r\n                    <p>Password requirements:</p>\r\n                    <ul className=\"list-disc list-inside space-y-0.5 ml-2\">\r\n                      <li>At least 6 characters long</li>\r\n                      <li>Should be unique and memorable to you</li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n                \r\n                <Button onClick={handlePasswordUpdate} className=\"w-full\">\r\n                  Set Password <ArrowRight className=\"h-4 w-4 ml-2\" />\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Finish Step */}\r\n            {currentStep === 3 && (\r\n              <div className=\"space-y-6 text-center\">\r\n                <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\r\n                  <CheckCircle className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\r\n                </div>\r\n                \r\n                <div>\r\n                  <h3 className=\"text-xl font-semibold\">You're All Set!</h3>\r\n                  <p className=\"text-muted-foreground mt-2\">Your EMG CRM account is ready to use.</p>\r\n                </div>\r\n                \r\n                <div className=\"bg-muted rounded-lg p-4 text-left space-y-2\">\r\n                  <h4 className=\"font-medium\">Next Steps:</h4>\r\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\r\n                    <li>• Explore your dashboard and available tools</li>\r\n                    <li>• {isAdmin ? 'Start managing users and system settings' : 'Begin working with your assigned leads and pipeline'}</li>\r\n                    <li>• Check out the reporting section for insights</li>\r\n                    <li>• Visit your profile anytime to update your information</li>\r\n                  </ul>\r\n                </div>\r\n                \r\n                <Button onClick={finishOnboarding} size=\"lg\" className=\"w-full\">\r\n                  Enter EMG CRM <ArrowRight className=\"h-4 w-4 ml-2\" />\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1478,1481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1478,1481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":323,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13505,13525],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13505,13525],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13505,13525],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13505,13525],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":323,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13534,13608],"text":" Count of activity logs with type &quot;Call_Completed\" within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13534,13608],"text":" Count of activity logs with type &ldquo;Call_Completed\" within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13534,13608],"text":" Count of activity logs with type &#34;Call_Completed\" within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13534,13608],"text":" Count of activity logs with type &rdquo;Call_Completed\" within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":323,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13534,13608],"text":" Count of activity logs with type \"Call_Completed&quot; within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13534,13608],"text":" Count of activity logs with type \"Call_Completed&ldquo; within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13534,13608],"text":" Count of activity logs with type \"Call_Completed&#34; within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13534,13608],"text":" Count of activity logs with type \"Call_Completed&rdquo; within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":358,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15660,15680],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15660,15680],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15660,15680],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15660,15680],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":358,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[15689,15763],"text":" Count of activity logs with type &quot;Agreement_Sent\" within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[15689,15763],"text":" Count of activity logs with type &ldquo;Agreement_Sent\" within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[15689,15763],"text":" Count of activity logs with type &#34;Agreement_Sent\" within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[15689,15763],"text":" Count of activity logs with type &rdquo;Agreement_Sent\" within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":358,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[15689,15763],"text":" Count of activity logs with type \"Agreement_Sent&quot; within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[15689,15763],"text":" Count of activity logs with type \"Agreement_Sent&ldquo; within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[15689,15763],"text":" Count of activity logs with type \"Agreement_Sent&#34; within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[15689,15763],"text":" Count of activity logs with type \"Agreement_Sent&rdquo; within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":393,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17812,17832],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17812,17832],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17812,17832],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17812,17832],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":393,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17841,17918],"text":" Count of activity logs with type &quot;Partner_List_Sent\" within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17841,17918],"text":" Count of activity logs with type &ldquo;Partner_List_Sent\" within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17841,17918],"text":" Count of activity logs with type &#34;Partner_List_Sent\" within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17841,17918],"text":" Count of activity logs with type &rdquo;Partner_List_Sent\" within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":393,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17841,17918],"text":" Count of activity logs with type \"Partner_List_Sent&quot; within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17841,17918],"text":" Count of activity logs with type \"Partner_List_Sent&ldquo; within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17841,17918],"text":" Count of activity logs with type \"Partner_List_Sent&#34; within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17841,17918],"text":" Count of activity logs with type \"Partner_List_Sent&rdquo; within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":428,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19936,19956],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19936,19956],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19936,19956],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19936,19956],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":428,"column":119,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19965,20046],"text":" Count of pipeline items with sales indicators or &apos;Sold' status updated this week"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19965,20046],"text":" Count of pipeline items with sales indicators or &lsquo;Sold' status updated this week"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19965,20046],"text":" Count of pipeline items with sales indicators or &#39;Sold' status updated this week"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19965,20046],"text":" Count of pipeline items with sales indicators or &rsquo;Sold' status updated this week"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":428,"column":124,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19965,20046],"text":" Count of pipeline items with sales indicators or 'Sold&apos; status updated this week"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19965,20046],"text":" Count of pipeline items with sales indicators or 'Sold&lsquo; status updated this week"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19965,20046],"text":" Count of pipeline items with sales indicators or 'Sold&#39; status updated this week"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19965,20046],"text":" Count of pipeline items with sales indicators or 'Sold&rsquo; status updated this week"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":469,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[22349,22369],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[22349,22369],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[22349,22369],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[22349,22369],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":469,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22378,22445],"text":" Count of activity logs with type &quot;Call_Completed\" within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22378,22445],"text":" Count of activity logs with type &ldquo;Call_Completed\" within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22378,22445],"text":" Count of activity logs with type &#34;Call_Completed\" within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22378,22445],"text":" Count of activity logs with type &rdquo;Call_Completed\" within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":469,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[22378,22445],"text":" Count of activity logs with type \"Call_Completed&quot; within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[22378,22445],"text":" Count of activity logs with type \"Call_Completed&ldquo; within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[22378,22445],"text":" Count of activity logs with type \"Call_Completed&#34; within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[22378,22445],"text":" Count of activity logs with type \"Call_Completed&rdquo; within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":498,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[24203,24223],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[24203,24223],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[24203,24223],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[24203,24223],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":498,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24232,24299],"text":" Count of activity logs with type &quot;Agreement_Sent\" within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24232,24299],"text":" Count of activity logs with type &ldquo;Agreement_Sent\" within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24232,24299],"text":" Count of activity logs with type &#34;Agreement_Sent\" within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24232,24299],"text":" Count of activity logs with type &rdquo;Agreement_Sent\" within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":498,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[24232,24299],"text":" Count of activity logs with type \"Agreement_Sent&quot; within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[24232,24299],"text":" Count of activity logs with type \"Agreement_Sent&ldquo; within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[24232,24299],"text":" Count of activity logs with type \"Agreement_Sent&#34; within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[24232,24299],"text":" Count of activity logs with type \"Agreement_Sent&rdquo; within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":527,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[26054,26074],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[26054,26074],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[26054,26074],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[26054,26074],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":527,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[26083,26153],"text":" Count of activity logs with type &quot;Partner_List_Sent\" within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[26083,26153],"text":" Count of activity logs with type &ldquo;Partner_List_Sent\" within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[26083,26153],"text":" Count of activity logs with type &#34;Partner_List_Sent\" within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[26083,26153],"text":" Count of activity logs with type &rdquo;Partner_List_Sent\" within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":527,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[26083,26153],"text":" Count of activity logs with type \"Partner_List_Sent&quot; within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[26083,26153],"text":" Count of activity logs with type \"Partner_List_Sent&ldquo; within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[26083,26153],"text":" Count of activity logs with type \"Partner_List_Sent&#34; within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[26083,26153],"text":" Count of activity logs with type \"Partner_List_Sent&rdquo; within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":556,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[27881,27901],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[27881,27901],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[27881,27901],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[27881,27901],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":556,"column":119,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[27910,27991],"text":" Count of pipeline items with sales indicators or &apos;Sold' status updated last week"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[27910,27991],"text":" Count of pipeline items with sales indicators or &lsquo;Sold' status updated last week"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[27910,27991],"text":" Count of pipeline items with sales indicators or &#39;Sold' status updated last week"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[27910,27991],"text":" Count of pipeline items with sales indicators or &rsquo;Sold' status updated last week"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":556,"column":124,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[27910,27991],"text":" Count of pipeline items with sales indicators or 'Sold&apos; status updated last week"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[27910,27991],"text":" Count of pipeline items with sales indicators or 'Sold&lsquo; status updated last week"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[27910,27991],"text":" Count of pipeline items with sales indicators or 'Sold&#39; status updated last week"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[27910,27991],"text":" Count of pipeline items with sales indicators or 'Sold&rsquo; status updated last week"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":591,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[30013,30033],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[30013,30033],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[30013,30033],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[30013,30033],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":591,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30042,30117],"text":" Count of activity logs with type &quot;Call_Completed\" within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30042,30117],"text":" Count of activity logs with type &ldquo;Call_Completed\" within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30042,30117],"text":" Count of activity logs with type &#34;Call_Completed\" within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30042,30117],"text":" Count of activity logs with type &rdquo;Call_Completed\" within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":591,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30042,30117],"text":" Count of activity logs with type \"Call_Completed&quot; within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30042,30117],"text":" Count of activity logs with type \"Call_Completed&ldquo; within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30042,30117],"text":" Count of activity logs with type \"Call_Completed&#34; within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30042,30117],"text":" Count of activity logs with type \"Call_Completed&rdquo; within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":626,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[32177,32197],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[32177,32197],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[32177,32197],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[32177,32197],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":626,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[32206,32281],"text":" Count of activity logs with type &quot;Agreement_Sent\" within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[32206,32281],"text":" Count of activity logs with type &ldquo;Agreement_Sent\" within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[32206,32281],"text":" Count of activity logs with type &#34;Agreement_Sent\" within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[32206,32281],"text":" Count of activity logs with type &rdquo;Agreement_Sent\" within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":626,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[32206,32281],"text":" Count of activity logs with type \"Agreement_Sent&quot; within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[32206,32281],"text":" Count of activity logs with type \"Agreement_Sent&ldquo; within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[32206,32281],"text":" Count of activity logs with type \"Agreement_Sent&#34; within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[32206,32281],"text":" Count of activity logs with type \"Agreement_Sent&rdquo; within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":661,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[34338,34358],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[34338,34358],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[34338,34358],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[34338,34358],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":661,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[34367,34445],"text":" Count of activity logs with type &quot;Partner_List_Sent\" within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[34367,34445],"text":" Count of activity logs with type &ldquo;Partner_List_Sent\" within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[34367,34445],"text":" Count of activity logs with type &#34;Partner_List_Sent\" within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[34367,34445],"text":" Count of activity logs with type &rdquo;Partner_List_Sent\" within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":661,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[34367,34445],"text":" Count of activity logs with type \"Partner_List_Sent&quot; within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[34367,34445],"text":" Count of activity logs with type \"Partner_List_Sent&ldquo; within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[34367,34445],"text":" Count of activity logs with type \"Partner_List_Sent&#34; within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[34367,34445],"text":" Count of activity logs with type \"Partner_List_Sent&rdquo; within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":696,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[36514,36534],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[36514,36534],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[36514,36534],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[36514,36534],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":738,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[38956,38976],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[38956,38976],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[38956,38976],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[38956,38976],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":738,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[38985,39053],"text":" Count of activity logs with type &quot;Call_Completed\" within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[38985,39053],"text":" Count of activity logs with type &ldquo;Call_Completed\" within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[38985,39053],"text":" Count of activity logs with type &#34;Call_Completed\" within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[38985,39053],"text":" Count of activity logs with type &rdquo;Call_Completed\" within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":738,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[38985,39053],"text":" Count of activity logs with type \"Call_Completed&quot; within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[38985,39053],"text":" Count of activity logs with type \"Call_Completed&ldquo; within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[38985,39053],"text":" Count of activity logs with type \"Call_Completed&#34; within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[38985,39053],"text":" Count of activity logs with type \"Call_Completed&rdquo; within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":767,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[40817,40837],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[40817,40837],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[40817,40837],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[40817,40837],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":767,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[40846,40914],"text":" Count of activity logs with type &quot;Agreement_Sent\" within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[40846,40914],"text":" Count of activity logs with type &ldquo;Agreement_Sent\" within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[40846,40914],"text":" Count of activity logs with type &#34;Agreement_Sent\" within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[40846,40914],"text":" Count of activity logs with type &rdquo;Agreement_Sent\" within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":767,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[40846,40914],"text":" Count of activity logs with type \"Agreement_Sent&quot; within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[40846,40914],"text":" Count of activity logs with type \"Agreement_Sent&ldquo; within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[40846,40914],"text":" Count of activity logs with type \"Agreement_Sent&#34; within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[40846,40914],"text":" Count of activity logs with type \"Agreement_Sent&rdquo; within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":796,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[42675,42695],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[42675,42695],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[42675,42695],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[42675,42695],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":796,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[42704,42775],"text":" Count of activity logs with type &quot;Partner_List_Sent\" within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[42704,42775],"text":" Count of activity logs with type &ldquo;Partner_List_Sent\" within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[42704,42775],"text":" Count of activity logs with type &#34;Partner_List_Sent\" within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[42704,42775],"text":" Count of activity logs with type &rdquo;Partner_List_Sent\" within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":796,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[42704,42775],"text":" Count of activity logs with type \"Partner_List_Sent&quot; within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[42704,42775],"text":" Count of activity logs with type \"Partner_List_Sent&ldquo; within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[42704,42775],"text":" Count of activity logs with type \"Partner_List_Sent&#34; within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[42704,42775],"text":" Count of activity logs with type \"Partner_List_Sent&rdquo; within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":825,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[44552,44572],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[44552,44572],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[44552,44572],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[44552,44572],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":860,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[46423,46480],"text":" Activity logs with type &quot;Call_Completed\" grouped by week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[46423,46480],"text":" Activity logs with type &ldquo;Call_Completed\" grouped by week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[46423,46480],"text":" Activity logs with type &#34;Call_Completed\" grouped by week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[46423,46480],"text":" Activity logs with type &rdquo;Call_Completed\" grouped by week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":860,"column":95,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[46423,46480],"text":" Activity logs with type \"Call_Completed&quot; grouped by week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[46423,46480],"text":" Activity logs with type \"Call_Completed&ldquo; grouped by week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[46423,46480],"text":" Activity logs with type \"Call_Completed&#34; grouped by week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[46423,46480],"text":" Activity logs with type \"Call_Completed&rdquo; grouped by week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":891,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[48122,48180],"text":" Activity logs with type &quot;Agreement_Sent\" grouped by month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[48122,48180],"text":" Activity logs with type &ldquo;Agreement_Sent\" grouped by month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[48122,48180],"text":" Activity logs with type &#34;Agreement_Sent\" grouped by month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[48122,48180],"text":" Activity logs with type &rdquo;Agreement_Sent\" grouped by month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":891,"column":95,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[48122,48180],"text":" Activity logs with type \"Agreement_Sent&quot; grouped by month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[48122,48180],"text":" Activity logs with type \"Agreement_Sent&ldquo; grouped by month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[48122,48180],"text":" Activity logs with type \"Agreement_Sent&#34; grouped by month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[48122,48180],"text":" Activity logs with type \"Agreement_Sent&rdquo; grouped by month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":922,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[49719,49787],"text":" Activity logs with type &quot;Partner_List_Sent\" and pipeline sales data"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[49719,49787],"text":" Activity logs with type &ldquo;Partner_List_Sent\" and pipeline sales data"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[49719,49787],"text":" Activity logs with type &#34;Partner_List_Sent\" and pipeline sales data"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[49719,49787],"text":" Activity logs with type &rdquo;Partner_List_Sent\" and pipeline sales data"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":922,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[49719,49787],"text":" Activity logs with type \"Partner_List_Sent&quot; and pipeline sales data"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[49719,49787],"text":" Activity logs with type \"Partner_List_Sent&ldquo; and pipeline sales data"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[49719,49787],"text":" Activity logs with type \"Partner_List_Sent&#34; and pipeline sales data"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[49719,49787],"text":" Activity logs with type \"Partner_List_Sent&rdquo; and pipeline sales data"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":964,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":964,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[52075,52078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[52075,52078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport Link from 'next/link';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { Navbar } from '@/components/ui/navbar';\r\nimport { useSession } from 'next-auth/react';\r\nimport {\r\n  Phone,\r\n  FileText,\r\n  Users,\r\n  Target,\r\n  AlertCircle,\r\n  HelpCircle,\r\n  ArrowUpRight,\r\n  ArrowDownRight\r\n} from 'lucide-react';\r\n\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip as RechartsTooltip,\r\n  ResponsiveContainer,\r\n  BarChart,\r\n  Bar,\r\n  Legend,\r\n} from 'recharts';\r\n\r\nconst fetchExecutiveDashboard = async (bdr: string) => {\r\n  const params = new URLSearchParams();\r\n  if (bdr && bdr !== 'all') params.append('bdr', bdr);\r\n  // Add test bypass flags to support Cypress in CI/dev without auth\r\n  if (typeof window !== 'undefined' && window.location.search.includes('test=1')) {\r\n    params.append('test', '1');\r\n  }\r\n\r\n  const response = await fetch(`/api/reporting/executive-dashboard?${params.toString()}`, {\r\n    headers: window.location.search.includes('test=1') ? { 'x-cypress-test': '1' } as any : undefined,\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch executive dashboard');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport default function ReportingPage() {\r\n  const { data: session } = useSession();\r\n  const [bdr, setBdr] = useState('all');\r\n\r\n  // For BDRs, force them to only see their own data\r\n  const effectiveBdr = session?.user?.role === 'BDR' ? session.user.name || 'all' : bdr;\r\n\r\n  const { data, isLoading, error } = useQuery({\r\n    queryKey: ['executiveDashboard', effectiveBdr],\r\n    queryFn: () => fetchExecutiveDashboard(effectiveBdr),\r\n    enabled: !!session, // Only run query when session is available\r\n  });\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'excellent': return 'text-emerald-600 dark:text-emerald-400 bg-emerald-50 dark:bg-emerald-950/30 border-emerald-200 dark:border-emerald-800';\r\n      case 'good': return 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-950/30 border-blue-200 dark:border-blue-800';\r\n      case 'needs_attention': return 'text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-950/30 border-amber-200 dark:border-amber-800';\r\n      case 'critical': return 'text-rose-600 dark:text-rose-400 bg-rose-50 dark:bg-rose-950/30 border-rose-200 dark:border-rose-800';\r\n      default: return 'text-muted-foreground bg-muted border';\r\n    }\r\n  };\r\n\r\n  const renderDelta = (current: number, previous: number, suffix: string = '') => {\r\n    const diff = (current ?? 0) - (previous ?? 0);\r\n    const isUp = diff > 0;\r\n    const isDown = diff < 0;\r\n    if (!isUp && !isDown) {\r\n      return (\r\n        <span className=\"inline-flex items-center gap-1 text-xs text-muted-foreground\">\r\n          <ArrowUpRight className=\"h-3 w-3 opacity-0\" />\r\n          0{suffix} vs prev\r\n        </span>\r\n      );\r\n    }\r\n    return (\r\n      <span className={`inline-flex items-center gap-1 text-xs ${isUp ? 'text-emerald-600' : 'text-rose-600'}`}>\r\n        {isUp ? <ArrowUpRight className=\"h-3 w-3\" /> : <ArrowDownRight className=\"h-3 w-3\" />}\r\n        {diff > 0 ? `+${diff}` : diff}{suffix} vs prev\r\n      </span>\r\n    );\r\n  };\r\n\r\n  // Show loading state when session is not loaded yet\r\n  if (!session) {\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <div className=\"flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-center\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\r\n            <p>Loading...</p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        <div className=\"flex items-center justify-center min-h-screen\">\r\n          <div className=\"text-center text-red-600\">\r\n            <AlertCircle className=\"h-8 w-8 mx-auto mb-4\" />\r\n            <p>Error loading dashboard: {error.message}</p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h1 className=\"text-2xl font-bold\">\r\n            {session?.user?.role === 'BDR' \r\n              ? `My Performance Dashboard` \r\n              : 'Reporting Dashboard'\r\n            }\r\n          </h1>\r\n          {session?.user?.role !== 'BDR' && (\r\n            <div className=\"flex items-center gap-2 rounded-xl border border-white/30 dark:border-white/10 bg-white/60 dark:bg-white/[0.05] backdrop-blur p-2\">\r\n              <Select onValueChange={setBdr} value={bdr}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select BDR\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All BDRs</SelectItem>\r\n                  {data?.dashboard.bdrList?.map((bdrName: string) => (\r\n                    <SelectItem key={bdrName} value={bdrName}>{bdrName}</SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          )}\r\n          {session?.user?.role === 'BDR' && (\r\n            <div className=\"flex items-center gap-2 rounded-xl border border-white/30 dark:border-white/10 bg-white/60 dark:bg-white/[0.05] backdrop-blur p-2 px-4 py-2\">\r\n              <span className=\"text-sm font-medium\">BDR: {session.user.name}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              Call Volume\r\n              <Tooltip>\r\n                <TooltipTrigger>\r\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                </TooltipTrigger>\r\n                <TooltipContent className=\"max-w-xs\">\r\n                  <p><strong>Detailed call volume analysis:</strong> Track call patterns, BDR performance, and call outcomes</p>\r\n                  <p><strong>Features:</strong> Daily/weekly trends, BDR comparisons, call success rates</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Link href=\"/reporting/call-volume\">\r\n              <Button className=\"transition-transform hover:scale-[1.02]\">\r\n                View Report\r\n              </Button>\r\n            </Link>\r\n            {/* Sparkline */}\r\n            {data?.dashboard?.trends?.weeklyCallVolume && (\r\n              <div className=\"mt-3 h-10\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <LineChart data={data.dashboard.trends.weeklyCallVolume} margin={{ top: 0, right: 0, bottom: 0, left: 0 }}>\r\n                    <XAxis dataKey=\"week\" hide />\r\n                    <YAxis hide />\r\n                    <Line type=\"monotone\" dataKey=\"calls\" stroke=\"#3b82f6\" strokeWidth={2} dot={false} />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              Agreement Tracking\r\n              <Tooltip>\r\n                <TooltipTrigger>\r\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                </TooltipTrigger>\r\n                <TooltipContent className=\"max-w-xs\">\r\n                  <p><strong>Agreement lifecycle tracking:</strong> Monitor agreement generation, status, and outcomes</p>\r\n                  <p><strong>Features:</strong> Agreement status tracking, conversion rates, BDR performance</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Link href=\"/reporting/agreement-tracking\">\r\n              <Button className=\"transition-transform hover:scale-[1.02]\">\r\n                View Report\r\n              </Button>\r\n            </Link>\r\n            {/* Sparkline */}\r\n            {data?.dashboard?.trends?.monthlyAgreements && (\r\n              <div className=\"mt-3 h-10\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <BarChart data={data.dashboard.trends.monthlyAgreements}>\r\n                    <XAxis dataKey=\"month\" hide />\r\n                    <YAxis hide />\r\n                    <Bar dataKey=\"agreements\" fill=\"#10b981\" radius={[2,2,0,0]} />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              Lists Out\r\n              <Tooltip>\r\n                <TooltipTrigger>\r\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                </TooltipTrigger>\r\n                <TooltipContent className=\"max-w-xs\">\r\n                  <p><strong>Partner list performance:</strong> Track list generation, outcomes, and revenue impact</p>\r\n                  <p><strong>Features:</strong> List size analysis, conversion tracking, revenue per list</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Link href=\"/reporting/lists-out\">\r\n              <Button className=\"transition-transform hover:scale-[1.02]\">\r\n                View Report\r\n              </Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              Conversion Funnel\r\n              <Tooltip>\r\n                <TooltipTrigger>\r\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                </TooltipTrigger>\r\n                <TooltipContent className=\"max-w-xs\">\r\n                  <p><strong>Sales funnel analysis:</strong> Track conversion rates at each stage of the sales process</p>\r\n                  <p><strong>Features:</strong> Stage-by-stage conversion rates, funnel optimization insights</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Link href=\"/reporting/conversion\">\r\n              <Button className=\"transition-transform hover:scale-[1.02]\">\r\n                View Report\r\n              </Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              Advanced Business Intelligence\r\n              <Tooltip>\r\n                <TooltipTrigger>\r\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                </TooltipTrigger>\r\n                <TooltipContent className=\"max-w-xs\">\r\n                  <p><strong>Advanced BDR performance comparison:</strong> Comprehensive analytics with real-time notifications</p>\r\n                  <p><strong>Features:</strong> BDR comparison tools, advanced filtering, real-time alerts, performance trends</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Link href=\"/reporting/advanced\">\r\n              <Button className=\"transition-transform hover:scale-[1.02]\">\r\n                View Advanced Reports\r\n              </Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      {isLoading && <p>Loading...</p>}\r\n      {error && <p>Error loading data</p>}\r\n      {data && (\r\n        <>\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Executive Dashboard</CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              {/* This Week Row */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4 text-foreground\">This Week</h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisWeek.callVolume.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Phone className=\"h-4 w-4\" />\r\n                        Call Volume\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total completed calls this week</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Call_Completed\" within the current week</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisWeek.callVolume.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.thisWeek.callVolume.current / data.dashboard.kpis.thisWeek.callVolume.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.thisWeek.callVolume.target}\r\n                      </p>\r\n                      <div className=\"mt-1\">\r\n                        {renderDelta(\r\n                          data.dashboard.kpis.thisWeek.callVolume.current,\r\n                          data.dashboard.kpis.lastWeek.callVolume.current\r\n                        )}\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisWeek.agreements.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <FileText className=\"h-4 w-4\" />\r\n                        Agreements\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total agreements sent this week</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Agreement_Sent\" within the current week</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisWeek.agreements.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.thisWeek.agreements.current / data.dashboard.kpis.thisWeek.agreements.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.thisWeek.agreements.target}\r\n                      </p>\r\n                      <div className=\"mt-1\">\r\n                        {renderDelta(\r\n                          data.dashboard.kpis.thisWeek.agreements.current,\r\n                          data.dashboard.kpis.lastWeek.agreements.current\r\n                        )}\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisWeek.listsOut.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Users className=\"h-4 w-4\" />\r\n                        Lists Out\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total partner lists sent this week</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Partner_List_Sent\" within the current week</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisWeek.listsOut.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.thisWeek.listsOut.current / data.dashboard.kpis.thisWeek.listsOut.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.thisWeek.listsOut.target}\r\n                      </p>\r\n                      <div className=\"mt-1\">\r\n                        {renderDelta(\r\n                          data.dashboard.kpis.thisWeek.listsOut.current,\r\n                          data.dashboard.kpis.lastWeek.listsOut.current\r\n                        )}\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisWeek.sales.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Target className=\"h-4 w-4\" />\r\n                        Sales\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total sales this week</p>\r\n                            <p><strong>How it's calculated:</strong> Count of pipeline items with sales indicators or 'Sold' status updated this week</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisWeek.sales.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.thisWeek.sales.current / data.dashboard.kpis.thisWeek.sales.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.thisWeek.sales.target}\r\n                      </p>\r\n                      <div className=\"mt-1\">\r\n                        {renderDelta(\r\n                          data.dashboard.kpis.thisWeek.sales.current,\r\n                          data.dashboard.kpis.lastWeek.sales.current\r\n                        )}\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Last Week Row */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4 text-indigo-600\">Last Week</h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastWeek.callVolume.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Phone className=\"h-4 w-4\" />\r\n                        Call Volume\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total completed calls last week</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Call_Completed\" within last week</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastWeek.callVolume.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.lastWeek.callVolume.current / data.dashboard.kpis.lastWeek.callVolume.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.lastWeek.callVolume.target}\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastWeek.agreements.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <FileText className=\"h-4 w-4\" />\r\n                        Agreements\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total agreements sent last week</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Agreement_Sent\" within last week</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastWeek.agreements.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.lastWeek.agreements.current / data.dashboard.kpis.lastWeek.agreements.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.lastWeek.agreements.target}\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastWeek.listsOut.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Users className=\"h-4 w-4\" />\r\n                        Lists Out\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total partner lists sent last week</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Partner_List_Sent\" within last week</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastWeek.listsOut.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.lastWeek.listsOut.current / data.dashboard.kpis.lastWeek.listsOut.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.lastWeek.listsOut.target}\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastWeek.sales.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Target className=\"h-4 w-4\" />\r\n                        Sales\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total sales last week</p>\r\n                            <p><strong>How it's calculated:</strong> Count of pipeline items with sales indicators or 'Sold' status updated last week</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastWeek.sales.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.lastWeek.sales.current / data.dashboard.kpis.lastWeek.sales.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.lastWeek.sales.target}\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n\r\n              {/* This Month Row */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4 text-green-600\">This Month</h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisMonth.callVolume.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Phone className=\"h-4 w-4\" />\r\n                        Call Volume\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total completed calls this month</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Call_Completed\" within the current month</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisMonth.callVolume.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.thisMonth.callVolume.current / data.dashboard.kpis.thisMonth.callVolume.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.thisMonth.callVolume.target}\r\n                      </p>\r\n                      <div className=\"mt-1\">\r\n                        {renderDelta(\r\n                          data.dashboard.kpis.thisMonth.callVolume.current,\r\n                          data.dashboard.kpis.lastMonth.callVolume.current\r\n                        )}\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisMonth.agreements.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <FileText className=\"h-4 w-4\" />\r\n                        Agreements\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total agreements sent this month</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Agreement_Sent\" within the current month</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisMonth.agreements.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.thisMonth.agreements.current / data.dashboard.kpis.thisMonth.agreements.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.thisMonth.agreements.target}\r\n                      </p>\r\n                      <div className=\"mt-1\">\r\n                        {renderDelta(\r\n                          data.dashboard.kpis.thisMonth.agreements.current,\r\n                          data.dashboard.kpis.lastMonth.agreements.current\r\n                        )}\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisMonth.listsOut.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Users className=\"h-4 w-4\" />\r\n                        Lists Out\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total partner lists sent this month</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Partner_List_Sent\" within the current month</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisMonth.listsOut.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.thisMonth.listsOut.current / data.dashboard.kpis.thisMonth.listsOut.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.thisMonth.listsOut.target}\r\n                      </p>\r\n                      <div className=\"mt-1\">\r\n                        {renderDelta(\r\n                          data.dashboard.kpis.thisMonth.listsOut.current,\r\n                          data.dashboard.kpis.lastMonth.listsOut.current\r\n                        )}\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisMonth.conversionRate.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Target className=\"h-4 w-4\" />\r\n                        Conversion Rate\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Conversion rate from calls to sales this month</p>\r\n                            <p><strong>How it's calculated:</strong> (Sales this month / Calls this month) × 100</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 25%+, Good: 18%+, Needs Attention: 12%+, Critical: Below 12%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisMonth.conversionRate.current}%</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.thisMonth.conversionRate.current / data.dashboard.kpis.thisMonth.conversionRate.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.thisMonth.conversionRate.target}%\r\n                      </p>\r\n                      <div className=\"mt-1\">\r\n                        {renderDelta(\r\n                          data.dashboard.kpis.thisMonth.conversionRate.current,\r\n                          data.dashboard.kpis.lastMonth.conversionRate.current,\r\n                          '%'\r\n                        )}\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Last Month Row */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4 text-purple-600\">Last Month</h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastMonth.callVolume.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Phone className=\"h-4 w-4\" />\r\n                        Call Volume\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total completed calls last month</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Call_Completed\" within last month</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastMonth.callVolume.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.lastMonth.callVolume.current / data.dashboard.kpis.lastMonth.callVolume.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.lastMonth.callVolume.target}\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastMonth.agreements.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <FileText className=\"h-4 w-4\" />\r\n                        Agreements\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total agreements sent last month</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Agreement_Sent\" within last month</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastMonth.agreements.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.lastMonth.agreements.current / data.dashboard.kpis.lastMonth.agreements.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.lastMonth.agreements.target}\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastMonth.listsOut.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Users className=\"h-4 w-4\" />\r\n                        Lists Out\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Total partner lists sent last month</p>\r\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Partner_List_Sent\" within last month</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastMonth.listsOut.current}</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.lastMonth.listsOut.current / data.dashboard.kpis.lastMonth.listsOut.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.lastMonth.listsOut.target}\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastMonth.conversionRate.status)}`}>\r\n                    <CardHeader className=\"pb-2\">\r\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Target className=\"h-4 w-4\" />\r\n                        Conversion Rate\r\n                        <Tooltip>\r\n                          <TooltipTrigger>\r\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                          </TooltipTrigger>\r\n                          <TooltipContent className=\"max-w-xs\">\r\n                            <p><strong>What it measures:</strong> Conversion rate from calls to sales last month</p>\r\n                            <p><strong>How it's calculated:</strong> (Sales last month / Calls last month) × 100</p>\r\n                            <p><strong>Target levels:</strong> Excellent: 25%+, Good: 18%+, Needs Attention: 12%+, Critical: Below 12%</p>\r\n                          </TooltipContent>\r\n                        </Tooltip>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastMonth.conversionRate.current}%</div>\r\n                      <Progress\r\n                        value={(data.dashboard.kpis.lastMonth.conversionRate.current / data.dashboard.kpis.lastMonth.conversionRate.target) * 100}\r\n                        className=\"mt-2\"\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Target: {data.dashboard.kpis.lastMonth.conversionRate.target}%\r\n                      </p>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Trend Charts */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\r\n            {/* Weekly Calls */}\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm flex items-center gap-2\">\r\n                  Weekly Call Volume\r\n                  <Tooltip>\r\n                    <TooltipTrigger>\r\n                      <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                    </TooltipTrigger>\r\n                    <TooltipContent className=\"max-w-xs\">\r\n                      <p><strong>What it shows:</strong> Call volume trends over the last 4 weeks</p>\r\n                      <p><strong>Data source:</strong> Activity logs with type \"Call_Completed\" grouped by week</p>\r\n                      <p><strong>Purpose:</strong> Track call volume consistency and identify patterns</p>\r\n                    </TooltipContent>\r\n                  </Tooltip>\r\n                </CardTitle>\r\n                <CardDescription>Last 4 weeks</CardDescription>\r\n              </CardHeader>\r\n              <CardContent style={{ width: '100%', height: 250 }}>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <LineChart data={data.dashboard.trends.weeklyCallVolume} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n                    <Line type=\"monotone\" dataKey=\"calls\" stroke=\"#3b82f6\" strokeWidth={2} />\r\n                    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                    <XAxis dataKey=\"week\" />\r\n                    <YAxis />\r\n                    <RechartsTooltip />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Monthly Agreements */}\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm flex items-center gap-2\">\r\n                  Monthly Agreements\r\n                  <Tooltip>\r\n                    <TooltipTrigger>\r\n                      <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                    </TooltipTrigger>\r\n                    <TooltipContent className=\"max-w-xs\">\r\n                      <p><strong>What it shows:</strong> Agreement volume trends over the last 4 months</p>\r\n                      <p><strong>Data source:</strong> Activity logs with type \"Agreement_Sent\" grouped by month</p>\r\n                      <p><strong>Purpose:</strong> Track agreement generation consistency and growth</p>\r\n                    </TooltipContent>\r\n                  </Tooltip>\r\n                </CardTitle>\r\n                <CardDescription>Last 4 months</CardDescription>\r\n              </CardHeader>\r\n              <CardContent style={{ width: '100%', height: 250 }}>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <BarChart data={data.dashboard.trends.monthlyAgreements}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"month\" />\r\n                    <YAxis />\r\n                    <RechartsTooltip />\r\n                    <Bar dataKey=\"agreements\" fill=\"#10b981\" />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Quarterly Lists Out */}\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm flex items-center gap-2\">\r\n                  Quarterly Lists Out\r\n                  <Tooltip>\r\n                    <TooltipTrigger>\r\n                      <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\r\n                    </TooltipTrigger>\r\n                    <TooltipContent className=\"max-w-xs\">\r\n                      <p><strong>What it shows:</strong> Lists sent and conversions by quarter</p>\r\n                      <p><strong>Data source:</strong> Activity logs with type \"Partner_List_Sent\" and pipeline sales data</p>\r\n                      <p><strong>Purpose:</strong> Track list performance and conversion rates over time</p>\r\n                    </TooltipContent>\r\n                  </Tooltip>\r\n                </CardTitle>\r\n                <CardDescription>Current vs Previous</CardDescription>\r\n              </CardHeader>\r\n              <CardContent style={{ width: '100%', height: 250 }}>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <BarChart data={data.dashboard.trends.quarterlyListsOut}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"quarter\" />\r\n                    <YAxis />\r\n                    <RechartsTooltip />\r\n                    <Legend />\r\n                    <Bar dataKey=\"lists\" fill=\"#6366f1\" name=\"Lists\" />\r\n                    <Bar dataKey=\"conversions\" fill=\"#f97316\" name=\"Conversions\" />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n          {data.dashboard.criticalActions.length > 0 && (\r\n            <Card className=\"border-white/20 dark:border-white/10 bg-white/70 dark:bg-white/[0.06] backdrop-blur-xl\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-red-800 flex items-center gap-2\">\r\n                  <AlertCircle className=\"h-5 w-5\" />\r\n                  Critical Actions Required\r\n                  <Tooltip>\r\n                    <TooltipTrigger>\r\n                      <HelpCircle className=\"h-4 w-4 text-red-400 hover:text-red-600\" />\r\n                    </TooltipTrigger>\r\n                    <TooltipContent className=\"max-w-xs\">\r\n                      <p><strong>What it shows:</strong> Priority actions that need immediate attention</p>\r\n                      <p><strong>Categories:</strong> Calls, Agreements, Lists, Team performance</p>\r\n                      <p><strong>Priority levels:</strong> Urgent (immediate), High (this week), Medium (this month)</p>\r\n                    </TooltipContent>\r\n                  </Tooltip>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-3\">\r\n                  {data.dashboard.criticalActions.slice(0, 3).map((action: any, index: number) => (\r\n                    <div key={index} className=\"flex items-start gap-3\">\r\n                      <div className=\"flex-1\">\r\n                        <p className=\"font-medium\">{action.action}</p>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          {action.deadline && `Deadline: ${action.deadline}`}\r\n                          {action.metric && ` • Count: ${action.metric}`}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\pipeline\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\pipeline\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refetch' is assigned a value but never used.","line":44,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":35}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'getDefaultBdr'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [session.user.name, bdrs, selectedBdr, getDefaultBdr]","fix":{"range":[2754,2794],"text":"[session.user.name, bdrs, selectedBdr, getDefaultBdr]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { Suspense, useEffect, useState } from 'react';\r\nimport { ErrorBoundary } from 'react-error-boundary';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Navbar } from '@/components/ui/navbar';\r\nimport { useSession } from 'next-auth/react';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Users, RefreshCcw, LayoutGrid, Table2, HelpCircle, Sparkles } from 'lucide-react';\r\nimport { PipelineBoardEnhanced } from '@/components/pipeline-board-enhanced';\r\nimport { PipelineTable } from '@/components/pipeline-table';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\nimport { usePipelineItems, useBdrManager } from '@/lib/hooks';\r\nimport { AddBdrDialog } from '@/components/ui/add-bdr-dialog';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\n\r\n// Define the BDR type for TypeScript\r\ntype BdrType = string;\r\ntype ViewType = 'board' | 'table';\r\n\r\nfunction ErrorFallback({ error, resetErrorBoundary }: { error: Error; resetErrorBoundary: () => void }) {\r\n  return (\r\n    <div className=\"rounded-lg bg-destructive/10 p-6 text-center\">\r\n      <h2 className=\"mb-2 text-lg font-semibold\">Error loading pipeline data</h2>\r\n      <p className=\"mb-4 text-sm text-muted-foreground\">{error.message}</p>\r\n      <Button onClick={resetErrorBoundary}>Try again</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PipelineContent() {\r\n  const { data: session } = useSession();\r\n  const { bdrs, addBdr, getDefaultBdr } = useBdrManager(session?.user?.name);\r\n  const [selectedBdr, setSelectedBdr] = useState<BdrType>(getDefaultBdr());\r\n  const [viewType, setViewType] = useState<ViewType>('board');\r\n  const queryClient = useQueryClient();\r\n\r\n  const { data, isLoading, refetch } = usePipelineItems({\r\n    bdr: selectedBdr,\r\n    page: 1,\r\n    pageSize: 50,\r\n  });\r\n\r\n  const pipelineItems = data?.items ?? [];\r\n\r\n  // Handle refresh of data\r\n  const handleRefresh = () => {\r\n    // Invalidate all pipeline queries regardless of filters\r\n    queryClient.invalidateQueries({ \r\n      predicate: (query) => {\r\n        return Array.isArray(query.queryKey) && query.queryKey[0] === 'pipeline';\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleAddBdr = (newBdr: string) => {\r\n    const success = addBdr(newBdr);\r\n    if (success) {\r\n      // Update the selected BDR to the newly added one\r\n      setSelectedBdr(newBdr);\r\n    }\r\n    return success;\r\n  };\r\n\r\n  // Update selected BDR when session loads or BDRs change\r\n  useEffect(() => {\r\n    const defaultBdr = getDefaultBdr();\r\n    if (defaultBdr && selectedBdr !== defaultBdr) {\r\n      setSelectedBdr(defaultBdr);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [session?.user?.name, bdrs, selectedBdr]);\r\n\r\n  // Simple Mode for non-technical BDRs - start with default to avoid hydration mismatch\r\n  const [simpleMode, setSimpleMode] = useState<boolean>(true);\r\n  const [isMounted, setIsMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Load from localStorage only after component mounts\r\n    setIsMounted(true);\r\n    const stored = window.localStorage.getItem('pipeline.simpleMode');\r\n    if (stored) {\r\n      setSimpleMode(stored === 'true');\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Save to localStorage when simpleMode changes (but only after initial mount)\r\n    if (isMounted) {\r\n      window.localStorage.setItem('pipeline.simpleMode', simpleMode ? 'true' : 'false');\r\n    }\r\n  }, [simpleMode, isMounted]);\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold tracking-tight\">Sales Pipeline</h1>\r\n            <p className=\"text-muted-foreground\">Track and manage your deals through the sales process</p>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            {/* View Toggle */}\r\n            <div className=\"flex items-center rounded-lg border border-white/30 dark:border-white/10 bg-white/60 dark:bg-white/[0.05] backdrop-blur\">\r\n              <Button\r\n                variant={viewType === 'board' ? 'default' : 'ghost'}\r\n                size=\"sm\"\r\n                onClick={() => setViewType('board')}\r\n                className=\"rounded-r-none\"\r\n              >\r\n                <LayoutGrid className=\"h-4 w-4 mr-1\" />\r\n                Board\r\n              </Button>\r\n              <Button\r\n                variant={viewType === 'table' ? 'default' : 'ghost'}\r\n                size=\"sm\"\r\n                onClick={() => setViewType('table')}\r\n                className=\"rounded-l-none\"\r\n              >\r\n                <Table2 className=\"h-4 w-4 mr-1\" />\r\n                Table\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Simple Mode Toggle */}\r\n            <Button\r\n              variant={simpleMode ? 'secondary' : 'outline'}\r\n              size=\"sm\"\r\n              onClick={() => setSimpleMode(v => !v)}\r\n              className=\"h-9\"\r\n              title=\"Toggle a simplified, guided interface\"\r\n            >\r\n              <Sparkles className=\"h-4 w-4 mr-1\" />\r\n              {simpleMode ? 'Simple Mode' : 'Advanced Mode'}\r\n            </Button>\r\n            \r\n            <div className=\"flex items-center\">\r\n              <Users className=\"mr-2 h-4 w-4 text-muted-foreground\" />\r\n              <span className=\"mr-2 text-sm text-muted-foreground\">BDR:</span>\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Select \r\n                value={selectedBdr} \r\n                onValueChange={(value: BdrType) => setSelectedBdr(value)}\r\n              >\r\n                <SelectTrigger className=\"w-[200px]\">\r\n                  <SelectValue placeholder=\"Select BDR\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {bdrs.map((bdr) => (\r\n                    <SelectItem key={bdr} value={bdr}>\r\n                      {bdr}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              <AddBdrDialog onAddBdr={handleAddBdr} />\r\n            </div>\r\n            <Button variant=\"outline\" size=\"icon\" onClick={handleRefresh} className=\"ml-2\">\r\n              <RefreshCcw className=\"h-4 w-4\" />\r\n            </Button>\r\n\r\n            {/* Help */}\r\n            <Popover>\r\n              <PopoverTrigger asChild>\r\n                <Button variant=\"outline\" size=\"icon\" className=\"ml-1\" title=\"Quick help\">\r\n                  <HelpCircle className=\"h-4 w-4\" />\r\n                </Button>\r\n              </PopoverTrigger>\r\n              <PopoverContent side=\"bottom\" align=\"end\" className=\"w-80\">\r\n                <div className=\"space-y-2 text-sm\">\r\n                  <p className=\"font-medium\">How to use the Pipeline</p>\r\n                  <ol className=\"list-decimal list-inside space-y-1 text-muted-foreground\">\r\n                    <li>Select your name in BDR.</li>\r\n                    <li>Click Add Lead to create a new prospect.</li>\r\n                    <li>Use Status to move items forward (Board or Table).</li>\r\n                    <li>Click Updates to jot quick notes after each call.</li>\r\n                  </ol>\r\n                </div>\r\n              </PopoverContent>\r\n            </Popover>\r\n          </div>\r\n        </div>\r\n\r\n        {viewType === 'board' ? (\r\n          <PipelineBoardEnhanced\r\n            items={pipelineItems}\r\n            isLoading={isLoading}\r\n            selectedBdr={selectedBdr}\r\n            simpleMode={simpleMode}\r\n            onRefresh={handleRefresh}\r\n          />\r\n        ) : (\r\n          <PipelineTable \r\n            items={pipelineItems} \r\n            onRefresh={handleRefresh}\r\n            selectedBdr={selectedBdr}\r\n            simpleMode={simpleMode}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function PipelinePage() {\r\n  return (\r\n    <ErrorBoundary FallbackComponent={ErrorFallback}>\r\n      <Suspense>\r\n        <PipelineContent />\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\profile\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\advanced\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":135,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'performanceStatus' is assigned a value but never used.","line":478,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":478,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":727,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":727,"endColumn":76},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":770,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":770,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\n// Replace missing Alert import with inline alert UI\r\nimport { Navbar } from '@/components/ui/navbar';\r\nimport { \r\n  BarChart3, \r\n  TrendingUp, \r\n  Users, \r\n  Target, \r\n  Filter, \r\n  Bell, \r\n  Download,\r\n  RefreshCw,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Clock,\r\n  Award,\r\n  Phone,\r\n  Mail,\r\n  Calendar,\r\n  Zap\r\n} from 'lucide-react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  Radar\r\n} from 'recharts';\r\n\r\ninterface BDRPerformance {\r\n  id: string;\r\n  name: string;\r\n  callsToday: number;\r\n  callsWeek: number;\r\n  callsMonth: number;\r\n  agreementsToday: number;\r\n  agreementsWeek: number;\r\n  agreementsMonth: number;\r\n  conversionRate: number;\r\n  avgCallDuration: number;\r\n  leadsAssigned: number;\r\n  leadsContacted: number;\r\n  followUpsScheduled: number;\r\n  weeklyGoalProgress: number;\r\n  monthlyRank: number;\r\n  streak: number;\r\n  lastWeekPerformance: number;\r\n  territory: string;\r\n  experience: string;\r\n  status: 'active' | 'inactive' | 'on_leave';\r\n}\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'success' | 'warning' | 'error' | 'info';\r\n  title: string;\r\n  message: string;\r\n  timestamp: string;\r\n  read: boolean;\r\n  priority: 'low' | 'medium' | 'high';\r\n}\r\n\r\ninterface FilterOptions {\r\n  dateRange: string;\r\n  territory: string;\r\n  experience: string;\r\n  status: string;\r\n  minCalls: number;\r\n  maxCalls: number;\r\n  minConversion: number;\r\n  maxConversion: number;\r\n}\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\r\n\r\nconst fetchBDRPerformanceData = async (filters: FilterOptions) => {\r\n  const params = new URLSearchParams();\r\n  Object.entries(filters).forEach(([key, value]) => {\r\n    if (value) params.append(key, value.toString());\r\n  });\r\n\r\n  const response = await fetch(`/api/reporting/advanced/bdr-performance?${params.toString()}`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch BDR performance data');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nconst fetchNotifications = async () => {\r\n  const response = await fetch('/api/reporting/advanced/notifications');\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch notifications');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport default function AdvancedReportingPage() {\r\n  const [filters, setFilters] = useState<FilterOptions>({\r\n    dateRange: 'week',\r\n    territory: 'all',\r\n    experience: 'all',\r\n    status: 'all',\r\n    minCalls: 0,\r\n    maxCalls: 1000,\r\n    minConversion: 0,\r\n    maxConversion: 100\r\n  });\r\n\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n  const [showNotifications, setShowNotifications] = useState(false);\r\n\r\n  const { data: bdrData, isLoading, error, refetch } = useQuery({\r\n    queryKey: ['bdrPerformance', filters],\r\n    queryFn: () => fetchBDRPerformanceData(filters),\r\n  });\r\n\r\n  const { data: notificationData } = useQuery({\r\n    queryKey: ['notifications'],\r\n    queryFn: fetchNotifications,\r\n    refetchInterval: 30000, // Refresh every 30 seconds\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (notificationData) {\r\n      setNotifications(notificationData);\r\n    }\r\n  }, [notificationData]);\r\n\r\n  const unreadNotifications = notifications.filter(n => !n.read);\r\n  const highPriorityNotifications = notifications.filter(n => n.priority === 'high' && !n.read);\r\n\r\n  const getPerformanceStatus = (performance: number) => {\r\n    if (performance >= 90) return { status: 'excellent', color: 'text-green-600', bg: 'bg-green-50' };\r\n    if (performance >= 75) return { status: 'good', color: 'text-blue-600', bg: 'bg-blue-50' };\r\n    if (performance >= 60) return { status: 'average', color: 'text-yellow-600', bg: 'bg-yellow-50' };\r\n    return { status: 'needs_improvement', color: 'text-red-600', bg: 'bg-red-50' };\r\n  };\r\n\r\n  const exportData = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,\" + \r\n      \"Name,Calls Today,Calls Week,Agreements Today,Agreements Week,Conversion Rate,Avg Call Duration,Weekly Goal Progress\\n\" +\r\n      bdrData?.map((bdr: BDRPerformance) => \r\n        `${bdr.name},${bdr.callsToday},${bdr.callsWeek},${bdr.agreementsToday},${bdr.agreementsWeek},${bdr.conversionRate}%,${bdr.avgCallDuration}min,${bdr.weeklyGoalProgress}%`\r\n      ).join('\\n');\r\n    \r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement('a');\r\n    link.setAttribute('href', encodedUri);\r\n    link.setAttribute('download', 'bdr_performance_report.csv');\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"space-y-6 p-6\">\r\n        {/* Header with Notifications */}\r\n        <div className=\"flex justify-between items-center\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold\">Advanced Business Intelligence</h1>\r\n            <p className=\"text-muted-foreground\">BDR Performance Comparison & Real-time Analytics</p>\r\n          </div>\r\n          <div className=\"flex items-center space-x-2 rounded-xl border border-white/30 dark:border-white/10 bg-white/60 dark:bg-white/[0.05] backdrop-blur p-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => refetch()}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <RefreshCw className=\"h-4 w-4\" />\r\n              Refresh\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={exportData}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Download className=\"h-4 w-4\" />\r\n              Export\r\n            </Button>\r\n            <div className=\"relative\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setShowNotifications(!showNotifications)}\r\n                className=\"flex items-center space-x-2\"\r\n              >\r\n                <Bell className=\"h-4 w-4\" />\r\n                {unreadNotifications.length > 0 && (\r\n                  <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\">\r\n                    {unreadNotifications.length}\r\n                  </Badge>\r\n                )}\r\n              </Button>\r\n              {showNotifications && (\r\n                <div className=\"absolute right-0 top-12 w-80 bg-white/80 dark:bg-white/[0.06] backdrop-blur-xl border border-white/20 dark:border-white/10 rounded-lg shadow-[0_10px_30px_-15px_rgba(0,0,0,0.5)] z-50 max-h-96 overflow-y-auto\">\r\n                  <div className=\"p-4 border-b\">\r\n                    <h3 className=\"font-semibold\">Notifications</h3>\r\n                  </div>\r\n                  {notifications.length === 0 ? (\r\n                    <div className=\"p-4 text-center text-muted-foreground\">\r\n                      No notifications\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"divide-y\">\r\n                      {notifications.map((notification) => (\r\n                        <div key={notification.id} className={`p-4 ${!notification.read ? 'bg-muted/50' : ''}`}>\r\n                          <div className=\"flex items-start space-x-3\">\r\n                            <div className={`mt-1 ${\r\n                              notification.type === 'success' ? 'text-green-500' :\r\n                              notification.type === 'warning' ? 'text-yellow-500' :\r\n                              notification.type === 'error' ? 'text-red-500' : 'text-blue-500'\r\n                            }`}>\r\n                              {notification.type === 'success' && <CheckCircle className=\"h-4 w-4\" />}\r\n                              {notification.type === 'warning' && <AlertTriangle className=\"h-4 w-4\" />}\r\n                              {notification.type === 'error' && <AlertTriangle className=\"h-4 w-4\" />}\r\n                              {notification.type === 'info' && <Clock className=\"h-4 w-4\" />}\r\n                            </div>\r\n                            <div className=\"flex-1\">\r\n                              <div className=\"flex items-center justify-between\">\r\n                                <h4 className=\"font-medium text-sm\">{notification.title}</h4>\r\n                                <Badge variant={notification.priority === 'high' ? 'destructive' : 'secondary'} className=\"text-xs\">\r\n                                  {notification.priority}\r\n                                </Badge>\r\n                              </div>\r\n                              <p className=\"text-sm text-muted-foreground mt-1\">{notification.message}</p>\r\n                              <p className=\"text-xs text-muted-foreground mt-2\">{notification.timestamp}</p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* High Priority Alerts */}\r\n        {highPriorityNotifications.length > 0 && (\r\n          <div className=\"border-red-200 bg-red-50 border rounded p-3 flex items-start gap-2\">\r\n            <AlertTriangle className=\"h-4 w-4 text-red-600 mt-0.5\" />\r\n            <div className=\"text-sm text-red-800\">\r\n              <strong>{highPriorityNotifications.length} high priority notification(s)</strong> require immediate attention.\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Advanced Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center space-x-2\">\r\n              <Filter className=\"h-5 w-5\" />\r\n              Advanced Filters\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                <label className=\"text-sm font-medium\">Date Range</label>\r\n                <Select value={filters.dateRange} onValueChange={(value) => setFilters({...filters, dateRange: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"today\">Today</SelectItem>\r\n                    <SelectItem value=\"week\">This Week</SelectItem>\r\n                    <SelectItem value=\"month\">This Month</SelectItem>\r\n                    <SelectItem value=\"quarter\">This Quarter</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div>\r\n                <label className=\"text-sm font-medium\">Territory</label>\r\n                <Select value={filters.territory} onValueChange={(value) => setFilters({...filters, territory: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Territories</SelectItem>\r\n                    <SelectItem value=\"north\">North</SelectItem>\r\n                    <SelectItem value=\"south\">South</SelectItem>\r\n                    <SelectItem value=\"east\">East</SelectItem>\r\n                    <SelectItem value=\"west\">West</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div>\r\n                <label className=\"text-sm font-medium\">Experience Level</label>\r\n                <Select value={filters.experience} onValueChange={(value) => setFilters({...filters, experience: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Levels</SelectItem>\r\n                    <SelectItem value=\"junior\">Junior (0-1 year)</SelectItem>\r\n                    <SelectItem value=\"mid\">Mid-level (1-3 years)</SelectItem>\r\n                    <SelectItem value=\"senior\">Senior (3+ years)</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div>\r\n                <label className=\"text-sm font-medium\">Status</label>\r\n                <Select value={filters.status} onValueChange={(value) => setFilters({...filters, status: value})}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Status</SelectItem>\r\n                    <SelectItem value=\"active\">Active</SelectItem>\r\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                    <SelectItem value=\"on_leave\">On Leave</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-4\">\r\n              <div>\r\n                <label className=\"text-sm font-medium\">Min Calls</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  value={filters.minCalls}\r\n                  onChange={(e) => setFilters({...filters, minCalls: parseInt(e.target.value) || 0})}\r\n                  placeholder=\"0\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label className=\"text-sm font-medium\">Max Calls</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  value={filters.maxCalls}\r\n                  onChange={(e) => setFilters({...filters, maxCalls: parseInt(e.target.value) || 1000})}\r\n                  placeholder=\"1000\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label className=\"text-sm font-medium\">Min Conversion %</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  value={filters.minConversion}\r\n                  onChange={(e) => setFilters({...filters, minConversion: parseInt(e.target.value) || 0})}\r\n                  placeholder=\"0\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <label className=\"text-sm font-medium\">Max Conversion %</label>\r\n                <Input\r\n                  type=\"number\"\r\n                  value={filters.maxConversion}\r\n                  onChange={(e) => setFilters({...filters, maxConversion: parseInt(e.target.value) || 100})}\r\n                  placeholder=\"100\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Main Content Tabs */}\r\n        <Tabs defaultValue=\"comparison\" className=\"space-y-4\">\r\n          <TabsList className=\"grid w-full grid-cols-4\">\r\n            <TabsTrigger value=\"comparison\">Performance Comparison</TabsTrigger>\r\n            <TabsTrigger value=\"analytics\">Advanced Analytics</TabsTrigger>\r\n            <TabsTrigger value=\"trends\">Trends & Patterns</TabsTrigger>\r\n            <TabsTrigger value=\"rankings\">Rankings & Leaderboard</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"comparison\" className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n              {/* Performance Comparison Chart */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>BDR Performance Comparison</CardTitle>\r\n                  <CardDescription>Weekly call volume and agreement rates</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"h-80 flex items-center justify-center\">\r\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                    </div>\r\n                  ) : (\r\n                    <ResponsiveContainer width=\"100%\" height={320}>\r\n                      <BarChart data={bdrData?.slice(0, 10)}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Bar dataKey=\"callsWeek\" fill=\"#8884d8\" name=\"Calls\" />\r\n                        <Bar dataKey=\"agreementsWeek\" fill=\"#82ca9d\" name=\"Agreements\" />\r\n                      </BarChart>\r\n                    </ResponsiveContainer>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Conversion Rate Analysis */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Conversion Rate Analysis</CardTitle>\r\n                  <CardDescription>Call to agreement conversion rates</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"h-80 flex items-center justify-center\">\r\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                    </div>\r\n                  ) : (\r\n                    <ResponsiveContainer width=\"100%\" height={320}>\r\n                      <BarChart data={bdrData?.slice(0, 10)}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"name\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Bar dataKey=\"conversionRate\" fill=\"#ffc658\" name=\"Conversion Rate %\" />\r\n                      </BarChart>\r\n                    </ResponsiveContainer>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n\r\n            {/* Detailed Performance Table */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Detailed Performance Metrics</CardTitle>\r\n                <CardDescription>Comprehensive BDR performance breakdown</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"flex items-center justify-center h-40\">\r\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                  </div>\r\n                ) : (\r\n                  <Table>\r\n                    <TableHeader>\r\n                      <TableRow>\r\n                        <TableHead>BDR Name</TableHead>\r\n                        <TableHead>Territory</TableHead>\r\n                        <TableHead>Experience</TableHead>\r\n                        <TableHead>Calls Today</TableHead>\r\n                        <TableHead>Calls Week</TableHead>\r\n                        <TableHead>Agreements Today</TableHead>\r\n                        <TableHead>Agreements Week</TableHead>\r\n                        <TableHead>Conversion Rate</TableHead>\r\n                        <TableHead>Avg Call Duration</TableHead>\r\n                        <TableHead>Weekly Goal Progress</TableHead>\r\n                        <TableHead>Status</TableHead>\r\n                      </TableRow>\r\n                    </TableHeader>\r\n                    <TableBody>\r\n                      {bdrData?.map((bdr: BDRPerformance) => {\r\n                        const performanceStatus = getPerformanceStatus(bdr.weeklyGoalProgress);\r\n                        return (\r\n                          <TableRow key={bdr.id}>\r\n                            <TableCell className=\"font-medium\">{bdr.name}</TableCell>\r\n                            <TableCell>{bdr.territory}</TableCell>\r\n                            <TableCell>{bdr.experience}</TableCell>\r\n                            <TableCell>{bdr.callsToday}</TableCell>\r\n                            <TableCell>{bdr.callsWeek}</TableCell>\r\n                            <TableCell>{bdr.agreementsToday}</TableCell>\r\n                            <TableCell>{bdr.agreementsWeek}</TableCell>\r\n                            <TableCell>{bdr.conversionRate}%</TableCell>\r\n                            <TableCell>{bdr.avgCallDuration}min</TableCell>\r\n                            <TableCell>\r\n                              <div className=\"flex items-center space-x-2\">\r\n                                <Progress value={bdr.weeklyGoalProgress} className=\"w-20\" />\r\n                                <span className=\"text-sm\">{bdr.weeklyGoalProgress}%</span>\r\n                              </div>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Badge variant={bdr.status === 'active' ? 'default' : 'secondary'}>\r\n                                {bdr.status}\r\n                              </Badge>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                    </TableBody>\r\n                  </Table>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"analytics\" className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n              {/* Performance Distribution */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Performance Distribution</CardTitle>\r\n                  <CardDescription>Distribution of BDR performance levels</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"h-80 flex items-center justify-center\">\r\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                    </div>\r\n                  ) : (\r\n                    <ResponsiveContainer width=\"100%\" height={320}>\r\n                      <PieChart>\r\n                        <Pie\r\n                          data={[\r\n                            { name: 'Excellent (90%+)', value: bdrData?.filter((b: BDRPerformance) => b.weeklyGoalProgress >= 90).length || 0 },\r\n                            { name: 'Good (75-89%)', value: bdrData?.filter((b: BDRPerformance) => b.weeklyGoalProgress >= 75 && b.weeklyGoalProgress < 90).length || 0 },\r\n                            { name: 'Average (60-74%)', value: bdrData?.filter((b: BDRPerformance) => b.weeklyGoalProgress >= 60 && b.weeklyGoalProgress < 75).length || 0 },\r\n                            { name: 'Needs Improvement (<60%)', value: bdrData?.filter((b: BDRPerformance) => b.weeklyGoalProgress < 60).length || 0 }\r\n                          ]}\r\n                          cx=\"50%\"\r\n                          cy=\"50%\"\r\n                          labelLine={false}\r\n                          label={({ name, percent }) => `${name} ${(((percent || 0) * 100).toFixed(0))}%`}\r\n                          outerRadius={80}\r\n                          fill=\"#8884d8\"\r\n                          dataKey=\"value\"\r\n                        >\r\n                          {COLORS.map((color, index) => (\r\n                            <Cell key={`cell-${index}`} fill={color} />\r\n                          ))}\r\n                        </Pie>\r\n                        <Tooltip />\r\n                      </PieChart>\r\n                    </ResponsiveContainer>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Territory Performance */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Territory Performance Analysis</CardTitle>\r\n                  <CardDescription>Performance comparison across territories</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"h-80 flex items-center justify-center\">\r\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                    </div>\r\n                  ) : (\r\n                    <ResponsiveContainer width=\"100%\" height={320}>\r\n                      <RadarChart data={[\r\n                        { territory: 'North', avgCalls: 45, avgAgreements: 8, avgConversion: 17.8 },\r\n                        { territory: 'South', avgCalls: 52, avgAgreements: 9, avgConversion: 17.3 },\r\n                        { territory: 'East', avgCalls: 38, avgAgreements: 6, avgConversion: 15.8 },\r\n                        { territory: 'West', avgCalls: 41, avgAgreements: 7, avgConversion: 17.1 }\r\n                      ]}>\r\n                        <PolarGrid />\r\n                        <PolarAngleAxis dataKey=\"territory\" />\r\n                        <PolarRadiusAxis />\r\n                        <Radar name=\"Avg Calls\" dataKey=\"avgCalls\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\r\n                        <Radar name=\"Avg Agreements\" dataKey=\"avgAgreements\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} />\r\n                        <Radar name=\"Avg Conversion %\" dataKey=\"avgConversion\" stroke=\"#ffc658\" fill=\"#ffc658\" fillOpacity={0.6} />\r\n                        <Tooltip />\r\n                      </RadarChart>\r\n                    </ResponsiveContainer>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"trends\" className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n              {/* Weekly Trends */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Weekly Performance Trends</CardTitle>\r\n                  <CardDescription>Call volume and agreement trends over time</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"h-80 flex items-center justify-center\">\r\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                    </div>\r\n                  ) : (\r\n                    <ResponsiveContainer width=\"100%\" height={320}>\r\n                      <LineChart data={[\r\n                        { week: 'Week 1', calls: 1200, agreements: 180 },\r\n                        { week: 'Week 2', calls: 1350, agreements: 210 },\r\n                        { week: 'Week 3', calls: 1100, agreements: 165 },\r\n                        { week: 'Week 4', calls: 1400, agreements: 225 },\r\n                        { week: 'Week 5', calls: 1250, agreements: 195 },\r\n                        { week: 'Week 6', calls: 1500, agreements: 240 }\r\n                      ]}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"week\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Line type=\"monotone\" dataKey=\"calls\" stroke=\"#8884d8\" strokeWidth={2} />\r\n                        <Line type=\"monotone\" dataKey=\"agreements\" stroke=\"#82ca9d\" strokeWidth={2} />\r\n                      </LineChart>\r\n                    </ResponsiveContainer>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Conversion Rate Trends */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle>Conversion Rate Trends</CardTitle>\r\n                  <CardDescription>Weekly conversion rate progression</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"h-80 flex items-center justify-center\">\r\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                    </div>\r\n                  ) : (\r\n                    <ResponsiveContainer width=\"100%\" height={320}>\r\n                      <LineChart data={[\r\n                        { week: 'Week 1', conversion: 15.0 },\r\n                        { week: 'Week 2', conversion: 15.6 },\r\n                        { week: 'Week 3', conversion: 15.0 },\r\n                        { week: 'Week 4', conversion: 16.1 },\r\n                        { week: 'Week 5', conversion: 15.6 },\r\n                        { week: 'Week 6', conversion: 16.0 }\r\n                      ]}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"week\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Line type=\"monotone\" dataKey=\"conversion\" stroke=\"#ffc658\" strokeWidth={2} />\r\n                      </LineChart>\r\n                    </ResponsiveContainer>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"rankings\" className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n              {/* Top Performers */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center space-x-2\">\r\n                    <Award className=\"h-5 w-5 text-yellow-500\" />\r\n                    Top Performers\r\n                  </CardTitle>\r\n                  <CardDescription>BDRs with highest weekly goal progress</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"space-y-4\">\r\n                      {[1, 2, 3].map((i) => (\r\n                        <div key={i} className=\"animate-pulse\">\r\n                          <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\r\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"space-y-4\">\r\n                      {bdrData?.slice(0, 5).map((bdr: BDRPerformance, index: number) => (\r\n                        <div key={bdr.id} className=\"flex items-center justify-between p-3 rounded-lg border\">\r\n                          <div className=\"flex items-center space-x-3\">\r\n                            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${\r\n                              index === 0 ? 'bg-yellow-100 text-yellow-800' :\r\n                              index === 1 ? 'bg-gray-100 text-gray-800' :\r\n                              index === 2 ? 'bg-orange-100 text-orange-800' :\r\n                              'bg-blue-100 text-blue-800'\r\n                            }`}>\r\n                              {index + 1}\r\n                            </div>\r\n                            <div>\r\n                              <p className=\"font-medium\">{bdr.name}</p>\r\n                              <p className=\"text-sm text-muted-foreground\">{bdr.territory}</p>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <p className=\"font-bold\">{bdr.weeklyGoalProgress}%</p>\r\n                            <p className=\"text-sm text-muted-foreground\">{bdr.callsWeek} calls</p>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Most Improved */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center space-x-2\">\r\n                    <TrendingUp className=\"h-5 w-5 text-green-500\" />\r\n                    Most Improved\r\n                  </CardTitle>\r\n                  <CardDescription>BDRs with biggest performance gains</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"space-y-4\">\r\n                      {[1, 2, 3].map((i) => (\r\n                        <div key={i} className=\"animate-pulse\">\r\n                          <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\r\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"space-y-4\">\r\n                      {bdrData?.slice(0, 5).map((bdr: BDRPerformance, index: number) => (\r\n                        <div key={bdr.id} className=\"flex items-center justify-between p-3 rounded-lg border\">\r\n                          <div className=\"flex items-center space-x-3\">\r\n                            <div className=\"w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold bg-green-100 text-green-800\">\r\n                              +{Math.floor(Math.random() * 15) + 5}%\r\n                            </div>\r\n                            <div>\r\n                              <p className=\"font-medium\">{bdr.name}</p>\r\n                              <p className=\"text-sm text-muted-foreground\">{bdr.territory}</p>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <p className=\"font-bold text-green-600\">+{Math.floor(Math.random() * 15) + 5}%</p>\r\n                            <p className=\"text-sm text-muted-foreground\">vs last week</p>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Streak Leaders */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center space-x-2\">\r\n                    <Zap className=\"h-5 w-5 text-orange-500\" />\r\n                    Streak Leaders\r\n                  </CardTitle>\r\n                  <CardDescription>BDRs with longest performance streaks</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {isLoading ? (\r\n                    <div className=\"space-y-4\">\r\n                      {[1, 2, 3].map((i) => (\r\n                        <div key={i} className=\"animate-pulse\">\r\n                          <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\r\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"space-y-4\">\r\n                      {bdrData?.slice(0, 5).map((bdr: BDRPerformance, index: number) => (\r\n                        <div key={bdr.id} className=\"flex items-center justify-between p-3 rounded-lg border\">\r\n                          <div className=\"flex items-center space-x-3\">\r\n                            <div className=\"w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold bg-orange-100 text-orange-800\">\r\n                              🔥\r\n                            </div>\r\n                            <div>\r\n                              <p className=\"font-medium\">{bdr.name}</p>\r\n                              <p className=\"text-sm text-muted-foreground\">{bdr.territory}</p>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <p className=\"font-bold\">{bdr.streak} days</p>\r\n                            <p className=\"text-sm text-muted-foreground\">streak</p>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\agreement-tracking\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoadingBdrList' is assigned a value but never used.","line":39,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bdrListError' is assigned a value but never used.","line":39,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1819,1822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1819,1822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4076,4079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4076,4079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { downloadCsv } from '@/lib/csv';\r\nimport { Navbar } from '@/components/ui/navbar';\r\n\r\nconst fetchAgreementTracking = async (bdr: string, months: number) => {\r\n  const params = new URLSearchParams();\r\n  if (bdr && bdr !== 'all') params.append('bdr', bdr);\r\n  params.append('months', months.toString());\r\n\r\n  const res = await fetch(`/api/reporting/agreement-tracking?${params.toString()}`);\r\n  if (!res.ok) throw new Error('Failed to fetch agreement tracking');\r\n  return res.json();\r\n};\r\n\r\nconst fetchBdrList = async () => {\r\n  const response = await fetch('/api/reporting/executive-dashboard');\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch BDR list');\r\n  }\r\n  const data = await response.json();\r\n  return data.dashboard.bdrList;\r\n}\r\n\r\nexport default function AgreementTrackingReport() {\r\n  const [bdr, setBdr] = useState('all');\r\n  const [months, setMonths] = useState(4);\r\n\r\n  const { data: agreementTracking, isLoading: isLoadingAgreementTracking, error: agreementTrackingError } = useQuery({\r\n    queryKey: ['agreementTracking', bdr, months],\r\n    queryFn: () => fetchAgreementTracking(bdr, months),\r\n  });\r\n\r\n  const { data: bdrList, isLoading: isLoadingBdrList, error: bdrListError } = useQuery({\r\n    queryKey: ['bdrList'],\r\n    queryFn: fetchBdrList,\r\n  });\r\n\r\n  const handleExport = () => {\r\n    if (!agreementTracking) return;\r\n    const rows = agreementTracking.monthly.map((m: any) => ({ Month: m.month, Agreements: m.count }));\r\n    downloadCsv('agreements.csv', rows);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Agreement Tracking Report</CardTitle>\r\n        </CardHeader>\r\n      <CardContent>\r\n        <div className=\"flex space-x-4 mb-4\">\r\n          <Select onValueChange={setBdr} value={bdr}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Select BDR\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">All BDRs</SelectItem>\r\n              {bdrList?.map((bdr: string) => (\r\n                <SelectItem key={bdr} value={bdr}>{bdr}</SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n          <Select value={months.toString()} onValueChange={(v) => setMonths(parseInt(v, 10))}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Months\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {[1,3,4,6,12].map((m) => (\r\n                <SelectItem key={m} value={m.toString()}>Last {m} {m===1?'Month':'Months'}</SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        {isLoadingAgreementTracking && <p>Loading...</p>}\r\n        {agreementTrackingError && <p>Error loading agreement tracking data</p>}\r\n        {agreementTracking && (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"flex justify-end\">\r\n              <button onClick={handleExport} className=\"text-sm px-3 py-1 border rounded bg-blue-50 hover:bg-blue-100\">Export CSV</button>\r\n            </div>\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm\">Monthly Agreements</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Month</TableHead>\r\n                      <TableHead className=\"text-right\">Agreements</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {agreementTracking.monthly.map((m: any) => (\r\n                      <TableRow key={m.month}>\r\n                        <TableCell>{m.month}</TableCell>\r\n                        <TableCell className=\"text-right\">{m.count}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm\">Agreements by BDR</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>BDR</TableHead>\r\n                      <TableHead className=\"text-right\">Agreements</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {Object.entries(agreementTracking.byBdr).map(([name, count]) => (\r\n                      <TableRow key={name}>\r\n                        <TableCell>{name}</TableCell>\r\n                        <TableCell className=\"text-right\">{count as number}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\bdr\\[bdr]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'use' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2342,2345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2342,2345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Navbar } from '@/components/ui/navbar';\r\nimport { use } from 'react';\r\n\r\nconst fetchBdrPerformance = async (bdr: string, startDate: string, endDate: string) => {\r\n  const params = new URLSearchParams();\r\n  if (startDate) params.append('startDate', startDate);\r\n  if (endDate) params.append('endDate', endDate);\r\n\r\n  const response = await fetch(`/api/reporting/bdr/${bdr}?${params.toString()}`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch BDR performance');\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Next.js App Router passes params synchronously; do not use Promise/use() here\r\nexport default function BdrPerformanceReport({ params }: { params: { bdr: string } }) {\r\n  const { bdr } = params;\r\n  const [startDate, setStartDate] = useState('');\r\n  const [endDate, setEndDate] = useState('');\r\n\r\n  const { data: bdrPerformance, isLoading: isLoadingBdrPerformance, error: bdrPerformanceError } = useQuery({\r\n    queryKey: ['bdrPerformance', bdr, startDate, endDate],\r\n    queryFn: () => fetchBdrPerformance(bdr, startDate, endDate),\r\n    enabled: !!bdr,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>BDR Performance Report: {bdr}</CardTitle>\r\n        </CardHeader>\r\n      <CardContent>\r\n        <div className=\"flex space-x-4 mb-4\">\r\n          <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} className=\"p-2 border rounded\" />\r\n          <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} className=\"p-2 border rounded\" />\r\n        </div>\r\n        {isLoadingBdrPerformance && <p>Loading...</p>}\r\n        {bdrPerformanceError && <p>Error loading BDR performance data</p>}\r\n        {bdrPerformance && (\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>Activity Type</TableHead>\r\n                <TableHead>Count</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {bdrPerformance.map((row: any) => (\r\n                <TableRow key={row.activityType}>\r\n                  <TableCell>{row.activityType}</TableCell>\r\n                  <TableCell>{row._count._all}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\call-volume\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoadingBdrList' is assigned a value but never used.","line":42,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bdrListError' is assigned a value but never used.","line":42,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport Heatmap from '@/components/ui/heatmap';\r\nimport { downloadCsv } from '@/lib/csv';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Navbar } from '@/components/ui/navbar';\r\n\r\nconst fetchCallVolume = async (bdr: string, startDate: string, endDate: string) => {\r\n  const params = new URLSearchParams();\r\n  if (bdr && bdr !== 'all') params.append('bdr', bdr);\r\n  if (startDate) params.append('startDate', startDate);\r\n  if (endDate) params.append('endDate', endDate);\r\n\r\n  const res = await fetch(`/api/reporting/call-volume?${params.toString()}`);\r\n  if (!res.ok) throw new Error('Failed to fetch call volume');\r\n  return res.json();\r\n};\r\n\r\nconst fetchBdrList = async () => {\r\n  const response = await fetch('/api/reporting/executive-dashboard');\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch BDR list');\r\n  }\r\n  const data = await response.json();\r\n  return data.dashboard.bdrList;\r\n}\r\n\r\nexport default function CallVolumeReport() {\r\n  const [bdr, setBdr] = useState('all');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [endDate, setEndDate] = useState('');\r\n\r\n  const { data: callVolume, isLoading: isLoadingCallVolume, error: callVolumeError } = useQuery({\r\n    queryKey: ['callVolume', bdr, startDate, endDate],\r\n    queryFn: () => fetchCallVolume(bdr, startDate, endDate),\r\n  });\r\n\r\n  const { data: bdrList, isLoading: isLoadingBdrList, error: bdrListError } = useQuery({\r\n    queryKey: ['bdrList'],\r\n    queryFn: fetchBdrList,\r\n  });\r\n\r\n  const handleExport = () => {\r\n    if (!callVolume) return;\r\n    const rows = Object.entries(callVolume.totals).map(([bdr, count]) => ({ BDR: bdr, Calls: count }));\r\n    downloadCsv('call-volume.csv', rows);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Call Volume Report</CardTitle>\r\n        </CardHeader>\r\n      <CardContent>\r\n        <div className=\"flex space-x-4 mb-4\">\r\n          <Select onValueChange={setBdr} value={bdr}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Select BDR\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">All BDRs</SelectItem>\r\n              {bdrList?.map((bdr: string) => (\r\n                <SelectItem key={bdr} value={bdr}>{bdr}</SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n          <input type=\"date\" value={startDate} onChange={(e) => setStartDate(e.target.value)} className=\"p-2 border rounded\" />\r\n          <input type=\"date\" value={endDate} onChange={(e) => setEndDate(e.target.value)} className=\"p-2 border rounded\" />\r\n        </div>\r\n        {isLoadingCallVolume && <p>Loading...</p>}\r\n        {callVolumeError && <p>Error loading call volume data</p>}\r\n        {callVolume && (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"flex justify-end\">\r\n              <button onClick={handleExport} className=\"text-sm px-3 py-1 border rounded bg-blue-50 hover:bg-blue-100\">Export CSV</button>\r\n            </div>\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm\">Total Calls by BDR</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>BDR</TableHead>\r\n                      <TableHead className=\"text-right\">Calls</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {Object.entries(callVolume.totals).map(([name, count]) => (\r\n                      <TableRow key={name}>\r\n                        <TableCell>{name}</TableCell>\r\n                        <TableCell className=\"text-right\">{count as number}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm\">Weekly Heatmap</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Heatmap data={callVolume.heatmap} />\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\consolidated\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FunnelChart' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Funnel' is defined but never used.","line":13,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LabelList' is defined but never used.","line":13,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RadialBarChart' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RadialBar' is defined but never used.","line":14,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Legend' is defined but never used.","line":14,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":17,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":17,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":78},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":999,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[47056,47076],"text":"&apos;s Conversion Funnel"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[47056,47076],"text":"&lsquo;s Conversion Funnel"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[47056,47076],"text":"&#39;s Conversion Funnel"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[47056,47076],"text":"&rsquo;s Conversion Funnel"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Navbar } from \"@/components/ui/navbar\";\nimport { \n  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, \n  LineChart, Line, PieChart, Pie, Cell,\n  FunnelChart, Funnel, LabelList,\n  RadialBarChart, RadialBar, Legend,\n  AreaChart, Area\n} from 'recharts';\nimport { TrendingUp, TrendingDown, Phone, Clock, Target, DollarSign, Calendar, Users, Activity, AlertTriangle } from 'lucide-react';\n\n// Enhanced interface to match the new API\ninterface ConversionFunnelStage {\n  stage: string;\n  count: number;\n  percentage: number;\n  conversionRate: number;\n  teamAverage: number;\n  dropoffRate: number;\n}\n\ninterface DetailedBDRMetrics {\n  bdr: string;\n  totalItems: number;\n  conversionEfficiency: number;\n  activityScore: number;\n  conversionFunnel: ConversionFunnelStage[];\n  thisWeek: {\n    callsProposed: number;\n    callsBooked: number;\n    proposalsSent: number;\n    agreementsSigned: number;\n    listsOut: number;\n    sold: number;\n  };\n  thisMonth: {\n    callsProposed: number;\n    callsBooked: number;\n    proposalsSent: number;\n    agreementsSigned: number;\n    listsOut: number;\n    sold: number;\n  };\n  forecast: {\n    upcomingCalls: number;\n    pendingAgreements: number;\n    listsOut: number;\n    projectedClosures: number;\n    nextWeekCallsScheduled: number;\n    next30DaysRevenuePotential: number;\n  };\n  weeklyTarget: number;\n  weeklyProgress: number;\n  monthlyTarget: number;\n  monthlyProgress: number;\n  callToProposalRate: number;\n  proposalToAgreementRate: number;\n  agreementToSoldRate: number;\n  overallConversionRate: number;\n  categoryDistribution: Array<{\n    category: string;\n    count: number;\n    percentage: number;\n  }>;\n  weeklyTrend: Array<{\n    week: string;\n    callsProposed: number;\n    callsBooked: number;\n    proposalsSent: number;\n    agreements: number;\n    sold: number;\n  }>;\n  vsTeamAverage: {\n    conversionRate: { value: number; comparison: 'above' | 'below' | 'average' };\n    activityScore: { value: number; comparison: 'above' | 'below' | 'average' };\n    efficiency: { value: number; comparison: 'above' | 'below' | 'average' };\n  };\n}\n\ninterface EnhancedUnifiedReportingData {\n  executiveOverview: {\n    totalLeads: number;\n    totalPipelineItems: number;\n    teamActivityScore: number;\n    overallConversionRate: number;\n    totalRevenuePotential: number;\n    monthlyRecurringRevenue: number;\n  };\n  teamConversionFunnel: {\n    stages: ConversionFunnelStage[];\n    totalFunnelVolume: number;\n    overallEfficiency: number;\n    biggestDropoff: { stage: string; rate: number };\n    'improvement opportunities': string[];\n  };\n  forecastMetrics: {\n    upcomingCalls: {\n      today: number;\n      tomorrow: number;\n      thisWeek: number;\n      nextWeek: number;\n      next30Days: number;\n    };\n    pendingAgreements: {\n      total: number;\n      profile: number;\n      media: number;\n      averageValue: number;\n      totalValue: number;\n    };\n    listsOut: {\n      total: number;\n      thisWeek: number;\n      averageDaysToClose: number;\n      conversionRate: number;\n    };\n    revenue: {\n      projectedThisMonth: number;\n      projectedNext30Days: number;\n      pipelineValue: number;\n      weightedPipelineValue: number;\n    };\n  };\n  bdrPerformance: DetailedBDRMetrics[];\n  teamAnalytics: {\n    topPerformer: { bdr: string; metric: string; value: number };\n    needsAttention: { bdr: string; issue: string };\n    teamAverages: {\n      conversionRate: number;\n      activityScore: number;\n      callToProposalRate: number;\n      proposalToAgreementRate: number;\n      agreementToSoldRate: number;\n    };\n    weekOverWeekGrowth: number;\n    monthOverMonthGrowth: number;\n  };\n  activityAnalysis: {\n    dailyMetrics: Array<{\n      date: string;\n      callsProposed: number;\n      callsBooked: number;\n      proposalsSent: number;\n      agreements: number;\n      sold: number;\n      totalActivity: number;\n    }>;\n    weeklyComparison: Array<{\n      period: string;\n      callsProposed: number;\n      callsBooked: number;\n      proposalsSent: number;\n      agreements: number;\n      sold: number;\n    }>;\n    activityHeatmap: Array<{\n      bdr: string;\n      day: string;\n      activity: number;\n    }>;\n  };\n  insights: {\n    topOpportunities: string[];\n    criticalAlerts: string[];\n    recommendations: string[];\n  };\n}\n\nexport default function EnhancedReportingPage() {\n  const [data, setData] = useState<EnhancedUnifiedReportingData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedBdr, setSelectedBdr] = useState<string>('All Team');\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetch('/api/reporting/unified')\n      .then(res => res.json())\n      .then(data => {\n        console.log('Received data:', data);\n        if (data.error) {\n          setError(data.error);\n        } else {\n          setData(data);\n          if (data.bdrPerformance?.length > 0) {\n            setSelectedBdr(data.bdrPerformance[0].bdr);\n          }\n        }\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching unified reporting data:', error);\n        setError(error.message);\n        setLoading(false);\n      });\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg\">Loading Enhanced Reporting Suite...</div>\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg text-red-600\">Error loading reporting data: {error || 'Unknown error'}</div>\n      </div>\n    );\n  }\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658', '#FF7C7C'];\n  \n  const selectedBdrData = selectedBdr === 'All Team' \n    ? null \n    : data.bdrPerformance.find(bdr => bdr.bdr === selectedBdr);\n\n  // Helper function to get comparison icon\n  const getComparisonIcon = (comparison: 'above' | 'below' | 'average') => {\n    switch (comparison) {\n      case 'above': return <TrendingUp className=\"h-4 w-4 text-green-500\" />;\n      case 'below': return <TrendingDown className=\"h-4 w-4 text-red-500\" />;\n      default: return <Target className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  // Enhanced funnel visualization data\n  const funnelVisualizationData = data.teamConversionFunnel.stages.map((stage, index) => ({\n    name: stage.stage,\n    value: stage.count,\n    percentage: stage.percentage,\n    fill: COLORS[index % COLORS.length],\n    conversionRate: stage.conversionRate,\n    dropoffRate: stage.dropoffRate\n  }));\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"container mx-auto py-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent\">\n            🚀 Enhanced Reporting Suite\n          </h1>\n          <p className=\"text-gray-600 mt-2\">Complete conversion funnel analysis & forecasting</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Select value={selectedBdr} onValueChange={setSelectedBdr}>\n            <SelectTrigger className=\"w-[200px]\">\n              <SelectValue placeholder=\"Select BDR\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"All Team\">All Team</SelectItem>\n              {data.bdrPerformance.map(bdr => (\n                <SelectItem key={bdr.bdr} value={bdr.bdr}>{bdr.bdr}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Badge variant=\"default\" className=\"bg-green-600\">Live Data</Badge>\n        </div>\n      </div>\n\n      {/* Critical Alerts */}\n      {data.insights.criticalAlerts.length > 0 && (\n        <Card className=\"mb-6 border-red-200 bg-red-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-red-700\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Critical Alerts\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {data.insights.criticalAlerts.map((alert, index) => (\n                <div key={index} className=\"text-red-600\">• {alert}</div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\">Executive</TabsTrigger>\n          <TabsTrigger value=\"funnel\">Conversion Funnel</TabsTrigger>\n          <TabsTrigger value=\"forecast\">Forecasting</TabsTrigger>\n          <TabsTrigger value=\"individual\">Individual BDR</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n        </TabsList>\n\n        {/* Executive Overview Tab */}\n        <TabsContent value=\"overview\">\n          <div className=\"space-y-6\">\n            {/* Executive KPIs */}\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n              <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Users className=\"h-4 w-4\" />\n                    Total Pipeline\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-blue-600\">{data.executiveOverview.totalPipelineItems}</p>\n                  <p className=\"text-sm text-blue-500 mt-1\">{data.executiveOverview.totalLeads} leads in system</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Target className=\"h-4 w-4\" />\n                    Conversion Rate\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-green-600\">{data.executiveOverview.overallConversionRate.toFixed(1)}%</p>\n                  <p className=\"text-sm text-green-500 mt-1\">Team efficiency: {data.teamConversionFunnel.overallEfficiency}%</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    Revenue Potential\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-purple-600\">${(data.executiveOverview.totalRevenuePotential / 1000).toFixed(0)}K</p>\n                  <p className=\"text-sm text-purple-500 mt-1\">Monthly: ${(data.executiveOverview.monthlyRecurringRevenue / 1000).toFixed(0)}K</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                    <Activity className=\"h-4 w-4\" />\n                    Team Activity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-3xl font-bold text-orange-600\">{data.executiveOverview.teamActivityScore.toFixed(1)}%</p>\n                  <p className=\"text-sm text-orange-500 mt-1\">Activity score</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Top Opportunities & Team Performance */}\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                    Top Opportunities\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {data.insights.topOpportunities.length > 0 ? (\n                      data.insights.topOpportunities.map((opportunity, index) => (\n                        <div key={index} className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n                          <p className=\"text-green-700 font-medium\">🎯 {opportunity}</p>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-gray-500\">No immediate opportunities identified</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Team Performance Snapshot</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center p-3 bg-blue-50 rounded-lg\">\n                      <span className=\"font-medium\">Top Performer</span>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-blue-600\">{data.teamAnalytics.topPerformer.bdr}</p>\n                        <p className=\"text-sm text-blue-500\">{data.teamAnalytics.topPerformer.value}% {data.teamAnalytics.topPerformer.metric}</p>\n                      </div>\n                    </div>\n                    \n                    {data.teamAnalytics.needsAttention.bdr && (\n                      <div className=\"flex justify-between items-center p-3 bg-yellow-50 rounded-lg\">\n                        <span className=\"font-medium\">Needs Attention</span>\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-yellow-600\">{data.teamAnalytics.needsAttention.bdr}</p>\n                          <p className=\"text-sm text-yellow-600\">{data.teamAnalytics.needsAttention.issue}</p>\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"grid grid-cols-2 gap-4 pt-2\">\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-green-600\">{data.teamAnalytics.teamAverages.conversionRate.toFixed(1)}%</p>\n                        <p className=\"text-sm text-gray-500\">Avg Conversion</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <p className=\"text-2xl font-bold text-blue-600\">{data.teamAnalytics.teamAverages.activityScore.toFixed(1)}%</p>\n                        <p className=\"text-sm text-gray-500\">Avg Activity</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Daily Activity Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Daily Activity Trends</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={data.activityAnalysis.dailyMetrics}>\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area key=\"daily-calls-proposed\" type=\"monotone\" dataKey=\"callsProposed\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" name=\"Calls Proposed\" />\n                    <Area key=\"daily-calls-booked\" type=\"monotone\" dataKey=\"callsBooked\" stackId=\"1\" stroke=\"#82ca9d\" fill=\"#82ca9d\" name=\"Calls Booked\" />\n                    <Area key=\"daily-proposals-sent\" type=\"monotone\" dataKey=\"proposalsSent\" stackId=\"1\" stroke=\"#ffc658\" fill=\"#ffc658\" name=\"Proposals\" />\n                    <Area key=\"daily-agreements\" type=\"monotone\" dataKey=\"agreements\" stackId=\"1\" stroke=\"#ff7c7c\" fill=\"#ff7c7c\" name=\"Agreements\" />\n                    <Area key=\"daily-sold\" type=\"monotone\" dataKey=\"sold\" stackId=\"1\" stroke=\"#00C49F\" fill=\"#00C49F\" name=\"Daily Sales\" />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Conversion Funnel Tab */}\n        <TabsContent value=\"funnel\">\n          <div className=\"space-y-6\">\n            {/* Funnel Overview */}\n            <div className=\"grid gap-6 md:grid-cols-3\">\n              <Card className=\"md:col-span-2\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"h-5 w-5\" />\n                    Complete Conversion Funnel\n                  </CardTitle>\n                  <p className=\"text-sm text-gray-600\">\n                    Total Volume: {data.teamConversionFunnel.totalFunnelVolume} | \n                    Overall Efficiency: {data.teamConversionFunnel.overallEfficiency}%\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {data.teamConversionFunnel.stages.map((stage, index) => (\n                      <div key={`team-${stage.stage}-${index}`} className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <div className=\"flex items-center gap-3\">\n                            <span className=\"font-medium text-lg\">{stage.stage}</span>\n                            <Badge variant=\"outline\">{stage.count}</Badge>\n                            {stage.dropoffRate > 0 && (\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                -{stage.dropoffRate}% dropoff\n                              </Badge>\n                            )}\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold\">{stage.percentage.toFixed(1)}%</p>\n                            {index > 0 && stage.conversionRate > 0 && (\n                              <p className=\"text-sm text-gray-500\">{stage.conversionRate.toFixed(1)}% conversion</p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-6 relative overflow-hidden\">\n                          <div \n                            className={`h-6 rounded-full transition-all duration-500 ${\n                              index === 0 ? 'bg-blue-500' :\n                              index === 1 ? 'bg-green-500' :\n                              index === 2 ? 'bg-yellow-500' :\n                              index === 3 ? 'bg-purple-500' :\n                              index === 4 ? 'bg-orange-500' :\n                              index === 5 ? 'bg-emerald-500' : 'bg-red-500'\n                            }`}\n                            style={{ width: `${Math.max(stage.percentage, 2)}%` }}\n                          >\n                            <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent\" />\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Funnel Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 bg-red-50 rounded-lg border border-red-200\">\n                      <h4 className=\"font-medium text-red-700 mb-2\">Biggest Dropoff</h4>\n                      <p className=\"text-red-600\">{data.teamConversionFunnel.biggestDropoff.stage}</p>\n                      <p className=\"text-2xl font-bold text-red-700\">{data.teamConversionFunnel.biggestDropoff.rate.toFixed(1)}%</p>\n                    </div>\n\n                    <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                      <h4 className=\"font-medium text-blue-700 mb-2\">Improvements</h4>\n                      <div className=\"space-y-2\">\n                        {data.teamConversionFunnel['improvement opportunities'].length > 0 ? (\n                          data.teamConversionFunnel['improvement opportunities'].map((opportunity, index) => (\n                            <p key={index} className=\"text-blue-600 text-sm\">• {opportunity}</p>\n                          ))\n                        ) : (\n                          <p className=\"text-blue-600 text-sm\">Funnel is performing well</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <ResponsiveContainer width=\"100%\" height={200}>\n                      <PieChart>\n                        <Pie\n                          data={funnelVisualizationData.filter(d => d.name !== 'Declined/Q&A')}\n                          dataKey=\"value\"\n                          nameKey=\"name\"\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          outerRadius={80}\n                          label={({name, value}) => `${name}: ${value}`}\n                        >\n                          {funnelVisualizationData.map((entry, index) => (\n                            <Cell key={`cell-${entry.name}-${index}`} fill={entry.fill} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* BDR Funnel Comparison */}\n            <Card>\n              <CardHeader>\n                <CardTitle>BDR Conversion Rate Comparison</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={data.bdrPerformance}>\n                    <XAxis dataKey=\"bdr\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar key=\"conversion-call-to-proposal\" dataKey=\"callToProposalRate\" fill=\"#8884d8\" name=\"Call → Proposal %\" />\n                    <Bar key=\"conversion-proposal-to-agreement\" dataKey=\"proposalToAgreementRate\" fill=\"#82ca9d\" name=\"Proposal → Agreement %\" />\n                    <Bar key=\"conversion-agreement-to-sold\" dataKey=\"agreementToSoldRate\" fill=\"#ffc658\" name=\"Agreement → Sold %\" />\n                    <Bar key=\"conversion-overall\" dataKey=\"overallConversionRate\" fill=\"#ff7c7c\" name=\"Overall Conversion %\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Forecasting Tab */}\n        <TabsContent value=\"forecast\">\n          <div className=\"space-y-6\">\n            {/* Primary Forecasting Metrics */}\n            <div className=\"grid gap-6 md:grid-cols-3\">\n              <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-blue-700\">\n                    <Phone className=\"h-5 w-5\" />\n                    Upcoming Calls\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span>Today:</span>\n                      <span className=\"font-bold text-2xl text-blue-600\">{data.forecastMetrics.upcomingCalls.today}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Tomorrow:</span>\n                      <span className=\"font-bold text-blue-600\">{data.forecastMetrics.upcomingCalls.tomorrow}</span>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between\">\n                      <span>This Week:</span>\n                      <span className=\"font-bold text-blue-600\">{data.forecastMetrics.upcomingCalls.thisWeek}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Next Week:</span>\n                      <span className=\"font-bold text-blue-600\">{data.forecastMetrics.upcomingCalls.nextWeek}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Next 30 Days:</span>\n                      <span className=\"font-bold text-xl text-blue-700\">{data.forecastMetrics.upcomingCalls.next30Days}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-green-700\">\n                    <Target className=\"h-5 w-5\" />\n                    Pending Agreements\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-center\">\n                      <p className=\"text-4xl font-bold text-green-600\">{data.forecastMetrics.pendingAgreements.total}</p>\n                      <p className=\"text-sm text-green-600\">Total Pending</p>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between\">\n                      <span>Profile:</span>\n                      <span className=\"font-bold text-green-600\">{data.forecastMetrics.pendingAgreements.profile}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Average Value:</span>\n                      <span className=\"font-bold text-green-600\">${Math.round(data.forecastMetrics.pendingAgreements.averageValue).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Total Value:</span>\n                      <span className=\"font-bold text-xl text-green-700\">${Math.round(data.forecastMetrics.pendingAgreements.totalValue).toLocaleString()}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-purple-700\">\n                    <DollarSign className=\"h-5 w-5\" />\n                    Lists Out\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-center\">\n                      <p className=\"text-4xl font-bold text-purple-600\">{data.forecastMetrics.listsOut.total}</p>\n                      <p className=\"text-sm text-purple-600\">Total Active</p>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between\">\n                      <span>This Week:</span>\n                      <span className=\"font-bold text-purple-600\">{data.forecastMetrics.listsOut.thisWeek}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Avg Days to Close:</span>\n                      <span className=\"font-bold text-purple-600\">{data.forecastMetrics.listsOut.averageDaysToClose}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Conversion Rate:</span>\n                      <span className=\"font-bold text-xl text-purple-700\">{data.forecastMetrics.listsOut.conversionRate}%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Revenue Projections */}\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-5 w-5 text-green-500\" />\n                    Revenue Projections\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 bg-green-50 rounded-lg\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-medium\">This Month</span>\n                        <span className=\"text-2xl font-bold text-green-600\">\n                          ${(data.forecastMetrics.revenue.projectedThisMonth / 1000).toFixed(0)}K\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"p-4 bg-blue-50 rounded-lg\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-medium\">Next 30 Days</span>\n                        <span className=\"text-2xl font-bold text-blue-600\">\n                          ${(data.forecastMetrics.revenue.projectedNext30Days / 1000).toFixed(0)}K\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"p-4 bg-purple-50 rounded-lg\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-medium\">Pipeline Value</span>\n                        <span className=\"text-xl font-bold text-purple-600\">\n                          ${(data.forecastMetrics.revenue.pipelineValue / 1000).toFixed(0)}K\n                        </span>\n                      </div>\n                      <div className=\"text-sm text-purple-500 mt-1\">\n                        Weighted: ${(data.forecastMetrics.revenue.weightedPipelineValue / 1000).toFixed(0)}K\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>BDR Forecast Summary</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={data.bdrPerformance}>\n                      <XAxis dataKey=\"bdr\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar key=\"forecast-upcoming-calls\" dataKey=\"forecast.upcomingCalls\" fill=\"#8884d8\" name=\"upcomingCalls\" />\n                      <Bar key=\"forecast-pending-agreements\" dataKey=\"forecast.pendingAgreements\" fill=\"#82ca9d\" name=\"pendingAgreements\" />\n                      <Bar key=\"forecast-revenue-potential\" dataKey=\"forecast.next30DaysRevenuePotential\" fill=\"#ffc658\" name=\"next30DaysRevenuePotential\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recommendations */}\n            <Card>\n              <CardHeader>\n                <CardTitle>📋 Recommendations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-4 md:grid-cols-3\">\n                  {data.insights.recommendations.length > 0 ? (\n                    data.insights.recommendations.map((recommendation, index) => (\n                      <div key={index} className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                        <p className=\"text-blue-700\">💡 {recommendation}</p>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                      <p className=\"text-green-700\">✅ All metrics look good!</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Individual BDR Tab */}\n        <TabsContent value=\"individual\">\n          <div className=\"space-y-6\">\n            {selectedBdrData ? (\n              <>\n                {/* BDR Overview */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"h-5 w-5\" />\n                      {selectedBdrData.bdr} - Complete Dashboard\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                      <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                        <p className=\"text-3xl font-bold text-blue-600\">{selectedBdrData.totalItems}</p>\n                        <p className=\"text-sm text-blue-500\">Total Pipeline Items</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                        <p className=\"text-3xl font-bold text-green-600\">{selectedBdrData.conversionEfficiency}%</p>\n                        <p className=\"text-sm text-green-500\">Conversion Efficiency</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                        <p className=\"text-3xl font-bold text-purple-600\">{selectedBdrData.overallConversionRate}%</p>\n                        <p className=\"text-sm text-purple-500\">Overall Conversion</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                        <p className=\"text-3xl font-bold text-orange-600\">{selectedBdrData.activityScore}%</p>\n                        <p className=\"text-sm text-orange-500\">Activity Score</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* BDR Forecasting (Most Important) */}\n                <div className=\"grid gap-6 md:grid-cols-3\">\n                  <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n                    <CardHeader>\n                      <CardTitle className=\"text-blue-700 flex items-center gap-2\">\n                        <Phone className=\"h-5 w-5\" />\n                        Upcoming Calls\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"text-center\">\n                          <p className=\"text-4xl font-bold text-blue-600\">{selectedBdrData.forecast.upcomingCalls}</p>\n                          <p className=\"text-sm text-blue-600\">Total Scheduled</p>\n                        </div>\n                        <Separator />\n                        <div className=\"flex justify-between\">\n                          <span>Next Week:</span>\n                          <span className=\"font-bold text-blue-600\">{selectedBdrData.forecast.nextWeekCallsScheduled}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n                    <CardHeader>\n                      <CardTitle className=\"text-green-700 flex items-center gap-2\">\n                        <Target className=\"h-5 w-5\" />\n                        Pending Agreements\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"text-center\">\n                          <p className=\"text-4xl font-bold text-green-600\">{selectedBdrData.forecast.pendingAgreements}</p>\n                          <p className=\"text-sm text-green-600\">Ready to Close</p>\n                        </div>\n                        <Separator />\n                        <div className=\"flex justify-between\">\n                          <span>Projected:</span>\n                          <span className=\"font-bold text-green-600\">{selectedBdrData.forecast.projectedClosures}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200\">\n                    <CardHeader>\n                      <CardTitle className=\"text-purple-700 flex items-center gap-2\">\n                        <DollarSign className=\"h-5 w-5\" />\n                        Revenue Potential\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"text-center\">\n                          <p className=\"text-3xl font-bold text-purple-600\">\n                            ${(selectedBdrData.forecast.next30DaysRevenuePotential / 1000).toFixed(0)}K\n                          </p>\n                          <p className=\"text-sm text-purple-600\">Next 30 Days</p>\n                        </div>\n                        <Separator />\n                        <div className=\"flex justify-between\">\n                          <span>Lists Out:</span>\n                          <span className=\"font-bold text-purple-600\">{selectedBdrData.forecast.listsOut}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* BDR Performance vs Team */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Performance vs Team Average</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid gap-4 md:grid-cols-3\">\n                      <div className=\"p-4 border rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium\">Conversion Rate</h4>\n                          {getComparisonIcon(selectedBdrData.vsTeamAverage.conversionRate.comparison)}\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>You: {selectedBdrData.overallConversionRate}%</span>\n                          <span>Team: {data.teamAnalytics.teamAverages.conversionRate.toFixed(1)}%</span>\n                        </div>\n                        <div className=\"text-sm text-gray-500 mt-1\">\n                          {selectedBdrData.vsTeamAverage.conversionRate.comparison === 'above' ? '📈 Above average' : \n                           selectedBdrData.vsTeamAverage.conversionRate.comparison === 'below' ? '📉 Below average' : '📊 Average'}\n                        </div>\n                      </div>\n                      \n                      <div className=\"p-4 border rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium\">Activity Score</h4>\n                          {getComparisonIcon(selectedBdrData.vsTeamAverage.activityScore.comparison)}\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>You: {selectedBdrData.activityScore}%</span>\n                          <span>Team: {data.teamAnalytics.teamAverages.activityScore.toFixed(1)}%</span>\n                        </div>\n                        <div className=\"text-sm text-gray-500 mt-1\">\n                          {selectedBdrData.vsTeamAverage.activityScore.comparison === 'above' ? '📈 Above average' : \n                           selectedBdrData.vsTeamAverage.activityScore.comparison === 'below' ? '📉 Below average' : '📊 Average'}\n                        </div>\n                      </div>\n                      \n                      <div className=\"p-4 border rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium\">Efficiency Score</h4>\n                          {getComparisonIcon(selectedBdrData.vsTeamAverage.efficiency.comparison)}\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>You: {selectedBdrData.conversionEfficiency}%</span>\n                          <span>Team: {data.teamConversionFunnel.overallEfficiency}%</span>\n                        </div>\n                        <div className=\"text-sm text-gray-500 mt-1\">\n                          {selectedBdrData.vsTeamAverage.efficiency.comparison === 'above' ? '📈 Above average' : '📉 Below average'}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* BDR Weekly Trend & Targets */}\n                <div className=\"grid gap-6 md:grid-cols-2\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Weekly Performance Trend</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={300}>\n                        <LineChart data={selectedBdrData.weeklyTrend}>\n                          <XAxis dataKey=\"week\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Line key=\"weekly-calls-proposed\" type=\"monotone\" dataKey=\"callsProposed\" stroke=\"#8884d8\" name=\"Calls Proposed\" strokeWidth={2} />\n                          <Line key=\"weekly-calls-booked\" type=\"monotone\" dataKey=\"callsBooked\" stroke=\"#82ca9d\" name=\"Calls Booked\" strokeWidth={2} />\n                          <Line key=\"weekly-proposals-sent\" type=\"monotone\" dataKey=\"proposalsSent\" stroke=\"#ffc658\" name=\"Proposals\" strokeWidth={2} />\n                          <Line key=\"weekly-agreements\" type=\"monotone\" dataKey=\"agreements\" stroke=\"#ff7c7c\" name=\"Agreements\" strokeWidth={2} />\n                          <Line key=\"weekly-sold\" type=\"monotone\" dataKey=\"sold\" stroke=\"#00C49F\" name=\"Weekly Sales\" strokeWidth={2} />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Target Progress</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-6\">\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"font-medium\">Weekly Target</span>\n                            <span>{selectedBdrData.weeklyProgress.toFixed(1)}% of {selectedBdrData.weeklyTarget}</span>\n                          </div>\n                          <Progress value={Math.min(selectedBdrData.weeklyProgress, 100)} className=\"h-4\" />\n                          <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                            <span>{selectedBdrData.thisWeek.agreementsSigned} agreements this week</span>\n                            <span>Target: {selectedBdrData.weeklyTarget}</span>\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"font-medium\">Monthly Target</span>\n                            <span>{selectedBdrData.monthlyProgress.toFixed(1)}% of {selectedBdrData.monthlyTarget}</span>\n                          </div>\n                          <Progress value={Math.min(selectedBdrData.monthlyProgress, 100)} className=\"h-4\" />\n                          <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                            <span>{selectedBdrData.thisMonth.agreementsSigned} agreements this month</span>\n                            <span>Target: {selectedBdrData.monthlyTarget}</span>\n                          </div>\n                        </div>\n\n                        <div className=\"pt-4 border-t\">\n                          <h4 className=\"font-medium mb-3\">This Week Summary</h4>\n                          <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                            <div className=\"text-center p-2 bg-blue-50 rounded\">\n                              <p className=\"font-bold text-blue-600\">{selectedBdrData.thisWeek.callsProposed}</p>\n                              <p className=\"text-blue-500\">Calls Proposed</p>\n                            </div>\n                            <div className=\"text-center p-2 bg-green-50 rounded\">\n                              <p className=\"font-bold text-green-600\">{selectedBdrData.thisWeek.callsBooked}</p>\n                              <p className=\"text-green-500\">Calls Booked</p>\n                            </div>\n                            <div className=\"text-center p-2 bg-yellow-50 rounded\">\n                              <p className=\"font-bold text-yellow-600\">{selectedBdrData.thisWeek.proposalsSent}</p>\n                              <p className=\"text-yellow-500\">Proposals</p>\n                            </div>\n                            <div className=\"text-center p-2 bg-purple-50 rounded\">\n                              <p className=\"font-bold text-purple-600\">{selectedBdrData.thisWeek.sold}</p>\n                              <p className=\"text-purple-500\">Sold</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* BDR Conversion Funnel */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>{selectedBdrData.bdr}'s Conversion Funnel</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {selectedBdrData.conversionFunnel.map((stage, index) => (\n                        <div key={`bdr-${stage.stage}-${index}`} className=\"space-y-2\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"font-medium\">{stage.stage}</span>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge variant=\"outline\">{stage.count}</Badge>\n                              <span className=\"text-sm text-gray-500\">{stage.percentage.toFixed(1)}%</span>\n                            </div>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                            <div \n                              className={`h-4 rounded-full transition-all duration-300 ${\n                                index === 0 ? 'bg-blue-500' :\n                                index === 1 ? 'bg-green-500' :\n                                index === 2 ? 'bg-yellow-500' :\n                                index === 3 ? 'bg-purple-500' :\n                                index === 4 ? 'bg-orange-500' :\n                                index === 5 ? 'bg-emerald-500' : 'bg-red-500'\n                              }`}\n                              style={{ width: `${Math.max(stage.percentage, 2)}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            ) : (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Select a BDR for Individual Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p>Choose a BDR from the dropdown above to see their detailed performance metrics, forecasting data, and conversion funnel analysis.</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        {/* Performance Tab */}\n        <TabsContent value=\"performance\">\n          <div className=\"space-y-6\">\n            {/* BDR Performance Leaderboard */}\n            <Card>\n              <CardHeader>\n                <CardTitle>BDR Performance Leaderboard</CardTitle>\n                <p className=\"text-sm text-gray-600\">Ranked by conversion efficiency</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {data.bdrPerformance.map((bdr, index) => (\n                    <div key={bdr.bdr} className=\"flex items-center justify-between p-4 border rounded-lg hover:shadow-md transition-shadow\">\n                      <div className=\"flex items-center gap-4\">\n                        <Badge variant={index < 2 ? \"default\" : \"secondary\"} className={\n                          index === 0 ? \"bg-yellow-500\" : \n                          index === 1 ? \"bg-gray-400\" : \n                          index === 2 ? \"bg-orange-500\" : \"\"\n                        }>\n                          #{index + 1}\n                        </Badge>\n                        <span className=\"font-medium text-lg\">{bdr.bdr}</span>\n                      </div>\n                      <div className=\"flex items-center gap-6\">\n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-500\">Efficiency</p>\n                          <p className=\"font-bold text-green-600\">{bdr.conversionEfficiency}%</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-500\">Conversion</p>\n                          <p className=\"font-bold text-blue-600\">{bdr.overallConversionRate}%</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-500\">Pipeline</p>\n                          <p className=\"font-bold\">{bdr.totalItems}</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-500\">This Month</p>\n                          <p className=\"font-bold\">{bdr.thisMonth.agreementsSigned} agreements</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className=\"text-sm text-gray-500\">Activity</p>\n                          <p className=\"font-bold text-purple-600\">{bdr.activityScore}%</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Team Performance Charts */}\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Weekly Progress Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {data.bdrPerformance.slice(0, 5).map(bdr => (\n                      <div key={bdr.bdr} className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"font-medium\">{bdr.bdr}</span>\n                          <span>{bdr.weeklyProgress.toFixed(1)}% of target</span>\n                        </div>\n                        <Progress value={Math.min(bdr.weeklyProgress, 100)} className=\"h-3\" />\n                        <div className=\"flex justify-between text-xs text-gray-500\">\n                          <span>{bdr.thisWeek.agreementsSigned} agreements this week</span>\n                          <span>Target: {bdr.weeklyTarget}</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Conversion Rates by BDR</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={data.bdrPerformance.slice(0, 8)}>\n                      <XAxis dataKey=\"bdr\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar key=\"performance-overall\" dataKey=\"overallConversionRate\" fill=\"#8884d8\" name=\"Overall %\" />\n                      <Bar key=\"performance-call-proposal\" dataKey=\"callToProposalRate\" fill=\"#82ca9d\" name=\"Call→Proposal %\" />\n                      <Bar key=\"performance-proposal-agreement\" dataKey=\"proposalToAgreementRate\" fill=\"#ffc658\" name=\"Proposal→Agreement %\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Activity Tab */}\n        <TabsContent value=\"activity\">\n          <div className=\"space-y-6\">\n            {/* Weekly Comparison */}\n            <Card>\n              <CardHeader>\n                <CardTitle>This Week vs Last Week</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={data.activityAnalysis.weeklyComparison}>\n                    <XAxis dataKey=\"period\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar key=\"comparison-calls-proposed\" dataKey=\"callsProposed\" fill=\"#8884d8\" name=\"Calls Proposed\" />\n                    <Bar key=\"comparison-calls-booked\" dataKey=\"callsBooked\" fill=\"#82ca9d\" name=\"Calls Booked\" />\n                    <Bar key=\"comparison-proposals-sent\" dataKey=\"proposalsSent\" fill=\"#ffc658\" name=\"Proposals\" />\n                    <Bar key=\"comparison-agreements\" dataKey=\"agreements\" fill=\"#ff7c7c\" name=\"Agreements\" />\n                    <Bar key=\"comparison-sold\" dataKey=\"sold\" fill=\"#00C49F\" name=\"Sales Volume\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Daily Activity Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Daily Activity Trends (Last 7 Days)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <LineChart data={data.activityAnalysis.dailyMetrics}>\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line key=\"activity-calls-proposed\" type=\"monotone\" dataKey=\"callsProposed\" stroke=\"#8884d8\" name=\"Calls Proposed\" strokeWidth={2} />\n                    <Line key=\"activity-calls-booked\" type=\"monotone\" dataKey=\"callsBooked\" stroke=\"#82ca9d\" name=\"Calls Booked\" strokeWidth={2} />\n                    <Line key=\"activity-proposals-sent\" type=\"monotone\" dataKey=\"proposalsSent\" stroke=\"#ffc658\" name=\"Proposals\" strokeWidth={2} />\n                    <Line key=\"activity-agreements\" type=\"monotone\" dataKey=\"agreements\" stroke=\"#ff7c7c\" name=\"Agreements\" strokeWidth={2} />\n                    <Line key=\"activity-sold\" type=\"monotone\" dataKey=\"sold\" stroke=\"#00C49F\" name=\"Sales Activity\" strokeWidth={2} />\n                    <Line key=\"activity-total\" type=\"monotone\" dataKey=\"totalActivity\" stroke=\"#8B5CF6\" name=\"Total Activity\" strokeWidth={3} strokeDasharray=\"5 5\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n    </>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\conversion\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\lists-out\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoadingBdrList' is assigned a value but never used.","line":39,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bdrListError' is assigned a value but never used.","line":39,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1720,1723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1720,1723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4014,4017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4014,4017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { downloadCsv } from '@/lib/csv';\r\nimport { Navbar } from '@/components/ui/navbar';\r\n\r\nconst fetchListsOut = async (bdr: string, months: number) => {\r\n  const params = new URLSearchParams();\r\n  if (bdr && bdr !== 'all') params.append('bdr', bdr);\r\n  params.append('months', months.toString());\r\n\r\n  const res = await fetch(`/api/reporting/lists-out?${params.toString()}`);\r\n  if (!res.ok) throw new Error('Failed to fetch lists out');\r\n  return res.json();\r\n};\r\n\r\nconst fetchBdrList = async () => {\r\n  const response = await fetch('/api/reporting/executive-dashboard');\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch BDR list');\r\n  }\r\n  const data = await response.json();\r\n  return data.dashboard.bdrList;\r\n}\r\n\r\nexport default function ListsOutReport() {\r\n  const [bdr, setBdr] = useState('all');\r\n  const [months, setMonths] = useState(4);\r\n\r\n  const { data: listsOut, isLoading: isLoadingListsOut, error: listsOutError } = useQuery({\r\n    queryKey: ['listsOut', bdr, months],\r\n    queryFn: () => fetchListsOut(bdr, months),\r\n  });\r\n\r\n  const { data: bdrList, isLoading: isLoadingBdrList, error: bdrListError } = useQuery({\r\n    queryKey: ['bdrList'],\r\n    queryFn: fetchBdrList,\r\n  });\r\n\r\n  const handleExport = () => {\r\n    if (!listsOut) return;\r\n    const rows = listsOut.monthly.map((m: any) => ({ Month: m.month, Lists: m.lists, AvgSize: m.avgSize }));\r\n    downloadCsv('lists-out.csv', rows);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Lists Out Report</CardTitle>\r\n        </CardHeader>\r\n      <CardContent>\r\n        <div className=\"flex space-x-4 mb-4\">\r\n          <Select onValueChange={setBdr} value={bdr}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Select BDR\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">All BDRs</SelectItem>\r\n              {bdrList?.map((bdr: string) => (\r\n                <SelectItem key={bdr} value={bdr}>{bdr}</SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n          <Select value={months.toString()} onValueChange={(v) => setMonths(parseInt(v, 10))}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Months\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {[1,3,4,6,12].map((m) => (\r\n                <SelectItem key={m} value={m.toString()}>Last {m} {m===1?'Month':'Months'}</SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        {isLoadingListsOut && <p>Loading...</p>}\r\n        {listsOutError && <p>Error loading lists out data</p>}\r\n        {listsOut && (\r\n          <div className=\"space-y-6\">\r\n            <div className=\"flex justify-end\">\r\n              <button onClick={handleExport} className=\"text-sm px-3 py-1 border rounded bg-blue-50 hover:bg-blue-100\">Export CSV</button>\r\n            </div>\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm\">Monthly Lists-Out</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Month</TableHead>\r\n                      <TableHead className=\"text-right\">Lists Sent</TableHead>\r\n                      <TableHead className=\"text-right\">Avg Size</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {listsOut.monthly.map((m: any) => (\r\n                      <TableRow key={m.month}>\r\n                        <TableCell>{m.month}</TableCell>\r\n                        <TableCell className=\"text-right\">{m.lists}</TableCell>\r\n                        <TableCell className=\"text-right\">{m.avgSize}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card className=\"shadow-none border\">\r\n              <CardHeader>\r\n                <CardTitle className=\"text-sm\">Overall Summary</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <p>Total Lists Out: <strong>{listsOut.overall.totalLists}</strong></p>\r\n                <p>Average List Size: <strong>{listsOut.overall.averageSize}</strong></p>\r\n                <p>Conversion Rate (Sold): <strong>{listsOut.overall.conversionRate}%</strong></p>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\monday\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1433,1436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1433,1436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":323,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13183,13203],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13183,13203],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13183,13203],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13183,13203],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":323,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13212,13286],"text":" Count of activity logs with type &quot;Call_Completed\" within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13212,13286],"text":" Count of activity logs with type &ldquo;Call_Completed\" within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13212,13286],"text":" Count of activity logs with type &#34;Call_Completed\" within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13212,13286],"text":" Count of activity logs with type &rdquo;Call_Completed\" within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":323,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[13212,13286],"text":" Count of activity logs with type \"Call_Completed&quot; within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[13212,13286],"text":" Count of activity logs with type \"Call_Completed&ldquo; within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[13212,13286],"text":" Count of activity logs with type \"Call_Completed&#34; within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[13212,13286],"text":" Count of activity logs with type \"Call_Completed&rdquo; within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":358,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[15303,15323],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[15303,15323],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[15303,15323],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[15303,15323],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":358,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[15332,15406],"text":" Count of activity logs with type &quot;Agreement_Sent\" within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[15332,15406],"text":" Count of activity logs with type &ldquo;Agreement_Sent\" within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[15332,15406],"text":" Count of activity logs with type &#34;Agreement_Sent\" within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[15332,15406],"text":" Count of activity logs with type &rdquo;Agreement_Sent\" within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":358,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[15332,15406],"text":" Count of activity logs with type \"Agreement_Sent&quot; within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[15332,15406],"text":" Count of activity logs with type \"Agreement_Sent&ldquo; within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[15332,15406],"text":" Count of activity logs with type \"Agreement_Sent&#34; within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[15332,15406],"text":" Count of activity logs with type \"Agreement_Sent&rdquo; within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":393,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[17420,17440],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[17420,17440],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[17420,17440],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[17420,17440],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":393,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17449,17526],"text":" Count of activity logs with type &quot;Partner_List_Sent\" within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17449,17526],"text":" Count of activity logs with type &ldquo;Partner_List_Sent\" within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17449,17526],"text":" Count of activity logs with type &#34;Partner_List_Sent\" within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17449,17526],"text":" Count of activity logs with type &rdquo;Partner_List_Sent\" within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":393,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17449,17526],"text":" Count of activity logs with type \"Partner_List_Sent&quot; within the current week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17449,17526],"text":" Count of activity logs with type \"Partner_List_Sent&ldquo; within the current week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17449,17526],"text":" Count of activity logs with type \"Partner_List_Sent&#34; within the current week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17449,17526],"text":" Count of activity logs with type \"Partner_List_Sent&rdquo; within the current week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":428,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19509,19529],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19509,19529],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19509,19529],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19509,19529],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":428,"column":119,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19538,19619],"text":" Count of pipeline items with sales indicators or &apos;Sold' status updated this week"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19538,19619],"text":" Count of pipeline items with sales indicators or &lsquo;Sold' status updated this week"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19538,19619],"text":" Count of pipeline items with sales indicators or &#39;Sold' status updated this week"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19538,19619],"text":" Count of pipeline items with sales indicators or &rsquo;Sold' status updated this week"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":428,"column":124,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[19538,19619],"text":" Count of pipeline items with sales indicators or 'Sold&apos; status updated this week"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[19538,19619],"text":" Count of pipeline items with sales indicators or 'Sold&lsquo; status updated this week"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[19538,19619],"text":" Count of pipeline items with sales indicators or 'Sold&#39; status updated this week"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[19538,19619],"text":" Count of pipeline items with sales indicators or 'Sold&rsquo; status updated this week"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":469,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21881,21901],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21881,21901],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21881,21901],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21881,21901],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":469,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[21910,21977],"text":" Count of activity logs with type &quot;Call_Completed\" within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[21910,21977],"text":" Count of activity logs with type &ldquo;Call_Completed\" within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[21910,21977],"text":" Count of activity logs with type &#34;Call_Completed\" within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[21910,21977],"text":" Count of activity logs with type &rdquo;Call_Completed\" within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":469,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[21910,21977],"text":" Count of activity logs with type \"Call_Completed&quot; within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[21910,21977],"text":" Count of activity logs with type \"Call_Completed&ldquo; within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[21910,21977],"text":" Count of activity logs with type \"Call_Completed&#34; within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[21910,21977],"text":" Count of activity logs with type \"Call_Completed&rdquo; within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":498,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[23706,23726],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[23706,23726],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[23706,23726],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[23706,23726],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":498,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23735,23802],"text":" Count of activity logs with type &quot;Agreement_Sent\" within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23735,23802],"text":" Count of activity logs with type &ldquo;Agreement_Sent\" within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23735,23802],"text":" Count of activity logs with type &#34;Agreement_Sent\" within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23735,23802],"text":" Count of activity logs with type &rdquo;Agreement_Sent\" within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":498,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[23735,23802],"text":" Count of activity logs with type \"Agreement_Sent&quot; within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[23735,23802],"text":" Count of activity logs with type \"Agreement_Sent&ldquo; within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[23735,23802],"text":" Count of activity logs with type \"Agreement_Sent&#34; within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[23735,23802],"text":" Count of activity logs with type \"Agreement_Sent&rdquo; within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":527,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[25528,25548],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[25528,25548],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[25528,25548],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[25528,25548],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":527,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[25557,25627],"text":" Count of activity logs with type &quot;Partner_List_Sent\" within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[25557,25627],"text":" Count of activity logs with type &ldquo;Partner_List_Sent\" within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[25557,25627],"text":" Count of activity logs with type &#34;Partner_List_Sent\" within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[25557,25627],"text":" Count of activity logs with type &rdquo;Partner_List_Sent\" within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":527,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[25557,25627],"text":" Count of activity logs with type \"Partner_List_Sent&quot; within last week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[25557,25627],"text":" Count of activity logs with type \"Partner_List_Sent&ldquo; within last week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[25557,25627],"text":" Count of activity logs with type \"Partner_List_Sent&#34; within last week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[25557,25627],"text":" Count of activity logs with type \"Partner_List_Sent&rdquo; within last week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":556,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[27326,27346],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[27326,27346],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[27326,27346],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[27326,27346],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":556,"column":119,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[27355,27436],"text":" Count of pipeline items with sales indicators or &apos;Sold' status updated last week"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[27355,27436],"text":" Count of pipeline items with sales indicators or &lsquo;Sold' status updated last week"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[27355,27436],"text":" Count of pipeline items with sales indicators or &#39;Sold' status updated last week"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[27355,27436],"text":" Count of pipeline items with sales indicators or &rsquo;Sold' status updated last week"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":556,"column":124,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[27355,27436],"text":" Count of pipeline items with sales indicators or 'Sold&apos; status updated last week"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[27355,27436],"text":" Count of pipeline items with sales indicators or 'Sold&lsquo; status updated last week"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[27355,27436],"text":" Count of pipeline items with sales indicators or 'Sold&#39; status updated last week"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[27355,27436],"text":" Count of pipeline items with sales indicators or 'Sold&rsquo; status updated last week"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":591,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[29423,29443],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[29423,29443],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[29423,29443],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[29423,29443],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":591,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[29452,29527],"text":" Count of activity logs with type &quot;Call_Completed\" within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[29452,29527],"text":" Count of activity logs with type &ldquo;Call_Completed\" within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[29452,29527],"text":" Count of activity logs with type &#34;Call_Completed\" within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[29452,29527],"text":" Count of activity logs with type &rdquo;Call_Completed\" within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":591,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[29452,29527],"text":" Count of activity logs with type \"Call_Completed&quot; within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[29452,29527],"text":" Count of activity logs with type \"Call_Completed&ldquo; within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[29452,29527],"text":" Count of activity logs with type \"Call_Completed&#34; within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[29452,29527],"text":" Count of activity logs with type \"Call_Completed&rdquo; within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":626,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[31552,31572],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[31552,31572],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[31552,31572],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[31552,31572],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":626,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[31581,31656],"text":" Count of activity logs with type &quot;Agreement_Sent\" within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[31581,31656],"text":" Count of activity logs with type &ldquo;Agreement_Sent\" within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[31581,31656],"text":" Count of activity logs with type &#34;Agreement_Sent\" within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[31581,31656],"text":" Count of activity logs with type &rdquo;Agreement_Sent\" within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":626,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[31581,31656],"text":" Count of activity logs with type \"Agreement_Sent&quot; within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[31581,31656],"text":" Count of activity logs with type \"Agreement_Sent&ldquo; within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[31581,31656],"text":" Count of activity logs with type \"Agreement_Sent&#34; within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[31581,31656],"text":" Count of activity logs with type \"Agreement_Sent&rdquo; within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":661,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[33678,33698],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[33678,33698],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[33678,33698],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[33678,33698],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":661,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[33707,33785],"text":" Count of activity logs with type &quot;Partner_List_Sent\" within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[33707,33785],"text":" Count of activity logs with type &ldquo;Partner_List_Sent\" within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[33707,33785],"text":" Count of activity logs with type &#34;Partner_List_Sent\" within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[33707,33785],"text":" Count of activity logs with type &rdquo;Partner_List_Sent\" within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":661,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[33707,33785],"text":" Count of activity logs with type \"Partner_List_Sent&quot; within the current month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[33707,33785],"text":" Count of activity logs with type \"Partner_List_Sent&ldquo; within the current month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[33707,33785],"text":" Count of activity logs with type \"Partner_List_Sent&#34; within the current month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[33707,33785],"text":" Count of activity logs with type \"Partner_List_Sent&rdquo; within the current month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":696,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[35819,35839],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[35819,35839],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[35819,35839],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[35819,35839],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":738,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[38219,38239],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[38219,38239],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[38219,38239],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[38219,38239],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":738,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[38248,38316],"text":" Count of activity logs with type &quot;Call_Completed\" within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[38248,38316],"text":" Count of activity logs with type &ldquo;Call_Completed\" within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[38248,38316],"text":" Count of activity logs with type &#34;Call_Completed\" within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[38248,38316],"text":" Count of activity logs with type &rdquo;Call_Completed\" within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":738,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[38248,38316],"text":" Count of activity logs with type \"Call_Completed&quot; within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[38248,38316],"text":" Count of activity logs with type \"Call_Completed&ldquo; within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[38248,38316],"text":" Count of activity logs with type \"Call_Completed&#34; within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[38248,38316],"text":" Count of activity logs with type \"Call_Completed&rdquo; within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":767,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[40051,40071],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[40051,40071],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[40051,40071],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[40051,40071],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":767,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[40080,40148],"text":" Count of activity logs with type &quot;Agreement_Sent\" within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[40080,40148],"text":" Count of activity logs with type &ldquo;Agreement_Sent\" within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[40080,40148],"text":" Count of activity logs with type &#34;Agreement_Sent\" within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[40080,40148],"text":" Count of activity logs with type &rdquo;Agreement_Sent\" within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":767,"column":118,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[40080,40148],"text":" Count of activity logs with type \"Agreement_Sent&quot; within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[40080,40148],"text":" Count of activity logs with type \"Agreement_Sent&ldquo; within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[40080,40148],"text":" Count of activity logs with type \"Agreement_Sent&#34; within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[40080,40148],"text":" Count of activity logs with type \"Agreement_Sent&rdquo; within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":796,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[41880,41900],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[41880,41900],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[41880,41900],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[41880,41900],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":796,"column":103,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[41909,41980],"text":" Count of activity logs with type &quot;Partner_List_Sent\" within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[41909,41980],"text":" Count of activity logs with type &ldquo;Partner_List_Sent\" within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[41909,41980],"text":" Count of activity logs with type &#34;Partner_List_Sent\" within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[41909,41980],"text":" Count of activity logs with type &rdquo;Partner_List_Sent\" within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":796,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[41909,41980],"text":" Count of activity logs with type \"Partner_List_Sent&quot; within last month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[41909,41980],"text":" Count of activity logs with type \"Partner_List_Sent&ldquo; within last month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[41909,41980],"text":" Count of activity logs with type \"Partner_List_Sent&#34; within last month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[41909,41980],"text":" Count of activity logs with type \"Partner_List_Sent&rdquo; within last month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":825,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[43728,43748],"text":"How it&apos;s calculated:"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[43728,43748],"text":"How it&lsquo;s calculated:"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[43728,43748],"text":"How it&#39;s calculated:"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[43728,43748],"text":"How it&rsquo;s calculated:"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":860,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[45564,45621],"text":" Activity logs with type &quot;Call_Completed\" grouped by week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[45564,45621],"text":" Activity logs with type &ldquo;Call_Completed\" grouped by week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[45564,45621],"text":" Activity logs with type &#34;Call_Completed\" grouped by week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[45564,45621],"text":" Activity logs with type &rdquo;Call_Completed\" grouped by week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":860,"column":95,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[45564,45621],"text":" Activity logs with type \"Call_Completed&quot; grouped by week"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[45564,45621],"text":" Activity logs with type \"Call_Completed&ldquo; grouped by week"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[45564,45621],"text":" Activity logs with type \"Call_Completed&#34; grouped by week"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[45564,45621],"text":" Activity logs with type \"Call_Completed&rdquo; grouped by week"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":891,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[47232,47290],"text":" Activity logs with type &quot;Agreement_Sent\" grouped by month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[47232,47290],"text":" Activity logs with type &ldquo;Agreement_Sent\" grouped by month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[47232,47290],"text":" Activity logs with type &#34;Agreement_Sent\" grouped by month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[47232,47290],"text":" Activity logs with type &rdquo;Agreement_Sent\" grouped by month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":891,"column":95,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[47232,47290],"text":" Activity logs with type \"Agreement_Sent&quot; grouped by month"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[47232,47290],"text":" Activity logs with type \"Agreement_Sent&ldquo; grouped by month"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[47232,47290],"text":" Activity logs with type \"Agreement_Sent&#34; grouped by month"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[47232,47290],"text":" Activity logs with type \"Agreement_Sent&rdquo; grouped by month"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":922,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[48798,48866],"text":" Activity logs with type &quot;Partner_List_Sent\" and pipeline sales data"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[48798,48866],"text":" Activity logs with type &ldquo;Partner_List_Sent\" and pipeline sales data"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[48798,48866],"text":" Activity logs with type &#34;Partner_List_Sent\" and pipeline sales data"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[48798,48866],"text":" Activity logs with type &rdquo;Partner_List_Sent\" and pipeline sales data"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":922,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[48798,48866],"text":" Activity logs with type \"Partner_List_Sent&quot; and pipeline sales data"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[48798,48866],"text":" Activity logs with type \"Partner_List_Sent&ldquo; and pipeline sales data"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[48798,48866],"text":" Activity logs with type \"Partner_List_Sent&#34; and pipeline sales data"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[48798,48866],"text":" Activity logs with type \"Partner_List_Sent&rdquo; and pipeline sales data"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":964,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":964,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51112,51115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51112,51115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":52,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport { Progress } from '@/components/ui/progress';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Navbar } from '@/components/ui/navbar';\nimport { useSession } from 'next-auth/react';\nimport {\n  Phone,\n  FileText,\n  Users,\n  Target,\n  AlertCircle,\n  HelpCircle,\n  ArrowUpRight,\n  ArrowDownRight\n} from 'lucide-react';\n\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip as RechartsTooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  Legend,\n} from 'recharts';\n\nconst fetchExecutiveDashboard = async (bdr: string) => {\n  const params = new URLSearchParams();\n  if (bdr && bdr !== 'all') params.append('bdr', bdr);\n  // Add test bypass flags to support Cypress in CI/dev without auth\n  if (typeof window !== 'undefined' && window.location.search.includes('test=1')) {\n    params.append('test', '1');\n  }\n\n  const response = await fetch(`/api/reporting/executive-dashboard?${params.toString()}`, {\n    headers: window.location.search.includes('test=1') ? { 'x-cypress-test': '1' } as any : undefined,\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch executive dashboard');\n  }\n  return response.json();\n};\n\nexport default function ReportingPage() {\n  const { data: session } = useSession();\n  const [bdr, setBdr] = useState('all');\n\n  // For BDRs, force them to only see their own data\n  const effectiveBdr = session?.user?.role === 'BDR' ? session.user.name || 'all' : bdr;\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['executiveDashboard', effectiveBdr],\n    queryFn: () => fetchExecutiveDashboard(effectiveBdr),\n    enabled: !!session, // Only run query when session is available\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'excellent': return 'text-emerald-600 dark:text-emerald-400 bg-emerald-50 dark:bg-emerald-950/30 border-emerald-200 dark:border-emerald-800';\n      case 'good': return 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-950/30 border-blue-200 dark:border-blue-800';\n      case 'needs_attention': return 'text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-950/30 border-amber-200 dark:border-amber-800';\n      case 'critical': return 'text-rose-600 dark:text-rose-400 bg-rose-50 dark:bg-rose-950/30 border-rose-200 dark:border-rose-800';\n      default: return 'text-muted-foreground bg-muted border';\n    }\n  };\n\n  const renderDelta = (current: number, previous: number, suffix: string = '') => {\n    const diff = (current ?? 0) - (previous ?? 0);\n    const isUp = diff > 0;\n    const isDown = diff < 0;\n    if (!isUp && !isDown) {\n      return (\n        <span className=\"inline-flex items-center gap-1 text-xs text-muted-foreground\">\n          <ArrowUpRight className=\"h-3 w-3 opacity-0\" />\n          0{suffix} vs prev\n        </span>\n      );\n    }\n    return (\n      <span className={`inline-flex items-center gap-1 text-xs ${isUp ? 'text-emerald-600' : 'text-rose-600'}`}>\n        {isUp ? <ArrowUpRight className=\"h-3 w-3\" /> : <ArrowDownRight className=\"h-3 w-3\" />}\n        {diff > 0 ? `+${diff}` : diff}{suffix} vs prev\n      </span>\n    );\n  };\n\n  // Show loading state when session is not loaded yet\n  if (!session) {\n    return (\n      <>\n        <Navbar />\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p>Loading...</p>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  if (error) {\n    return (\n      <>\n        <Navbar />\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center text-red-600\">\n            <AlertCircle className=\"h-8 w-8 mx-auto mb-4\" />\n            <p>Error loading dashboard: {error.message}</p>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl font-bold\">\n            {session?.user?.role === 'BDR' \n              ? `My Performance Dashboard` \n              : 'Reporting Dashboard'\n            }\n          </h1>\n          {session?.user?.role !== 'BDR' && (\n            <div className=\"flex items-center gap-2 rounded-xl border border-white/30 dark:border-white/10 bg-white/60 dark:bg-white/[0.05] backdrop-blur p-2\">\n              <Select onValueChange={setBdr} value={bdr}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select BDR\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All BDRs</SelectItem>\n                  {data?.dashboard.bdrList?.map((bdrName: string) => (\n                    <SelectItem key={bdrName} value={bdrName}>{bdrName}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n          {session?.user?.role === 'BDR' && (\n            <div className=\"flex items-center gap-2 rounded-xl border border-white/30 dark:border-white/10 bg-white/60 dark:bg-white/[0.05] backdrop-blur p-2 px-4 py-2\">\n              <span className=\"text-sm font-medium\">BDR: {session.user.name}</span>\n            </div>\n          )}\n        </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              Call Volume\n              <Tooltip>\n                <TooltipTrigger>\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                </TooltipTrigger>\n                <TooltipContent className=\"max-w-xs\">\n                  <p><strong>Detailed call volume analysis:</strong> Track call patterns, BDR performance, and call outcomes</p>\n                  <p><strong>Features:</strong> Daily/weekly trends, BDR comparisons, call success rates</p>\n                </TooltipContent>\n              </Tooltip>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/reporting/call-volume\">\n              <Button className=\"transition-transform hover:scale-[1.02]\">\n                View Report\n              </Button>\n            </Link>\n            {/* Sparkline */}\n            {data?.dashboard?.trends?.weeklyCallVolume && (\n              <div className=\"mt-3 h-10\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={data.dashboard.trends.weeklyCallVolume} margin={{ top: 0, right: 0, bottom: 0, left: 0 }}>\n                    <XAxis dataKey=\"week\" hide />\n                    <YAxis hide />\n                    <Line type=\"monotone\" dataKey=\"calls\" stroke=\"#3b82f6\" strokeWidth={2} dot={false} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              Agreement Tracking\n              <Tooltip>\n                <TooltipTrigger>\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                </TooltipTrigger>\n                <TooltipContent className=\"max-w-xs\">\n                  <p><strong>Agreement lifecycle tracking:</strong> Monitor agreement generation, status, and outcomes</p>\n                  <p><strong>Features:</strong> Agreement status tracking, conversion rates, BDR performance</p>\n                </TooltipContent>\n              </Tooltip>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/reporting/agreement-tracking\">\n              <Button className=\"transition-transform hover:scale-[1.02]\">\n                View Report\n              </Button>\n            </Link>\n            {/* Sparkline */}\n            {data?.dashboard?.trends?.monthlyAgreements && (\n              <div className=\"mt-3 h-10\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={data.dashboard.trends.monthlyAgreements}>\n                    <XAxis dataKey=\"month\" hide />\n                    <YAxis hide />\n                    <Bar dataKey=\"agreements\" fill=\"#10b981\" radius={[2,2,0,0]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              Lists Out\n              <Tooltip>\n                <TooltipTrigger>\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                </TooltipTrigger>\n                <TooltipContent className=\"max-w-xs\">\n                  <p><strong>Partner list performance:</strong> Track list generation, outcomes, and revenue impact</p>\n                  <p><strong>Features:</strong> List size analysis, conversion tracking, revenue per list</p>\n                </TooltipContent>\n              </Tooltip>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/reporting/lists-out\">\n              <Button className=\"transition-transform hover:scale-[1.02]\">\n                View Report\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              Conversion Funnel\n              <Tooltip>\n                <TooltipTrigger>\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                </TooltipTrigger>\n                <TooltipContent className=\"max-w-xs\">\n                  <p><strong>Sales funnel analysis:</strong> Track conversion rates at each stage of the sales process</p>\n                  <p><strong>Features:</strong> Stage-by-stage conversion rates, funnel optimization insights</p>\n                </TooltipContent>\n              </Tooltip>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/reporting/conversion\">\n              <Button className=\"transition-transform hover:scale-[1.02]\">\n                View Report\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              Advanced Business Intelligence\n              <Tooltip>\n                <TooltipTrigger>\n                  <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                </TooltipTrigger>\n                <TooltipContent className=\"max-w-xs\">\n                  <p><strong>Advanced BDR performance comparison:</strong> Comprehensive analytics with real-time notifications</p>\n                  <p><strong>Features:</strong> BDR comparison tools, advanced filtering, real-time alerts, performance trends</p>\n                </TooltipContent>\n              </Tooltip>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Link href=\"/reporting/advanced\">\n              <Button className=\"transition-transform hover:scale-[1.02]\">\n                View Advanced Reports\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>Error loading data</p>}\n      {data && (\n        <>\n          <Card>\n            <CardHeader>\n              <CardTitle>Executive Dashboard</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* This Week Row */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 text-foreground\">This Week</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisWeek.callVolume.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        Call Volume\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total completed calls this week</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Call_Completed\" within the current week</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisWeek.callVolume.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.thisWeek.callVolume.current / data.dashboard.kpis.thisWeek.callVolume.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.thisWeek.callVolume.target}\n                      </p>\n                      <div className=\"mt-1\">\n                        {renderDelta(\n                          data.dashboard.kpis.thisWeek.callVolume.current,\n                          data.dashboard.kpis.lastWeek.callVolume.current\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisWeek.agreements.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4\" />\n                        Agreements\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total agreements sent this week</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Agreement_Sent\" within the current week</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisWeek.agreements.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.thisWeek.agreements.current / data.dashboard.kpis.thisWeek.agreements.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.thisWeek.agreements.target}\n                      </p>\n                      <div className=\"mt-1\">\n                        {renderDelta(\n                          data.dashboard.kpis.thisWeek.agreements.current,\n                          data.dashboard.kpis.lastWeek.agreements.current\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisWeek.listsOut.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        Lists Out\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total partner lists sent this week</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Partner_List_Sent\" within the current week</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisWeek.listsOut.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.thisWeek.listsOut.current / data.dashboard.kpis.thisWeek.listsOut.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.thisWeek.listsOut.target}\n                      </p>\n                      <div className=\"mt-1\">\n                        {renderDelta(\n                          data.dashboard.kpis.thisWeek.listsOut.current,\n                          data.dashboard.kpis.lastWeek.listsOut.current\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisWeek.sales.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Target className=\"h-4 w-4\" />\n                        Sales\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total sales this week</p>\n                            <p><strong>How it's calculated:</strong> Count of pipeline items with sales indicators or 'Sold' status updated this week</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisWeek.sales.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.thisWeek.sales.current / data.dashboard.kpis.thisWeek.sales.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.thisWeek.sales.target}\n                      </p>\n                      <div className=\"mt-1\">\n                        {renderDelta(\n                          data.dashboard.kpis.thisWeek.sales.current,\n                          data.dashboard.kpis.lastWeek.sales.current\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n\n              {/* Last Week Row */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 text-indigo-600\">Last Week</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastWeek.callVolume.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        Call Volume\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total completed calls last week</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Call_Completed\" within last week</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastWeek.callVolume.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.lastWeek.callVolume.current / data.dashboard.kpis.lastWeek.callVolume.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.lastWeek.callVolume.target}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastWeek.agreements.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4\" />\n                        Agreements\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total agreements sent last week</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Agreement_Sent\" within last week</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastWeek.agreements.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.lastWeek.agreements.current / data.dashboard.kpis.lastWeek.agreements.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.lastWeek.agreements.target}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastWeek.listsOut.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        Lists Out\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total partner lists sent last week</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Partner_List_Sent\" within last week</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastWeek.listsOut.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.lastWeek.listsOut.current / data.dashboard.kpis.lastWeek.listsOut.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.lastWeek.listsOut.target}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastWeek.sales.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Target className=\"h-4 w-4\" />\n                        Sales\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total sales last week</p>\n                            <p><strong>How it's calculated:</strong> Count of pipeline items with sales indicators or 'Sold' status updated last week</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastWeek.sales.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.lastWeek.sales.current / data.dashboard.kpis.lastWeek.sales.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.lastWeek.sales.target}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n\n              {/* This Month Row */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 text-green-600\">This Month</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisMonth.callVolume.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        Call Volume\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total completed calls this month</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Call_Completed\" within the current month</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisMonth.callVolume.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.thisMonth.callVolume.current / data.dashboard.kpis.thisMonth.callVolume.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.thisMonth.callVolume.target}\n                      </p>\n                      <div className=\"mt-1\">\n                        {renderDelta(\n                          data.dashboard.kpis.thisMonth.callVolume.current,\n                          data.dashboard.kpis.lastMonth.callVolume.current\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisMonth.agreements.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4\" />\n                        Agreements\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total agreements sent this month</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Agreement_Sent\" within the current month</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisMonth.agreements.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.thisMonth.agreements.current / data.dashboard.kpis.thisMonth.agreements.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.thisMonth.agreements.target}\n                      </p>\n                      <div className=\"mt-1\">\n                        {renderDelta(\n                          data.dashboard.kpis.thisMonth.agreements.current,\n                          data.dashboard.kpis.lastMonth.agreements.current\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisMonth.listsOut.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        Lists Out\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total partner lists sent this month</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Partner_List_Sent\" within the current month</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisMonth.listsOut.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.thisMonth.listsOut.current / data.dashboard.kpis.thisMonth.listsOut.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.thisMonth.listsOut.target}\n                      </p>\n                      <div className=\"mt-1\">\n                        {renderDelta(\n                          data.dashboard.kpis.thisMonth.listsOut.current,\n                          data.dashboard.kpis.lastMonth.listsOut.current\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.thisMonth.conversionRate.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Target className=\"h-4 w-4\" />\n                        Conversion Rate\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Conversion rate from calls to sales this month</p>\n                            <p><strong>How it's calculated:</strong> (Sales this month / Calls this month) × 100</p>\n                            <p><strong>Target levels:</strong> Excellent: 25%+, Good: 18%+, Needs Attention: 12%+, Critical: Below 12%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.thisMonth.conversionRate.current}%</div>\n                      <Progress\n                        value={(data.dashboard.kpis.thisMonth.conversionRate.current / data.dashboard.kpis.thisMonth.conversionRate.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.thisMonth.conversionRate.target}%\n                      </p>\n                      <div className=\"mt-1\">\n                        {renderDelta(\n                          data.dashboard.kpis.thisMonth.conversionRate.current,\n                          data.dashboard.kpis.lastMonth.conversionRate.current,\n                          '%'\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n\n              {/* Last Month Row */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 text-purple-600\">Last Month</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastMonth.callVolume.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        Call Volume\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total completed calls last month</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Call_Completed\" within last month</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastMonth.callVolume.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.lastMonth.callVolume.current / data.dashboard.kpis.lastMonth.callVolume.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.lastMonth.callVolume.target}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastMonth.agreements.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4\" />\n                        Agreements\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total agreements sent last month</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Agreement_Sent\" within last month</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastMonth.agreements.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.lastMonth.agreements.current / data.dashboard.kpis.lastMonth.agreements.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.lastMonth.agreements.target}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastMonth.listsOut.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        Lists Out\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Total partner lists sent last month</p>\n                            <p><strong>How it's calculated:</strong> Count of activity logs with type \"Partner_List_Sent\" within last month</p>\n                            <p><strong>Target levels:</strong> Excellent: 125%+ of target, Good: 100%+ of target, Needs Attention: 50%+ of target, Critical: Below 50%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastMonth.listsOut.current}</div>\n                      <Progress\n                        value={(data.dashboard.kpis.lastMonth.listsOut.current / data.dashboard.kpis.lastMonth.listsOut.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.lastMonth.listsOut.target}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={`border-2 ${getStatusColor(data.dashboard.kpis.lastMonth.conversionRate.status)}`}>\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                        <Target className=\"h-4 w-4\" />\n                        Conversion Rate\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            <p><strong>What it measures:</strong> Conversion rate from calls to sales last month</p>\n                            <p><strong>How it's calculated:</strong> (Sales last month / Calls last month) × 100</p>\n                            <p><strong>Target levels:</strong> Excellent: 25%+, Good: 18%+, Needs Attention: 12%+, Critical: Below 12%</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\">{data.dashboard.kpis.lastMonth.conversionRate.current}%</div>\n                      <Progress\n                        value={(data.dashboard.kpis.lastMonth.conversionRate.current / data.dashboard.kpis.lastMonth.conversionRate.target) * 100}\n                        className=\"mt-2\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {data.dashboard.kpis.lastMonth.conversionRate.target}%\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Trend Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n            {/* Weekly Calls */}\n            <Card className=\"shadow-none border\">\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  Weekly Call Volume\n                  <Tooltip>\n                    <TooltipTrigger>\n                      <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                    </TooltipTrigger>\n                    <TooltipContent className=\"max-w-xs\">\n                      <p><strong>What it shows:</strong> Call volume trends over the last 4 weeks</p>\n                      <p><strong>Data source:</strong> Activity logs with type \"Call_Completed\" grouped by week</p>\n                      <p><strong>Purpose:</strong> Track call volume consistency and identify patterns</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </CardTitle>\n                <CardDescription>Last 4 weeks</CardDescription>\n              </CardHeader>\n              <CardContent style={{ width: '100%', height: 250 }}>\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={data.dashboard.trends.weeklyCallVolume} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n                    <Line type=\"monotone\" dataKey=\"calls\" stroke=\"#3b82f6\" strokeWidth={2} />\n                    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n                    <XAxis dataKey=\"week\" />\n                    <YAxis />\n                    <RechartsTooltip />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Monthly Agreements */}\n            <Card className=\"shadow-none border\">\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  Monthly Agreements\n                  <Tooltip>\n                    <TooltipTrigger>\n                      <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                    </TooltipTrigger>\n                    <TooltipContent className=\"max-w-xs\">\n                      <p><strong>What it shows:</strong> Agreement volume trends over the last 4 months</p>\n                      <p><strong>Data source:</strong> Activity logs with type \"Agreement_Sent\" grouped by month</p>\n                      <p><strong>Purpose:</strong> Track agreement generation consistency and growth</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </CardTitle>\n                <CardDescription>Last 4 months</CardDescription>\n              </CardHeader>\n              <CardContent style={{ width: '100%', height: 250 }}>\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={data.dashboard.trends.monthlyAgreements}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <RechartsTooltip />\n                    <Bar dataKey=\"agreements\" fill=\"#10b981\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Quarterly Lists Out */}\n            <Card className=\"shadow-none border\">\n              <CardHeader>\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  Quarterly Lists Out\n                  <Tooltip>\n                    <TooltipTrigger>\n                      <HelpCircle className=\"h-4 w-4 text-muted-foreground hover:text-foreground\" />\n                    </TooltipTrigger>\n                    <TooltipContent className=\"max-w-xs\">\n                      <p><strong>What it shows:</strong> Lists sent and conversions by quarter</p>\n                      <p><strong>Data source:</strong> Activity logs with type \"Partner_List_Sent\" and pipeline sales data</p>\n                      <p><strong>Purpose:</strong> Track list performance and conversion rates over time</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </CardTitle>\n                <CardDescription>Current vs Previous</CardDescription>\n              </CardHeader>\n              <CardContent style={{ width: '100%', height: 250 }}>\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={data.dashboard.trends.quarterlyListsOut}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"quarter\" />\n                    <YAxis />\n                    <RechartsTooltip />\n                    <Legend />\n                    <Bar dataKey=\"lists\" fill=\"#6366f1\" name=\"Lists\" />\n                    <Bar dataKey=\"conversions\" fill=\"#f97316\" name=\"Conversions\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n          {data.dashboard.criticalActions.length > 0 && (\n            <Card className=\"border-white/20 dark:border-white/10 bg-white/70 dark:bg-white/[0.06] backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-red-800 flex items-center gap-2\">\n                  <AlertCircle className=\"h-5 w-5\" />\n                  Critical Actions Required\n                  <Tooltip>\n                    <TooltipTrigger>\n                      <HelpCircle className=\"h-4 w-4 text-red-400 hover:text-red-600\" />\n                    </TooltipTrigger>\n                    <TooltipContent className=\"max-w-xs\">\n                      <p><strong>What it shows:</strong> Priority actions that need immediate attention</p>\n                      <p><strong>Categories:</strong> Calls, Agreements, Lists, Team performance</p>\n                      <p><strong>Priority levels:</strong> Urgent (immediate), High (this week), Medium (this month)</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {data.dashboard.criticalActions.slice(0, 3).map((action: any, index: number) => (\n                    <div key={index} className=\"flex items-start gap-3\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{action.action}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {action.deadline && `Deadline: ${action.deadline}`}\n                          {action.metric && ` • Count: ${action.metric}`}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </>\n      )}\n    </div>\n    </>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\sales-performance\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3247,3250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3247,3250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'agreementData' is assigned a value but never used.","line":126,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3313,3316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3313,3316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3383,3386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3383,3386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAllReportingData'. Either include it or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAllReportingData, selectedBDR, selectedPeriod]","fix":{"range":[3705,3734],"text":"[fetchAllReportingData, selectedBDR, selectedPeriod]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Navbar } from '@/components/ui/navbar';\r\nimport { \r\n  Phone, \r\n  FileText, \r\n  Users, \r\n  TrendingUp, \r\n  TrendingDown, \r\n  AlertCircle, \r\n  CheckCircle, \r\n  Clock,\r\n  Target,\r\n  DollarSign,\r\n  Calendar,\r\n  BarChart3,\r\n  PieChart,\r\n  Activity,\r\n  Zap\r\n} from 'lucide-react';\r\n\r\ninterface KPI {\r\n  current: number;\r\n  target: number;\r\n  trend: 'up' | 'down' | 'stable';\r\n  status: 'excellent' | 'good' | 'needs_attention' | 'critical';\r\n}\r\n\r\ninterface ExecutiveDashboard {\r\n  kpis: {\r\n    steadyCallVolume: KPI;\r\n    agreementRate: KPI;\r\n    listsOut: KPI;\r\n    overallConversion: KPI;\r\n  };\r\n  teamPerformance: {\r\n    totalBDRs: number;\r\n    activeBDRs: number;\r\n    topPerformers: string[];\r\n    needsSupport: string[];\r\n    benchmarkMetrics: {\r\n      avgCallsPerWeek: number;\r\n      avgAgreementsPerMonth: number;\r\n      avgListsPerMonth: number;\r\n      teamConversionRate: number;\r\n    };\r\n  };\r\n  pipelineHealth: {\r\n    upcomingCalls: {\r\n      nextWeek: number;\r\n      next2Weeks: number;\r\n      total: number;\r\n    };\r\n    pendingAgreements: {\r\n      proposalsAwaitingResponse: number;\r\n      agreementsAwaitingLists: number;\r\n      overduePartnerLists: number;\r\n    };\r\n    activeListsOut: {\r\n      total: number;\r\n      smallLists: number;\r\n      mediumLists: number;\r\n      largeLists: number;\r\n      averageListSize: number;\r\n    };\r\n    conversionFunnel: {\r\n      callsBooked: number;\r\n      callsConducted: number;\r\n      proposalsSent: number;\r\n      agreementsSigned: number;\r\n      listsSent: number;\r\n      salesGenerated: number;\r\n    };\r\n  };\r\n  trends: {\r\n    weeklyCallVolume: Array<{\r\n      week: string;\r\n      calls: number;\r\n      target: number;\r\n      variance: number;\r\n    }>;\r\n    monthlyAgreements: Array<{\r\n      month: string;\r\n      agreements: number;\r\n      target: number;\r\n      variance: number;\r\n    }>;\r\n  };\r\n  criticalActions: Array<{\r\n    priority: 'urgent' | 'high' | 'medium';\r\n    category: string;\r\n    action: string;\r\n    assignedTo?: string;\r\n    metric?: number;\r\n    deadline?: string;\r\n  }>;\r\n  financialSummary: {\r\n    monthlyRevenue: number;\r\n    quarterlyRevenue: number;\r\n    revenuePerBDR: number;\r\n    revenuePerCall: number;\r\n    revenuePerList: number;\r\n    forecastAccuracy: number;\r\n  };\r\n  predictions: {\r\n    expectedCallsNextWeek: number;\r\n    expectedAgreementsNextMonth: number;\r\n    expectedRevenueNextQuarter: number;\r\n    riskFactors: string[];\r\n    opportunities: string[];\r\n  };\r\n}\r\n\r\nexport default function SalesPerformancePage() {\r\n  const [dashboardData, setDashboardData] = useState<ExecutiveDashboard | null>(null);\r\n  const [callVolumeData, setCallVolumeData] = useState<any>(null);\r\n  const [agreementData, setAgreementData] = useState<any>(null);\r\n  const [partnerListData, setPartnerListData] = useState<any>(null);\r\n  const [selectedBDR, setSelectedBDR] = useState<string>('all');\r\n  const [selectedPeriod, setSelectedPeriod] = useState<string>('current');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchAllReportingData();\r\n  }, [selectedBDR, selectedPeriod]);\r\n\r\n  const fetchAllReportingData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const bdrParam = selectedBDR !== 'all' ? `?bdr=${selectedBDR}` : '';\r\n      const periodParam = selectedPeriod !== 'current' ? `?period=${selectedPeriod}` : '';\r\n      \r\n      const [dashboardRes, callVolumeRes, agreementRes, partnerListRes] = await Promise.all([\r\n        fetch(`/api/reporting/executive-dashboard${periodParam}`),\r\n        fetch(`/api/reporting/call-volume${bdrParam}`),\r\n        fetch(`/api/reporting/agreement-tracking${bdrParam}`),\r\n        fetch(`/api/reporting/partner-list-analytics${bdrParam}`)\r\n      ]);\r\n\r\n      if (!dashboardRes.ok || !callVolumeRes.ok || !agreementRes.ok || !partnerListRes.ok) {\r\n        throw new Error('Failed to fetch reporting data');\r\n      }\r\n\r\n      const [dashboard, callVolume, agreement, partnerList] = await Promise.all([\r\n        dashboardRes.json(),\r\n        callVolumeRes.json(),\r\n        agreementRes.json(),\r\n        partnerListRes.json()\r\n      ]);\r\n\r\n      setDashboardData(dashboard.dashboard);\r\n      setCallVolumeData(callVolume);\r\n      setAgreementData(agreement);\r\n      setPartnerListData(partnerList);\r\n    } catch (err) {\r\n      console.error('Error fetching reporting data:', err);\r\n      setError('Failed to load reporting data. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'excellent': return 'text-green-600 bg-green-50 border-green-200';\r\n      case 'good': return 'text-blue-600 bg-blue-50 border-blue-200';\r\n      case 'needs_attention': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\r\n      case 'critical': return 'text-red-600 bg-red-50 border-red-200';\r\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getTrendIcon = (trend: string) => {\r\n    switch (trend) {\r\n      case 'up': return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\r\n      case 'down': return <TrendingDown className=\"h-4 w-4 text-red-600\" />;\r\n      default: return <Activity className=\"h-4 w-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'bg-red-100 text-red-800 border-red-300';\r\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-300';\r\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300';\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-300';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px]\">\r\n        <div className=\"text-center\">\r\n          <Activity className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\r\n          <p>Loading comprehensive sales performance data...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || !dashboardData) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px]\">\r\n        <div className=\"text-center\">\r\n          <AlertCircle className=\"h-8 w-8 text-red-500 mx-auto mb-4\" />\r\n          <p className=\"text-red-600\">{error || 'Failed to load dashboard data'}</p>\r\n          <Button onClick={fetchAllReportingData} className=\"mt-4\">\r\n            Retry\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"container mx-auto p-6 space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Sales Performance Dashboard</h1>\r\n          <p className=\"text-gray-600 mt-1\">Comprehensive view of call volume, agreements, and partner list performance</p>\r\n        </div>\r\n        \r\n        <div className=\"flex gap-4\">\r\n          <Select value={selectedBDR} onValueChange={setSelectedBDR}>\r\n            <SelectTrigger className=\"w-48\">\r\n              <SelectValue placeholder=\"Select BDR\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">All BDRs</SelectItem>\r\n              {dashboardData.teamPerformance.topPerformers.map(bdr => (\r\n                <SelectItem key={bdr} value={bdr}>{bdr}</SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n          \r\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\r\n            <SelectTrigger className=\"w-36\">\r\n              <SelectValue placeholder=\"Period\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"current\">Current</SelectItem>\r\n              <SelectItem value=\"historical\">Historical</SelectItem>\r\n              <SelectItem value=\"forecast\">Forecast</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Key Performance Indicators */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        {/* Call Volume KPI */}\r\n        <Card className={`border-2 ${getStatusColor(dashboardData.kpis.steadyCallVolume.status)}`}>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n              <Phone className=\"h-4 w-4\" />\r\n              Call Volume (This Week)\r\n              {getTrendIcon(dashboardData.kpis.steadyCallVolume.trend)}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{dashboardData.kpis.steadyCallVolume.current}</div>\r\n            <Progress \r\n              value={(dashboardData.kpis.steadyCallVolume.current / dashboardData.kpis.steadyCallVolume.target) * 100} \r\n              className=\"mt-2\" \r\n            />\r\n            <p className=\"text-xs text-gray-600 mt-1\">\r\n              Target: {dashboardData.kpis.steadyCallVolume.target}\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Agreements KPI */}\r\n        <Card className={`border-2 ${getStatusColor(dashboardData.kpis.agreementRate.status)}`}>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n              <FileText className=\"h-4 w-4\" />\r\n              Agreements (This Month)\r\n              {getTrendIcon(dashboardData.kpis.agreementRate.trend)}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{dashboardData.kpis.agreementRate.current}</div>\r\n            <Progress \r\n              value={(dashboardData.kpis.agreementRate.current / dashboardData.kpis.agreementRate.target) * 100} \r\n              className=\"mt-2\" \r\n            />\r\n            <p className=\"text-xs text-gray-600 mt-1\">\r\n              Target: {dashboardData.kpis.agreementRate.target}\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Lists Out KPI */}\r\n        <Card className={`border-2 ${getStatusColor(dashboardData.kpis.listsOut.status)}`}>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n              <Users className=\"h-4 w-4\" />\r\n              Lists Out (This Month)\r\n              {getTrendIcon(dashboardData.kpis.listsOut.trend)}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{dashboardData.kpis.listsOut.current}</div>\r\n            <Progress \r\n              value={(dashboardData.kpis.listsOut.current / dashboardData.kpis.listsOut.target) * 100} \r\n              className=\"mt-2\" \r\n            />\r\n            <p className=\"text-xs text-gray-600 mt-1\">\r\n              Target: {dashboardData.kpis.listsOut.target}\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Overall Conversion KPI */}\r\n        <Card className={`border-2 ${getStatusColor(dashboardData.kpis.overallConversion.status)}`}>\r\n          <CardHeader className=\"pb-2\">\r\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\r\n              <Target className=\"h-4 w-4\" />\r\n              Conversion Rate\r\n              {getTrendIcon(dashboardData.kpis.overallConversion.trend)}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{dashboardData.kpis.overallConversion.current}%</div>\r\n            <Progress \r\n              value={(dashboardData.kpis.overallConversion.current / dashboardData.kpis.overallConversion.target) * 100} \r\n              className=\"mt-2\" \r\n            />\r\n            <p className=\"text-xs text-gray-600 mt-1\">\r\n              Target: {dashboardData.kpis.overallConversion.target}%\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Critical Actions */}\r\n      {dashboardData.criticalActions.length > 0 && (\r\n        <Card className=\"border-red-200 bg-red-50\">\r\n          <CardHeader>\r\n            <CardTitle className=\"text-red-800 flex items-center gap-2\">\r\n              <AlertCircle className=\"h-5 w-5\" />\r\n              Critical Actions Required\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {dashboardData.criticalActions.slice(0, 3).map((action, index) => (\r\n                <div key={index} className=\"flex items-start gap-3\">\r\n                  <Badge className={`${getPriorityColor(action.priority)} text-xs`}>\r\n                    {action.priority.toUpperCase()}\r\n                  </Badge>\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"font-medium\">{action.action}</p>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      {action.deadline && `Deadline: ${action.deadline}`}\r\n                      {action.metric && ` • Count: ${action.metric}`}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Main Tabs */}\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\r\n        <TabsList className=\"grid w-full grid-cols-5\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"calls\">Call Volume</TabsTrigger>\r\n          <TabsTrigger value=\"agreements\">Agreements</TabsTrigger>\r\n          <TabsTrigger value=\"lists\">Partner Lists</TabsTrigger>\r\n          <TabsTrigger value=\"team\">Team Performance</TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* Overview Tab */}\r\n        <TabsContent value=\"overview\" className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Pipeline Health */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <BarChart3 className=\"h-5 w-5\" />\r\n                  Pipeline Health\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span>Upcoming Calls (Next Week)</span>\r\n                  <Badge variant=\"outline\">{dashboardData.pipelineHealth.upcomingCalls.nextWeek}</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span>Active Lists Out</span>\r\n                  <Badge variant=\"outline\">{dashboardData.pipelineHealth.activeListsOut.total}</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span>Overdue Partner Lists</span>\r\n                  <Badge className={dashboardData.pipelineHealth.pendingAgreements.overduePartnerLists > 0 ? \"bg-red-100 text-red-800\" : \"\"}>\r\n                    {dashboardData.pipelineHealth.pendingAgreements.overduePartnerLists}\r\n                  </Badge>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span>Average List Size</span>\r\n                  <Badge variant=\"outline\">{dashboardData.pipelineHealth.activeListsOut.averageListSize}</Badge>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Financial Summary */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <DollarSign className=\"h-5 w-5\" />\r\n                  Financial Summary\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span>Monthly Revenue</span>\r\n                  <Badge variant=\"outline\">£{dashboardData.financialSummary.monthlyRevenue.toLocaleString()}</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span>Revenue per BDR</span>\r\n                  <Badge variant=\"outline\">£{dashboardData.financialSummary.revenuePerBDR.toLocaleString()}</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span>Revenue per Call</span>\r\n                  <Badge variant=\"outline\">£{dashboardData.financialSummary.revenuePerCall.toLocaleString()}</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between items-center\">\r\n                  <span>Revenue per List</span>\r\n                  <Badge variant=\"outline\">£{dashboardData.financialSummary.revenuePerList.toLocaleString()}</Badge>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Conversion Funnel */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <span>Conversion Funnel</span>\r\n                  <CardDescription className=\"mt-1\">Track leads through each stage of the sales process</CardDescription>\r\n                </div>\r\n                <Link href=\"/finance\">\r\n                  <Button variant=\"outline\" className=\"flex items-center gap-2\">\r\n                    <DollarSign className=\"h-4 w-4\" />\r\n                    Finance Overview\r\n                  </Button>\r\n                </Link>\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-blue-600\">{dashboardData.pipelineHealth.conversionFunnel.callsBooked}</div>\r\n                  <div className=\"text-sm text-gray-600\">Calls Booked</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-green-600\">{dashboardData.pipelineHealth.conversionFunnel.callsConducted}</div>\r\n                  <div className=\"text-sm text-gray-600\">Calls Conducted</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-yellow-600\">{dashboardData.pipelineHealth.conversionFunnel.proposalsSent}</div>\r\n                  <div className=\"text-sm text-gray-600\">Proposals Sent</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-orange-600\">{dashboardData.pipelineHealth.conversionFunnel.agreementsSigned}</div>\r\n                  <div className=\"text-sm text-gray-600\">Agreements</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-purple-600\">{dashboardData.pipelineHealth.conversionFunnel.listsSent}</div>\r\n                  <div className=\"text-sm text-gray-600\">Lists Sent</div>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <div className=\"text-2xl font-bold text-green-700\">{dashboardData.pipelineHealth.conversionFunnel.salesGenerated}</div>\r\n                  <div className=\"text-sm text-gray-600\">Sales</div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Predictions */}\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Zap className=\"h-5 w-5\" />\r\n                  Predictions\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"flex justify-between\">\r\n                  <span>Expected Calls Next Week</span>\r\n                  <Badge variant=\"outline\">{dashboardData.predictions.expectedCallsNextWeek}</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Expected Agreements Next Month</span>\r\n                  <Badge variant=\"outline\">{dashboardData.predictions.expectedAgreementsNextMonth}</Badge>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span>Expected Revenue Next Quarter</span>\r\n                  <Badge variant=\"outline\">£{dashboardData.predictions.expectedRevenueNextQuarter.toLocaleString()}</Badge>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Insights & Opportunities</CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                {dashboardData.predictions.opportunities.length > 0 && (\r\n                  <div>\r\n                    <h4 className=\"font-medium text-green-700 mb-2\">Opportunities</h4>\r\n                    {dashboardData.predictions.opportunities.slice(0, 2).map((opportunity, index) => (\r\n                      <p key={index} className=\"text-sm text-green-600\">• {opportunity}</p>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                {dashboardData.predictions.riskFactors.length > 0 && (\r\n                  <div>\r\n                    <h4 className=\"font-medium text-red-700 mb-2\">Risk Factors</h4>\r\n                    {dashboardData.predictions.riskFactors.slice(0, 2).map((risk, index) => (\r\n                      <p key={index} className=\"text-sm text-red-600\">• {risk}</p>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        {/* Call Volume Tab */}\r\n        <TabsContent value=\"calls\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Call Volume Analysis</CardTitle>\r\n              <CardDescription>Detailed analysis of call scheduling, execution, and conversion</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {callVolumeData ? (\r\n                <div className=\"space-y-6\">\r\n                  {/* Call Volume Trends */}\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium mb-4\">Weekly Call Volume Trend</h3>\r\n                    <div className=\"grid grid-cols-4 gap-4\">\r\n                      {dashboardData.trends.weeklyCallVolume.map((week, index) => (\r\n                        <div key={index} className=\"text-center p-4 border rounded-lg\">\r\n                          <div className=\"text-sm text-gray-600\">{week.week}</div>\r\n                          <div className=\"text-2xl font-bold mt-1\">{week.calls}</div>\r\n                          <div className=\"text-xs text-gray-500\">Target: {week.target}</div>\r\n                          <div className={`text-xs mt-1 ${week.variance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                            {week.variance >= 0 ? '+' : ''}{week.variance}%\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Team Call Performance */}\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium mb-4\">Team Call Performance</h3>\r\n                    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                      <div className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-2xl font-bold text-blue-600\">{callVolumeData.teamSummary?.totalCallsBookedThisWeek || 0}</div>\r\n                        <div className=\"text-sm text-gray-600\">Calls Booked This Week</div>\r\n                      </div>\r\n                      <div className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-2xl font-bold text-green-600\">{callVolumeData.teamSummary?.totalCallsConductedThisWeek || 0}</div>\r\n                        <div className=\"text-sm text-gray-600\">Calls Conducted This Week</div>\r\n                      </div>\r\n                      <div className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-2xl font-bold text-purple-600\">{callVolumeData.teamSummary?.totalUpcomingCalls || 0}</div>\r\n                        <div className=\"text-sm text-gray-600\">Upcoming Calls</div>\r\n                      </div>\r\n                      <div className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-2xl font-bold text-orange-600\">{Math.round(callVolumeData.teamSummary?.teamCallToAgreementRate || 0)}%</div>\r\n                        <div className=\"text-sm text-gray-600\">Call to Agreement Rate</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <p>Loading call volume data...</p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* Agreements Tab */}\r\n        <TabsContent value=\"agreements\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Agreement Tracking</CardTitle>\r\n              <CardDescription>Monitor agreements, partner list deployment, and conversion timing</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-6\">\r\n                {/* Monthly Agreement Trends */}\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Monthly Agreement Trend</h3>\r\n                  <div className=\"grid grid-cols-4 gap-4\">\r\n                    {dashboardData.trends.monthlyAgreements.map((month, index) => (\r\n                      <div key={index} className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-sm text-gray-600\">{month.month}</div>\r\n                        <div className=\"text-2xl font-bold mt-1\">{month.agreements}</div>\r\n                        <div className=\"text-xs text-gray-500\">Target: {month.target}</div>\r\n                        <div className={`text-xs mt-1 ${month.variance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n                          {month.variance >= 0 ? '+' : ''}{month.variance}%\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Agreement Status */}\r\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\r\n                  <div className=\"text-center p-6 border rounded-lg bg-yellow-50\">\r\n                    <div className=\"text-3xl font-bold text-yellow-600\">{dashboardData.pipelineHealth.pendingAgreements.proposalsAwaitingResponse}</div>\r\n                    <div className=\"text-sm text-gray-600 mt-2\">Proposals Awaiting Response</div>\r\n                  </div>\r\n                  <div className=\"text-center p-6 border rounded-lg bg-blue-50\">\r\n                    <div className=\"text-3xl font-bold text-blue-600\">{dashboardData.pipelineHealth.pendingAgreements.agreementsAwaitingLists}</div>\r\n                    <div className=\"text-sm text-gray-600 mt-2\">Agreements Awaiting Lists</div>\r\n                  </div>\r\n                  <div className=\"text-center p-6 border rounded-lg bg-red-50\">\r\n                    <div className=\"text-3xl font-bold text-red-600\">{dashboardData.pipelineHealth.pendingAgreements.overduePartnerLists}</div>\r\n                    <div className=\"text-sm text-gray-600 mt-2\">Overdue Partner Lists</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* Partner Lists Tab */}\r\n        <TabsContent value=\"lists\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Partner List Analytics</CardTitle>\r\n              <CardDescription>Analysis of list sizes, conversion rates, and performance optimization</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-6\">\r\n                {/* List Size Distribution */}\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Active Lists by Size</h3>\r\n                  <div className=\"grid grid-cols-3 gap-4\">\r\n                    <div className=\"text-center p-6 border rounded-lg\">\r\n                      <div className=\"text-3xl font-bold text-green-600\">{dashboardData.pipelineHealth.activeListsOut.smallLists}</div>\r\n                      <div className=\"text-sm text-gray-600 mt-2\">Small Lists (3-8 partners)</div>\r\n                    </div>\r\n                    <div className=\"text-center p-6 border rounded-lg\">\r\n                      <div className=\"text-3xl font-bold text-blue-600\">{dashboardData.pipelineHealth.activeListsOut.mediumLists}</div>\r\n                      <div className=\"text-sm text-gray-600 mt-2\">Medium Lists (9-15 partners)</div>\r\n                    </div>\r\n                    <div className=\"text-center p-6 border rounded-lg\">\r\n                      <div className=\"text-3xl font-bold text-purple-600\">{dashboardData.pipelineHealth.activeListsOut.largeLists}</div>\r\n                      <div className=\"text-sm text-gray-600 mt-2\">Large Lists (16+ partners)</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Partner List Performance */}\r\n                {partnerListData && (\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium mb-4\">Team Partner List Performance</h3>\r\n                    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                      <div className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-2xl font-bold text-blue-600\">{partnerListData.teamSummary?.totalActiveListsOut || 0}</div>\r\n                        <div className=\"text-sm text-gray-600\">Active Lists Out</div>\r\n                      </div>\r\n                      <div className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-2xl font-bold text-green-600\">{Math.round(partnerListData.teamSummary?.teamAverageListSize || 0)}</div>\r\n                        <div className=\"text-sm text-gray-600\">Average List Size</div>\r\n                      </div>\r\n                      <div className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-2xl font-bold text-purple-600\">{Math.round(partnerListData.teamSummary?.teamOverallConversionRate || 0)}%</div>\r\n                        <div className=\"text-sm text-gray-600\">Overall Conversion Rate</div>\r\n                      </div>\r\n                      <div className=\"text-center p-4 border rounded-lg\">\r\n                        <div className=\"text-2xl font-bold text-orange-600\">£{Math.round(partnerListData.teamSummary?.teamTotalRevenue || 0).toLocaleString()}</div>\r\n                        <div className=\"text-sm text-gray-600\">Total Revenue</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* Team Performance Tab */}\r\n        <TabsContent value=\"team\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Team Performance</CardTitle>\r\n              <CardDescription>Individual and team performance metrics and benchmarks</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-6\">\r\n                {/* Team Overview */}\r\n                <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                  <div className=\"text-center p-4 border rounded-lg\">\r\n                    <div className=\"text-2xl font-bold text-blue-600\">{dashboardData.teamPerformance.totalBDRs}</div>\r\n                    <div className=\"text-sm text-gray-600\">Total BDRs</div>\r\n                  </div>\r\n                  <div className=\"text-center p-4 border rounded-lg\">\r\n                    <div className=\"text-2xl font-bold text-green-600\">{dashboardData.teamPerformance.activeBDRs}</div>\r\n                    <div className=\"text-sm text-gray-600\">Active BDRs</div>\r\n                  </div>\r\n                  <div className=\"text-center p-4 border rounded-lg\">\r\n                    <div className=\"text-2xl font-bold text-purple-600\">{dashboardData.teamPerformance.topPerformers.length}</div>\r\n                    <div className=\"text-sm text-gray-600\">Top Performers</div>\r\n                  </div>\r\n                  <div className=\"text-center p-4 border rounded-lg\">\r\n                    <div className=\"text-2xl font-bold text-orange-600\">{dashboardData.teamPerformance.needsSupport.length}</div>\r\n                    <div className=\"text-sm text-gray-600\">Need Support</div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Benchmark Metrics */}\r\n                <div>\r\n                  <h3 className=\"text-lg font-medium mb-4\">Team Benchmarks</h3>\r\n                  <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                    <div className=\"text-center p-4 border rounded-lg\">\r\n                      <div className=\"text-2xl font-bold\">{dashboardData.teamPerformance.benchmarkMetrics.avgCallsPerWeek}</div>\r\n                      <div className=\"text-sm text-gray-600\">Avg Calls/Week</div>\r\n                    </div>\r\n                    <div className=\"text-center p-4 border rounded-lg\">\r\n                      <div className=\"text-2xl font-bold\">{dashboardData.teamPerformance.benchmarkMetrics.avgAgreementsPerMonth}</div>\r\n                      <div className=\"text-sm text-gray-600\">Avg Agreements/Month</div>\r\n                    </div>\r\n                    <div className=\"text-center p-4 border rounded-lg\">\r\n                      <div className=\"text-2xl font-bold\">{dashboardData.teamPerformance.benchmarkMetrics.avgListsPerMonth}</div>\r\n                      <div className=\"text-sm text-gray-600\">Avg Lists/Month</div>\r\n                    </div>\r\n                    <div className=\"text-center p-4 border rounded-lg\">\r\n                      <div className=\"text-2xl font-bold\">{dashboardData.teamPerformance.benchmarkMetrics.teamConversionRate}%</div>\r\n                      <div className=\"text-sm text-gray-600\">Team Conversion Rate</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Top Performers */}\r\n                {dashboardData.teamPerformance.topPerformers.length > 0 && (\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium mb-4\">Top Performers</h3>\r\n                    <div className=\"flex flex-wrap gap-2\">\r\n                      {dashboardData.teamPerformance.topPerformers.map((performer, index) => (\r\n                        <Badge key={index} className=\"bg-green-100 text-green-800\">\r\n                          {performer}\r\n                        </Badge>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Need Support */}\r\n                {dashboardData.teamPerformance.needsSupport.length > 0 && (\r\n                  <div>\r\n                    <h3 className=\"text-lg font-medium mb-4\">Team Members Needing Support</h3>\r\n                    <div className=\"flex flex-wrap gap-2\">\r\n                      {dashboardData.teamPerformance.needsSupport.map((member, index) => (\r\n                        <Badge key={index} className=\"bg-yellow-100 text-yellow-800\">\r\n                          {member}\r\n                        </Badge>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\reporting\\team\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\team\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1823,1826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1823,1826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getPermissionLevel' is assigned a value but never used.","line":90,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useSession } from 'next-auth/react';\r\nimport { redirect } from 'next/navigation';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  territory?: {\r\n    name: string;\r\n  };\r\n  _count?: {\r\n    leads: number;\r\n    pipelineItems: number;\r\n  };\r\n}\r\n\r\ninterface TeamStats {\r\n  totalLeads: number;\r\n  totalPipeline: number;\r\n  conversionRate: number;\r\n  territoryName: string;\r\n}\r\n\r\nexport default function TeamPage() {\r\n  const { data: session, status } = useSession();\r\n  const [teamMembers, setTeamMembers] = useState<User[]>([]);\r\n  const [teamStats, setTeamStats] = useState<TeamStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // Check if user has team management permissions\r\n  const canViewTeamData = session?.user?.role && ['ADMIN', 'DIRECTOR', 'MANAGER', 'TEAM_LEAD'].includes(session.user.role);\r\n\r\n  useEffect(() => {\r\n    if (status === 'loading') return;\r\n    if (!session) return;\r\n    \r\n    if (!canViewTeamData) {\r\n      redirect('/');\r\n      return;\r\n    }\r\n\r\n    fetchTeamData();\r\n  }, [session, status, canViewTeamData]);\r\n\r\n  const fetchTeamData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch team members (API may return { users } or { data: { users } })\r\n      const teamResponse = await fetch('/api/users?includeStats=true');\r\n      if (teamResponse.ok) {\r\n        const teamData = await teamResponse.json();\r\n        setTeamMembers((teamData?.users || teamData?.data?.users || []) as any);\r\n      }\r\n\r\n      // Fetch team statistics\r\n      const statsResponse = await fetch('/api/reporting/team-stats');\r\n      if (statsResponse.ok) {\r\n        const stats = await statsResponse.json();\r\n        setTeamStats(stats);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching team data:', error);\r\n      setError('Failed to load team data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getRoleBadgeColor = (role: string) => {\r\n    switch (role) {\r\n      case 'ADMIN': return 'bg-red-100 text-red-800';\r\n      case 'DIRECTOR': return 'bg-purple-100 text-purple-800';\r\n      case 'MANAGER': return 'bg-blue-100 text-blue-800';\r\n      case 'TEAM_LEAD': return 'bg-green-100 text-green-800';\r\n      case 'BDR': return 'bg-gray-100 text-gray-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getPermissionLevel = (userRole: string, currentUserRole: string) => {\r\n    const roleHierarchy = ['BDR', 'TEAM_LEAD', 'MANAGER', 'DIRECTOR', 'ADMIN'];\r\n    const currentLevel = roleHierarchy.indexOf(currentUserRole);\r\n    const targetLevel = roleHierarchy.indexOf(userRole);\r\n    return currentLevel >= targetLevel;\r\n  };\r\n\r\n  if (status === 'loading' || loading) {\r\n    return (\r\n      <div className=\"container mx-auto py-8\">\r\n        <div className=\"flex items-center justify-center min-h-[400px]\">\r\n          <div className=\"text-center\">\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n            <p className=\"mt-4 text-gray-600\">Loading team data...</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!canViewTeamData) {\r\n    return null; // Redirect will handle this\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-8 space-y-8\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Team Management</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            Manage your team and view performance across territories\r\n          </p>\r\n        </div>\r\n        <Badge variant=\"outline\" className=\"text-sm\">\r\n          {session?.user?.role} View\r\n        </Badge>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {/* Team Statistics */}\r\n      {teamStats && (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <Card>\r\n            <CardHeader className=\"pb-2\">\r\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Territory</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{teamStats.territoryName}</div>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"pb-2\">\r\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Leads</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{teamStats.totalLeads}</div>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"pb-2\">\r\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Pipeline Items</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{teamStats.totalPipeline}</div>\r\n            </CardContent>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader className=\"pb-2\">\r\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Conversion Rate</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{teamStats.conversionRate}%</div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Team Members */}\r\n      <Tabs defaultValue=\"all\" className=\"w-full\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"all\">All Team Members</TabsTrigger>\r\n          <TabsTrigger value=\"bdr\">BDRs</TabsTrigger>\r\n          <TabsTrigger value=\"leads\">Team Leads</TabsTrigger>\r\n          <TabsTrigger value=\"management\">Management</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"all\" className=\"mt-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Team Overview</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {teamMembers.map((member) => (\r\n                  <div key={member.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center\">\r\n                        <span className=\"text-sm font-medium\">\r\n                          {member.name?.charAt(0) || member.email.charAt(0)}\r\n                        </span>\r\n                      </div>\r\n                      <div>\r\n                        <h3 className=\"font-medium\">{member.name || member.email}</h3>\r\n                        <p className=\"text-sm text-gray-600\">{member.email}</p>\r\n                        {member.territory && (\r\n                          <p className=\"text-xs text-gray-500\">Territory: {member.territory.name}</p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      {member._count && (\r\n                        <div className=\"text-right text-sm\">\r\n                          <div>{member._count.leads} leads</div>\r\n                          <div>{member._count.pipelineItems} pipeline</div>\r\n                        </div>\r\n                      )}\r\n                      <Badge className={getRoleBadgeColor(member.role)}>\r\n                        {member.role}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"bdr\" className=\"mt-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>BDR Performance</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {teamMembers\r\n                  .filter(member => member.role === 'BDR')\r\n                  .map((member) => (\r\n                    <div key={member.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                      <div className=\"flex items-center space-x-4\">\r\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                          <span className=\"text-sm font-medium text-blue-600\">\r\n                            {member.name?.charAt(0) || member.email.charAt(0)}\r\n                          </span>\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium\">{member.name || member.email}</h3>\r\n                          <p className=\"text-sm text-gray-600\">{member.territory?.name}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        {member._count && (\r\n                          <>\r\n                            <div className=\"text-lg font-medium\">{member._count.leads}</div>\r\n                            <div className=\"text-sm text-gray-600\">leads generated</div>\r\n                            <div className=\"text-sm text-gray-600\">{member._count.pipelineItems} in pipeline</div>\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"leads\" className=\"mt-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Team Leadership</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {teamMembers\r\n                  .filter(member => ['TEAM_LEAD', 'MANAGER'].includes(member.role))\r\n                  .map((member) => (\r\n                    <div key={member.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                      <div className=\"flex items-center space-x-4\">\r\n                        <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\r\n                          <span className=\"text-sm font-medium text-green-600\">\r\n                            {member.name?.charAt(0) || member.email.charAt(0)}\r\n                          </span>\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium\">{member.name || member.email}</h3>\r\n                          <p className=\"text-sm text-gray-600\">{member.territory?.name}</p>\r\n                          <Badge className={getRoleBadgeColor(member.role)}>\r\n                            {member.role}\r\n                          </Badge>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"management\" className=\"mt-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Management Team</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {teamMembers\r\n                  .filter(member => ['ADMIN', 'DIRECTOR', 'MANAGER'].includes(member.role))\r\n                  .map((member) => (\r\n                    <div key={member.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                      <div className=\"flex items-center space-x-4\">\r\n                        <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\r\n                          <span className=\"text-sm font-medium text-purple-600\">\r\n                            {member.name?.charAt(0) || member.email.charAt(0)}\r\n                          </span>\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium\">{member.name || member.email}</h3>\r\n                          <p className=\"text-sm text-gray-600\">{member.territory?.name || 'Global'}</p>\r\n                          <Badge className={getRoleBadgeColor(member.role)}>\r\n                            {member.role}\r\n                          </Badge>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      <div className=\"text-center text-sm text-gray-500 border-t pt-4\">\r\n        <p>Role-based access: You can see data based on your {session?.user?.role} permissions</p>\r\n        <p>Territory: {session?.user?.territoryName || 'Global'}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\templates\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\app\\templates\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":10,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":10,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":10,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":13,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setType' is assigned a value but never used.","line":75,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIncludeArchived' is assigned a value but never used.","line":77,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":45},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'templates' logical expression could make the dependencies of useMemo Hook (at line 124) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'templates' in its own useMemo() Hook.","line":84,"column":9,"nodeType":"VariableDeclarator","endLine":84,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4287,4290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4287,4290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5019,5022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5019,5022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5593,5596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5593,5596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { toast } from 'sonner';\r\nimport { Copy, Plus, Search, X, Tag, Folder } from 'lucide-react';\r\nimport RichTextEditor from '@/components/ui/rich-text-editor';\r\nimport { sanitizeEmailHtml, htmlToPlainText } from '@/lib/html';\r\n\r\ntype TemplateItem = {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  type: string;\r\n  tags: string[];\r\n  isArchived: boolean;\r\n  categoryId?: string | null;\r\n  updatedAt: string;\r\n  category?: { id: string; name: string } | null;\r\n};\r\n\r\ntype TemplatesResponse = {\r\n  items: TemplateItem[];\r\n  total: number;\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n};\r\n\r\ntype Category = { id: string; name: string; description?: string | null; sortOrder: number; templateCount?: number };\r\n\r\nfunction getBaseUrl() {\r\n  if (typeof window !== 'undefined') return '';\r\n  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;\r\n  if (process.env.RENDER_INTERNAL_HOSTNAME) return `http://${process.env.RENDER_INTERNAL_HOSTNAME}:${process.env.PORT}`;\r\n  return `http://localhost:${process.env.PORT ?? 3000}`;\r\n}\r\n\r\nfunction useTemplates(params: { search?: string; type?: string; categoryId?: string | null; includeArchived?: boolean }) {\r\n  const searchParams = new URLSearchParams();\r\n  if (params.search) searchParams.set('search', params.search);\r\n  if (params.type) searchParams.set('type', params.type);\r\n  if (params.categoryId) searchParams.set('categoryId', params.categoryId);\r\n  if (params.includeArchived) searchParams.set('includeArchived', '1');\r\n  return useQuery({\r\n    queryKey: ['templates', params],\r\n    queryFn: async (): Promise<TemplatesResponse> => {\r\n      const res = await fetch(`${getBaseUrl()}/api/templates?${searchParams.toString()}`);\r\n      if (!res.ok) throw new Error('Failed to load templates');\r\n      return res.json();\r\n    },\r\n  });\r\n}\r\n\r\nfunction useCategories() {\r\n  return useQuery({\r\n    queryKey: ['templateCategories'],\r\n    queryFn: async (): Promise<{ categories: Category[] }> => {\r\n      const res = await fetch(`${getBaseUrl()}/api/templates/categories`);\r\n      if (!res.ok) throw new Error('Failed to load categories');\r\n      return res.json();\r\n    },\r\n  });\r\n}\r\n\r\nexport default function TemplatesPage() {\r\n  const [search, setSearch] = useState('');\r\n  const [type, setType] = useState<string | undefined>();\r\n  const [categoryId, setCategoryId] = useState<string | undefined>();\r\n  const [includeArchived, setIncludeArchived] = useState(false);\r\n  const [selected, setSelected] = useState<TemplateItem | null>(null);\r\n  const [editing, setEditing] = useState<TemplateItem | null>(null);\r\n  const [createOpen, setCreateOpen] = useState(false);\r\n\r\n  const { data, isLoading } = useTemplates({ search, type, categoryId: categoryId || undefined, includeArchived });\r\n  const { data: cats } = useCategories();\r\n  const templates = data?.items || [];\r\n  const categories = cats?.categories || [];\r\n\r\n  const queryClient = useQueryClient();\r\n  const createMutation = useMutation({\r\n    mutationFn: async (payload: { title: string; content: string; type?: string; tags?: string[]; categoryId?: string | null }) => {\r\n      const res = await fetch(`${getBaseUrl()}/api/templates`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });\r\n      if (!res.ok) throw new Error((await res.json()).error || 'Failed to create template');\r\n      return res.json();\r\n    },\r\n    onSuccess: () => { toast.success('Template created'); queryClient.invalidateQueries({ queryKey: ['templates'] }); queryClient.invalidateQueries({ queryKey: ['templateCategories'] }); setCreateOpen(false); },\r\n    onError: (e: any) => toast.error(e?.message || 'Failed to create template')\r\n  });\r\n  const updateMutation = useMutation({\r\n    mutationFn: async (payload: { id: string; data: Partial<TemplateItem> }) => {\r\n      const res = await fetch(`${getBaseUrl()}/api/templates/${payload.id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload.data) });\r\n      if (!res.ok) throw new Error((await res.json()).error || 'Failed to update template');\r\n      return res.json();\r\n    },\r\n    onSuccess: (tpl) => { toast.success('Template updated'); setEditing(null); queryClient.invalidateQueries({ queryKey: ['templates'] }); queryClient.invalidateQueries({ queryKey: ['template', tpl.id] }); },\r\n    onError: (e: any) => toast.error(e?.message || 'Failed to update template')\r\n  });\r\n  const deleteMutation = useMutation({\r\n    mutationFn: async (id: string) => {\r\n      const res = await fetch(`${getBaseUrl()}/api/templates/${id}`, { method: 'DELETE' });\r\n      if (!res.ok) throw new Error((await res.json()).error || 'Failed to delete template');\r\n    },\r\n    onSuccess: () => { toast.success('Template deleted'); setSelected(null); queryClient.invalidateQueries({ queryKey: ['templates'] }); queryClient.invalidateQueries({ queryKey: ['templateCategories'] }); },\r\n    onError: (e: any) => toast.error(e?.message || 'Failed to delete template')\r\n  });\r\n\r\n  const [newTitle, setNewTitle] = useState('');\r\n  const [newType, setNewType] = useState('GENERAL');\r\n  const [newCategory, setNewCategory] = useState<string | null>(null);\r\n  const [newTags, setNewTags] = useState<string>('');\r\n  const [newContent, setNewContent] = useState('');\r\n\r\n  const filteredByCategory = useMemo(() => {\r\n    if (!categoryId) return templates;\r\n    return templates.filter(t => t.categoryId === categoryId);\r\n  }, [templates, categoryId]);\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-12 gap-6\">\r\n      <div className=\"md:col-span-3 space-y-4\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <span>Templates</span>\r\n              <Dialog open={createOpen} onOpenChange={setCreateOpen}>\r\n                <DialogTrigger asChild>\r\n                  <Button size=\"sm\"><Plus className=\"h-4 w-4 mr-2\" /> New</Button>\r\n                </DialogTrigger>\r\n                <DialogContent className=\"max-w-2xl\">\r\n                  <DialogHeader>\r\n                    <DialogTitle>Create Template</DialogTitle>\r\n                  </DialogHeader>\r\n                   <div className=\"space-y-3\">\r\n                    <Input placeholder=\"Title\" value={newTitle} onChange={e => setNewTitle(e.target.value)} />\r\n                    <div className=\"grid grid-cols-2 gap-2\">\r\n                      <Input placeholder=\"Type (e.g. LINKEDIN_INTRO)\" value={newType} onChange={e => setNewType(e.target.value)} />\r\n                      <Input placeholder=\"Category ID (optional)\" value={newCategory ?? ''} onChange={e => setNewCategory(e.target.value || null)} />\r\n                    </div>\r\n                    <Input placeholder=\"Tags (comma separated)\" value={newTags} onChange={e => setNewTags(e.target.value)} />\r\n                      <div className=\"max-h-[60vh] overflow-auto\">\r\n                        <RichTextEditor value={newContent} onChange={setNewContent} placeholder=\"Write or paste formatted content here…\" heightClassName=\"min-h-[240px]\" />\r\n                      </div>\r\n                    <div className=\"flex justify-end gap-2\">\r\n                      <Button variant=\"outline\" onClick={() => setCreateOpen(false)}>Cancel</Button>\r\n                       <Button onClick={() => createMutation.mutate({ title: newTitle, content: sanitizeEmailHtml(newContent), type: newType, tags: newTags.split(',').map(s => s.trim()).filter(Boolean), categoryId: newCategory })} disabled={createMutation.isPending}>Create</Button>\r\n                    </div>\r\n                  </div>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </CardTitle>\r\n            <CardDescription>Knowledgebase for BDR outreach</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex items-center gap-2 mb-3\">\r\n              <Input placeholder=\"Search templates\" value={search} onChange={e => setSearch(e.target.value)} />\r\n              <Button variant=\"outline\" size=\"icon\"><Search className=\"h-4 w-4\" /></Button>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              {categories.map(c => (\r\n                <button key={c.id} className={`w-full flex items-center justify-between rounded-md px-3 py-2 text-left hover:bg-muted ${categoryId === c.id ? 'bg-muted' : ''}`} onClick={() => setCategoryId(categoryId === c.id ? undefined : c.id)}>\r\n                  <span className=\"flex items-center gap-2\"><Folder className=\"h-4 w-4\" /> {c.name}</span>\r\n                  <Badge variant=\"secondary\">{c.templateCount ?? 0}</Badge>\r\n                </button>\r\n              ))}\r\n              {categories.length === 0 && <div className=\"text-sm text-muted-foreground\">No categories yet.</div>}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <div className=\"md:col-span-9 space-y-4\">\r\n        {isLoading ? (\r\n          <div className=\"text-sm text-muted-foreground\">Loading templates…</div>\r\n        ) : (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {filteredByCategory.map(t => (\r\n              <Card key={t.id} className={t.isArchived ? 'opacity-60' : ''}>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center justify-between\">\r\n                    <span>{t.title}</span>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {t.tags?.slice(0,3).map(tag => <Badge key={tag} variant=\"outline\" className=\"text-xs\"><Tag className=\"h-3 w-3 mr-1\" />{tag}</Badge>)}\r\n                    </div>\r\n                  </CardTitle>\r\n                  <CardDescription className=\"flex items-center gap-2 text-xs\">\r\n                    <span>{t.type}</span>\r\n                    {t.category?.name && <span>• {t.category.name}</span>}\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"prose prose-sm dark:prose-invert max-w-none line-clamp-6 mb-3\" dangerouslySetInnerHTML={{ __html: sanitizeEmailHtml(t.content) }} />\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Button size=\"sm\" variant=\"secondary\" onClick={async () => { await navigator.clipboard.writeText(t.content); toast.success('Copied HTML'); }}><Copy className=\"h-4 w-4 mr-2\" /> Copy HTML</Button>\r\n                    <Button size=\"sm\" variant=\"outline\" onClick={async () => { await navigator.clipboard.writeText(htmlToPlainText(t.content)); toast.success('Copied Text'); }}>Copy Text</Button>\r\n                    <Button size=\"sm\" onClick={() => setSelected(t)}>Open</Button>\r\n                    <Button size=\"sm\" variant=\"outline\" onClick={() => setEditing(t)}>Edit</Button>\r\n                    <Button size=\"sm\" variant=\"destructive\" onClick={() => deleteMutation.mutate(t.id)}>Delete</Button>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n            {filteredByCategory.length === 0 && (\r\n              <Card className=\"col-span-2\">\r\n                <CardHeader>\r\n                  <CardTitle>No templates found</CardTitle>\r\n                  <CardDescription>Create your first template to get started.</CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Button onClick={() => setCreateOpen(true)}><Plus className=\"h-4 w-4 mr-2\" /> New template</Button>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* View dialog */}\r\n      <Dialog open={!!selected} onOpenChange={(o) => !o && setSelected(null)}>\r\n          <DialogContent className=\"max-w-3xl\">\r\n          <DialogHeader>\r\n            <DialogTitle>{selected?.title}</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-3\">\r\n            <div className=\"text-xs text-muted-foreground\">{selected?.type}{selected?.category?.name ? ` • ${selected.category.name}` : ''}</div>\r\n              <div className=\"rounded-md bg-background p-3 text-sm max-h-[60vh] overflow-auto prose prose-sm dark:prose-invert max-w-none\" dangerouslySetInnerHTML={{ __html: sanitizeEmailHtml(selected?.content || '') }} />\r\n            <div className=\"flex justify-end gap-2\">\r\n              <Button variant=\"outline\" onClick={() => setSelected(null)}>Close</Button>\r\n                <Button onClick={async () => { if (selected) { await navigator.clipboard.writeText(selected.content); toast.success('Copied HTML'); } }}><Copy className=\"h-4 w-4 mr-2\" /> Copy HTML</Button>\r\n                <Button variant=\"secondary\" onClick={async () => { if (selected) { await navigator.clipboard.writeText(htmlToPlainText(selected.content)); toast.success('Copied Text'); } }}>Copy Text</Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Edit dialog */}\r\n      <Dialog open={!!editing} onOpenChange={(o) => !o && setEditing(null)}>\r\n          <DialogContent className=\"max-w-3xl\">\r\n          <DialogHeader>\r\n            <DialogTitle>Edit Template</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-3\">\r\n            <Input placeholder=\"Title\" value={editing?.title || ''} onChange={e => setEditing(editing ? { ...editing, title: e.target.value } : editing)} />\r\n            <Input placeholder=\"Type\" value={editing?.type || ''} onChange={e => setEditing(editing ? { ...editing, type: e.target.value } : editing)} />\r\n            <Input placeholder=\"Category ID (optional)\" value={editing?.categoryId || ''} onChange={e => setEditing(editing ? { ...editing, categoryId: e.target.value } : editing)} />\r\n            <Input placeholder=\"Tags (comma separated)\" value={editing?.tags?.join(', ') || ''} onChange={e => setEditing(editing ? { ...editing, tags: e.target.value.split(',').map(s => s.trim()).filter(Boolean) } : editing)} />\r\n              <RichTextEditor value={editing?.content || ''} onChange={(html) => setEditing(editing ? { ...editing, content: html } : editing)} />\r\n            <div className=\"flex items-center justify-between\">\r\n              <label className=\"text-sm flex items-center gap-2\">\r\n                <input type=\"checkbox\" checked={!!editing?.isArchived} onChange={e => setEditing(editing ? { ...editing, isArchived: e.target.checked } : editing)} /> Archived\r\n              </label>\r\n              <div className=\"flex gap-2\">\r\n                <Button variant=\"outline\" onClick={() => setEditing(null)}>Cancel</Button>\r\n                  {editing && <Button onClick={() => updateMutation.mutate({ id: editing.id, data: { title: editing.title, content: sanitizeEmailHtml(editing.content), type: editing.type, tags: editing.tags, categoryId: editing.categoryId, isArchived: editing.isArchived } })}>Save</Button>}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\bdr-kpi-dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":209,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7534,7559],"text":"You&apos;re currently ranked #"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7534,7559],"text":"You&lsquo;re currently ranked #"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7534,7559],"text":"You&#39;re currently ranked #"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7534,7559],"text":"You&rsquo;re currently ranked #"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":227,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8418,8431],"text":"Today&apos;s Calls"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8418,8431],"text":"Today&lsquo;s Calls"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8418,8431],"text":"Today&#39;s Calls"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8418,8431],"text":"Today&rsquo;s Calls"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":402,"column":22,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16019,16069],"text":"\r\n                Today&apos;s Schedule\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16019,16069],"text":"\r\n                Today&lsquo;s Schedule\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16019,16069],"text":"\r\n                Today&#39;s Schedule\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16019,16069],"text":"\r\n                Today&rsquo;s Schedule\r\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useSession } from 'next-auth/react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Phone, Target, CheckCircle, TrendingUp, Calendar, Award,\r\n  Clock, Users, BarChart3, Activity, Star, Zap\r\n} from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { useState, useEffect } from 'react';\r\n\r\ninterface BDRMetrics {\r\n  callsToday: number;\r\n  callsTarget: number;\r\n  callsWeek: number;\r\n  callsWeekTarget: number;\r\n  agreementsToday: number;\r\n  agreementsWeek: number;\r\n  agreementsWeekTarget: number;\r\n  conversionRate: number;\r\n  avgCallDuration: number;\r\n  leadsAssigned: number;\r\n  leadsContacted: number;\r\n  followUpsScheduled: number;\r\n  weeklyGoalProgress: number;\r\n  monthlyRank: number;\r\n  totalBDRs: number;\r\n  streak: number;\r\n  lastWeekPerformance: number;\r\n}\r\n\r\ninterface Achievement {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: string;\r\n  earned: boolean;\r\n  earnedDate?: string;\r\n}\r\n\r\ninterface RecentActivity {\r\n  id: string;\r\n  type: 'call' | 'agreement' | 'lead' | 'follow-up';\r\n  description: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport function BDRKPIDashboard() {\r\n  const { data: session } = useSession();\r\n  const [metrics, setMetrics] = useState<BDRMetrics | null>(null);\r\n  const [achievements, setAchievements] = useState<Achievement[]>([]);\r\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const userName = session?.user?.name?.split(' ')[0] || 'User';\r\n\r\n  useEffect(() => {\r\n    const fetchBDRMetrics = async () => {\r\n      if (!session?.user || session.user.role !== 'BDR') return;\r\n      \r\n      try {\r\n        // Fetch real data from the executive dashboard API (BDR users get their own data automatically)\r\n        const response = await fetch('/api/reporting/executive-dashboard');\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch BDR metrics');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        const dashboard = data.dashboard;\r\n        \r\n        if (!dashboard) {\r\n          throw new Error('No dashboard data received');\r\n        }\r\n        \r\n        // Transform executive dashboard data to BDR metrics format\r\n        const bdrMetrics: BDRMetrics = {\r\n          callsToday: dashboard.kpis?.thisWeek?.callVolume?.current || 0,\r\n          callsTarget: dashboard.kpis?.thisWeek?.callVolume?.target || 50,\r\n          callsWeek: dashboard.kpis?.thisWeek?.callVolume?.current || 0,\r\n          callsWeekTarget: dashboard.kpis?.thisWeek?.callVolume?.target || 250,\r\n          agreementsToday: dashboard.kpis?.thisWeek?.agreements?.current || 0,\r\n          agreementsWeek: dashboard.kpis?.thisWeek?.agreements?.current || 0,\r\n          agreementsWeekTarget: dashboard.kpis?.thisWeek?.agreements?.target || 10,\r\n          conversionRate: dashboard.kpis?.thisMonth?.conversionRate?.current || 0,\r\n          avgCallDuration: 4.2, // This would need to be calculated from actual call data\r\n          leadsAssigned: 45, // This would need to come from the leads API\r\n          leadsContacted: 38, // This would need to be calculated from lead activity\r\n          followUpsScheduled: 12, // This would need to be calculated from pipeline upcoming calls\r\n          weeklyGoalProgress: dashboard.kpis?.thisWeek?.callVolume?.current && dashboard.kpis?.thisWeek?.callVolume?.target \r\n            ? Math.round((dashboard.kpis.thisWeek.callVolume.current / dashboard.kpis.thisWeek.callVolume.target) * 100)\r\n            : 0,\r\n          monthlyRank: 1, // This would need team comparison data\r\n          totalBDRs: dashboard.bdrList?.length || 1,\r\n          streak: 5, // This would need historical daily performance data\r\n          lastWeekPerformance: 95 // This would need to be calculated from previous week data\r\n        };\r\n\r\n        const mockAchievements: Achievement[] = [\r\n          {\r\n            id: '1',\r\n            title: 'Call Champion',\r\n            description: '50+ calls in a single day',\r\n            icon: '📞',\r\n            earned: true,\r\n            earnedDate: '2025-08-05'\r\n          },\r\n          {\r\n            id: '2',\r\n            title: 'Agreement Master',\r\n            description: '10 agreements in one week',\r\n            icon: '🎯',\r\n            earned: false\r\n          },\r\n          {\r\n            id: '3',\r\n            title: 'Hot Streak',\r\n            description: '5 consecutive days meeting targets',\r\n            icon: '🔥',\r\n            earned: true,\r\n            earnedDate: '2025-08-07'\r\n          },\r\n          {\r\n            id: '4',\r\n            title: 'Top Performer',\r\n            description: 'Rank #1 for the month',\r\n            icon: '👑',\r\n            earned: false\r\n          }\r\n        ];\r\n\r\n        const mockActivity: RecentActivity[] = [\r\n          {\r\n            id: '1',\r\n            type: 'agreement',\r\n            description: 'Closed agreement with TechStart Inc.',\r\n            timestamp: '2 hours ago'\r\n          },\r\n          {\r\n            id: '2',\r\n            type: 'call',\r\n            description: 'Completed call with DataFlow Solutions',\r\n            timestamp: '3 hours ago'\r\n          },\r\n          {\r\n            id: '3',\r\n            type: 'follow-up',\r\n            description: 'Scheduled follow-up with CloudTech Ltd.',\r\n            timestamp: '4 hours ago'\r\n          },\r\n          {\r\n            id: '4',\r\n            type: 'lead',\r\n            description: 'New lead assigned: Enterprise Corp',\r\n            timestamp: '6 hours ago'\r\n          }\r\n        ];\r\n\r\n        setMetrics(bdrMetrics);\r\n        setAchievements(mockAchievements);\r\n        setRecentActivity(mockActivity);\r\n      } catch (error) {\r\n        console.error('Error fetching BDR metrics:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBDRMetrics();\r\n  }, [session]);\r\n\r\n  if (!session || session.user?.role !== 'BDR') {\r\n    return null;\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <Card key={i} className=\"animate-pulse\">\r\n              <CardHeader className=\"pb-2\">\r\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\r\n                <div className=\"h-3 bg-muted rounded w-full\"></div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const callProgress = metrics ? (metrics.callsToday / metrics.callsTarget) * 100 : 0;\r\n  const weeklyCallProgress = metrics ? (metrics.callsWeek / metrics.callsWeekTarget) * 100 : 0;\r\n  const agreementProgress = metrics ? (metrics.agreementsWeek / metrics.agreementsWeekTarget) * 100 : 0;\r\n  const leadContactProgress = metrics ? (metrics.leadsContacted / metrics.leadsAssigned) * 100 : 0;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Welcome Section with Performance Summary */}\r\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">Good morning, {userName}! 👋</h2>\r\n          <p className=\"text-muted-foreground\">You're currently ranked #{metrics?.monthlyRank} out of {metrics?.totalBDRs} BDRs this month</p>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Badge variant=\"outline\" className=\"gap-1\">\r\n            <Zap className=\"h-3 w-3\" />\r\n            {metrics?.streak} day streak\r\n          </Badge>\r\n          <Badge variant=\"default\" className=\"gap-1\">\r\n            <Star className=\"h-3 w-3\" />\r\n            {metrics?.weeklyGoalProgress}% weekly goal\r\n          </Badge>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Primary KPI Cards */}\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <Card className={`${callProgress >= 100 ? 'border-green-500 bg-green-50 dark:bg-green-950' : ''}`}>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Today's Calls</CardTitle>\r\n            <Phone className={`h-4 w-4 ${callProgress >= 100 ? 'text-green-600' : 'text-muted-foreground'}`} />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{metrics?.callsToday}</div>\r\n            <div className=\"text-xs text-muted-foreground mb-2\">\r\n              Target: {metrics?.callsTarget} ({metrics?.callsTarget - (metrics?.callsToday || 0)} remaining)\r\n            </div>\r\n            <Progress value={callProgress} className=\"h-2\" />\r\n            {callProgress >= 100 && (\r\n              <p className=\"text-xs text-green-600 mt-1\">🎉 Target achieved!</p>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card className={`${agreementProgress >= 100 ? 'border-blue-500 bg-blue-50 dark:bg-blue-950' : ''}`}>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Weekly Agreements</CardTitle>\r\n            <CheckCircle className={`h-4 w-4 ${agreementProgress >= 100 ? 'text-blue-600' : 'text-muted-foreground'}`} />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{metrics?.agreementsWeek}</div>\r\n            <div className=\"text-xs text-muted-foreground mb-2\">\r\n              Target: {metrics?.agreementsWeekTarget}\r\n            </div>\r\n            <Progress value={agreementProgress} className=\"h-2\" />\r\n            <p className=\"text-xs text-muted-foreground mt-1\">\r\n              {metrics?.agreementsToday} agreements today\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\r\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{metrics?.conversionRate}%</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              {metrics?.lastWeekPerformance ? \r\n                `${metrics.conversionRate - 6.8 > 0 ? '+' : ''}${(metrics.conversionRate - 6.8).toFixed(1)}% vs last week` :\r\n                'vs last week'\r\n              }\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Lead Progress</CardTitle>\r\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{metrics?.leadsContacted}</div>\r\n            <div className=\"text-xs text-muted-foreground mb-2\">\r\n              of {metrics?.leadsAssigned} leads assigned\r\n            </div>\r\n            <Progress value={leadContactProgress} className=\"h-2\" />\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Detailed Metrics */}\r\n      <div className=\"grid gap-4 md:grid-cols-3\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-5 w-5\" />\r\n              Performance Details\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-3\">\r\n            <div className=\"flex justify-between text-sm\">\r\n              <span>Weekly Calls:</span>\r\n              <span className=\"font-medium\">{metrics?.callsWeek}/{metrics?.callsWeekTarget}</span>\r\n            </div>\r\n            <Progress value={weeklyCallProgress} className=\"h-1\" />\r\n            \r\n            <div className=\"flex justify-between text-sm\">\r\n              <span>Avg. Call Duration:</span>\r\n              <span className=\"font-medium\">{metrics?.avgCallDuration} min</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between text-sm\">\r\n              <span>Follow-ups Scheduled:</span>\r\n              <span className=\"font-medium\">{metrics?.followUpsScheduled}</span>\r\n            </div>\r\n            \r\n            <div className=\"pt-2\">\r\n              <Link href=\"/reporting?view=personal\" className=\"w-full\">\r\n                <Button variant=\"outline\" className=\"w-full\">View Detailed Analytics</Button>\r\n              </Link>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Award className=\"h-5 w-5\" />\r\n              Achievements\r\n            </CardTitle>\r\n            <CardDescription>Your recent accomplishments</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-2\">\r\n              {achievements.slice(0, 3).map((achievement) => (\r\n                <div key={achievement.id} className=\"flex items-center gap-3 p-2 rounded-lg border\">\r\n                  <span className=\"text-lg\">{achievement.icon}</span>\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"text-sm font-medium\">{achievement.title}</p>\r\n                    <p className=\"text-xs text-muted-foreground\">{achievement.description}</p>\r\n                  </div>\r\n                  {achievement.earned ? (\r\n                    <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n                  ) : (\r\n                    <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <Button variant=\"ghost\" className=\"w-full mt-2\">\r\n              View All Achievements\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Activity className=\"h-5 w-5\" />\r\n              Recent Activity\r\n            </CardTitle>\r\n            <CardDescription>Your latest actions</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {recentActivity.slice(0, 4).map((activity) => (\r\n                <div key={activity.id} className=\"flex items-start gap-3\">\r\n                  <div className={`mt-1 h-2 w-2 rounded-full ${\r\n                    activity.type === 'agreement' ? 'bg-green-500' :\r\n                    activity.type === 'call' ? 'bg-blue-500' :\r\n                    activity.type === 'lead' ? 'bg-purple-500' :\r\n                    'bg-orange-500'\r\n                  }`} />\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"text-sm\">{activity.description}</p>\r\n                    <p className=\"text-xs text-muted-foreground\">{activity.timestamp}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Quick Actions */}\r\n      <div className=\"grid gap-4 md:grid-cols-4\">\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <Link href=\"/leads?filter=mine\" className=\"w-full\">\r\n              <Button className=\"w-full\">\r\n                <Users className=\"h-4 w-4 mr-2\" />\r\n                My Leads\r\n              </Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <Link href=\"/pipeline?view=today\" className=\"w-full\">\r\n              <Button className=\"w-full\">\r\n                <Calendar className=\"h-4 w-4 mr-2\" />\r\n                Today's Schedule\r\n              </Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <Link href=\"/pipeline?action=new\" className=\"w-full\">\r\n              <Button className=\"w-full\">\r\n                <Phone className=\"h-4 w-4 mr-2\" />\r\n                Log New Call\r\n              </Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <Link href=\"/reporting?view=personal\" className=\"w-full\">\r\n              <Button variant=\"outline\" className=\"w-full\">\r\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\r\n                My Analytics\r\n              </Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\bdr-performance-comparison.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Star' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LineChart' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Line' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":117,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'performanceStatus' is assigned a value but never used.","line":538,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":538,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":656,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":656,"endColumn":78},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":699,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":699,"endColumn":78}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { \r\n  BarChart3, \r\n  TrendingUp, \r\n  Users, \r\n  Target, \r\n  Filter, \r\n  Download,\r\n  RefreshCw,\r\n  Award,\r\n  Phone,\r\n  Mail,\r\n  Calendar,\r\n  Star,\r\n  Zap,\r\n  TrendingDown\r\n} from 'lucide-react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  RadarChart,\r\n  PolarGrid,\r\n  PolarAngleAxis,\r\n  PolarRadiusAxis,\r\n  Radar\r\n} from 'recharts';\r\n\r\ninterface BDRPerformance {\r\n  id: string;\r\n  name: string;\r\n  callsToday: number;\r\n  callsWeek: number;\r\n  callsMonth: number;\r\n  agreementsToday: number;\r\n  agreementsWeek: number;\r\n  agreementsMonth: number;\r\n  conversionRate: number;\r\n  avgCallDuration: number;\r\n  leadsAssigned: number;\r\n  leadsContacted: number;\r\n  followUpsScheduled: number;\r\n  weeklyGoalProgress: number;\r\n  monthlyRank: number;\r\n  streak: number;\r\n  lastWeekPerformance: number;\r\n  territory: string;\r\n  experience: string;\r\n  status: 'active' | 'inactive' | 'on_leave';\r\n}\r\n\r\ninterface FilterOptions {\r\n  dateRange: string;\r\n  territory: string;\r\n  experience: string;\r\n  status: string;\r\n  minCalls: number;\r\n  maxCalls: number;\r\n  minConversion: number;\r\n  maxConversion: number;\r\n  sortBy: string;\r\n  sortOrder: 'asc' | 'desc';\r\n}\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\r\n\r\nconst fetchBDRPerformanceData = async (filters: FilterOptions) => {\r\n  const params = new URLSearchParams();\r\n  Object.entries(filters).forEach(([key, value]) => {\r\n    if (value) params.append(key, value.toString());\r\n  });\r\n\r\n  const response = await fetch(`/api/reporting/advanced/bdr-performance?${params.toString()}`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch BDR performance data');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport function BDRPerformanceComparison() {\r\n  const [filters, setFilters] = useState<FilterOptions>({\r\n    dateRange: 'week',\r\n    territory: 'all',\r\n    experience: 'all',\r\n    status: 'all',\r\n    minCalls: 0,\r\n    maxCalls: 1000,\r\n    minConversion: 0,\r\n    maxConversion: 100,\r\n    sortBy: 'weeklyGoalProgress',\r\n    sortOrder: 'desc'\r\n  });\r\n\r\n  const [selectedBDRs, setSelectedBDRs] = useState<string[]>([]);\r\n  const [comparisonMode, setComparisonMode] = useState<'all' | 'selected'>('all');\r\n\r\n  const { data: bdrData, isLoading, error, refetch } = useQuery({\r\n    queryKey: ['bdrPerformance', filters],\r\n    queryFn: () => fetchBDRPerformanceData(filters),\r\n  });\r\n\r\n  const handleBDRSelection = (bdrId: string) => {\r\n    if (selectedBDRs.includes(bdrId)) {\r\n      setSelectedBDRs(selectedBDRs.filter(id => id !== bdrId));\r\n    } else {\r\n      setSelectedBDRs([...selectedBDRs, bdrId]);\r\n    }\r\n  };\r\n\r\n  const getPerformanceStatus = (performance: number) => {\r\n    if (performance >= 90) return { status: 'excellent', color: 'text-green-600', bg: 'bg-green-50' };\r\n    if (performance >= 75) return { status: 'good', color: 'text-blue-600', bg: 'bg-blue-50' };\r\n    if (performance >= 60) return { status: 'average', color: 'text-yellow-600', bg: 'bg-yellow-50' };\r\n    return { status: 'needs_improvement', color: 'text-red-600', bg: 'bg-red-50' };\r\n  };\r\n\r\n  const getPerformanceTrend = (current: number, previous: number) => {\r\n    const change = current - previous;\r\n    const percentage = previous > 0 ? (change / previous) * 100 : 0;\r\n    \r\n    if (percentage > 5) return { trend: 'up', color: 'text-green-600', icon: TrendingUp };\r\n    if (percentage < -5) return { trend: 'down', color: 'text-red-600', icon: TrendingDown };\r\n    return { trend: 'stable', color: 'text-gray-600', icon: TrendingUp };\r\n  };\r\n\r\n  const exportComparisonData = () => {\r\n    const dataToExport = comparisonMode === 'selected' \r\n      ? bdrData?.filter((bdr: BDRPerformance) => selectedBDRs.includes(bdr.id))\r\n      : bdrData;\r\n\r\n    const csvContent = \"data:text/csv;charset=utf-8,\" + \r\n      \"Name,Territory,Experience,Calls Today,Calls Week,Agreements Today,Agreements Week,Conversion Rate,Avg Call Duration,Weekly Goal Progress,Monthly Rank,Streak\\n\" +\r\n      dataToExport?.map((bdr: BDRPerformance) => \r\n        `${bdr.name},${bdr.territory},${bdr.experience},${bdr.callsToday},${bdr.callsWeek},${bdr.agreementsToday},${bdr.agreementsWeek},${bdr.conversionRate}%,${bdr.avgCallDuration}min,${bdr.weeklyGoalProgress}%,${bdr.monthlyRank},${bdr.streak}`\r\n      ).join('\\n');\r\n    \r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement('a');\r\n    link.setAttribute('href', encodedUri);\r\n    link.setAttribute('download', 'bdr_performance_comparison.csv');\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const displayData = comparisonMode === 'selected' \r\n    ? bdrData?.filter((bdr: BDRPerformance) => selectedBDRs.includes(bdr.id))\r\n    : bdrData;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Filters */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Filter className=\"h-5 w-5\" />\r\n            Advanced Filters\r\n          </CardTitle>\r\n          <CardDescription>Filter and compare BDR performance data</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Date Range</label>\r\n              <Select value={filters.dateRange} onValueChange={(value) => setFilters({...filters, dateRange: value})}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"today\">Today</SelectItem>\r\n                  <SelectItem value=\"week\">This Week</SelectItem>\r\n                  <SelectItem value=\"month\">This Month</SelectItem>\r\n                  <SelectItem value=\"quarter\">This Quarter</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Territory</label>\r\n              <Select value={filters.territory} onValueChange={(value) => setFilters({...filters, territory: value})}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Territories</SelectItem>\r\n                  <SelectItem value=\"north\">North</SelectItem>\r\n                  <SelectItem value=\"south\">South</SelectItem>\r\n                  <SelectItem value=\"east\">East</SelectItem>\r\n                  <SelectItem value=\"west\">West</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Experience Level</label>\r\n              <Select value={filters.experience} onValueChange={(value) => setFilters({...filters, experience: value})}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Levels</SelectItem>\r\n                  <SelectItem value=\"junior\">Junior (0-1 year)</SelectItem>\r\n                  <SelectItem value=\"mid\">Mid-level (1-3 years)</SelectItem>\r\n                  <SelectItem value=\"senior\">Senior (3+ years)</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Status</label>\r\n              <Select value={filters.status} onValueChange={(value) => setFilters({...filters, status: value})}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Status</SelectItem>\r\n                  <SelectItem value=\"active\">Active</SelectItem>\r\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\r\n                  <SelectItem value=\"on_leave\">On Leave</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mt-4\">\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Min Calls</label>\r\n              <Input\r\n                type=\"number\"\r\n                value={filters.minCalls}\r\n                onChange={(e) => setFilters({...filters, minCalls: parseInt(e.target.value) || 0})}\r\n                placeholder=\"0\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Max Calls</label>\r\n              <Input\r\n                type=\"number\"\r\n                value={filters.maxCalls}\r\n                onChange={(e) => setFilters({...filters, maxCalls: parseInt(e.target.value) || 1000})}\r\n                placeholder=\"1000\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Min Conversion %</label>\r\n              <Input\r\n                type=\"number\"\r\n                value={filters.minConversion}\r\n                onChange={(e) => setFilters({...filters, minConversion: parseInt(e.target.value) || 0})}\r\n                placeholder=\"0\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Max Conversion %</label>\r\n              <Input\r\n                type=\"number\"\r\n                value={filters.maxConversion}\r\n                onChange={(e) => setFilters({...filters, maxConversion: parseInt(e.target.value) || 100})}\r\n                placeholder=\"100\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex items-center justify-between mt-4\">\r\n            <div className=\"flex items-center space-x-4\">\r\n              <Select value={filters.sortBy} onValueChange={(value) => setFilters({...filters, sortBy: value})}>\r\n                <SelectTrigger className=\"w-48\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"weeklyGoalProgress\">Weekly Goal Progress</SelectItem>\r\n                  <SelectItem value=\"callsWeek\">Calls This Week</SelectItem>\r\n                  <SelectItem value=\"agreementsWeek\">Agreements This Week</SelectItem>\r\n                  <SelectItem value=\"conversionRate\">Conversion Rate</SelectItem>\r\n                  <SelectItem value=\"monthlyRank\">Monthly Rank</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <Select value={filters.sortOrder} onValueChange={(value: 'asc' | 'desc') => setFilters({...filters, sortOrder: value})}>\r\n                <SelectTrigger className=\"w-32\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"desc\">Descending</SelectItem>\r\n                  <SelectItem value=\"asc\">Ascending</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => refetch()}\r\n                className=\"flex items-center space-x-2\"\r\n              >\r\n                <RefreshCw className=\"h-4 w-4\" />\r\n                Refresh\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={exportComparisonData}\r\n                className=\"flex items-center space-x-2\"\r\n              >\r\n                <Download className=\"h-4 w-4\" />\r\n                Export\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Comparison Mode Toggle */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <label className=\"text-sm font-medium\">Comparison Mode:</label>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Button\r\n              variant={comparisonMode === 'all' ? 'default' : 'outline'}\r\n              size=\"sm\"\r\n              onClick={() => setComparisonMode('all')}\r\n            >\r\n              All BDRs\r\n            </Button>\r\n            <Button\r\n              variant={comparisonMode === 'selected' ? 'default' : 'outline'}\r\n              size=\"sm\"\r\n              onClick={() => setComparisonMode('selected')}\r\n            >\r\n              Selected BDRs ({selectedBDRs.length})\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        {comparisonMode === 'selected' && selectedBDRs.length === 0 && (\r\n          <p className=\"text-sm text-muted-foreground\">Select BDRs to compare</p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Performance Comparison Charts */}\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\r\n          <TabsTrigger value=\"charts\">Charts</TabsTrigger>\r\n          <TabsTrigger value=\"details\">Details</TabsTrigger>\r\n          <TabsTrigger value=\"rankings\">Rankings</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Performance Comparison Chart */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Performance Comparison</CardTitle>\r\n                <CardDescription>Weekly call volume and agreement rates</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"h-80 flex items-center justify-center\">\r\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                  </div>\r\n                ) : (\r\n                  <ResponsiveContainer width=\"100%\" height={320}>\r\n                    <BarChart data={displayData?.slice(0, 10)}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"name\" />\r\n                      <YAxis />\r\n                      <Tooltip />\r\n                      <Bar dataKey=\"callsWeek\" fill=\"#8884d8\" name=\"Calls\" />\r\n                      <Bar dataKey=\"agreementsWeek\" fill=\"#82ca9d\" name=\"Agreements\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Conversion Rate Analysis */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Conversion Rate Analysis</CardTitle>\r\n                <CardDescription>Call to agreement conversion rates</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"h-80 flex items-center justify-center\">\r\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                  </div>\r\n                ) : (\r\n                  <ResponsiveContainer width=\"100%\" height={320}>\r\n                    <BarChart data={displayData?.slice(0, 10)}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"name\" />\r\n                      <YAxis />\r\n                      <Tooltip />\r\n                      <Bar dataKey=\"conversionRate\" fill=\"#ffc658\" name=\"Conversion Rate %\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"charts\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Performance Distribution */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Performance Distribution</CardTitle>\r\n                <CardDescription>Distribution of BDR performance levels</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"h-80 flex items-center justify-center\">\r\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                  </div>\r\n                ) : (\r\n                  <ResponsiveContainer width=\"100%\" height={320}>\r\n                    <PieChart>\r\n                      <Pie\r\n                        data={[\r\n                          { name: 'Excellent (90%+)', value: displayData?.filter((b: BDRPerformance) => b.weeklyGoalProgress >= 90).length || 0 },\r\n                          { name: 'Good (75-89%)', value: displayData?.filter((b: BDRPerformance) => b.weeklyGoalProgress >= 75 && b.weeklyGoalProgress < 90).length || 0 },\r\n                          { name: 'Average (60-74%)', value: displayData?.filter((b: BDRPerformance) => b.weeklyGoalProgress >= 60 && b.weeklyGoalProgress < 75).length || 0 },\r\n                          { name: 'Needs Improvement (<60%)', value: displayData?.filter((b: BDRPerformance) => b.weeklyGoalProgress < 60).length || 0 }\r\n                        ]}\r\n                        cx=\"50%\"\r\n                        cy=\"50%\"\r\n                        labelLine={false}\r\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                        outerRadius={80}\r\n                        fill=\"#8884d8\"\r\n                        dataKey=\"value\"\r\n                      >\r\n                        {COLORS.map((color, index) => (\r\n                          <Cell key={`cell-${index}`} fill={color} />\r\n                        ))}\r\n                      </Pie>\r\n                      <Tooltip />\r\n                    </PieChart>\r\n                  </ResponsiveContainer>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Territory Performance */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>Territory Performance Analysis</CardTitle>\r\n                <CardDescription>Performance comparison across territories</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"h-80 flex items-center justify-center\">\r\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                  </div>\r\n                ) : (\r\n                  <ResponsiveContainer width=\"100%\" height={320}>\r\n                    <RadarChart data={[\r\n                      { territory: 'North', avgCalls: 45, avgAgreements: 8, avgConversion: 17.8 },\r\n                      { territory: 'South', avgCalls: 52, avgAgreements: 9, avgConversion: 17.3 },\r\n                      { territory: 'East', avgCalls: 38, avgAgreements: 6, avgConversion: 15.8 },\r\n                      { territory: 'West', avgCalls: 41, avgAgreements: 7, avgConversion: 17.1 }\r\n                    ]}>\r\n                      <PolarGrid />\r\n                      <PolarAngleAxis dataKey=\"territory\" />\r\n                      <PolarRadiusAxis />\r\n                      <Radar name=\"Avg Calls\" dataKey=\"avgCalls\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />\r\n                      <Radar name=\"Avg Agreements\" dataKey=\"avgAgreements\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} />\r\n                      <Radar name=\"Avg Conversion %\" dataKey=\"avgConversion\" stroke=\"#ffc658\" fill=\"#ffc658\" fillOpacity={0.6} />\r\n                      <Tooltip />\r\n                    </RadarChart>\r\n                  </ResponsiveContainer>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"details\" className=\"space-y-4\">\r\n          {/* Detailed Performance Table */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Detailed Performance Metrics</CardTitle>\r\n              <CardDescription>Comprehensive BDR performance breakdown</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {isLoading ? (\r\n                <div className=\"flex items-center justify-center h-40\">\r\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n                </div>\r\n              ) : (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={selectedBDRs.length === displayData?.length}\r\n                          onChange={(e) => {\r\n                            if (e.target.checked) {\r\n                              setSelectedBDRs(displayData?.map((b: BDRPerformance) => b.id) || []);\r\n                            } else {\r\n                              setSelectedBDRs([]);\r\n                            }\r\n                          }}\r\n                        />\r\n                      </TableHead>\r\n                      <TableHead>BDR Name</TableHead>\r\n                      <TableHead>Territory</TableHead>\r\n                      <TableHead>Experience</TableHead>\r\n                      <TableHead>Calls Today</TableHead>\r\n                      <TableHead>Calls Week</TableHead>\r\n                      <TableHead>Agreements Today</TableHead>\r\n                      <TableHead>Agreements Week</TableHead>\r\n                      <TableHead>Conversion Rate</TableHead>\r\n                      <TableHead>Avg Call Duration</TableHead>\r\n                      <TableHead>Weekly Goal Progress</TableHead>\r\n                      <TableHead>Monthly Rank</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {displayData?.map((bdr: BDRPerformance) => {\r\n                      const performanceStatus = getPerformanceStatus(bdr.weeklyGoalProgress);\r\n                      const trend = getPerformanceTrend(bdr.weeklyGoalProgress, bdr.lastWeekPerformance);\r\n                      const TrendIcon = trend.icon;\r\n                      \r\n                      return (\r\n                        <TableRow key={bdr.id}>\r\n                          <TableCell>\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              checked={selectedBDRs.includes(bdr.id)}\r\n                              onChange={() => handleBDRSelection(bdr.id)}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell className=\"font-medium\">{bdr.name}</TableCell>\r\n                          <TableCell>{bdr.territory}</TableCell>\r\n                          <TableCell>{bdr.experience}</TableCell>\r\n                          <TableCell>{bdr.callsToday}</TableCell>\r\n                          <TableCell>{bdr.callsWeek}</TableCell>\r\n                          <TableCell>{bdr.agreementsToday}</TableCell>\r\n                          <TableCell>{bdr.agreementsWeek}</TableCell>\r\n                          <TableCell>{bdr.conversionRate}%</TableCell>\r\n                          <TableCell>{bdr.avgCallDuration}min</TableCell>\r\n                          <TableCell>\r\n                            <div className=\"flex items-center space-x-2\">\r\n                              <Progress value={bdr.weeklyGoalProgress} className=\"w-20\" />\r\n                              <span className=\"text-sm\">{bdr.weeklyGoalProgress}%</span>\r\n                              <TrendIcon className={`h-3 w-3 ${trend.color}`} />\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Badge variant=\"outline\">#{bdr.monthlyRank}</Badge>\r\n                          </TableCell>\r\n                          <TableCell>\r\n                            <Badge variant={bdr.status === 'active' ? 'default' : 'secondary'}>\r\n                              {bdr.status}\r\n                            </Badge>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"rankings\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n            {/* Top Performers */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Award className=\"h-5 w-5 text-yellow-500\" />\r\n                  Top Performers\r\n                </CardTitle>\r\n                <CardDescription>BDRs with highest weekly goal progress</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"space-y-4\">\r\n                    {[1, 2, 3].map((i) => (\r\n                      <div key={i} className=\"animate-pulse\">\r\n                        <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\r\n                        <div className=\"h-3 bg-muted rounded w-1/2\"></div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {displayData?.slice(0, 5).map((bdr: BDRPerformance, index: number) => (\r\n                      <div key={bdr.id} className=\"flex items-center justify-between p-3 rounded-lg border\">\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${\r\n                            index === 0 ? 'bg-yellow-100 text-yellow-800' :\r\n                            index === 1 ? 'bg-gray-100 text-gray-800' :\r\n                            index === 2 ? 'bg-orange-100 text-orange-800' :\r\n                            'bg-blue-100 text-blue-800'\r\n                          }`}>\r\n                            {index + 1}\r\n                          </div>\r\n                          <div>\r\n                            <p className=\"font-medium\">{bdr.name}</p>\r\n                            <p className=\"text-sm text-muted-foreground\">{bdr.territory}</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-right\">\r\n                          <p className=\"font-bold\">{bdr.weeklyGoalProgress}%</p>\r\n                          <p className=\"text-sm text-muted-foreground\">{bdr.callsWeek} calls</p>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Most Improved */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <TrendingUp className=\"h-5 w-5 text-green-500\" />\r\n                  Most Improved\r\n                </CardTitle>\r\n                <CardDescription>BDRs with biggest performance gains</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"space-y-4\">\r\n                    {[1, 2, 3].map((i) => (\r\n                      <div key={i} className=\"animate-pulse\">\r\n                        <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\r\n                        <div className=\"h-3 bg-muted rounded w-1/2\"></div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {displayData?.slice(0, 5).map((bdr: BDRPerformance, index: number) => (\r\n                      <div key={bdr.id} className=\"flex items-center justify-between p-3 rounded-lg border\">\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <div className=\"w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold bg-green-100 text-green-800\">\r\n                            +{Math.floor(Math.random() * 15) + 5}%\r\n                          </div>\r\n                          <div>\r\n                            <p className=\"font-medium\">{bdr.name}</p>\r\n                            <p className=\"text-sm text-muted-foreground\">{bdr.territory}</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-right\">\r\n                          <p className=\"font-bold text-green-600\">+{Math.floor(Math.random() * 15) + 5}%</p>\r\n                          <p className=\"text-sm text-muted-foreground\">vs last week</p>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Streak Leaders */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center space-x-2\">\r\n                  <Zap className=\"h-5 w-5 text-orange-500\" />\r\n                  Streak Leaders\r\n                </CardTitle>\r\n                <CardDescription>BDRs with longest performance streaks</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"space-y-4\">\r\n                    {[1, 2, 3].map((i) => (\r\n                      <div key={i} className=\"animate-pulse\">\r\n                        <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\r\n                        <div className=\"h-3 bg-muted rounded w-1/2\"></div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-4\">\r\n                    {displayData?.slice(0, 5).map((bdr: BDRPerformance, index: number) => (\r\n                      <div key={bdr.id} className=\"flex items-center justify-between p-3 rounded-lg border\">\r\n                        <div className=\"flex items-center space-x-3\">\r\n                          <div className=\"w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold bg-orange-100 text-orange-800\">\r\n                            🔥\r\n                          </div>\r\n                          <div>\r\n                            <p className=\"font-medium\">{bdr.name}</p>\r\n                            <p className=\"text-sm text-muted-foreground\">{bdr.territory}</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-right\">\r\n                          <p className=\"font-bold\">{bdr.streak} days</p>\r\n                          <p className=\"text-sm text-muted-foreground\">streak</p>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\bulk-pipeline-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogDescription' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":46,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { toast } from 'sonner';\r\n\r\ninterface BulkPipelineDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  selectedLeads: { id: number; bdr: string | null }[];\r\n  onConvert: () => Promise<void>;\r\n}\r\n\r\nexport function BulkPipelineDialog({\r\n  isOpen,\r\n  onClose,\r\n  selectedLeads,\r\n  onConvert,\r\n}: BulkPipelineDialogProps) {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // Group leads by BDR\r\n  const leadsByBdr = selectedLeads.reduce<Record<string, number>>((acc, lead) => {\r\n    if (lead.bdr) {\r\n      acc[lead.bdr] = (acc[lead.bdr] || 0) + 1;\r\n    }\r\n    return acc;\r\n  }, {});\r\n\r\n  const unassignedCount = selectedLeads.filter(lead => !lead.bdr).length;\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      setIsSubmitting(true);\r\n      await onConvert();\r\n      toast.success('Leads converted successfully');\r\n      onClose();\r\n    } catch (error) {\r\n      toast.error('Failed to convert leads');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"sm:max-w-[425px]\">\r\n        <DialogHeader>\r\n          <DialogTitle>Convert Leads to Pipeline</DialogTitle>\r\n          <div className=\"text-sm text-muted-foreground\">\r\n            {Object.entries(leadsByBdr).map(([bdr, count]) => (\r\n              <div key={bdr}>\r\n                {count} lead{count > 1 ? 's' : ''} for {bdr}\r\n              </div>\r\n            ))}\r\n            {unassignedCount > 0 && (\r\n              <div className=\"text-red-500\">\r\n                Warning: {unassignedCount} lead{unassignedCount > 1 ? 's' : ''} without BDR assignment\r\n              </div>\r\n            )}\r\n          </div>\r\n        </DialogHeader>\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={handleSubmit} \r\n            disabled={isSubmitting || unassignedCount > 0}\r\n          >\r\n            Convert\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\ChatHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Info' is defined but never used.","line":8,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[683,686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[683,686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6026,6029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6026,6029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8678,8681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8678,8681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useMemo, useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { UserSearchSelect } from './UserSearchSelect';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\r\nimport { Lock, LockOpen, MoreVertical, Users, UserPlus, Settings, Info } from 'lucide-react';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { toast } from 'sonner';\r\n\r\nexport function ChatHeader({ conversation, onChanged }: { conversation: any; onChanged: () => void }) {\r\n  const [name, setName] = useState(conversation?.name || '');\r\n  const [lock, setLock] = useState<boolean>(!!conversation?.isLocked);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const isGroup = !!conversation?.isGroup || (conversation?.members?.length || 0) > 2 || !!name;\r\n  const memberCount = conversation?.members?.length || 0;\r\n\r\n  function getUserInitials(name?: string): string {\r\n    if (!name) return 'U';\r\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\r\n  }\r\n\r\n  async function save() {\r\n    try {\r\n      const res = await fetch(`/api/chat/conversations/${conversation.id}`, { \r\n        method: 'PATCH', \r\n        headers: { 'Content-Type': 'application/json' }, \r\n        body: JSON.stringify({ name: name.trim(), lock }) \r\n      });\r\n      if (res.ok) {\r\n        setIsEditing(false);\r\n        onChanged();\r\n        toast.success('Conversation updated');\r\n      } else {\r\n        toast.error('Failed to update conversation');\r\n      }\r\n    } catch {\r\n      toast.error('Failed to update conversation');\r\n    }\r\n  }\r\n  \r\n  async function addMember(userId: string) {\r\n    if (!userId) return;\r\n    try {\r\n      const res = await fetch(`/api/chat/conversations/${conversation.id}`, { \r\n        method: 'PATCH', \r\n        headers: { 'Content-Type': 'application/json' }, \r\n        body: JSON.stringify({ addMemberIds: [userId] }) \r\n      });\r\n      if (res.ok) { \r\n        onChanged(); \r\n        toast.success('Member added');\r\n      } else {\r\n        toast.error('Failed to add member');\r\n      }\r\n    } catch {\r\n      toast.error('Failed to add member');\r\n    }\r\n  }\r\n  \r\n  async function removeMember(userId: string) {\r\n    try {\r\n      const res = await fetch(`/api/chat/conversations/${conversation.id}`, { \r\n        method: 'PATCH', \r\n        headers: { 'Content-Type': 'application/json' }, \r\n        body: JSON.stringify({ removeMemberIds: [userId] }) \r\n      });\r\n      if (res.ok) {\r\n        onChanged();\r\n        toast.success('Member removed');\r\n      } else {\r\n        toast.error('Failed to remove member');\r\n      }\r\n    } catch {\r\n      toast.error('Failed to remove member');\r\n    }\r\n  }\r\n\r\n  const displayTitle = conversation?.name || (isGroup ? 'Group Chat' : 'Direct Message');\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-4 border-b bg-gradient-to-r from-card to-muted/20 px-6 py-4\">\r\n      {/* Left section - Conversation info */}\r\n      <div className=\"flex items-center gap-4 min-w-0 flex-1\">\r\n        {/* Avatar */}\r\n        <div className=\"relative\">\r\n          <Avatar className=\"h-10 w-10 ring-2 ring-border\">\r\n            <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white font-semibold\">\r\n              {getUserInitials(displayTitle)}\r\n            </AvatarFallback>\r\n          </Avatar>\r\n          {/* Online indicator */}\r\n          <div className=\"absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-green-500 rounded-full border-2 border-background\"></div>\r\n        </div>\r\n\r\n        {/* Title and member count */}\r\n        <div className=\"min-w-0 flex-1\">\r\n          {isEditing ? (\r\n            <div className=\"flex items-center gap-2\">\r\n              <Input \r\n                value={name} \r\n                onChange={(e) => setName(e.target.value)}\r\n                placeholder={isGroup ? 'Enter group name' : 'Enter conversation name'}\r\n                className=\"h-8 text-sm\"\r\n                autoFocus\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') save();\r\n                  if (e.key === 'Escape') { setName(conversation?.name || ''); setIsEditing(false); }\r\n                }}\r\n              />\r\n              <Button size=\"sm\" onClick={save}>Save</Button>\r\n              <Button size=\"sm\" variant=\"ghost\" onClick={() => { setName(conversation?.name || ''); setIsEditing(false); }}>\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-1\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <h1 className=\"font-semibold text-lg truncate\">{displayTitle}</h1>\r\n                {lock && <Lock className=\"h-4 w-4 text-amber-500\" />}\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"icon\" \r\n                  className=\"h-6 w-6 opacity-60 hover:opacity-100\"\r\n                  onClick={() => setIsEditing(true)}\r\n                >\r\n                  <Settings className=\"h-3 w-3\" />\r\n                </Button>\r\n              </div>\r\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Users className=\"h-3 w-3\" />\r\n                  <span>{memberCount} member{memberCount !== 1 ? 's' : ''}</span>\r\n                </div>\r\n                <div className=\"hidden md:block\">\r\n                  {isGroup ? 'Group conversation' : 'Direct message'}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Right section - Actions */}\r\n      <div className=\"flex items-center gap-2\">\r\n        {/* Member avatars preview */}\r\n        <div className=\"hidden lg:flex items-center -space-x-2\">\r\n          {conversation?.members?.slice(0, 3).map((member: any) => (\r\n            <Avatar key={member.userId} className=\"h-8 w-8 border-2 border-background\">\r\n              <AvatarFallback className=\"text-xs bg-gradient-to-br from-gray-500 to-gray-600 text-white\">\r\n                {getUserInitials(member.user?.name)}\r\n              </AvatarFallback>\r\n            </Avatar>\r\n          ))}\r\n          {memberCount > 3 && (\r\n            <div className=\"h-8 w-8 rounded-full bg-muted border-2 border-background flex items-center justify-center\">\r\n              <span className=\"text-xs font-medium\">+{memberCount - 3}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Add member button */}\r\n        <div className=\"hidden md:block w-48\">\r\n          <UserSearchSelect \r\n            onSelect={(u) => addMember(u.id)} \r\n            placeholder=\"Add member...\"\r\n          />\r\n        </div>\r\n\r\n        {/* More actions */}\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"icon\"\r\n              className=\"rounded-full hover:bg-muted\"\r\n              aria-label=\"More options\"\r\n            >\r\n              <MoreVertical className=\"h-4 w-4\" />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\r\n            {/* Conversation settings */}\r\n            <DropdownMenuItem onClick={() => setIsEditing(true)}>\r\n              <Settings className=\"h-4 w-4 mr-2\" />\r\n              Edit conversation\r\n            </DropdownMenuItem>\r\n            \r\n            <DropdownMenuItem onClick={() => { setLock(!lock); save(); }}>\r\n              {lock ? (\r\n                <>\r\n                  <LockOpen className=\"h-4 w-4 mr-2\" />\r\n                  Unlock conversation\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Lock className=\"h-4 w-4 mr-2\" />\r\n                  Lock conversation\r\n                </>\r\n              )}\r\n            </DropdownMenuItem>\r\n\r\n            <DropdownMenuSeparator />\r\n\r\n            {/* Add member on mobile */}\r\n            <div className=\"md:hidden\">\r\n              <DropdownMenuItem>\r\n                <UserPlus className=\"h-4 w-4 mr-2\" />\r\n                Add member\r\n              </DropdownMenuItem>\r\n              <DropdownMenuSeparator />\r\n            </div>\r\n\r\n            {/* Members management */}\r\n            {conversation?.members?.length > 0 && (\r\n              <>\r\n                <div className=\"px-2 py-1.5 text-xs font-medium text-muted-foreground\">\r\n                  Members ({memberCount})\r\n                </div>\r\n                {conversation.members.map((member: any) => (\r\n                  <DropdownMenuItem\r\n                    key={member.userId}\r\n                    onClick={() => removeMember(member.userId)}\r\n                    className=\"text-red-600 focus:text-red-600\"\r\n                  >\r\n                    <div className=\"flex items-center gap-2 w-full\">\r\n                      <Avatar className=\"h-5 w-5\">\r\n                        <AvatarFallback className=\"text-xs bg-gradient-to-br from-gray-500 to-gray-600 text-white\">\r\n                          {getUserInitials(member.user?.name)}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                      <span className=\"flex-1 truncate\">{member.user?.name || member.userId}</span>\r\n                      <span className=\"text-xs opacity-60\">Remove</span>\r\n                    </div>\r\n                  </DropdownMenuItem>\r\n                ))}\r\n              </>\r\n            )}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\ChatSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":4,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[658,661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[658,661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1365,1368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1365,1368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2552,2555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2552,2555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2598,2601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2598,2601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { toast } from 'sonner';\r\nimport { subscribeToUser } from '@/lib/realtime-client';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { MessageCircle } from 'lucide-react';\r\n\r\ntype SidebarConversation = {\r\n  id: string;\r\n  name?: string | null;\r\n  members?: Array<{ user?: { id: string; name?: string | null } }>;\r\n  messages?: Array<any>;\r\n  unreadCount?: number;\r\n};\r\n\r\nexport function ChatSidebar({ activeId, onSelect }: { activeId?: string | null; onSelect: (id: string) => void }) {\r\n  const qc = useQueryClient();\r\n  const [q, setQ] = useState('');\r\n  const [searchResults, setSearchResults] = useState<Array<{ id: string; name?: string; email?: string }>>([]);\r\n  const { data } = useQuery<SidebarConversation[]>({\r\n    queryKey: ['conversations'],\r\n    queryFn: async () => {\r\n      const res = await fetch('/api/chat/conversations');\r\n      if (!res.ok) throw new Error('Failed to load conversations');\r\n      return (await res.json()).conversations as SidebarConversation[];\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    let channel: any | null = null;\r\n    let cancelled = false;\r\n    (async () => {\r\n      try {\r\n        const res = await fetch('/api/auth/session');\r\n        if (!res.ok) return;\r\n        const json = await res.json();\r\n        const userId = json?.user?.id as string | undefined;\r\n        if (cancelled || !userId) return;\r\n        channel = subscribeToUser(userId);\r\n        const handler = () => qc.invalidateQueries({ queryKey: ['conversations'] });\r\n        channel.bind('conversation:updated', handler);\r\n      } catch {}\r\n    })();\r\n    return () => { if (channel) { channel.unbind_all?.(); channel.unsubscribe?.(); } cancelled = true; };\r\n  }, [qc]);\r\n\r\n  // Live user search for starting new DMs\r\n  useEffect(() => {\r\n    let aborted = false;\r\n    (async () => {\r\n      const query = q.trim();\r\n      if (!query) { setSearchResults([]); return; }\r\n      try {\r\n        const url = new URL('/api/users', window.location.origin);\r\n        url.searchParams.set('search', query);\r\n        const res = await fetch(url.toString());\r\n        if (!res.ok) return;\r\n        const json = await res.json();\r\n        if (aborted) return;\r\n        const list = (json?.users || json?.data?.users || []) as any[];\r\n        setSearchResults(list.map((u: any) => ({ id: u.id, name: u.name, email: u.email })));\r\n      } catch {}\r\n    })();\r\n    return () => { aborted = true; };\r\n  }, [q]);\r\n\r\n  async function startDirectMessage(userId: string) {\r\n    try {\r\n      const res = await fetch('/api/chat/conversations', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ memberIds: [userId] }) });\r\n      if (!res.ok) { return; }\r\n      const { conversation } = await res.json();\r\n      setQ('');\r\n      setSearchResults([]);\r\n      onSelect(conversation.id);\r\n      qc.invalidateQueries({ queryKey: ['conversations'] });\r\n    } catch {}\r\n  }\r\n\r\n  function renderInitials(name?: string | null) {\r\n    const text = (name || '').trim();\r\n    if (!text) return 'DM';\r\n    const parts = text.split(/\\s+/).slice(0, 2);\r\n    return parts.map((p) => p[0]?.toUpperCase() || '').join('');\r\n  }\r\n\r\n  function stripHtml(html?: string) {\r\n    if (!html) return '';\r\n    const div = document.createElement('div');\r\n    div.innerHTML = html;\r\n    return (div.textContent || div.innerText || '').trim();\r\n  }\r\n\r\n  function formatLastMessageTime(timestamp?: string) {\r\n    if (!timestamp) return '';\r\n    const date = new Date(timestamp);\r\n    const now = new Date();\r\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n    \r\n    if (diffInMinutes < 1) return 'now';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}m`;\r\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h`;\r\n    return date.toLocaleDateString();\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-full w-full flex-col bg-gradient-to-b from-background to-muted/20\">\r\n      {/* Header */}\r\n      <div className=\"p-4 border-b bg-card/50 backdrop-blur-sm\">\r\n        <h2 className=\"text-lg font-semibold mb-3 text-foreground\">Messages</h2>\r\n        <div className=\"relative\">\r\n          <Input \r\n            value={q} \r\n            onChange={(e)=>setQ(e.target.value)} \r\n            placeholder=\"Search conversations or start new chat...\" \r\n            className=\"rounded-full border-2 focus:border-blue-400 transition-colors pl-4\"\r\n          />\r\n          {q && searchResults.length > 0 && (\r\n            <div className=\"absolute left-0 right-0 z-30 mt-2 rounded-xl border bg-popover shadow-lg overflow-hidden\">\r\n              <div className=\"p-2 text-xs text-muted-foreground font-medium border-b\">Start new conversation</div>\r\n              {searchResults.slice(0,6).map(u => (\r\n                <button \r\n                  key={u.id} \r\n                  className=\"flex items-center gap-3 w-full text-left px-3 py-3 hover:bg-accent transition-colors\" \r\n                  onClick={()=>startDirectMessage(u.id)}\r\n                >\r\n                  <Avatar className=\"h-8 w-8\">\r\n                    <AvatarFallback className=\"text-xs bg-gradient-to-br from-green-500 to-blue-600 text-white\">\r\n                      {renderInitials(u.name)}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                  <div className=\"min-w-0 flex-1\">\r\n                    <div className=\"font-medium truncate\">{u.name || u.email}</div>\r\n                    <div className=\"text-xs text-muted-foreground truncate\">{u.email}</div>\r\n                  </div>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Conversations list */}\r\n      <ScrollArea className=\"flex-1\">\r\n        <div className=\"p-2 space-y-0.5\">\r\n          {data && data.length === 0 ? (\r\n            <div className=\"text-center py-8 px-4\">\r\n              <div className=\"text-muted-foreground text-sm\">\r\n                <MessageCircle className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\r\n                <p className=\"font-medium mb-1\">No conversations yet</p>\r\n                <p className=\"text-xs\">Start a conversation by searching for users above</p>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            data?.map((c) => {\r\n              const last = (c.messages && c.messages[0]) || undefined;\r\n              const title = c.name || 'Direct message';\r\n              const isActive = activeId === c.id;\r\n              const hasUnread = c.unreadCount && c.unreadCount > 0;\r\n              \r\n              return (\r\n                <button\r\n                  key={c.id}\r\n                  className={`\r\n                    group w-full text-left rounded-xl px-3 py-3 transition-all duration-200 relative\r\n                    ${isActive \r\n                      ? 'bg-blue-50 dark:bg-blue-900/30 ring-2 ring-blue-500/20' \r\n                      : 'hover:bg-accent/60'\r\n                    }\r\n                    ${hasUnread ? 'bg-accent/20' : ''}\r\n                  `}\r\n                  onClick={async () => {\r\n                    onSelect(c.id);\r\n                    try {\r\n                      await fetch(`/api/chat/conversations/${c.id}/reads`, { method: 'POST' });\r\n                      qc.invalidateQueries({ queryKey: ['conversations'] });\r\n                    } catch {}\r\n                  }}\r\n                >\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className=\"relative\">\r\n                      <Avatar className={`h-12 w-12 transition-all ${isActive ? 'ring-2 ring-blue-400' : ''}`}>\r\n                        <AvatarFallback className=\"text-sm bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\r\n                          {renderInitials(title)}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                      {/* Online indicator placeholder */}\r\n                      <div className=\"absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-green-500 rounded-full border-2 border-background\"></div>\r\n                    </div>\r\n                    \r\n                    <div className=\"min-w-0 flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <div className={`truncate font-medium leading-tight ${hasUnread ? 'font-semibold' : ''}`}>\r\n                          {title}\r\n                        </div>\r\n                        <div className=\"text-xs text-muted-foreground ml-auto shrink-0\">\r\n                          {formatLastMessageTime(last?.createdAt)}\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className={`truncate text-sm ${hasUnread ? 'text-foreground font-medium' : 'text-muted-foreground'}`}>\r\n                          {stripHtml(last?.content) || 'No messages yet'}\r\n                        </div>\r\n                        {hasUnread && (\r\n                          <span className=\"ml-auto inline-flex items-center justify-center rounded-full bg-blue-500 text-white text-[10px] font-bold px-2 py-0.5 shrink-0\">\r\n                            {c.unreadCount > 9 ? '9+' : c.unreadCount}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </button>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </ScrollArea>\r\n      \r\n      {/* Footer with new chat button */}\r\n      <div className=\"border-t p-4 bg-card/50 backdrop-blur-sm\">\r\n        <Button \r\n          className=\"w-full rounded-full bg-blue-500 hover:bg-blue-600 text-white shadow-md hover:shadow-lg transition-all duration-200\" \r\n          onClick={async()=>{\r\n            const res = await fetch('/api/chat/conversations', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ memberIds: [] }) });\r\n            if (!res.ok) { toast.error('Failed to create conversation'); return; }\r\n            const { conversation } = await res.json();\r\n            onSelect(conversation.id);\r\n            qc.invalidateQueries({ queryKey:['conversations'] });\r\n          }}\r\n        >\r\n          <MessageCircle className=\"h-4 w-4 mr-2\" />\r\n          New Chat\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\ChatWindow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScrollArea' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1351,1354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1351,1354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'conversationId' and 'qc'. Either include them or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [conversationId, data, qc]","fix":{"range":[2420,2426],"text":"[conversationId, data, qc]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2711,2714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2711,2714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":80,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3494,3497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3494,3497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3620,3623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3620,3623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3636,3639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3636,3639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3985,3988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3985,3988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5750,5753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5750,5753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useInfiniteQueryShim\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":135,"column":58,"nodeType":"Identifier","endLine":135,"endColumn":78},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5893,5896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5893,5896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5938,5941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5938,5941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7835,7838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7835,7838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport { subscribeToConversation } from '@/lib/realtime-client';\r\nimport { toast } from 'sonner';\r\nimport { MessageComposer } from './MessageComposer';\r\nimport { MessageBubble } from './MessageBubble';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\n\r\nexport function ChatWindow({ conversationId, currentUserId }: { conversationId: string; currentUserId?: string }) {\r\n  const qc = useQueryClient();\r\n  const viewportRef = useRef<HTMLDivElement | null>(null);\r\n  const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = useInfiniteMessages(conversationId);\r\n  const [typingBy, setTypingBy] = useState<Record<string, number>>({});\r\n\r\n  useEffect(() => {\r\n    const channel = subscribeToConversation(conversationId);\r\n    const handler = () => {\r\n      qc.invalidateQueries({ queryKey: ['messages', conversationId] });\r\n      // Also trigger shim refresh if needed\r\n      if (qc._shimRefresh?.[conversationId]) {\r\n        qc._shimRefresh[conversationId]();\r\n      }\r\n    };\r\n    channel.bind('message:new', handler);\r\n    channel.bind('message:edit', handler);\r\n    channel.bind('message:delete', handler);\r\n    channel.bind('message:read', handler);\r\n    channel.bind('presence:typing', (payload: any) => {\r\n      if (!payload?.userId) return;\r\n      setTypingBy((prev) => ({ ...prev, [payload.userId]: Date.now() }));\r\n    });\r\n    return () => { channel.unbind_all(); channel.unsubscribe(); };\r\n  }, [conversationId, qc]);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const now = Date.now();\r\n      setTypingBy((prev) => {\r\n        const next: Record<string, number> = {};\r\n        for (const [k, v] of Object.entries(prev)) {\r\n          if (now - v < 2500) next[k] = v;\r\n        }\r\n        return next;\r\n      });\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Mark latest message read when viewing\r\n    const firstPage = data?.pages?.[0];\r\n    const latest = firstPage?.messages?.[0];\r\n    if (!latest) return;\r\n    fetch(`/api/chat/messages/${latest.id}/reads`, { method: 'POST' }).catch(()=>{});\r\n    fetch(`/api/chat/conversations/${conversationId}/reads`, { method: 'POST' }).then(()=>{\r\n      qc.invalidateQueries({ queryKey: ['conversations'] });\r\n    }).catch(()=>{});\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    // Auto-scroll to bottom on first load or on new page append\r\n    if (!viewportRef.current) return;\r\n    viewportRef.current.scrollTop = viewportRef.current.scrollHeight;\r\n  }, [data]);\r\n\r\n  async function onSend(payload: { content: string; attachments: any[] }) {\r\n    try {\r\n      const res = await fetch(`/api/chat/conversations/${conversationId}/messages`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });\r\n      if (!res.ok) throw new Error(await res.text());\r\n      \r\n      // Force immediate refresh of messages\r\n      qc.invalidateQueries({ queryKey: ['messages', conversationId] });\r\n      qc.refetchQueries({ queryKey: ['messages', conversationId] });\r\n      \r\n      // Also trigger shim refresh for immediate update\r\n      if (qc._shimRefresh?.[conversationId]) {\r\n        qc._shimRefresh[conversationId]();\r\n      }\r\n    } catch (e) {\r\n      toast.error('Failed to send');\r\n    }\r\n  }\r\n\r\n  const messages = useMemo(() => {\r\n    const allMessages = data?.pages?.flatMap((p: any) => p.messages) || [];\r\n    // Remove duplicates based on message ID\r\n    const uniqueMessages = allMessages.reduce((acc: any[], message: any) => {\r\n      if (!acc.find(m => m.id === message.id)) {\r\n        acc.push(message);\r\n      }\r\n      return acc;\r\n    }, []);\r\n    return uniqueMessages.slice().reverse();\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"flex h-full min-h-0 flex-col\">\r\n      <div ref={viewportRef} className=\"flex-1 overflow-y-auto\">\r\n        {messages.map((m: any, index: number) => (\r\n          <MessageBubble \r\n            key={`${m.id}-${index}`} \r\n            message={m} \r\n            isOwn={m.senderId === currentUserId} \r\n            onEdited={() => qc.invalidateQueries({ queryKey: ['messages', conversationId] })} \r\n          />\r\n        ))}\r\n        {hasNextPage && (\r\n          <button className=\"mx-auto my-2 block rounded border px-3 py-1 text-xs\" disabled={isFetchingNextPage} onClick={()=>fetchNextPage()}>\r\n            {isFetchingNextPage ? 'Loading...' : 'Load older messages'}\r\n          </button>\r\n        )}\r\n      </div>\r\n      {Object.keys(typingBy).filter((id) => id !== (currentUserId || '')).length > 0 && (\r\n        <div className=\"px-6 py-3\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"flex items-center gap-1\">\r\n              <div className=\"flex space-x-1\">\r\n                <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse\"></div>\r\n                <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse [animation-delay:0.2s]\"></div>\r\n                <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse [animation-delay:0.4s]\"></div>\r\n              </div>\r\n            </div>\r\n            <span className=\"text-sm text-muted-foreground\">Someone is typing...</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <MessageComposer conversationId={conversationId} onSend={onSend} onTyping={async()=>{ try{ await fetch('/api/chat/typing', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ conversationId }) }); } catch{} }} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction useInfiniteMessages(conversationId: string) {\r\n  const qc = useQueryClient();\r\n  return (window as any).ReactQuery?.useInfiniteQuery || useInfiniteQueryShim(conversationId, qc);\r\n}\r\n\r\nfunction useInfiniteQueryShim(conversationId: string, qc: any) {\r\n  const [pages, setPages] = useState<any[]>([]);\r\n  const [cursor, setCursor] = useState<string | null>(null);\r\n  const [hasNextPage, setHasNextPage] = useState(true);\r\n  const [isFetchingNextPage, setIsFetchingNextPage] = useState(false);\r\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\r\n\r\n  // Expose refresh function to query client\r\n  useEffect(() => {\r\n    if (!qc._shimRefresh) qc._shimRefresh = {};\r\n    qc._shimRefresh[conversationId] = () => setRefreshTrigger(prev => prev + 1);\r\n    return () => {\r\n      if (qc._shimRefresh) delete qc._shimRefresh[conversationId];\r\n    };\r\n  }, [conversationId, qc]);\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    // Reset state when conversation changes or refresh is triggered\r\n    setPages([]);\r\n    setCursor(null);\r\n    setHasNextPage(true);\r\n    \r\n    (async () => {\r\n      try {\r\n        const res = await fetch(`/api/chat/conversations/${conversationId}/messages`);\r\n        if (!res.ok) return;\r\n        const json = await res.json();\r\n        if (cancelled) return;\r\n        setPages([json]);\r\n        setCursor(json.nextCursor);\r\n        setHasNextPage(!!json.nextCursor);\r\n      } catch (error) {\r\n        console.error('Failed to fetch messages:', error);\r\n      }\r\n    })();\r\n    return () => { cancelled = true; };\r\n  }, [conversationId, refreshTrigger]);\r\n\r\n  async function fetchNextPage() {\r\n    if (!hasNextPage || isFetchingNextPage) return;\r\n    setIsFetchingNextPage(true);\r\n    try {\r\n      const res = await fetch(`/api/chat/conversations/${conversationId}/messages` + (cursor ? `?cursor=${cursor}` : ''));\r\n      if (!res.ok) return;\r\n      const json = await res.json();\r\n      setPages((prev) => [...prev, json]);\r\n      setCursor(json.nextCursor);\r\n      setHasNextPage(!!json.nextCursor);\r\n    } finally {\r\n      setIsFetchingNextPage(false);\r\n    }\r\n  }\r\n\r\n  return { data: { pages }, fetchNextPage, hasNextPage, isFetchingNextPage } as any;\r\n}\r\n\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\MessageBubble.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1336,1339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1336,1339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5240,5243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5240,5243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useMemo, useState } from 'react';\r\nimport { ReactionsBar } from './ReactionsBar';\r\nimport { ReadReceipts } from './ReadReceipts';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\r\nimport { Button } from '@/components/ui/button';\r\nimport { MoreHorizontal, Pin, PinOff, Pencil, Trash2 } from 'lucide-react';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\n\r\nfunction getRelativeTime(date: Date): string {\r\n  const now = new Date();\r\n  const diffInMs = now.getTime() - date.getTime();\r\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\r\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\r\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\r\n\r\n  if (diffInMinutes < 1) return 'Just now';\r\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n  if (diffInHours < 24) return `${diffInHours}h ago`;\r\n  if (diffInDays < 7) return `${diffInDays}d ago`;\r\n  \r\n  return date.toLocaleDateString();\r\n}\r\n\r\nfunction getUserInitials(name?: string): string {\r\n  if (!name) return 'U';\r\n  return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\r\n}\r\n\r\nexport function MessageBubble({ message, isOwn, onEdited }: { message: any; isOwn?: boolean; onEdited?: () => void }) {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [draft, setDraft] = useState<string>('');\r\n  const [showFullTime, setShowFullTime] = useState(false);\r\n  \r\n  const content = useMemo(() => {\r\n    if (message.isDeleted) return '<i class=\"text-muted-foreground\">This message was deleted</i>';\r\n    return message.content || '';\r\n  }, [message]);\r\n\r\n  const messageTime = useMemo(() => new Date(message.createdAt), [message.createdAt]);\r\n\r\n  async function pin(toggle: boolean) {\r\n    try {\r\n      const url = `/api/chat/messages/${message.id}/pin`;\r\n      const res = await fetch(url, { method: toggle ? 'POST' : 'DELETE' });\r\n      if (!res.ok) return;\r\n      onEdited?.();\r\n    } catch {}\r\n  }\r\n  \r\n  async function del() {\r\n    try {\r\n      const res = await fetch(`/api/chat/messages/${message.id}`, { method: 'DELETE' });\r\n      if (!res.ok) return;\r\n      onEdited?.();\r\n    } catch {}\r\n  }\r\n\r\n  async function save() {\r\n    try {\r\n      const res = await fetch(`/api/chat/messages/${message.id}`, { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ content: draft }) });\r\n      if (!res.ok) return;\r\n      setIsEditing(false);\r\n      onEdited?.();\r\n    } catch {}\r\n  }\r\n\r\n  return (\r\n    <div className={`group flex gap-3 px-3 py-2 hover:bg-muted/30 transition-colors ${isOwn ? 'flex-row-reverse' : 'flex-row'}`}>\r\n      {/* Avatar - only show for others' messages */}\r\n      {!isOwn && (\r\n        <Avatar className=\"w-8 h-8 shrink-0\">\r\n          <AvatarFallback className=\"text-xs bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\r\n            {getUserInitials(message.sender?.name)}\r\n          </AvatarFallback>\r\n        </Avatar>\r\n      )}\r\n      \r\n      <div className={`flex flex-col min-w-0 max-w-[85%] sm:max-w-[70%] ${isOwn ? 'items-end' : 'items-start'}`}>\r\n        {/* Message bubble */}\r\n        <div className={`\r\n          relative rounded-2xl px-4 py-2.5 shadow-sm transition-all duration-200\r\n          ${isOwn \r\n            ? 'bg-blue-500 text-white rounded-br-md' \r\n            : 'bg-white dark:bg-gray-800 border rounded-bl-md'\r\n          }\r\n          ${message.isPinned ? 'ring-2 ring-amber-400/50' : ''}\r\n        `}>\r\n          {/* Pinned indicator */}\r\n          {message.isPinned && (\r\n            <div className={`absolute -top-2 ${isOwn ? '-left-2' : '-right-2'} bg-amber-400 rounded-full p-1`}>\r\n              <Pin className=\"w-3 h-3 text-white\" />\r\n            </div>\r\n          )}\r\n          \r\n          {/* Name for group messages (non-own) */}\r\n          {!isOwn && message.sender?.name && (\r\n            <div className=\"text-sm font-medium mb-1 text-blue-600 dark:text-blue-400\">\r\n              {message.sender.name}\r\n            </div>\r\n          )}\r\n          \r\n          {/* Message content */}\r\n          {isEditing ? (\r\n            <div className=\"space-y-3\">\r\n              <Textarea \r\n                value={draft} \r\n                onChange={(e)=>setDraft(e.target.value)} \r\n                rows={3}\r\n                className=\"min-h-[80px] resize-none\"\r\n                placeholder=\"Edit your message...\"\r\n              />\r\n              <div className=\"flex gap-2 justify-end\">\r\n                <Button size=\"sm\" variant=\"ghost\" onClick={()=>{ setIsEditing(false); setDraft(''); }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button size=\"sm\" onClick={save}>Save</Button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className={`prose prose-sm max-w-none ${isOwn ? 'prose-invert' : ''}`} \r\n                 dangerouslySetInnerHTML={{ __html: content }} />\r\n          )}\r\n          \r\n          {/* Attachments */}\r\n          {Array.isArray(message.attachments) && message.attachments.length > 0 && (\r\n            <div className=\"mt-3 space-y-2\">\r\n              {message.attachments.map((a: any) => (\r\n                <a \r\n                  key={a.id || a.url} \r\n                  href={a.url} \r\n                  target=\"_blank\" \r\n                  rel=\"noopener noreferrer\" \r\n                  className={`\r\n                    flex items-center gap-2 p-2 rounded-lg border transition-colors\r\n                    ${isOwn ? 'bg-white/20 border-white/30 hover:bg-white/30 text-white' : 'bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600'}\r\n                  `}\r\n                >\r\n                  <div className=\"text-xs font-medium truncate\">{a.fileName}</div>\r\n                  <div className={`text-xs ${isOwn ? 'text-white/70' : 'text-muted-foreground'}`}>\r\n                    ({Math.round((a.size || 0)/1024)}KB)\r\n                  </div>\r\n                </a>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Message footer */}\r\n        <div className={`flex items-center gap-2 mt-1 text-xs text-muted-foreground ${isOwn ? 'flex-row-reverse' : 'flex-row'}`}>\r\n          {/* Timestamp */}\r\n          <button \r\n            onClick={() => setShowFullTime(!showFullTime)}\r\n            className=\"hover:text-foreground transition-colors\"\r\n            title={messageTime.toLocaleString()}\r\n          >\r\n            {showFullTime ? messageTime.toLocaleString() : getRelativeTime(messageTime)}\r\n          </button>\r\n          \r\n          {/* Edited indicator */}\r\n          {message.isEdited && (\r\n            <span className=\"italic\">edited</span>\r\n          )}\r\n          \r\n          {/* Actions menu */}\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button \r\n                variant=\"ghost\" \r\n                size=\"icon\" \r\n                className=\"h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-muted\"\r\n              >\r\n                <MoreHorizontal className=\"h-3 w-3\" />\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent align={isOwn ? \"end\" : \"start\"}>\r\n              {isOwn && !message.isDeleted && (\r\n                <DropdownMenuItem onClick={() => { \r\n                  setDraft((message.content || '').replace(/<[^>]+>/g, '')); \r\n                  setIsEditing(true); \r\n                }}>\r\n                  <Pencil className=\"h-4 w-4 mr-2\" />\r\n                  Edit\r\n                </DropdownMenuItem>\r\n              )}\r\n              <DropdownMenuItem onClick={() => pin(!message.isPinned)}>\r\n                {message.isPinned ? (\r\n                  <>\r\n                    <PinOff className=\"h-4 w-4 mr-2\" />\r\n                    Unpin\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Pin className=\"h-4 w-4 mr-2\" />\r\n                    Pin\r\n                  </>\r\n                )}\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem onClick={del} className=\"text-red-600 focus:text-red-600\">\r\n                <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                Delete\r\n              </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n        </div>\r\n        \r\n        {/* Reactions and read receipts */}\r\n        <div className={`${isOwn ? 'self-end' : 'self-start'} mt-1`}>\r\n          <ReactionsBar messageId={message.id} onChanged={()=> onEdited?.()} />\r\n          <ReadReceipts reads={message.reads || []} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\MessageComposer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[487,490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[487,490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'conversationId' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[703,706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[703,706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1458,1461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1458,1461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2624,2627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2624,2627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3473,3476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3473,3476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3575,3578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3575,3578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":130,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":17}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\nimport { Smile, Paperclip, Send } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\nimport { EmojiPicker } from '@/components/ui/emoji-picker';\r\n\r\nconst Picker = EmojiPicker as any;\r\n\r\ntype User = { id: string; name: string };\r\n\r\nexport function MessageComposer({\r\n  conversationId,\r\n  onSend,\r\n  onTyping,\r\n}: {\r\n  conversationId: string;\r\n  onSend: (payload: { content: string; attachments: any[] }) => Promise<void>;\r\n  onTyping?: () => void;\r\n}) {\r\n  const [text, setText] = useState('');\r\n  const [showEmoji, setShowEmoji] = useState(false);\r\n  const [files, setFiles] = useState<File[]>([]);\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [mentionOpen, setMentionOpen] = useState(false);\r\n  const [mentionQuery, setMentionQuery] = useState('');\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [dragOver, setDragOver] = useState(false);\r\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  useEffect(() => {\r\n    fetch('/api/users')\r\n      .then((r) => r.json())\r\n      .then((j) => {\r\n        const list = (j?.data?.users || []).map((u: any) => ({ id: u.id, name: u.name || u.email }));\r\n        setUsers(list);\r\n      })\r\n      .catch(() => {});\r\n  }, []);\r\n\r\n  // Auto-resize textarea\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      textareaRef.current.style.height = 'auto';\r\n      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 120)}px`;\r\n    }\r\n  }, [text]);\r\n\r\n  function handleKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>) {\r\n    if (e.key === 'Enter') {\r\n      if (!e.shiftKey && !mentionOpen) {\r\n        e.preventDefault();\r\n        doSend();\r\n        return;\r\n      }\r\n      // Allow Shift+Enter for new lines\r\n    }\r\n    if (onTyping) onTyping();\r\n  }\r\n\r\n  // Drag and drop handlers\r\n  function handleDragOver(e: React.DragEvent) {\r\n    e.preventDefault();\r\n    setDragOver(true);\r\n  }\r\n\r\n  function handleDragLeave(e: React.DragEvent) {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n  }\r\n\r\n  function handleDrop(e: React.DragEvent) {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n    const droppedFiles = Array.from(e.dataTransfer.files);\r\n    setFiles(prev => [...prev, ...droppedFiles]);\r\n  }\r\n\r\n  function insertEmoji(emoji: any) {\r\n    setText((t) => `${t}${emoji.native}`);\r\n    setShowEmoji(false);\r\n  }\r\n\r\n  function onChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\r\n    const val = e.target.value;\r\n    setText(val);\r\n    const atIndex = val.lastIndexOf('@');\r\n    if (atIndex >= 0) {\r\n      const q = val.slice(atIndex + 1).trim();\r\n      setMentionQuery(q);\r\n      setMentionOpen(q.length > 0);\r\n    } else {\r\n      setMentionOpen(false);\r\n      setMentionQuery('');\r\n    }\r\n  }\r\n\r\n  function selectMention(u: User) {\r\n    const atIndex = text.lastIndexOf('@');\r\n    if (atIndex >= 0) {\r\n      const before = text.slice(0, atIndex);\r\n      const after = text.slice(atIndex + 1 + mentionQuery.length);\r\n      setText(`${before}@{${u.id}} ${after}`);\r\n      setMentionOpen(false);\r\n      setMentionQuery('');\r\n    }\r\n  }\r\n\r\n  async function uploadFiles(): Promise<any[]> {\r\n    if (files.length === 0) return [];\r\n    \r\n    setIsUploading(true);\r\n    const results: any[] = [];\r\n    for (const file of files) {\r\n      try {\r\n        const res = await fetch('/api/chat/uploads/create-url', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ filename: file.name, mime: file.type, size: file.size }),\r\n        });\r\n        if (!res.ok) throw new Error('upload url');\r\n        const { uploadUrl, url } = await res.json();\r\n        const put = await fetch(uploadUrl, { method: 'PUT', body: file });\r\n        if (!put.ok) throw new Error('upload fail');\r\n        results.push({ url, fileName: file.name, mimeType: file.type, size: file.size });\r\n      } catch (e) {\r\n        toast.error(`Failed to upload ${file.name}`);\r\n      }\r\n    }\r\n    setIsUploading(false);\r\n    return results;\r\n  }\r\n\r\n  async function doSend() {\r\n    const trimmed = text.trim();\r\n    if (!trimmed && files.length === 0) return;\r\n    if (isUploading) return;\r\n    \r\n    try {\r\n      const attachments = await uploadFiles();\r\n      await onSend({ content: trimmed, attachments });\r\n      setText('');\r\n      setFiles([]);\r\n      if (fileInputRef.current) fileInputRef.current.value = '';\r\n      // Focus back to textarea after sending\r\n      setTimeout(() => {\r\n        textareaRef.current?.focus();\r\n      }, 100);\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n      toast.error('Failed to send message');\r\n    }\r\n  }\r\n\r\n  function removeFile(index: number) {\r\n    setFiles(prev => prev.filter((_, i) => i !== index));\r\n  }\r\n\r\n  const canSend = (text.trim() || files.length > 0) && !isUploading;\r\n\r\n  return (\r\n    <div \r\n      className={`relative border-t bg-gradient-to-r from-background to-muted/20 p-4 transition-colors ${dragOver ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-300' : ''}`}\r\n      onDragOver={handleDragOver}\r\n      onDragLeave={handleDragLeave}\r\n      onDrop={handleDrop}\r\n    >\r\n      {/* File attachments preview */}\r\n      {files.length > 0 && (\r\n        <div className=\"mb-3 flex flex-wrap gap-2\">\r\n          {files.map((file, index) => (\r\n            <div key={`${file.name}-${file.size}-${index}`} className=\"group flex items-center gap-2 rounded-lg border bg-muted/50 px-3 py-2 text-sm\">\r\n              <Paperclip className=\"h-3 w-3 text-muted-foreground\" />\r\n              <span className=\"font-medium truncate max-w-[150px]\">{file.name}</span>\r\n              <span className=\"text-xs text-muted-foreground\">({Math.round(file.size / 1024)}KB)</span>\r\n              <Button\r\n                size=\"icon\"\r\n                variant=\"ghost\"\r\n                className=\"h-4 w-4 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                onClick={() => removeFile(index)}\r\n              >\r\n                ×\r\n              </Button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Drag overlay */}\r\n      {dragOver && (\r\n        <div className=\"absolute inset-4 bg-blue-500/10 border-2 border-dashed border-blue-300 rounded-lg flex items-center justify-center z-10\">\r\n          <div className=\"text-blue-600 font-medium\">Drop files to attach</div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex items-end gap-3\">\r\n        {/* Emoji picker */}\r\n        <Popover open={showEmoji} onOpenChange={setShowEmoji}>\r\n          <PopoverTrigger asChild>\r\n            <Button \r\n              variant=\"ghost\" \r\n              size=\"icon\" \r\n              className=\"rounded-full hover:bg-muted\"\r\n              aria-label=\"Insert emoji\"\r\n            >\r\n              <Smile className=\"h-5 w-5\" />\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"p-0 w-auto\" align=\"start\">\r\n            {Picker ? <Picker onSelect={insertEmoji} /> : null}\r\n          </PopoverContent>\r\n        </Popover>\r\n\r\n        {/* File attachment */}\r\n        <input \r\n          ref={fileInputRef} \r\n          type=\"file\" \r\n          multiple \r\n          className=\"hidden\" \r\n          onChange={(e) => setFiles(prev => [...prev, ...Array.from(e.target.files || [])])} \r\n        />\r\n        <Button \r\n          type=\"button\" \r\n          variant=\"ghost\" \r\n          size=\"icon\" \r\n          className=\"rounded-full hover:bg-muted\"\r\n          aria-label=\"Attach files\" \r\n          onClick={() => fileInputRef.current?.click()}\r\n        >\r\n          <Paperclip className=\"h-5 w-5\" />\r\n        </Button>\r\n\r\n        {/* Message input */}\r\n        <div className=\"relative flex-1\">\r\n          <Textarea\r\n            ref={textareaRef}\r\n            value={text}\r\n            onChange={onChange}\r\n            onKeyDown={handleKeyDown}\r\n            placeholder=\"Type a message... (Enter to send, Shift+Enter for new line)\"\r\n            className=\"resize-none min-h-[44px] max-h-[120px] rounded-2xl border-2 focus:border-blue-400 transition-colors pr-4 py-3\"\r\n            rows={1}\r\n          />\r\n          \r\n          {/* Mention dropdown */}\r\n          {mentionOpen && (\r\n            <div className=\"absolute bottom-full mb-1 w-full rounded-lg border bg-popover shadow-lg z-20\">\r\n              {(users.filter((u) => u.name?.toLowerCase().includes(mentionQuery.toLowerCase())).slice(0, 6)).map((u) => (\r\n                <button \r\n                  key={u.id} \r\n                  type=\"button\" \r\n                  className=\"block w-full text-left px-3 py-2 hover:bg-accent first:rounded-t-lg last:rounded-b-lg transition-colors\" \r\n                  onClick={() => selectMention(u)}\r\n                >\r\n                  <div className=\"font-medium\">{u.name}</div>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Send button */}\r\n        <Button \r\n          onClick={doSend}\r\n          disabled={!canSend}\r\n          size=\"icon\"\r\n          className={`rounded-full transition-all duration-200 ${\r\n            canSend \r\n              ? 'bg-blue-500 hover:bg-blue-600 text-white shadow-md hover:shadow-lg' \r\n              : 'bg-muted text-muted-foreground'\r\n          }`}\r\n          aria-label=\"Send message\"\r\n        >\r\n          {isUploading ? (\r\n            <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\r\n          ) : (\r\n            <Send className=\"h-4 w-4\" />\r\n          )}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\ReactionsBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[998,1001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[998,1001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2232,2235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2232,2235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useState, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\nimport { Plus } from 'lucide-react';\r\n\r\nconst DEFAULT_EMOJIS = ['👍','❤️','😂','😮','😢','😡'];\r\n\r\ninterface Reaction {\r\n  emoji: string;\r\n  count: number;\r\n  users: Array<{id: string; name?: string}>;\r\n  hasReacted: boolean;\r\n}\r\n\r\nexport function ReactionsBar({ messageId, onChanged }: { messageId: string; onChanged: () => void }) {\r\n  const [busy, setBusy] = useState(false);\r\n  const [reactions, setReactions] = useState<Reaction[]>([]);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n\r\n  // Load existing reactions\r\n  useEffect(() => {\r\n    fetch(`/api/chat/messages/${messageId}/reactions`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.reactions) {\r\n          const groupedReactions = data.reactions.reduce((acc: Record<string, Reaction>, reaction: any) => {\r\n            if (!acc[reaction.emoji]) {\r\n              acc[reaction.emoji] = {\r\n                emoji: reaction.emoji,\r\n                count: 0,\r\n                users: [],\r\n                hasReacted: false\r\n              };\r\n            }\r\n            acc[reaction.emoji].count++;\r\n            acc[reaction.emoji].users.push({ id: reaction.userId, name: reaction.user?.name });\r\n            // TODO: Check if current user has reacted\r\n            return acc;\r\n          }, {});\r\n          setReactions(Object.values(groupedReactions));\r\n        }\r\n      })\r\n      .catch(() => {});\r\n  }, [messageId]);\r\n\r\n  async function toggle(emoji: string) {\r\n    if (busy) return;\r\n    setBusy(true);\r\n    try {\r\n      const res = await fetch(`/api/chat/messages/${messageId}/reactions`, { \r\n        method: 'POST', \r\n        headers: { 'Content-Type':'application/json' }, \r\n        body: JSON.stringify({ emoji }) \r\n      });\r\n      if (res.ok) {\r\n        onChanged();\r\n        // Refresh reactions\r\n        const data = await fetch(`/api/chat/messages/${messageId}/reactions`).then(r => r.json());\r\n        if (data.reactions) {\r\n          const groupedReactions = data.reactions.reduce((acc: Record<string, Reaction>, reaction: any) => {\r\n            if (!acc[reaction.emoji]) {\r\n              acc[reaction.emoji] = {\r\n                emoji: reaction.emoji,\r\n                count: 0,\r\n                users: [],\r\n                hasReacted: false\r\n              };\r\n            }\r\n            acc[reaction.emoji].count++;\r\n            acc[reaction.emoji].users.push({ id: reaction.userId, name: reaction.user?.name });\r\n            return acc;\r\n          }, {});\r\n          setReactions(Object.values(groupedReactions));\r\n        }\r\n      }\r\n    } finally {\r\n      setBusy(false);\r\n      setShowEmojiPicker(false);\r\n    }\r\n  }\r\n\r\n  // Show existing reactions if any, otherwise show quick reactions\r\n  const displayReactions = reactions.length > 0 ? reactions : DEFAULT_EMOJIS.map(e => ({\r\n    emoji: e,\r\n    count: 0,\r\n    users: [],\r\n    hasReacted: false\r\n  }));\r\n\r\n  return (\r\n    <div className=\"mt-2 flex flex-wrap gap-1 items-center\">\r\n      {displayReactions.map((reaction) => (\r\n        <button\r\n          key={reaction.emoji}\r\n          onClick={() => toggle(reaction.emoji)}\r\n          disabled={busy}\r\n          className={`\r\n            group flex items-center gap-1 rounded-full border px-2 py-1 text-xs transition-all hover:scale-105\r\n            ${reaction.count > 0 \r\n              ? 'bg-blue-50 dark:bg-blue-900/30 border-blue-200 dark:border-blue-800' \r\n              : 'bg-muted/50 hover:bg-muted border-transparent'\r\n            }\r\n            ${reaction.hasReacted ? 'ring-2 ring-blue-400/50' : ''}\r\n          `}\r\n          title={\r\n            reaction.count > 0 \r\n              ? `${reaction.users.map(u => u.name || u.id).join(', ')}` \r\n              : `React with ${reaction.emoji}`\r\n          }\r\n        >\r\n          <span className=\"text-sm\">{reaction.emoji}</span>\r\n          {reaction.count > 0 && (\r\n            <span className=\"font-medium text-xs text-blue-600 dark:text-blue-400\">\r\n              {reaction.count}\r\n            </span>\r\n          )}\r\n        </button>\r\n      ))}\r\n      \r\n      {/* Add reaction button */}\r\n      <Popover open={showEmojiPicker} onOpenChange={setShowEmojiPicker}>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            className=\"h-6 w-6 rounded-full opacity-70 hover:opacity-100 hover:bg-muted transition-all\"\r\n            aria-label=\"Add reaction\"\r\n          >\r\n            <Plus className=\"h-3 w-3\" />\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"p-2 w-auto\" align=\"start\">\r\n          <div className=\"grid grid-cols-6 gap-1\">\r\n            {['😀','😃','😄','😁','😅','😂','🤣','😊','😇','🙂','🙃','😉','😌','😍','🥰','😘','😗','😙','😚','😋','😛','😝','😜','🤪','🤨','🧐','🤓','😎','🤩','🥳','😏','😒','😞','😔','😟','😕','🙁','☹️','😣','😖','😫','😩','🥺','😢','😭','😤','😠','😡','🤬','🤯','😳','🥵','🥶','😱','😨','😰','😥','😓','🤗','🤔','🤭','🤫','🤥','😶','😐','😑','😬','🙄','😯','😦','😧','😮','😲','🥱','😴','🤤','😪','😵','🤐','🥴','🤢','🤮','🤧','😷','🤒','🤕','🤑','🤠','😈','👿','👹','👺','🤡','💩','👻','💀','☠️','👽','👾','🤖','🎃','😺','😸','😹','😻','😼','😽','🙀','😿','😾'].map(emoji => (\r\n              <button\r\n                key={emoji}\r\n                onClick={() => toggle(emoji)}\r\n                className=\"p-1 hover:bg-muted rounded text-lg transition-colors\"\r\n                disabled={busy}\r\n              >\r\n                {emoji}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </PopoverContent>\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\ReadReceipts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\SearchBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[439,442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[439,442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":33,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4078,4081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4078,4081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useEffect, useState } from 'react';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Search, X, MessageSquare } from 'lucide-react';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\n\r\nexport function SearchBar({ conversationId }: { conversationId?: string }) {\r\n  const [q, setQ] = useState('');\r\n  const [results, setResults] = useState<any[]>([]);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    if (!q.trim()) { \r\n      setResults([]);\r\n      setIsSearching(false);\r\n      return; \r\n    }\r\n\r\n    setIsSearching(true);\r\n    const searchTimeout = setTimeout(async () => {\r\n      try {\r\n        const url = new URL('/api/chat/search', window.location.origin);\r\n        url.searchParams.set('q', q.trim());\r\n        if (conversationId) url.searchParams.set('conversationId', conversationId);\r\n        const res = await fetch(url.toString());\r\n        if (!res.ok) throw new Error('Search failed');\r\n        const json = await res.json();\r\n        if (cancelled) return;\r\n        setResults(json.messages || []);\r\n      } catch (error) {\r\n        if (!cancelled) setResults([]);\r\n      } finally {\r\n        if (!cancelled) setIsSearching(false);\r\n      }\r\n    }, 300);\r\n\r\n    return () => { \r\n      cancelled = true; \r\n      clearTimeout(searchTimeout);\r\n    };\r\n  }, [q, conversationId]);\r\n\r\n  function clearSearch() {\r\n    setQ('');\r\n    setResults([]);\r\n    setIsExpanded(false);\r\n  }\r\n\r\n  function highlightText(text: string, query: string): string {\r\n    if (!query || !text) return text;\r\n    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\r\n    return text.replace(regex, '<mark class=\"bg-yellow-200 dark:bg-yellow-800 rounded px-1\">$1</mark>');\r\n  }\r\n\r\n  function getUserInitials(name?: string): string {\r\n    if (!name) return 'U';\r\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\r\n  }\r\n\r\n  return (\r\n    <div className=\"border-b bg-gradient-to-r from-background to-muted/20 px-4 py-3\">\r\n      <div className=\"relative\">\r\n        {/* Search Input */}\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n          <Input \r\n            value={q} \r\n            onChange={(e) => setQ(e.target.value)}\r\n            onFocus={() => setIsExpanded(true)}\r\n            placeholder={conversationId ? 'Search messages in this conversation...' : 'Search all messages...'}\r\n            className=\"pl-10 pr-10 rounded-full border-2 focus:border-blue-400 transition-all duration-200\"\r\n          />\r\n          {q && (\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              onClick={clearSearch}\r\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 rounded-full hover:bg-muted\"\r\n            >\r\n              <X className=\"h-3 w-3\" />\r\n            </Button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Search Results */}\r\n        {isExpanded && q && (\r\n          <div className=\"absolute left-0 right-0 top-full mt-2 bg-popover rounded-xl border shadow-lg z-50 max-h-80 overflow-hidden\">\r\n            {isSearching ? (\r\n              <div className=\"p-4 text-center\">\r\n                <div className=\"inline-flex items-center gap-2 text-sm text-muted-foreground\">\r\n                  <div className=\"w-4 h-4 border-2 border-muted-foreground/30 border-t-muted-foreground rounded-full animate-spin\"></div>\r\n                  Searching...\r\n                </div>\r\n              </div>\r\n            ) : results.length > 0 ? (\r\n              <div className=\"max-h-80 overflow-y-auto\">\r\n                <div className=\"p-2 text-xs text-muted-foreground font-medium border-b\">\r\n                  {results.length} result{results.length !== 1 ? 's' : ''} found\r\n                </div>\r\n                {results.slice(0, 15).map((message: any) => (\r\n                  <div \r\n                    key={message.id} \r\n                    className=\"p-3 hover:bg-accent transition-colors cursor-pointer border-b last:border-b-0\"\r\n                  >\r\n                    <div className=\"flex items-start gap-3\">\r\n                      <Avatar className=\"h-8 w-8 shrink-0\">\r\n                        <AvatarFallback className=\"text-xs bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\r\n                          {getUserInitials(message.sender?.name)}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-center gap-2 mb-1\">\r\n                          <span className=\"font-medium text-sm\">\r\n                            {message.sender?.name || 'Unknown User'}\r\n                          </span>\r\n                          <span className=\"text-xs text-muted-foreground\">\r\n                            {new Date(message.createdAt).toLocaleDateString()} at{' '}\r\n                            {new Date(message.createdAt).toLocaleTimeString([], { \r\n                              hour: '2-digit', \r\n                              minute: '2-digit' \r\n                            })}\r\n                          </span>\r\n                        </div>\r\n                        <div \r\n                          className=\"text-sm text-muted-foreground line-clamp-2\"\r\n                          dangerouslySetInnerHTML={{ \r\n                            __html: highlightText(\r\n                              message.content?.replace(/<[^>]*>/g, '') || 'No content', \r\n                              q\r\n                            ) \r\n                          }} \r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                {results.length > 15 && (\r\n                  <div className=\"p-3 text-center border-t bg-muted/50\">\r\n                    <span className=\"text-xs text-muted-foreground\">\r\n                      Showing first 15 results. Refine your search for more specific results.\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"p-8 text-center\">\r\n                <MessageSquare className=\"h-12 w-12 mx-auto mb-3 text-muted-foreground/50\" />\r\n                <p className=\"text-sm font-medium mb-1\">No messages found</p>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  Try adjusting your search terms or check spelling\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Overlay to close search when clicking outside */}\r\n      {isExpanded && (\r\n        <div \r\n          className=\"fixed inset-0 z-40\" \r\n          onClick={() => setIsExpanded(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\UserSearchSelect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":2,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[731,734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[731,734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Input } from '@/components/ui/input';\r\n\r\ntype User = { id: string; name?: string; email?: string };\r\n\r\nexport function UserSearchSelect({ onSelect }: { onSelect: (user: User) => void }) {\r\n  const [q, setQ] = useState('');\r\n  const [results, setResults] = useState<User[]>([]);\r\n  useEffect(() => {\r\n    let aborted = false;\r\n    const run = async () => {\r\n      const url = new URL('/api/users', window.location.origin);\r\n      url.searchParams.set('search', q);\r\n      const res = await fetch(url.toString());\r\n      if (!res.ok) return;\r\n      const json = await res.json();\r\n      if (aborted) return;\r\n      setResults((json?.users || []).map((u: any) => ({ id: u.id, name: u.name, email: u.email })));\r\n    };\r\n    run().catch(()=>{});\r\n    return () => { aborted = true; };\r\n  }, [q]);\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Input value={q} onChange={(e)=>setQ(e.target.value)} placeholder=\"Search users...\" />\r\n      {q && results.length > 0 && (\r\n        <div className=\"absolute z-10 mt-1 w-full rounded border bg-background shadow\">\r\n          {results.slice(0,8).map((u) => (\r\n            <button key={u.id} className=\"block w-full text-left px-2 py-1 hover:bg-accent\" onClick={()=>onSelect(u)}>\r\n              {u.name || u.email} ({u.id})\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\chat\\notifications-client.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[531,534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[531,534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'qc'. Either include it or remove the dependency array.","line":25,"column":6,"nodeType":"ArrayExpression","endLine":25,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [qc, userId]","fix":{"range":[1155,1163],"text":"[qc, userId]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\nimport { useEffect } from 'react';\r\nimport { subscribeToUser } from '@/lib/realtime-client';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\n\r\nexport function ChatDesktopNotifications({ userId }: { userId: string }) {\r\n  const qc = useQueryClient();\r\n  useEffect(() => {\r\n    if (!('Notification' in window)) return;\r\n    if (Notification.permission === 'default') {\r\n      Notification.requestPermission().catch(()=>{});\r\n    }\r\n    const channel = subscribeToUser(userId);\r\n    const handler = (payload: any) => {\r\n      if (Notification.permission !== 'granted') return;\r\n      try {\r\n        new Notification('New message', { body: 'You have a new message', tag: `${payload.conversationId}:${payload.messageId}` });\r\n      } catch {}\r\n      // Refresh conversations list to update unread badges\r\n      qc.invalidateQueries({ queryKey: ['conversations'] });\r\n    };\r\n    channel.bind('message:new', handler);\r\n    channel.bind('conversation:updated', () => qc.invalidateQueries({ queryKey: ['conversations'] }));\r\n    return () => { channel.unbind('message:new', handler); channel.unbind_all(); channel.unsubscribe(); };\r\n  }, [userId]);\r\n  return null;\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\context-aware-nav.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":9,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Award' is defined but never used.","line":9,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Briefcase' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bell' is defined but never used.","line":10,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Search' is defined but never used.","line":10,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenu' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuContent' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuItem' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuSeparator' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuTrigger' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":22},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":232,"column":28,"nodeType":"Identifier","endLine":232,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":243,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":243,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useSession } from 'next-auth/react';\r\nimport { usePathname } from 'next/navigation';\r\nimport Link from 'next/link';\r\nimport { cn } from '@/lib/utils';\r\nimport { \r\n  Home, Users, LineChart, TrendingUp, Settings, Shield, \r\n  BarChart3, UserPlus, Calendar, Phone, Target, Award,\r\n  Briefcase, DollarSign, FileText, Bell, Search, Menu, BookOpen, MessageCircle, Mail\r\n} from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  DropdownMenu, \r\n  DropdownMenuContent, \r\n  DropdownMenuItem, \r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger \r\n} from '@/components/ui/dropdown-menu';\r\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\r\nimport React, { useMemo, useState } from 'react';\r\nimport { ChatDesktopNotifications } from '@/components/chat/notifications-client';\r\n\r\ninterface NavItem {\r\n  title: string;\r\n  href: string;\r\n  icon: React.ElementType;\r\n  badge?: string;\r\n  roles: string[];\r\n  description?: string;\r\n}\r\n\r\ninterface NavSection {\r\n  title: string;\r\n  items: NavItem[];\r\n}\r\n\r\nconst navigationSections: NavSection[] = [\r\n  {\r\n    title: 'Dashboard & Overview',\r\n    items: [\r\n      {\r\n        title: 'Dashboard',\r\n        href: '/',\r\n        icon: Home,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER', 'TEAM_LEAD', 'BDR'],\r\n        description: 'Main dashboard overview'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Core CRM Functions',\r\n    items: [\r\n      {\r\n        title: 'Chat',\r\n        href: '/chat',\r\n        icon: MessageCircle,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER', 'TEAM_LEAD', 'BDR'],\r\n        description: 'Internal team messaging'\r\n      },\r\n      {\r\n        title: 'Leads',\r\n        href: '/leads',\r\n        icon: Users,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER', 'TEAM_LEAD', 'BDR'],\r\n        description: 'Manage your leads and prospects'\r\n      },\r\n      {\r\n        title: 'Pipeline',\r\n        href: '/pipeline',\r\n        icon: LineChart,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER', 'TEAM_LEAD', 'BDR'],\r\n        description: 'Track deals through sales stages'\r\n      },\r\n      {\r\n        title: 'Editorial Board',\r\n        href: '/editorial',\r\n        icon: BookOpen,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER', 'TEAM_LEAD', 'BDR'],\r\n        description: 'Manage Q&A and interview opportunities'\r\n      },\r\n      {\r\n        title: 'Templates',\r\n        href: '/templates',\r\n        icon: FileText,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER', 'TEAM_LEAD', 'BDR'],\r\n        description: 'BDR knowledgebase of reusable outreach templates'\r\n      },\r\n      {\r\n        title: 'Email Verification',\r\n        href: '/email-verification',\r\n        icon: Mail,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER', 'TEAM_LEAD', 'BDR'],\r\n        description: 'Verify email addresses for validity'\r\n      },\r\n      {\r\n        title: 'Call Schedule',\r\n        href: '/pipeline?view=today',\r\n        icon: Calendar,\r\n        roles: ['BDR', 'TEAM_LEAD'],\r\n        description: 'Today\\'s scheduled calls'\r\n      },\r\n      {\r\n        title: 'My Performance',\r\n        href: '/reporting?view=personal',\r\n        icon: Target,\r\n        roles: ['BDR'],\r\n        description: 'Personal KPIs and metrics'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Analytics & Reporting',\r\n    items: [\r\n      {\r\n        title: 'Executive Reports',\r\n        href: '/reporting',\r\n        icon: TrendingUp,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER'],\r\n        description: 'Complete business analytics'\r\n      },\r\n      {\r\n        title: 'Team Reports',\r\n        href: '/reporting/team',\r\n        icon: BarChart3,\r\n        roles: ['TEAM_LEAD', 'MANAGER', 'DIRECTOR', 'ADMIN'],\r\n        description: 'Team performance metrics'\r\n      },\r\n      {\r\n        title: 'Finance',\r\n        href: '/finance',\r\n        icon: DollarSign,\r\n        roles: ['ADMIN', 'DIRECTOR', 'MANAGER'],\r\n        description: 'Financial tracking and revenue'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Team Management',\r\n    items: [\r\n      {\r\n        title: 'Team Management',\r\n        href: '/team',\r\n        icon: Users,\r\n        roles: ['TEAM_LEAD', 'MANAGER', 'DIRECTOR', 'ADMIN'],\r\n        description: 'Manage team members and performance'\r\n      },\r\n      {\r\n        title: 'User Management',\r\n        href: '/admin/users',\r\n        icon: UserPlus,\r\n        roles: ['ADMIN'],\r\n        badge: 'Admin',\r\n        description: 'Create and manage user accounts'\r\n      },\r\n      {\r\n        title: 'Role Permissions',\r\n        href: '/admin/roles',\r\n        icon: Settings,\r\n        roles: ['ADMIN'],\r\n        badge: 'Admin',\r\n        description: 'Configure global role-based permissions'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nconst NavItemComponent = React.memo(function NavItemComponent({ \r\n  item, \r\n  isMobile = false, \r\n  onItemClick \r\n}: { \r\n  item: NavItem; \r\n  isMobile?: boolean;\r\n  onItemClick?: () => void;\r\n}) {\r\n  const pathname = usePathname();\r\n  const isActive = pathname === item.href || (item.href !== '/' && pathname.startsWith(item.href));\r\n  const Icon = item.icon;\r\n\r\n  const content = (\r\n    <div\r\n      className={cn(\r\n        \"group flex items-center gap-3 rounded-lg px-3 py-2 text-sm transition-all\",\r\n        \"hover:bg-white/50 dark:hover:bg-white/10 hover:backdrop-blur\",\r\n        isActive\r\n          ? \"bg-white/70 dark:bg-white/10 text-foreground shadow-[inset_0_0_0_1px_rgba(255,255,255,0.25)]\"\r\n          : \"text-foreground/90\",\r\n        isMobile && \"w-full\"\r\n      )}\r\n    >\r\n      <Icon className={cn(\"h-4 w-4 transition-colors\", isActive ? \"text-primary\" : \"text-foreground/70 group-hover:text-foreground\")} />\r\n      <span className=\"flex-1\">{item.title}</span>\r\n      {item.badge && (\r\n        <Badge variant=\"secondary\" className=\"text-xs\">\r\n          {item.badge}\r\n        </Badge>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <Link href={item.href} onClick={onItemClick} className=\"w-full\">\r\n        {content}\r\n      </Link>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Link href={item.href} title={item.description}>\r\n      {content}\r\n    </Link>\r\n  );\r\n})\r\n\r\nconst NavigationContent = React.memo(function NavigationContent({ \r\n  isMobile = false, \r\n  onItemClick \r\n}: { \r\n  isMobile?: boolean;\r\n  onItemClick?: () => void;\r\n}) {\r\n  const { data: session } = useSession();\r\n  const userRole = session?.user?.role;\r\n\r\n  if (!session || !userRole) {\r\n    return null;\r\n  }\r\n\r\n  const filteredSections = useMemo(() => (\r\n    navigationSections\r\n      .map(section => ({\r\n        ...section,\r\n        items: section.items.filter(item => item.roles.includes(userRole))\r\n      }))\r\n      .filter(section => section.items.length > 0)\r\n  ), [userRole]);\r\n\r\n  return (\r\n    <div className={cn(\"space-y-4\", isMobile && \"pb-4\")}>\r\n      {filteredSections.map((section, index) => (\r\n        <div key={section.title}>\r\n          <div className=\"mb-2 px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wide\">\r\n            {section.title}\r\n          </div>\r\n          <div className=\"space-y-1\">\r\n            {section.items.map((item) => (\r\n              <NavItemComponent \r\n                key={item.href} \r\n                item={item} \r\n                isMobile={isMobile}\r\n                onItemClick={onItemClick}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n})\r\n\r\nexport function ContextAwareNav() {\r\n  const { data: session } = useSession();\r\n  const [mobileNavOpen, setMobileNavOpen] = useState(false);\r\n\r\n  if (!session) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Desktop Navigation */}\r\n      <div className=\"hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0 z-50\">\r\n        <div className=\"flex flex-col flex-grow pt-5 overflow-y-auto border-r border-white/20 dark:border-white/10 bg-white/40 dark:bg-white/[0.03] backdrop-blur-xl\">\r\n          <div className=\"flex items-center flex-shrink-0 px-4\">\r\n            <Link href=\"/\" className=\"flex items-center gap-2\">\r\n              <Shield className=\"h-6 w-6 text-primary\" />\r\n              <span className=\"font-semibold tracking-tight\">EMG CRM</span>\r\n            </Link>\r\n          </div>\r\n          <div className=\"mt-5 flex-1 px-4\">\r\n            <NavigationContent />\r\n          </div>\r\n          \r\n          {/* User info at bottom */}\r\n          <div className=\"flex-shrink-0 flex border-t border-white/20 dark:border-white/10 p-4 bg-white/30 dark:bg-white/[0.02]\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"flex-shrink-0\">\r\n                <div className=\"inline-flex items-center justify-center h-8 w-8 rounded-full bg-primary text-primary-foreground text-sm font-medium\">\r\n                  {session.user?.name?.[0] || 'U'}\r\n                </div>\r\n              </div>\r\n              <div className=\"ml-3 flex-1 min-w-0\">\r\n                <p className=\"text-sm font-medium text-foreground truncate\">\r\n                  {session.user?.name}\r\n                </p>\r\n                <p className=\"text-xs text-muted-foreground truncate\">\r\n                  {session.user?.role}\r\n                </p>\r\n              </div>\r\n              <div className=\"ml-auto flex items-center gap-2\">\r\n                <ChatDesktopNotifications userId={session.user.id} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Mobile Navigation */}\r\n      <div className=\"md:hidden\">\r\n        <div className=\"flex items-center justify-between p-4 border-b border-white/20 dark:border-white/10 bg-white/40 dark:bg-white/[0.03] backdrop-blur-xl\">\r\n          <Link href=\"/\" className=\"flex items-center gap-2\">\r\n            <Shield className=\"h-5 w-5 text-primary\" />\r\n            <span className=\"font-semibold tracking-tight\">EMG CRM</span>\r\n          </Link>\r\n          \r\n          <Sheet open={mobileNavOpen} onOpenChange={setMobileNavOpen}>\r\n            <SheetTrigger asChild>\r\n              <Button variant=\"outline\" size=\"sm\" className=\"backdrop-blur bg-white/60 dark:bg-white/[0.06]\">\r\n                <Menu className=\"h-4 w-4\" />\r\n              </Button>\r\n            </SheetTrigger>\r\n            <SheetContent side=\"left\" className=\"w-80 bg-white/60 dark:bg-white/[0.04] backdrop-blur-xl border-white/20 dark:border-white/10\">\r\n              <div className=\"flex items-center gap-2 mb-6\">\r\n                <Shield className=\"h-6 w-6 text-primary\" />\r\n                <span className=\"font-semibold tracking-tight\">EMG CRM</span>\r\n              </div>\r\n              <NavigationContent \r\n                isMobile \r\n                onItemClick={() => setMobileNavOpen(false)} \r\n              />\r\n            </SheetContent>\r\n          </Sheet>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function MainLayoutWithNav({ children }: { children: React.ReactNode }) {\r\n  return (\r\n    <>\r\n      <ContextAwareNav />\r\n      <div className=\"md:pl-64\">\r\n        <main className=\"py-6\">\r\n          <div className=\"mx-auto max-w-7xl px-4 sm:px-6 md:px-8\">\r\n            {children}\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\disabled\\kanban-view.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\disabled\\pipeline-board.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":7,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":80},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMoveItemToSublist' is defined but never used.","line":9,"column":89,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":109},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'phoneCopied' is assigned a value but never used.","line":38,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'emailCopied' is assigned a value but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formattedAddedDate' is assigned a value but never used.","line":89,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formattedLastUpdated' is assigned a value but never used.","line":90,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'copyToClipboard' is assigned a value but never used.","line":92,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":104,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleManualUpdate' is assigned a value but never used.","line":109,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSublistContainer' is assigned a value but never used.","line":170,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'batchActivityData' is assigned a value but never used.","line":474,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":474,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { FileText, MessageSquare, Move, ChevronDown, ChevronRight, Trash2, Plus } from 'lucide-react';\n\nimport { PipelineItem, useCreateActivityLog, useBatchActivityLogs, useMovePipelineItem, useMoveItemToSublist, useDeletePipelineItem } from '@/lib/hooks';\nimport { formatDistanceToNow } from 'date-fns';\nimport { pipelineCategoryEnum, pipelineStatusEnum } from '@/lib/validations';\nimport { PipelineDialog } from './pipeline-dialog';\nimport { PipelineDetail } from './pipeline-detail';\nimport { PipelineEditableCell } from './ui/pipeline-editable-cell';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { toast } from 'sonner';\nimport { \n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { UpdatesDialog } from './updates-dialog';\nimport { SublistDialog } from './sublist-dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface PipelineItemCardProps {\n  item: PipelineItem;\n  onRefresh?: () => void;\n}\n\nconst PipelineItemCard = ({ item, onRefresh }: PipelineItemCardProps) => {\n  const [phoneCopied, setPhoneCopied] = useState(false);\n  const [emailCopied, setEmailCopied] = useState(false);\n  const [detailOpen, setDetailOpen] = useState(false);\n  const [showNotes, setShowNotes] = useState(false);\n  const [moveOpen, setMoveOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(true);\n  const [selectedMoveCategory, setSelectedMoveCategory] = useState<string>(item.category);\n  const [selectedMoveStatus, setSelectedMoveStatus] = useState<string>(item.status);\n\n  const { mutate: createActivityLog } = useCreateActivityLog();\n  const { mutate: movePipelineItem } = useMovePipelineItem();\n  const { mutate: deletePipelineItem } = useDeletePipelineItem();\n\n  // Close all dialogs when any dialog closes\n  const handleDialogClose = () => {\n    setDetailOpen(false);\n    setShowNotes(false);\n    setMoveOpen(false);\n  };\n\n  // Prevent detail dialog from opening when clicking inside other dialogs\n  const preventDetailOpen = (e: React.MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  // Listen for dialog close events\n  useEffect(() => {\n    const handleCloseAllDialogs = () => {\n      handleDialogClose();\n    };\n\n    window.addEventListener('closeAllDialogs', handleCloseAllDialogs);\n    return () => {\n      window.removeEventListener('closeAllDialogs', handleCloseAllDialogs);\n    };\n  }, []);\n\n  // Update move selections when item changes\n  useEffect(() => {\n    setSelectedMoveCategory(item.category);\n    setSelectedMoveStatus(item.status);\n  }, [item.category, item.status]);\n  \n  const addedDate = typeof item.addedDate === 'string' \n    ? new Date(item.addedDate) \n    : item.addedDate;\n    \n  const lastUpdated = typeof item.lastUpdated === 'string' \n    ? new Date(item.lastUpdated) \n    : item.lastUpdated;\n  \n  const formattedAddedDate = formatDistanceToNow(addedDate, { addSuffix: true });\n  const formattedLastUpdated = formatDistanceToNow(lastUpdated, { addSuffix: true });\n  \n  const copyToClipboard = async (text: string, type: 'phone' | 'email') => {\n    try {\n      await navigator.clipboard.writeText(text);\n      if (type === 'phone') {\n        setPhoneCopied(true);\n        setTimeout(() => setPhoneCopied(false), 2000);\n        toast.success('Phone number copied to clipboard');\n      } else {\n        setEmailCopied(true);\n        setTimeout(() => setEmailCopied(false), 2000);\n        toast.success('Email address copied to clipboard');\n      }\n    } catch (err) {\n      toast.error('Failed to copy to clipboard');\n    }\n  };\n\n  const handleManualUpdate = () => {\n    createActivityLog({\n      bdr: item.bdr,\n      activityType: 'Note_Added',\n      description: 'Manually updated last chase date',\n      pipelineItemId: item.id,\n      notes: 'Lead chased manually'\n    }, {\n      onSuccess: () => {\n        toast.success('Last updated date refreshed');\n        onRefresh?.();\n      }\n    });\n  };\n\n  const handleMoveItem = () => {\n    if (selectedMoveCategory === item.category && selectedMoveStatus === item.status) {\n      setMoveOpen(false);\n      return;\n    }\n\n    movePipelineItem({\n      id: item.id,\n      newCategory: selectedMoveCategory,\n      newStatus: selectedMoveStatus\n    }, {\n      onSuccess: () => {\n        toast.success(`Moved to ${selectedMoveStatus}`);\n        setMoveOpen(false);\n        onRefresh?.();\n      },\n      onError: () => {\n        toast.error('Failed to move item');\n      }\n    });\n  };\n\n  const handleDeleteItem = () => {\n    if (confirm('Are you sure you want to delete this pipeline item? This action cannot be undone.')) {\n      deletePipelineItem(item.id, {\n        onSuccess: () => {\n          toast.success('Pipeline item deleted successfully');\n          onRefresh?.();\n        },\n        onError: () => {\n          toast.error('Failed to delete pipeline item');\n        }\n      });\n    }\n  };\n\n  const handleCategoryChange = (category: string) => {\n    setSelectedMoveCategory(category);\n    // Set the status to the first status in the new category\n    const statuses = pipelineStatusEnum[category as keyof typeof pipelineStatusEnum];\n    if (statuses && statuses.length > 0) {\n      setSelectedMoveStatus(statuses[0]);\n    }\n  };\n\n  const hasNotes = item.notes && item.notes.trim() !== '';\n  const isSublistContainer = item.isSublist;\n  const hasChildren = item.children && item.children.length > 0;\n  \n  return (\n    <>\n      {/* Regular Pipeline Item */}\n      <div className=\"mb-2\">\n        <Card \n          className=\"cursor-pointer hover:shadow-md transition-shadow\"\n          onClick={(e) => {\n            // Only open detail if we didn't click a button or dialog\n            if (!(e.target as HTMLElement).closest('button, [role=\"dialog\"]')) {\n              handleDialogClose();\n              setDetailOpen(true);\n            }\n          }}\n        >\n        <CardContent className=\"p-3\">\n          <div className=\"flex flex-col gap-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                                 <div onClick={preventDetailOpen}>\n                   {hasChildren ? (\n                     <div className=\"flex items-center gap-1\">\n                       <Button\n                         variant=\"ghost\"\n                         size=\"sm\"\n                         className=\"h-5 w-5 p-0 hover:bg-muted\"\n                         onClick={(e) => {\n                           e.stopPropagation();\n                           setIsExpanded(!isExpanded);\n                         }}\n                       >\n                         {isExpanded ? (\n                           <ChevronDown className=\"h-3 w-3\" />\n                         ) : (\n                           <ChevronRight className=\"h-3 w-3\" />\n                         )}\n                       </Button>\n                     </div>\n                   ) : (\n                     <SublistDialog\n                       title=\"Add Sublist Item\"\n                       buttonLabel=\"+ Add subitem\"\n                       buttonVariant=\"ghost\"\n                       buttonSize=\"default\"\n                       buttonIcon={false}\n                       defaultCategory={item.category}\n                       defaultStatus={item.status}\n                       defaultBdr={item.bdr}\n                       parentId={item.id}\n                       onSuccess={onRefresh}\n                       className=\"h-5 px-2 text-xs hover:bg-muted\"\n                     />\n                   )}\n                 </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2\">\n                    <PipelineEditableCell\n                      value={item.name}\n                      item={item}\n                      field=\"name\"\n                      className=\"font-semibold\"\n                      placeholder=\"Name\"\n                    />\n                    {hasChildren && (\n                      <div className=\"flex items-center gap-1\">\n                        <div className=\"w-1.5 h-1.5 rounded-full bg-primary\"></div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {item.children?.length || 0} subitem{item.children && item.children.length !== 1 ? 's' : ''}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <div onClick={preventDetailOpen}>\n                  <UpdatesDialog \n                    pipelineItem={item}\n                    trigger={\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"h-6 w-6 p-0\"\n                      >\n                        <MessageSquare className=\"h-4 w-4\" />\n                      </Button>\n                    }\n                  />\n                </div>\n                {hasNotes && (\n                  <TooltipProvider>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0\" \n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setShowNotes(!showNotes);\n                          }}\n                        >\n                          <FileText className=\"h-4 w-4\" />\n                        </Button>\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <p>View notes</p>\n                      </TooltipContent>\n                    </Tooltip>\n                  </TooltipProvider>\n                )}\n                <div onClick={preventDetailOpen}>\n                  <TooltipProvider>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <Popover open={moveOpen} onOpenChange={setMoveOpen}>\n                          <PopoverTrigger asChild>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\" \n                              className=\"h-6 w-6 p-0\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                setMoveOpen(true);\n                              }}\n                            >\n                              <Move className=\"h-4 w-4\" />\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-80 p-4\" side=\"top\" align=\"end\">\n                            <div className=\"space-y-4\">\n                              <h4 className=\"font-medium\">Move to different group</h4>\n                              \n                              <div className=\"space-y-3\">\n                                <div>\n                                  <label className=\"text-sm font-medium\">Category</label>\n                                  <Select\n                                    value={selectedMoveCategory}\n                                    onValueChange={handleCategoryChange}\n                                  >\n                                    <SelectTrigger className=\"mt-1\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      {pipelineCategoryEnum.map((category) => (\n                                        <SelectItem key={category} value={category}>\n                                          {category.replace('_', ' ')}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                                \n                                <div>\n                                  <label className=\"text-sm font-medium\">Status</label>\n                                  <Select\n                                    value={selectedMoveStatus}\n                                    onValueChange={(value) => setSelectedMoveStatus(value)}\n                                  >\n                                    <SelectTrigger className=\"mt-1\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      {selectedMoveCategory && pipelineStatusEnum[selectedMoveCategory as keyof typeof pipelineStatusEnum]?.map((status) => (\n                                        <SelectItem key={`${selectedMoveCategory}-${status}`} value={status}>\n                                          {status}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                              </div>\n                              \n                              <div className=\"text-xs text-muted-foreground bg-muted/20 p-2 rounded\">\n                                Moving from <span className=\"font-medium\">{item.category}</span> ({item.status}) to <span className=\"font-medium\">{selectedMoveCategory}</span> ({selectedMoveStatus})\n                              </div>\n                              \n                              <div className=\"flex justify-end gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => setMoveOpen(false)}\n                                >\n                                  Cancel\n                                </Button>\n                                <Button \n                                  size=\"sm\"\n                                  onClick={handleMoveItem}\n                                  disabled={selectedMoveCategory === item.category && selectedMoveStatus === item.status}\n                                >\n                                  Move\n                                </Button>\n                              </div>\n                            </div>\n                          </PopoverContent>\n                        </Popover>\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <p>Move to different group</p>\n                      </TooltipContent>\n                    </Tooltip>\n                  </TooltipProvider>\n                </div>\n                <div onClick={preventDetailOpen}>\n                  <TooltipProvider>\n                    <Tooltip>\n                      <TooltipTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"h-6 w-6 p-0 text-destructive hover:text-destructive hover:bg-destructive/10\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleDeleteItem();\n                          }}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <p>Delete item</p>\n                      </TooltipContent>\n                    </Tooltip>\n                  </TooltipProvider>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n        </Card>\n        \n        {/* Expanded Sublist Items */}\n        {hasChildren && isExpanded && (\n          <div className=\"ml-6 mt-2 space-y-2 border-l-2 border-muted pl-4\">\n            {item.children!.map((childItem) => (\n              <PipelineItemCard \n                key={childItem.id} \n                item={childItem} \n                onRefresh={onRefresh} \n              />\n            ))}\n            \n            {/* Add subitem row for existing sublists */}\n            <div className=\"pt-2\">\n              <div className=\"flex items-center gap-2 pl-2\">\n                <div className=\"w-2 h-2 rounded-full bg-muted-foreground/30\"></div>\n                <SublistDialog\n                  title=\"Add More Sublist Items\"\n                  buttonLabel=\"+ Add subitem\"\n                  buttonVariant=\"ghost\"\n                  buttonSize=\"default\"\n                  buttonIcon={false}\n                  defaultCategory={item.category}\n                  defaultStatus={item.status}\n                  defaultBdr={item.bdr}\n                  parentId={item.id}\n                  onSuccess={onRefresh}\n                  className=\"h-6 px-2 text-xs hover:bg-muted text-muted-foreground hover:text-foreground border border-dashed border-muted-foreground/30 hover:border-muted-foreground/50 rounded\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      \n      \n      {/* Pipeline Item Detail Dialog */}\n      <PipelineDetail \n        pipelineItemId={item.id} \n        open={detailOpen} \n        onOpenChange={(open) => {\n          setDetailOpen(open);\n          if (!open) handleDialogClose();\n        }}\n      />\n    </>\n  );\n};\n\ninterface PipelineBoardProps {\n  items: PipelineItem[];\n  isLoading?: boolean;\n  selectedBdr: string;\n  onRefresh?: () => void;\n}\n\nexport function PipelineBoard({ items, isLoading, selectedBdr, onRefresh }: PipelineBoardProps) {\n  const categoryGroups = {\n    Pipeline: pipelineStatusEnum.Pipeline,\n    Lists_Media_QA: pipelineStatusEnum.Lists_Media_QA,\n    Declined_Rescheduled: pipelineStatusEnum.Declined_Rescheduled,\n    Calls: pipelineStatusEnum.Calls,\n  };\n  \n  // Filter items by the selected BDR\n  const filteredItems = items.filter(item => item.bdr === selectedBdr);\n  \n  // Get all pipeline item IDs for batch activity logs\n  const pipelineItemIds = filteredItems.map(item => item.id);\n  \n  // Fetch batch activity logs for all pipeline items\n  const { data: batchActivityData } = useBatchActivityLogs(pipelineItemIds);\n  \n  // Group items by category and status\n  const groupedItems: Record<string, Record<string, PipelineItem[]>> = {};\n  \n  pipelineCategoryEnum.forEach(category => {\n    groupedItems[category] = {};\n    \n    categoryGroups[category].forEach(status => {\n      groupedItems[category][status] = filteredItems.filter(\n        item => item.category === category && item.status === status\n      );\n    });\n  });\n  \n  const renderSkeletonCards = (count: number) => {\n    return Array(count)\n      .fill(0)\n      .map((_, i) => (\n        <div key={i} className=\"mb-2\">\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      ));\n  };\n  \n  const renderColumn = (category: string, status: string, items: PipelineItem[]) => {\n    return (\n      <div key={status} className=\"min-w-[250px] w-[250px] flex-shrink-0\">\n        <div className=\"mb-3 flex items-center justify-between\">\n          <h3 className=\"text-sm font-medium\">{status} ({items.length})</h3>\n          <PipelineDialog\n            title={`Add ${status} Item`}\n            buttonLabel=\"+\"\n            buttonVariant=\"outline\"\n            buttonSize=\"icon\"\n            buttonIcon={false}\n            defaultCategory={category}\n            defaultStatus={status}\n            defaultBdr={selectedBdr}\n            onSuccess={onRefresh}\n            className=\"h-7 w-7\"\n          />\n        </div>\n        <div className=\"rounded-lg border bg-background/50 p-2 min-h-[200px]\">\n          {isLoading ? (\n            renderSkeletonCards(3)\n          ) : items.length > 0 ? (\n            items.map((item) => <PipelineItemCard key={item.id} item={item} onRefresh={onRefresh} />)\n          ) : (\n            <div className=\"flex flex-col items-center justify-center h-24 text-sm text-muted-foreground gap-2\">\n              <span>No items</span>\n              <PipelineDialog\n                title={`Add ${status} Item`}\n                buttonLabel=\"Add Lead\"\n                buttonVariant=\"outline\"\n                buttonSize=\"sm\"\n                buttonIcon={false}\n                defaultCategory={category}\n                defaultStatus={status}\n                defaultBdr={selectedBdr}\n                onSuccess={onRefresh}\n                className=\"text-xs\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderCallDateColumn = () => {\n    const callItems = filteredItems.filter(item => item.category === 'Calls');\n    \n    return (\n      <div className=\"min-w-[250px] w-[250px] flex-shrink-0\">\n        <div className=\"mb-3 flex items-center justify-between\">\n          <h3 className=\"text-sm font-medium\">Call Dates ({callItems.length})</h3>\n        </div>\n        <div className=\"rounded-lg border bg-background/50 p-2 min-h-[200px]\">\n          {isLoading ? (\n            renderSkeletonCards(3)\n          ) : callItems.length > 0 ? (\n            callItems.map((item) => (\n              <Card key={item.id} className=\"mb-2 cursor-pointer hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-3\">\n                  <div className=\"flex flex-col gap-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"font-semibold text-sm\">{item.name}</div>\n                      </div>\n                    </div>\n                    \n                    {item.company && (\n                      <div className=\"text-sm text-muted-foreground\">\n                        {item.company}\n                      </div>\n                    )}\n                    \n                    <div className=\"text-sm\">\n                      <PipelineEditableCell\n                        value={item.callDate || ''}\n                        item={item}\n                        field=\"callDate\"\n                        placeholder=\"Set call date\"\n                        isDate={true}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n                      <span>{item.status}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <div className=\"flex flex-col items-center justify-center h-24 text-sm text-muted-foreground gap-2\">\n              <span>No call items</span>\n              <PipelineDialog\n                title=\"Add Call Item\"\n                buttonLabel=\"Add Call\"\n                buttonVariant=\"outline\"\n                buttonSize=\"sm\"\n                buttonIcon={false}\n                defaultCategory=\"Calls\"\n                defaultStatus=\"Scheduled\"\n                defaultBdr={selectedBdr}\n                onSuccess={onRefresh}\n                className=\"text-xs\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"space-y-8\">\n      {/* Floating Add New Lead Button */}\n      <div className=\"sticky top-4 z-10 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Pipeline Board</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Managing pipeline for {selectedBdr}\n            </p>\n          </div>\n          <PipelineDialog\n            title=\"Add New Lead\"\n            buttonLabel=\"Add New Lead\"\n            buttonVariant=\"default\"\n            buttonIcon={true}\n            defaultCategory=\"Pipeline\"\n            defaultStatus=\"New\"\n            defaultBdr={selectedBdr}\n            onSuccess={onRefresh}\n            className=\"shadow-lg\"\n          />\n        </div>\n      </div>\n\n      {pipelineCategoryEnum.map((category) => (\n        <div key={category} className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">\n              {category.replace(/_/g, ', ')}\n            </h2>\n            <PipelineDialog\n              title={`Add ${category.replace(/_/g, ' ')} Item`}\n              buttonLabel=\"Add Item\"\n              buttonVariant=\"default\"\n              buttonIcon={true}\n              defaultCategory={category}\n              defaultStatus={categoryGroups[category][0]}\n              defaultBdr={selectedBdr}\n              onSuccess={onRefresh}\n            />\n          </div>\n          <div className=\"flex gap-4 overflow-x-auto pb-4\">\n            {categoryGroups[category].map((status) =>\n              renderColumn(category, status, groupedItems[category][status])\n            )}\n            {category === 'Calls' && renderCallDateColumn()}\n          </div>\n        </div>\n      ))}\n      \n      {/* Floating Action Button for Quick Add */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <PipelineDialog\n          title=\"Add New Lead\"\n          buttonLabel=\"\"\n          buttonVariant=\"default\"\n          buttonSize=\"icon\"\n          buttonIcon={true}\n          defaultCategory=\"Pipeline\"\n          defaultStatus=\"New\"\n          defaultBdr={selectedBdr}\n          onSuccess={onRefresh}\n          className=\"h-14 w-14 rounded-full shadow-lg hover:shadow-xl transition-shadow\"\n        />\n      </div>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\duplicate-search.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":327,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11522,11544],"text":"No results found for &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11522,11544],"text":"No results found for &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11522,11544],"text":"No results found for &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11522,11544],"text":"No results found for &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":327,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11557,11558],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11557,11558],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11557,11558],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11557,11558],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { \r\n  Search, \r\n  Building2, \r\n  User, \r\n  Mail, \r\n  Phone, \r\n  Calendar, \r\n  ExternalLink,\r\n  Loader2,\r\n} from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { useDebounce } from '@/lib/hooks/use-debounce';\r\n\r\ninterface SearchResult {\r\n  id: string;\r\n  type: 'lead' | 'pipeline';\r\n  name: string;\r\n  company?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  status: string;\r\n  category?: string;\r\n  value?: number;\r\n  addedDate: string;\r\n  lastActivity?: string;\r\n  owner: {\r\n    id: string;\r\n    name: string;\r\n    role: string;\r\n  };\r\n  relevanceScore: number;\r\n}\r\n\r\ninterface SearchResponse {\r\n  results: SearchResult[];\r\n  totalFound: number;\r\n  query: string;\r\n  searchType: string;\r\n}\r\n\r\nexport function DuplicateSearch() {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchType, setSearchType] = useState('all');\r\n  const [includeInactive, setIncludeInactive] = useState(false);\r\n  const [results, setResults] = useState<SearchResult[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [totalFound, setTotalFound] = useState(0);\r\n\r\n  const debouncedQuery = useDebounce(searchQuery, 300);\r\n\r\n  const performSearch = useCallback(async (query: string, type: string, inactive: boolean) => {\r\n    if (!query.trim() || query.length < 2) {\r\n      setResults([]);\r\n      setTotalFound(0);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const params = new URLSearchParams({\r\n        query: query.trim(),\r\n        type,\r\n        limit: '50',\r\n        includeInactive: inactive.toString(),\r\n      });\r\n\r\n      const response = await fetch(`/api/duplicates/search?${params}`);\r\n      \r\n      if (response.ok) {\r\n        const data: SearchResponse = await response.json();\r\n        setResults(data.results);\r\n        setTotalFound(data.totalFound);\r\n      } else {\r\n        console.error('Search failed:', response.statusText);\r\n        setResults([]);\r\n        setTotalFound(0);\r\n      }\r\n    } catch (error) {\r\n      console.error('Search error:', error);\r\n      setResults([]);\r\n      setTotalFound(0);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Auto-search when debounced query changes\r\n  useEffect(() => {\r\n    performSearch(debouncedQuery, searchType, includeInactive);\r\n  }, [debouncedQuery, searchType, includeInactive, performSearch]);\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'lead':\r\n        return <User className=\"h-4 w-4 text-blue-500\" />;\r\n      case 'pipeline':\r\n        return <Building2 className=\"h-4 w-4 text-green-500\" />;\r\n      default:\r\n        return <Search className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string, type: string) => {\r\n    if (type === 'pipeline') {\r\n      if (status.includes('Won')) return 'default';\r\n      if (status.includes('Lost') || status === 'Dead') return 'destructive';\r\n      return 'secondary';\r\n    }\r\n    \r\n    // Lead statuses\r\n    if (status === 'Closed') return 'destructive';\r\n    if (status.includes('Contacted')) return 'default';\r\n    return 'secondary';\r\n  };\r\n\r\n  const formatValue = (value?: number) => {\r\n    if (!value) return '';\r\n    return new Intl.NumberFormat('en-GB', {\r\n      style: 'currency',\r\n      currency: 'GBP',\r\n      minimumFractionDigits: 0,\r\n    }).format(value);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    try {\r\n      return format(new Date(dateString), 'MMM dd, yyyy');\r\n    } catch {\r\n      return 'Invalid date';\r\n    }\r\n  };\r\n\r\n  const getRelevanceColor = (score: number) => {\r\n    if (score >= 0.9) return 'bg-green-100 text-green-800';\r\n    if (score >= 0.7) return 'bg-yellow-100 text-yellow-800';\r\n    return 'bg-gray-100 text-gray-800';\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Search className=\"h-5 w-5\" />\r\n          Database Search\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Search for existing contacts and companies to identify potential duplicates\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Search Controls */}\r\n        <div className=\"flex flex-col md:flex-row gap-4\">\r\n          <div className=\"flex-1\">\r\n            <Input\r\n              placeholder=\"Search by name, company, email, or phone...\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              className=\"w-full\"\r\n            />\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <Select value={searchType} onValueChange={setSearchType}>\r\n              <SelectTrigger className=\"w-[140px]\">\r\n                <SelectValue placeholder=\"Search type\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">All Types</SelectItem>\r\n                <SelectItem value=\"company\">Company</SelectItem>\r\n                <SelectItem value=\"contact\">Contact</SelectItem>\r\n                <SelectItem value=\"email\">Email</SelectItem>\r\n                <SelectItem value=\"phone\">Phone</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n            <Button\r\n              variant={includeInactive ? 'default' : 'outline'}\r\n              onClick={() => setIncludeInactive(!includeInactive)}\r\n              className=\"whitespace-nowrap\"\r\n            >\r\n              Include Inactive\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Search Status */}\r\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\r\n          <div>\r\n            {loading ? (\r\n              <div className=\"flex items-center gap-2\">\r\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                Searching...\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                {searchQuery ? (\r\n                  `Found ${totalFound} result${totalFound !== 1 ? 's' : ''} for \"${searchQuery}\"`\r\n                ) : (\r\n                  'Enter search terms to find existing records'\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Results */}\r\n        {results.length > 0 ? (\r\n          <div className=\"border rounded-lg\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead className=\"w-[50px]\">Type</TableHead>\r\n                  <TableHead>Contact</TableHead>\r\n                  <TableHead>Company</TableHead>\r\n                  <TableHead>Contact Info</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>Owner</TableHead>\r\n                  <TableHead>Added</TableHead>\r\n                  <TableHead className=\"w-[80px]\">Match</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {results.map((result) => (\r\n                  <TableRow key={result.id} className=\"hover:bg-gray-50/50\">\r\n                    <TableCell>\r\n                      <div className=\"flex items-center justify-center\">\r\n                        {getTypeIcon(result.type)}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div>\r\n                        <div className=\"font-medium\">{result.name}</div>\r\n                        {result.type === 'pipeline' && result.category && (\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {result.category}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <Building2 className=\"h-3 w-3 text-muted-foreground\" />\r\n                        {result.company || 'N/A'}\r\n                      </div>\r\n                      {result.value && (\r\n                        <div className=\"text-xs text-muted-foreground\">\r\n                          {formatValue(result.value)}\r\n                        </div>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"space-y-1 text-xs\">\r\n                        {result.email && (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Mail className=\"h-3 w-3 text-muted-foreground\" />\r\n                            <span className=\"truncate max-w-[150px]\">{result.email}</span>\r\n                          </div>\r\n                        )}\r\n                        {result.phone && (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Phone className=\"h-3 w-3 text-muted-foreground\" />\r\n                            <span>{result.phone}</span>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={getStatusColor(result.status, result.type)}>\r\n                        {result.status}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"text-sm\">\r\n                        <div className=\"font-medium\">{result.owner.name}</div>\r\n                        <div className=\"text-xs text-muted-foreground capitalize\">\r\n                          {result.owner.role.toLowerCase()}\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"text-sm\">\r\n                        <div>{formatDate(result.addedDate)}</div>\r\n                        {result.lastActivity && (\r\n                          <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\r\n                            <Calendar className=\"h-3 w-3\" />\r\n                            {formatDate(result.lastActivity)}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"text-center\">\r\n                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getRelevanceColor(result.relevanceScore)}`}>\r\n                          {Math.round(result.relevanceScore * 100)}%\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : searchQuery && !loading && (\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            <Search className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n            <p>No results found for \"{searchQuery}\"</p>\r\n            <p className=\"text-sm\">Try different search terms or check your filters</p>\r\n          </div>\r\n        )}\r\n\r\n        {!searchQuery && (\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            <Search className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n            <p>Start typing to search the database</p>\r\n            <p className=\"text-sm\">Search by company name, contact name, email, or phone number</p>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\duplicate-warning-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { \r\n  AlertTriangle, \r\n  Building2, \r\n  Mail, \r\n  Phone, \r\n  User, \r\n  Calendar, \r\n  ExternalLink,\r\n  Clock,\r\n  AlertCircle\r\n} from 'lucide-react';\r\nimport { WarningSeverity, DuplicateType } from '@prisma/client';\r\n\r\nexport interface DuplicateMatch {\r\n  id: string;\r\n  matchType: DuplicateType;\r\n  confidence: number;\r\n  severity: WarningSeverity;\r\n  matchDetails: {\r\n    type: 'exact' | 'similar';\r\n    field: string;\r\n  };\r\n  existingRecord: {\r\n    type: 'lead' | 'pipeline' | 'company' | 'contact';\r\n    company?: string;\r\n    lastContactDate?: string;\r\n    status?: string;\r\n    isActive?: boolean;\r\n    owner?: {\r\n      name?: string;\r\n    };\r\n  };\r\n}\r\n\r\nexport interface DuplicateWarningResult {\r\n  hasWarning: boolean;\r\n  severity: WarningSeverity;\r\n  warningId?: string;\r\n  message?: string;\r\n  matches: DuplicateMatch[];\r\n}\r\n\r\ninterface DuplicateWarningDialogProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onProceed: (reason?: string) => void;\r\n  onCancel: () => void;\r\n  warning: DuplicateWarningResult;\r\n  isProcessing?: boolean;\r\n}\r\n\r\nexport function DuplicateWarningDialog({\r\n  isOpen,\r\n  onClose,\r\n  onProceed,\r\n  onCancel,\r\n  warning,\r\n  isProcessing = false,\r\n}: DuplicateWarningDialogProps) {\r\n  const [acknowledged, setAcknowledged] = useState(false);\r\n  const [reason, setReason] = useState('');\r\n  const [showReason, setShowReason] = useState(false);\r\n\r\n  const handleProceed = () => {\r\n    onProceed(reason.trim() || undefined);\r\n    resetState();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onCancel();\r\n    resetState();\r\n  };\r\n\r\n  const handleClose = () => {\r\n    onClose();\r\n    resetState();\r\n  };\r\n\r\n  const resetState = () => {\r\n    setAcknowledged(false);\r\n    setReason('');\r\n    setShowReason(false);\r\n  };\r\n\r\n  const getSeverityIcon = (severity: WarningSeverity) => {\r\n    switch (severity) {\r\n      case WarningSeverity.CRITICAL:\r\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\r\n      case WarningSeverity.HIGH:\r\n        return <AlertTriangle className=\"h-5 w-5 text-orange-500\" />;\r\n      case WarningSeverity.MEDIUM:\r\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\r\n      default:\r\n        return <AlertTriangle className=\"h-5 w-5 text-blue-500\" />;\r\n    }\r\n  };\r\n\r\n  const getSeverityColor = (severity: WarningSeverity) => {\r\n    switch (severity) {\r\n      case WarningSeverity.CRITICAL:\r\n        return 'destructive';\r\n      case WarningSeverity.HIGH:\r\n        return 'destructive';\r\n      case WarningSeverity.MEDIUM:\r\n        return 'secondary';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  const getMatchTypeIcon = (matchType: DuplicateType) => {\r\n    switch (matchType) {\r\n      case DuplicateType.COMPANY_NAME:\r\n      case DuplicateType.COMPANY_DOMAIN:\r\n        return <Building2 className=\"h-4 w-4\" />;\r\n      case DuplicateType.CONTACT_EMAIL:\r\n        return <Mail className=\"h-4 w-4\" />;\r\n      case DuplicateType.CONTACT_PHONE:\r\n        return <Phone className=\"h-4 w-4\" />;\r\n      case DuplicateType.CONTACT_NAME:\r\n        return <User className=\"h-4 w-4\" />;\r\n      case DuplicateType.LINKEDIN_PROFILE:\r\n        return <ExternalLink className=\"h-4 w-4\" />;\r\n      default:\r\n        return <AlertTriangle className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const formatMatchType = (matchType: DuplicateType) => {\r\n    return matchType\r\n      .toLowerCase()\r\n      .replace(/_/g, ' ')\r\n      .replace(/\\b\\w/g, l => l.toUpperCase());\r\n  };\r\n\r\n  const formatTimeAgo = (dateString?: string) => {\r\n    if (!dateString) return 'Unknown';\r\n    \r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n    \r\n    if (diffInSeconds < 60) return 'Just now';\r\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\r\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\r\n    if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\r\n    if (diffInSeconds < 31536000) return `${Math.floor(diffInSeconds / 2592000)} months ago`;\r\n    \r\n    return `${Math.floor(diffInSeconds / 31536000)} years ago`;\r\n  };\r\n\r\n  const highPriorityMatches = warning.matches.filter(m => \r\n    m.severity === WarningSeverity.CRITICAL || m.severity === WarningSeverity.HIGH\r\n  );\r\n  \r\n  const mediumPriorityMatches = warning.matches.filter(m => \r\n    m.severity === WarningSeverity.MEDIUM\r\n  );\r\n\r\n  const shouldShowReason = warning.severity === WarningSeverity.CRITICAL || \r\n                          warning.severity === WarningSeverity.HIGH ||\r\n                          highPriorityMatches.length > 0;\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={handleClose}>\r\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2 text-xl\">\r\n            {getSeverityIcon(warning.severity)}\r\n            Potential Duplicate Detected\r\n          </DialogTitle>\r\n          <DialogDescription className=\"text-base\">\r\n            {warning.message || \r\n             `We found ${warning.matches.length} potential duplicate(s) in the system. Please review before proceeding.`}\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-4\">\r\n          {/* High Priority Matches */}\r\n          {highPriorityMatches.length > 0 && (\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\r\n                <AlertCircle className=\"h-5 w-5 text-red-500\" />\r\n                High Priority Conflicts ({highPriorityMatches.length})\r\n              </h3>\r\n              <div className=\"space-y-3\">\r\n                {highPriorityMatches.map((match) => (\r\n                  <Card key={match.id} className=\"border-red-200 dark:border-red-800\">\r\n                    <CardHeader className=\"pb-3\">\r\n                      <CardTitle className=\"text-sm flex items-center justify-between\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getMatchTypeIcon(match.matchType)}\r\n                          {formatMatchType(match.matchType)} Match\r\n                        </div>\r\n                        <Badge variant={getSeverityColor(match.severity)}>\r\n                          {match.severity}\r\n                        </Badge>\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent className=\"pt-0\">\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\r\n                        <div>\r\n                          <Label className=\"text-xs text-muted-foreground\">Company</Label>\r\n                          <p className=\"font-medium\">{match.existingRecord.company || 'N/A'}</p>\r\n                        </div>\r\n                        <div>\r\n                          <Label className=\"text-xs text-muted-foreground\">Last Contact</Label>\r\n                          <p className=\"flex items-center gap-1\">\r\n                            <Clock className=\"h-3 w-3\" />\r\n                            {formatTimeAgo(match.existingRecord.lastContactDate)}\r\n                          </p>\r\n                        </div>\r\n                        <div>\r\n                          <Label className=\"text-xs text-muted-foreground\">Owner</Label>\r\n                          <p>{match.existingRecord.owner?.name || 'Unknown'}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"mt-3 flex items-center justify-between\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            {match.existingRecord.type.toUpperCase()}\r\n                          </Badge>\r\n                          <Badge \r\n                            variant={match.existingRecord.isActive ? 'default' : 'secondary'}\r\n                            className=\"text-xs\"\r\n                          >\r\n                            {match.existingRecord.status || 'Unknown Status'}\r\n                          </Badge>\r\n                        </div>\r\n                        <div className=\"text-xs text-muted-foreground\">\r\n                          {Math.round(match.confidence * 100)}% match confidence\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Medium Priority Matches */}\r\n          {mediumPriorityMatches.length > 0 && (\r\n            <div>\r\n              {highPriorityMatches.length > 0 && <Separator />}\r\n              <h3 className=\"text-base font-semibold mb-3 flex items-center gap-2\">\r\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\r\n                Additional Matches ({mediumPriorityMatches.length})\r\n              </h3>\r\n              <div className=\"space-y-2\">\r\n                {mediumPriorityMatches.map((match) => (\r\n                  <Card key={match.id} className=\"border-yellow-200 dark:border-yellow-800\">\r\n                    <CardContent className=\"p-4\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div className=\"flex items-center gap-3\">\r\n                          {getMatchTypeIcon(match.matchType)}\r\n                          <div>\r\n                            <p className=\"text-sm font-medium\">\r\n                              {formatMatchType(match.matchType)} - {match.existingRecord.company || 'Unknown Company'}\r\n                            </p>\r\n                            <p className=\"text-xs text-muted-foreground\">\r\n                              Last contact: {formatTimeAgo(match.existingRecord.lastContactDate)} by {match.existingRecord.owner?.name || 'Unknown'}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            {Math.round(match.confidence * 100)}%\r\n                          </Badge>\r\n                          <Badge variant={getSeverityColor(match.severity)} className=\"text-xs\">\r\n                            {match.severity}\r\n                          </Badge>\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Acknowledgment and Reason */}\r\n          <Separator />\r\n          \r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Checkbox\r\n                id=\"acknowledge\"\r\n                checked={acknowledged}\r\n                onCheckedChange={(checked) => setAcknowledged(checked as boolean)}\r\n              />\r\n              <Label htmlFor=\"acknowledge\" className=\"text-sm\">\r\n                I understand these may be duplicates and want to proceed anyway\r\n              </Label>\r\n            </div>\r\n\r\n            {(shouldShowReason || showReason) && (\r\n              <div>\r\n                <Label htmlFor=\"reason\" className=\"text-sm font-medium\">\r\n                  Reason for proceeding {shouldShowReason && <span className=\"text-red-500\">*</span>}\r\n                </Label>\r\n                <Textarea\r\n                  id=\"reason\"\r\n                  placeholder=\"Please explain why you're proceeding despite potential duplicates...\"\r\n                  value={reason}\r\n                  onChange={(e) => setReason(e.target.value)}\r\n                  className=\"mt-2\"\r\n                  rows={3}\r\n                />\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  This will be logged for audit purposes.\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            {!shouldShowReason && !showReason && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={() => setShowReason(true)}\r\n                className=\"text-muted-foreground\"\r\n              >\r\n                Add reason (optional)\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <DialogFooter className=\"flex-col sm:flex-row gap-2\">\r\n          <div className=\"flex flex-1 justify-start\">\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              This decision will be logged for audit trail and analytics.\r\n            </p>\r\n          </div>\r\n          \r\n          <div className=\"flex gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={handleCancel}\r\n              disabled={isProcessing}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            \r\n            <Button\r\n              onClick={handleProceed}\r\n              disabled={\r\n                !acknowledged || \r\n                (shouldShowReason && !reason.trim()) ||\r\n                isProcessing\r\n              }\r\n              className=\"min-w-[120px]\"\r\n            >\r\n              {isProcessing ? 'Processing...' : 'Proceed Anyway'}\r\n            </Button>\r\n          </div>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\editorial-board-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { CalendarIcon, ExternalLink, Mail, Phone, Plus, Search, Trash2 } from 'lucide-react';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { toast } from 'sonner';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Label } from '@/components/ui/label';\r\n\r\nexport interface EditorialBoardItem {\r\n  id: number;\r\n  name: string;\r\n  title?: string;\r\n  company?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  addedDate: string;\r\n  lastUpdated: string;\r\n  bdrId: string;\r\n  status: string;\r\n  notes?: string;\r\n  link?: string;\r\n  interviewDate?: string;\r\n  qaSubmissionDate?: string;\r\n  qaApprovedDate?: string;\r\n  publicationDate?: string;\r\n  publicationLink?: string;\r\n  leadId?: number;\r\n  pipelineItemId?: number;\r\n  bdr: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n  lead?: {\r\n    name: string;\r\n    company: string;\r\n  };\r\n  pipelineItem?: {\r\n    name: string;\r\n    company: string;\r\n  };\r\n}\r\n\r\ninterface EditorialBoardTableProps {\r\n  items: EditorialBoardItem[];\r\n  isLoading?: boolean;\r\n  onRefresh: () => void;\r\n  selectedBdr?: string;\r\n  onBdrChange?: (bdr: string) => void;\r\n  availableBdrs?: Array<{ id: string; name: string }>;\r\n}\r\n\r\nconst statusConfig = {\r\n  'LIST_OUT_QA_INTERVIEW_PROPOSED': { label: 'List Out/Q&A/Interview Proposed', color: 'bg-yellow-100 text-yellow-800' },\r\n  'INTERVIEW_SCHEDULED': { label: 'Interview Scheduled', color: 'bg-blue-100 text-blue-800' },\r\n  'INTERVIEW_COMPLETED': { label: 'Interview Completed', color: 'bg-purple-100 text-purple-800' },\r\n  'QA_SUBMITTED': { label: 'Q&A Submitted', color: 'bg-orange-100 text-orange-800' },\r\n  'QA_APPROVED': { label: 'Q&A Approved', color: 'bg-green-100 text-green-800' },\r\n  'PUBLISHED': { label: 'Published', color: 'bg-emerald-100 text-emerald-800' },\r\n  'DECLINED': { label: 'Declined', color: 'bg-red-100 text-red-800' },\r\n};\r\n\r\nexport function EditorialBoardTable({ \r\n  items, \r\n  isLoading, \r\n  onRefresh, \r\n  selectedBdr, \r\n  onBdrChange, \r\n  availableBdrs \r\n}: EditorialBoardTableProps) {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [newItem, setNewItem] = useState<Partial<EditorialBoardItem>>({\r\n    name: '',\r\n    title: '',\r\n    company: '',\r\n    email: '',\r\n    phone: '',\r\n    status: 'LIST_OUT_QA_INTERVIEW_PROPOSED',\r\n    notes: '',\r\n    link: '',\r\n    bdrId: selectedBdr || '',\r\n  });\r\n\r\n  const filteredItems = items.filter(item => {\r\n    const matchesSearch = !searchQuery || \r\n      item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      (item.company && item.company.toLowerCase().includes(searchQuery.toLowerCase())) ||\r\n      (item.email && item.email.toLowerCase().includes(searchQuery.toLowerCase()));\r\n    \r\n    const matchesStatus = statusFilter === 'all' || item.status === statusFilter;\r\n    \r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const handleAddItem = async () => {\r\n    try {\r\n      const response = await fetch('/api/editorial', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newItem),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create editorial item');\r\n      }\r\n\r\n      toast.success('Editorial item created successfully');\r\n      setIsAddDialogOpen(false);\r\n      setNewItem({\r\n        name: '',\r\n        title: '',\r\n        company: '',\r\n        email: '',\r\n        phone: '',\r\n        status: 'LIST_OUT_QA_INTERVIEW_PROPOSED',\r\n        notes: '',\r\n        link: '',\r\n        bdrId: selectedBdr || '',\r\n      });\r\n      onRefresh();\r\n    } catch (error) {\r\n      console.error('Error creating editorial item:', error);\r\n      toast.error('Failed to create editorial item');\r\n    }\r\n  };\r\n\r\n  const handleDeleteItem = async (id: number) => {\r\n    if (!confirm('Are you sure you want to delete this editorial item?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/api/editorial/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to delete editorial item');\r\n      }\r\n\r\n      toast.success('Editorial item deleted successfully');\r\n      onRefresh();\r\n    } catch (error) {\r\n      console.error('Error deleting editorial item:', error);\r\n      toast.error('Failed to delete editorial item');\r\n    }\r\n  };\r\n\r\n  const handleStatusUpdate = async (id: number, newStatus: string) => {\r\n    try {\r\n      const response = await fetch(`/api/editorial/${id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ status: newStatus }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update status');\r\n      }\r\n\r\n      toast.success('Status updated successfully');\r\n      onRefresh();\r\n    } catch (error) {\r\n      console.error('Error updating status:', error);\r\n      toast.error('Failed to update status');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                📝 Editorial Board\r\n              </CardTitle>\r\n              <p className=\"text-sm text-muted-foreground mt-1\">\r\n                Manage leads for list out, Q&A, and interview opportunities\r\n              </p>\r\n            </div>\r\n            \r\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\r\n              <DialogTrigger asChild>\r\n                <Button>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  Add Editorial Item\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"max-w-md\">\r\n                <DialogHeader>\r\n                  <DialogTitle>Add Editorial Item</DialogTitle>\r\n                  <DialogDescription>\r\n                    Create a new editorial board entry for a lead.\r\n                  </DialogDescription>\r\n                </DialogHeader>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"name\">Name *</Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      placeholder=\"Contact name\"\r\n                      value={newItem.name || ''}\r\n                      onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label htmlFor=\"title\">Title</Label>\r\n                    <Input\r\n                      id=\"title\"\r\n                      placeholder=\"Job title\"\r\n                      value={newItem.title || ''}\r\n                      onChange={(e) => setNewItem({ ...newItem, title: e.target.value })}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label htmlFor=\"company\">Company</Label>\r\n                    <Input\r\n                      id=\"company\"\r\n                      placeholder=\"Company name\"\r\n                      value={newItem.company || ''}\r\n                      onChange={(e) => setNewItem({ ...newItem, company: e.target.value })}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label htmlFor=\"email\">Email</Label>\r\n                    <Input\r\n                      id=\"email\"\r\n                      type=\"email\"\r\n                      placeholder=\"Email address\"\r\n                      value={newItem.email || ''}\r\n                      onChange={(e) => setNewItem({ ...newItem, email: e.target.value })}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <Label htmlFor=\"status\">Status</Label>\r\n                    <Select\r\n                      value={newItem.status}\r\n                      onValueChange={(value) => setNewItem({ ...newItem, status: value })}\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {Object.entries(statusConfig).map(([key, config]) => (\r\n                          <SelectItem key={key} value={key}>\r\n                            {config.label}\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  {availableBdrs && (\r\n                    <div>\r\n                      <Label htmlFor=\"bdr\">BDR</Label>\r\n                      <Select\r\n                        value={newItem.bdrId}\r\n                        onValueChange={(value) => setNewItem({ ...newItem, bdrId: value })}\r\n                      >\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"Select BDR\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {availableBdrs.map((bdr) => (\r\n                            <SelectItem key={bdr.id} value={bdr.id}>\r\n                              {bdr.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  <div>\r\n                    <Label htmlFor=\"notes\">Notes</Label>\r\n                    <Textarea\r\n                      id=\"notes\"\r\n                      placeholder=\"Additional notes...\"\r\n                      value={newItem.notes || ''}\r\n                      onChange={(e) => setNewItem({ ...newItem, notes: e.target.value })}\r\n                      rows={3}\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"flex gap-2 pt-4\">\r\n                    <Button onClick={handleAddItem} disabled={!newItem.name}>\r\n                      Create Item\r\n                    </Button>\r\n                    <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n        </CardHeader>\r\n        \r\n        <CardContent>\r\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\r\n            <div className=\"flex-1\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\r\n                <Input\r\n                  placeholder=\"Search by name, company, or email...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            \r\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n              <SelectTrigger className=\"w-full sm:w-48\">\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">All Statuses</SelectItem>\r\n                {Object.entries(statusConfig).map(([key, config]) => (\r\n                  <SelectItem key={key} value={key}>\r\n                    {config.label}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            {availableBdrs && onBdrChange && (\r\n              <Select value={selectedBdr || 'all'} onValueChange={onBdrChange}>\r\n                <SelectTrigger className=\"w-full sm:w-48\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All BDRs</SelectItem>\r\n                  {availableBdrs.map((bdr) => (\r\n                    <SelectItem key={bdr.id} value={bdr.id}>\r\n                      {bdr.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Name</TableHead>\r\n                  <TableHead>Company</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead>BDR</TableHead>\r\n                  <TableHead>Last Updated</TableHead>\r\n                  <TableHead>Contact</TableHead>\r\n                  <TableHead className=\"w-[100px]\">Actions</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {isLoading ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7} className=\"text-center py-8\">\r\n                      Loading editorial items...\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : filteredItems.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\r\n                      {searchQuery || statusFilter !== 'all' \r\n                        ? 'No editorial items match your filters'\r\n                        : 'No editorial items found'\r\n                      }\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  filteredItems.map((item) => (\r\n                    <TableRow key={item.id} className=\"hover:bg-muted/50\">\r\n                      <TableCell>\r\n                        <div>\r\n                          <div className=\"font-medium\">{item.name}</div>\r\n                          {item.title && (\r\n                            <div className=\"text-sm text-muted-foreground\">{item.title}</div>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <div>\r\n                          <div>{item.company || 'Not specified'}</div>\r\n                          {(item.lead || item.pipelineItem) && (\r\n                            <div className=\"text-xs text-muted-foreground\">\r\n                              {item.lead && `Lead: ${item.lead.name}`}\r\n                              {item.pipelineItem && `Pipeline: ${item.pipelineItem.name}`}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Select\r\n                          value={item.status}\r\n                          onValueChange={(value) => handleStatusUpdate(item.id, value)}\r\n                        >\r\n                          <SelectTrigger className=\"w-auto border-0 p-0 h-auto\">\r\n                            <Badge className={statusConfig[item.status as keyof typeof statusConfig]?.color}>\r\n                              {statusConfig[item.status as keyof typeof statusConfig]?.label}\r\n                            </Badge>\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {Object.entries(statusConfig).map(([key, config]) => (\r\n                              <SelectItem key={key} value={key}>\r\n                                {config.label}\r\n                              </SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <div className=\"text-sm\">\r\n                          {item.bdr.name}\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          {formatDistanceToNow(new Date(item.lastUpdated), { addSuffix: true })}\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <div className=\"flex gap-2\">\r\n                          {item.email && (\r\n                            <a href={`mailto:${item.email}`} className=\"text-blue-500 hover:text-blue-700\">\r\n                              <Mail className=\"h-4 w-4\" />\r\n                            </a>\r\n                          )}\r\n                          {item.phone && (\r\n                            <a href={`tel:${item.phone}`} className=\"text-blue-500 hover:text-blue-700\">\r\n                              <Phone className=\"h-4 w-4\" />\r\n                            </a>\r\n                          )}\r\n                          {item.link && (\r\n                            <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-500 hover:text-blue-700\">\r\n                              <ExternalLink className=\"h-4 w-4\" />\r\n                            </a>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={() => handleDeleteItem(item.id)}\r\n                          className=\"text-destructive hover:text-destructive\"\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center justify-between pt-4\">\r\n            <div className=\"text-sm text-muted-foreground\">\r\n              Showing {filteredItems.length} of {items.length} editorial items\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\finance-board.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Progress' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used.","line":8,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HelpCircle' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { \r\n  DollarSign, \r\n  TrendingUp, \r\n  TrendingDown, \r\n  Activity, \r\n  Target, \r\n  Clock, \r\n  HelpCircle,\r\n  Plus,\r\n  AlertCircle\r\n} from 'lucide-react';\r\nimport Link from 'next/link';\r\n\r\ninterface FinanceAnalytics {\r\n  totalRevenue: number;\r\n  ytdRevenue: number;\r\n  monthlyRevenue: number;\r\n  quarterlyRevenue: number;\r\n  averageDealSize: number;\r\n  conversionRate: number;\r\n  overdueDays: number;\r\n  monthlyGrowth: number;\r\n  totalDeals: number;\r\n  ytdDeals: number;\r\n  monthlyDeals: number;\r\n  averagePaymentTime: number;\r\n  statusBreakdown: { [key: string]: number };\r\n  monthlyTrends: Array<{ month: string; revenue: number; deals: number }>;\r\n  bdrPerformance: Array<{ bdr: string; revenue: number; deals: number; avgDealSize: number }>;\r\n  paymentStatus: {\r\n    paid: number;\r\n    pending: number;\r\n    overdue: number;\r\n  };\r\n}\r\n\r\nexport function FinanceBoard() {\r\n  const [analytics, setAnalytics] = useState<FinanceAnalytics | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchAnalytics = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/finance?analytics=true');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setAnalytics(data.analytics);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching finance analytics:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAnalytics();\r\n  }, []);\r\n\r\n  const getTrendIcon = (value: number) => {\r\n    if (value > 0) return <TrendingUp className=\"h-4 w-4 text-emerald-600 dark:text-emerald-400\" />;\r\n    if (value < 0) return <TrendingDown className=\"h-4 w-4 text-rose-600 dark:text-rose-400\" />;\r\n    return <Activity className=\"h-4 w-4 text-muted-foreground\" />;\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-GB', { \r\n      style: 'currency', \r\n      currency: 'GBP' \r\n    }).format(amount);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className=\"hover:shadow-lg transition-shadow flex flex-col h-full\">\r\n        <CardHeader className=\"pb-3 flex-shrink-0\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <DollarSign className=\"h-5 w-5\" />\r\n            Finance Overview\r\n          </CardTitle>\r\n          <CardDescription>Loading financial metrics...</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"text-sm text-muted-foreground flex-grow\">\r\n          <div className=\"flex items-center justify-center py-8\">\r\n            <Activity className=\"h-6 w-6 animate-spin\" />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (!analytics) {\r\n    return (\r\n      <Card className=\"hover:shadow-lg transition-shadow flex flex-col h-full\">\r\n        <CardHeader className=\"pb-3 flex-shrink-0\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <DollarSign className=\"h-5 w-5\" />\r\n            Finance Overview\r\n          </CardTitle>\r\n          <CardDescription>Financial performance and revenue tracking</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"text-sm text-muted-foreground flex-grow\">\r\n          <div className=\"flex items-center justify-center py-8 text-center\">\r\n            <div>\r\n              <AlertCircle className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\r\n              <p className=\"text-gray-600\">No finance data available</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">Add finance entries to see metrics</p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n        <CardFooter className=\"flex-shrink-0\">\r\n          <Link href=\"/finance\" className=\"w-full\">\r\n            <Button className=\"w-full\" size=\"lg\">\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              Go to Finance\r\n            </Button>\r\n          </Link>\r\n        </CardFooter>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"hover:shadow-lg transition-shadow flex flex-col h-full\">\r\n      <CardHeader className=\"pb-3 flex-shrink-0\">\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <DollarSign className=\"h-5 w-5\" />\r\n          Finance Overview\r\n          {getTrendIcon(analytics.monthlyGrowth)}\r\n        </CardTitle>\r\n        <CardDescription>Financial performance and revenue tracking</CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"text-sm text-muted-foreground flex-grow\">\r\n        <div className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div className=\"bg-muted/50 rounded-lg p-3 border\">\r\n              <div className=\"text-lg font-bold text-emerald-600 dark:text-emerald-400\">{formatCurrency(analytics.ytdRevenue)}</div>\r\n              <div className=\"text-xs text-muted-foreground\">YTD Revenue</div>\r\n            </div>\r\n            <div className=\"bg-muted/50 rounded-lg p-3 border\">\r\n              <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">{formatCurrency(analytics.averageDealSize)}</div>\r\n              <div className=\"text-xs text-muted-foreground\">Avg Deal Size</div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center justify-between text-xs\">\r\n              <span>Payment Status</span>\r\n              <span className=\"text-muted-foreground\">{analytics.totalDeals} total deals</span>\r\n            </div>\r\n            <div className=\"grid grid-cols-3 gap-2\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-bold text-emerald-600 dark:text-emerald-400\">{analytics.paymentStatus.paid}</div>\r\n                <div className=\"text-xs text-muted-foreground\">Paid</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-bold text-amber-600 dark:text-amber-400\">{analytics.paymentStatus.pending}</div>\r\n                <div className=\"text-xs text-muted-foreground\">Pending</div>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-bold text-rose-600 dark:text-rose-400\">{analytics.paymentStatus.overdue}</div>\r\n                <div className=\"text-xs text-muted-foreground\">Overdue</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center justify-between text-xs\">\r\n              <span>Monthly Growth</span>\r\n              <span className={`font-medium ${analytics.monthlyGrowth >= 0 ? 'text-emerald-600 dark:text-emerald-400' : 'text-rose-600 dark:text-rose-400'}`}>\r\n                {analytics.monthlyGrowth > 0 ? '+' : ''}{analytics.monthlyGrowth.toFixed(1)}%\r\n              </span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2 text-xs\">\r\n              <Clock className=\"h-3 w-3\" />\r\n              <span>Avg payment time: {Math.round(analytics.averagePaymentTime)} days</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n      <CardFooter className=\"flex-shrink-0\">\r\n        <Link href=\"/finance\" className=\"w-full\">\r\n          <Button className=\"w-full\" size=\"lg\">\r\n            <DollarSign className=\"h-4 w-4 mr-2\" />\r\n            Open Finance Dashboard\r\n          </Button>\r\n        </Link>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\finance-form.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'formData.gbpAmount'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [formData.soldAmount, entry, formData.gbpAmount]","fix":{"range":[3281,3309],"text":"[formData.soldAmount, entry, formData.gbpAmount]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { financeStatusEnum, leadBdrEnum } from '@/lib/validations';\r\nimport { formatDateForInput } from '@/lib/date-utils';\r\nimport { toast } from 'sonner';\r\nimport { exchangeRateService } from '@/lib/exchange-rate';\r\n\r\ninterface FinanceEntry {\r\n  id?: number;\r\n  company: string;\r\n  bdr: string;\r\n  leadGen: boolean;\r\n  status: string;\r\n  invoiceDate: Date | null;\r\n  dueDate: Date | null;\r\n  soldAmount: number | null;\r\n  gbpAmount: number | null;\r\n  exchangeRate: number | null;\r\n  exchangeRateDate: Date | null;\r\n  actualGbpReceived: number | null;\r\n  notes: string | null;\r\n  commissionPaid: boolean;\r\n  month: string;\r\n}\r\n\r\ninterface FinanceFormProps {\r\n  entry?: FinanceEntry;\r\n  onSubmit: (data: Omit<FinanceEntry, 'id'>) => void;\r\n  onCancel: () => void;\r\n  isLoading?: boolean;\r\n}\r\n\r\nexport function FinanceForm({ entry, onSubmit, onCancel, isLoading }: FinanceFormProps) {\r\n  const [formData, setFormData] = useState<Omit<FinanceEntry, 'id'>>({\r\n    company: entry?.company || '',\r\n    bdr: entry?.bdr || '',\r\n    leadGen: entry?.leadGen || false,\r\n    status: entry?.status || 'Awaiting Invoice',\r\n    invoiceDate: entry?.invoiceDate || null,\r\n    dueDate: entry?.dueDate || null,\r\n    soldAmount: entry?.soldAmount || null,\r\n    gbpAmount: entry?.gbpAmount || null,\r\n    exchangeRate: entry?.exchangeRate || null,\r\n    exchangeRateDate: entry?.exchangeRateDate || null,\r\n    actualGbpReceived: entry?.actualGbpReceived || null,\r\n    notes: entry?.notes || null,\r\n    commissionPaid: entry?.commissionPaid || false,\r\n    month: entry?.month || '2025-01',\r\n  });\r\n\r\n  const [isConverting, setIsConverting] = useState(false);\r\n  const [exchangeRateInfo, setExchangeRateInfo] = useState<string>('');\r\n\r\n  // Auto-convert USD to GBP when sold amount changes\r\n  useEffect(() => {\r\n    const convertUSDToGBP = async () => {\r\n      if (formData.soldAmount && formData.soldAmount > 0) {\r\n        // Only auto-convert if this is a new entry or if GBP amount is empty\r\n        if (!entry || !formData.gbpAmount) {\r\n          setIsConverting(true);\r\n          try {\r\n            const rate = await exchangeRateService.getCurrentRate();\r\n            const gbpAmount = exchangeRateService.convertUSDToGBP(formData.soldAmount, rate);\r\n            \r\n            setFormData(prev => ({\r\n              ...prev,\r\n              gbpAmount,\r\n              exchangeRate: rate,\r\n              exchangeRateDate: new Date()\r\n            }));\r\n            \r\n            setExchangeRateInfo(`Converted at rate: $1 = £${rate.toFixed(4)}`);\r\n          } catch (error) {\r\n            console.error('Error converting currency:', error);\r\n            toast.error('Failed to convert currency. Please enter GBP amount manually.');\r\n          } finally {\r\n            setIsConverting(false);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    convertUSDToGBP();\r\n  }, [formData.soldAmount, entry]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.company.trim()) {\r\n      toast.error('Company is required');\r\n      return;\r\n    }\r\n    \r\n    if (!formData.bdr) {\r\n      toast.error('BDR is required');\r\n      return;\r\n    }\r\n    \r\n    onSubmit(formData);\r\n  };\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"company\">Company *</Label>\r\n          <Input\r\n            id=\"company\"\r\n            value={formData.company}\r\n            onChange={(e) => setFormData({ ...formData, company: e.target.value })}\r\n            placeholder=\"Enter company name\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"bdr\">BDR *</Label>\r\n          <Select value={formData.bdr} onValueChange={(value) => setFormData({ ...formData, bdr: value })}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Select BDR\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {leadBdrEnum.map((bdr) => (\r\n                <SelectItem key={bdr} value={bdr}>\r\n                  {bdr}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"month\">Month *</Label>\r\n          <Select value={formData.month} onValueChange={(value) => setFormData({ ...formData, month: value })}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Select month\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"2025-01\">January 2025</SelectItem>\r\n              <SelectItem value=\"2025-02\">February 2025</SelectItem>\r\n              <SelectItem value=\"2025-03\">March 2025</SelectItem>\r\n              <SelectItem value=\"2025-04\">April 2025</SelectItem>\r\n              <SelectItem value=\"2025-05\">May 2025</SelectItem>\r\n              <SelectItem value=\"2025-06\">June 2025</SelectItem>\r\n              <SelectItem value=\"2025-07\">July 2025</SelectItem>\r\n              <SelectItem value=\"2025-08\">August 2025</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"status\">Status *</Label>\r\n          <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value })}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Select status\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {financeStatusEnum.map((status) => (\r\n                <SelectItem key={status} value={status}>\r\n                  {status}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"soldAmount\">Sold Amount</Label>\r\n          <Input\r\n            id=\"soldAmount\"\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            value={formData.soldAmount || ''}\r\n            onChange={(e) => setFormData({ \r\n              ...formData, \r\n              soldAmount: e.target.value ? parseFloat(e.target.value) : null \r\n            })}\r\n            placeholder=\"Enter sold amount\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"gbpAmount\">\r\n            GBP Amount\r\n            {exchangeRateInfo && (\r\n              <span className=\"text-xs text-gray-500 ml-2\">({exchangeRateInfo})</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            id=\"gbpAmount\"\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            value={formData.gbpAmount || ''}\r\n            onChange={(e) => {\r\n              const newGbpAmount = e.target.value ? parseFloat(e.target.value) : null;\r\n              setFormData({ \r\n                ...formData, \r\n                gbpAmount: newGbpAmount,\r\n                // Clear exchange rate info if manually edited\r\n                exchangeRate: newGbpAmount ? formData.exchangeRate : null,\r\n                exchangeRateDate: newGbpAmount ? formData.exchangeRateDate : null\r\n              });\r\n              if (newGbpAmount) {\r\n                setExchangeRateInfo('Manually entered');\r\n              }\r\n            }}\r\n            placeholder={isConverting ? \"Converting...\" : \"Enter GBP amount\"}\r\n            disabled={isConverting}\r\n          />\r\n          {entry && formData.exchangeRate && (\r\n            <p className=\"text-xs text-gray-500\">\r\n              Historical rate: $1 = £{formData.exchangeRate.toFixed(4)} \r\n              ({formData.exchangeRateDate ? new Date(formData.exchangeRateDate).toLocaleDateString() : 'N/A'})\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"actualGbpReceived\">Actual GBP Received</Label>\r\n          <Input\r\n            id=\"actualGbpReceived\"\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            value={formData.actualGbpReceived || ''}\r\n            onChange={(e) => setFormData({ \r\n              ...formData, \r\n              actualGbpReceived: e.target.value ? parseFloat(e.target.value) : null \r\n            })}\r\n            placeholder=\"Enter actual GBP received\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"invoiceDate\">Invoice Date</Label>\r\n          <Input\r\n            id=\"invoiceDate\"\r\n            type=\"date\"\r\n            value={formatDateForInput(formData.invoiceDate)}\r\n            onChange={(e) => setFormData({ \r\n              ...formData, \r\n              invoiceDate: e.target.value ? new Date(e.target.value) : null \r\n            })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"dueDate\">Due Date</Label>\r\n          <Input\r\n            id=\"dueDate\"\r\n            type=\"date\"\r\n            value={formatDateForInput(formData.dueDate)}\r\n            onChange={(e) => setFormData({ \r\n              ...formData, \r\n              dueDate: e.target.value ? new Date(e.target.value) : null \r\n            })}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex items-center space-x-2\">\r\n        <Checkbox\r\n          id=\"leadGen\"\r\n          checked={formData.leadGen}\r\n          onCheckedChange={(checked) => setFormData({ ...formData, leadGen: !!checked })}\r\n        />\r\n        <Label htmlFor=\"leadGen\">Lead Gen</Label>\r\n      </div>\r\n\r\n      <div className=\"flex items-center space-x-2\">\r\n        <Checkbox\r\n          id=\"commissionPaid\"\r\n          checked={formData.commissionPaid}\r\n          onCheckedChange={(checked) => setFormData({ ...formData, commissionPaid: !!checked })}\r\n        />\r\n        <Label htmlFor=\"commissionPaid\">Commission Paid</Label>\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"notes\">Notes</Label>\r\n        <Textarea\r\n          id=\"notes\"\r\n          value={formData.notes || ''}\r\n          onChange={(e) => setFormData({ ...formData, notes: e.target.value || null })}\r\n          placeholder=\"Enter any additional notes\"\r\n          rows={3}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex justify-end space-x-2\">\r\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\r\n          Cancel\r\n        </Button>\r\n        <Button type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? 'Saving...' : entry ? 'Update' : 'Create'}\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\finance-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getPaginationRowModel' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Upload' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronUp' is defined but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toast' is defined but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2037,2040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2037,2040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { \n  Filter, \n  Download, \n  Upload, \n  Trash2, \n  Edit, \n  ChevronLeft, \n  ChevronRight,\n  Plus,\n  LayoutGrid,\n  List,\n  ChevronDown,\n  ChevronUp\n} from 'lucide-react';\nimport { financeStatusEnum, leadBdrEnum } from '@/lib/validations';\nimport { formatDateUK, getMonthName } from '@/lib/date-utils';\nimport { toast } from 'sonner';\n\ninterface FinanceEntry {\n  id: number;\n  company: string;\n  bdr: string;\n  leadGen: boolean;\n  status: string;\n  invoiceDate: Date | null;\n  dueDate: Date | null;\n  soldAmount: number | null;\n  gbpAmount: number | null;\n  exchangeRate: number | null;\n  exchangeRateDate: Date | null;\n  actualGbpReceived: number | null;\n  notes: string | null;\n  commissionPaid: boolean;\n  month: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface FinanceTableProps {\n  data?: FinanceEntry[];\n  groupedData?: { [key: string]: FinanceEntry[] };\n  isLoading: boolean;\n  onEdit: (entry: FinanceEntry) => void;\n  onDelete: (id: number) => void;\n  onCreate: () => void;\n  pagination?: {\n    page: number;\n    pageSize: number;\n    total: number;\n    totalPages: number;\n  };\n  onPaginationChange?: (page: number, pageSize: number) => void;\n  filters: {\n    search: string;\n    status: string;\n    bdr: string;\n    month?: string;\n  };\n  onFiltersChange: (filters: any) => void;\n  viewMode: 'table' | 'groups';\n  onViewModeChange: (mode: 'table' | 'groups') => void;\n}\n\nexport function FinanceTable({\n  data,\n  groupedData,\n  isLoading,\n  onEdit,\n  onDelete,\n  onCreate,\n  pagination,\n  onPaginationChange,\n  filters,\n  onFiltersChange,\n  viewMode,\n  onViewModeChange,\n}: FinanceTableProps) {\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\n  const [collapsedMonths, setCollapsedMonths] = useState<Set<string>>(new Set());\n\n  const toggleMonthCollapse = (month: string) => {\n    const newCollapsed = new Set(collapsedMonths);\n    if (newCollapsed.has(month)) {\n      newCollapsed.delete(month);\n    } else {\n      newCollapsed.add(month);\n    }\n    setCollapsedMonths(newCollapsed);\n  };\n\n  const calculateMonthSummary = (entries: FinanceEntry[]) => {\n    const totalEntries = entries.length;\n    const totalValue = entries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\n    const paidEntries = entries.filter(entry => entry.status === 'Paid').length;\n    return { totalEntries, totalValue, paidEntries };\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'Paid':\n        return 'default';\n      case 'Cancelled':\n        return 'destructive';\n      case 'Late':\n        return 'destructive';\n      case 'Invoiced':\n        return 'secondary';\n      case 'Pending Clearance':\n        return 'outline';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const columns: ColumnDef<FinanceEntry>[] = [\n    {\n      id: 'select',\n      header: ({ table }) => (\n        <Checkbox\n          checked={table.getIsAllPageRowsSelected()}\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      ),\n    },\n    {\n      accessorKey: 'company',\n      header: 'Company',\n      cell: ({ row }) => (\n        <div className=\"font-medium\">{row.getValue('company')}</div>\n      ),\n    },\n    {\n      accessorKey: 'bdr',\n      header: 'BDR',\n      cell: ({ row }) => (\n        <div className=\"text-sm\">{row.getValue('bdr')}</div>\n      ),\n    },\n    {\n      accessorKey: 'month',\n      header: 'Month',\n      cell: ({ row }) => (\n        <div className=\"text-sm\">{getMonthName(row.getValue('month'))}</div>\n      ),\n    },\n    {\n      accessorKey: 'leadGen',\n      header: 'Lead Gen',\n      cell: ({ row }) => (\n        <div className=\"text-center\">\n          {row.getValue('leadGen') ? '✓' : '✗'}\n        </div>\n      ),\n    },\n    {\n      accessorKey: 'status',\n      header: 'Status',\n      cell: ({ row }) => (\n        <Badge variant={getStatusBadgeVariant(row.getValue('status'))}>\n          {row.getValue('status')}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: 'invoiceDate',\n      header: 'Invoice Date',\n      cell: ({ row }) => {\n        const date = row.getValue('invoiceDate') as Date | null;\n        return formatDateUK(date);\n      },\n    },\n    {\n      accessorKey: 'dueDate',\n      header: 'Due Date',\n      cell: ({ row }) => {\n        const date = row.getValue('dueDate') as Date | null;\n        return formatDateUK(date);\n      },\n    },\n    {\n      accessorKey: 'soldAmount',\n      header: 'Sold Amount',\n      cell: ({ row }) => {\n        const amount = row.getValue('soldAmount') as number | null;\n        return amount ? `$${amount.toLocaleString()}` : '-';\n      },\n    },\n    {\n      accessorKey: 'gbpAmount',\n      header: 'GBP Amount',\n      cell: ({ row }) => {\n        const amount = row.getValue('gbpAmount') as number | null;\n        const exchangeRate = row.getValue('exchangeRate') as number | null;\n        const exchangeRateDate = row.getValue('exchangeRateDate') as Date | null;\n        \n        if (!amount) return '-';\n        \n        return (\n          <div className=\"space-y-1\">\n            <div className=\"font-medium\">£{amount.toLocaleString()}</div>\n            {exchangeRate && (\n              <div className=\"text-xs text-gray-500\">\n                Rate: $1 = £{exchangeRate.toFixed(4)}\n                {exchangeRateDate && (\n                  <span className=\"ml-1\">\n                    ({new Date(exchangeRateDate).toLocaleDateString()})\n                  </span>\n                )}\n              </div>\n            )}\n          </div>\n        );\n      },\n    },\n    {\n      accessorKey: 'exchangeRate',\n      header: 'Exchange Rate',\n      cell: ({ row }) => {\n        const rate = row.getValue('exchangeRate') as number | null;\n        return rate ? `$1 = £${rate.toFixed(4)}` : '-';\n      },\n    },\n    {\n      accessorKey: 'exchangeRateDate',\n      header: 'Exchange Rate Date',\n      cell: ({ row }) => {\n        const date = row.getValue('exchangeRateDate') as Date | null;\n        return date ? new Date(date).toLocaleDateString() : '-';\n      },\n    },\n    {\n      accessorKey: 'actualGbpReceived',\n      header: 'Actual GBP Received',\n      cell: ({ row }) => {\n        const amount = row.getValue('actualGbpReceived') as number | null;\n        return amount ? `£${amount.toLocaleString()}` : '-';\n      },\n    },\n    {\n      accessorKey: 'commissionPaid',\n      header: 'Commission Paid',\n      cell: ({ row }) => (\n        <div className=\"text-center\">\n          {row.getValue('commissionPaid') ? '✓' : '✗'}\n        </div>\n      ),\n    },\n    {\n      accessorKey: 'notes',\n      header: 'Notes',\n      cell: ({ row }) => {\n        const notes = row.getValue('notes') as string | null;\n        return notes ? (\n          <div className=\"max-w-[200px] truncate\" title={notes}>\n            {notes}\n          </div>\n        ) : '-';\n      },\n    },\n    {\n      id: 'actions',\n      cell: ({ row }) => (\n        <div className=\"flex items-center gap-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onEdit(row.original)}\n          >\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => {\n              if (confirm('Are you sure you want to delete this entry?')) {\n                onDelete(row.original.id);\n              }\n            }}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      ),\n    },\n  ];\n\n  const table = useReactTable({\n    data: data || [],\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n  });\n\n  const renderMonthlyGroups = () => {\n    if (!groupedData) return null;\n\n    const sortedMonths = Object.keys(groupedData).sort((a, b) => b.localeCompare(a));\n\n    return (\n      <div className=\"space-y-4\">\n        {sortedMonths.map((month) => {\n          const entries = groupedData[month];\n          const isCollapsed = collapsedMonths.has(month);\n          const summary = calculateMonthSummary(entries);\n\n          return (\n            <Card key={month} className=\"overflow-hidden\">\n              <div\n                className=\"flex items-center justify-between p-4 bg-muted/50 cursor-pointer hover:bg-muted/70 transition-colors\"\n                onClick={() => toggleMonthCollapse(month)}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  {isCollapsed ? (\n                    <ChevronRight className=\"h-5 w-5 text-muted-foreground\" />\n                  ) : (\n                    <ChevronDown className=\"h-5 w-5 text-muted-foreground\" />\n                  )}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-primary\">\n                      {getMonthName(month)}\n                    </h3>\n                    <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mt-1\">\n                      <span>{summary.totalEntries} entries</span>\n                      <span>£{summary.totalValue.toLocaleString()}</span>\n                      <span>{summary.paidEntries} paid</span>\n                    </div>\n                  </div>\n                </div>\n                <Badge variant=\"outline\" className=\"ml-2\">\n                  {entries.length}\n                </Badge>\n              </div>\n              \n              {!isCollapsed && (\n                <div className=\"border-t\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow className=\"bg-muted/20\">\n                        <TableHead className=\"w-[50px]\">\n                          <Checkbox\n                            checked={entries.every(entry => selectedRows.includes(entry.id))}\n                            onCheckedChange={(value) => {\n                              if (value) {\n                                setSelectedRows(prev => [...new Set([...prev, ...entries.map(e => e.id)])]);\n                              } else {\n                                setSelectedRows(prev => prev.filter(id => !entries.map(e => e.id).includes(id)));\n                              }\n                            }}\n                          />\n                        </TableHead>\n                        <TableHead>Company</TableHead>\n                        <TableHead>BDR</TableHead>\n                        <TableHead>Lead Gen</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Invoice Date</TableHead>\n                        <TableHead>Due Date</TableHead>\n                        <TableHead>Sold Amount</TableHead>\n                        <TableHead>GBP Amount</TableHead>\n                        <TableHead>Exchange Rate</TableHead>\n                        <TableHead>Exchange Rate Date</TableHead>\n                        <TableHead>Actual GBP</TableHead>\n                        <TableHead>Commission</TableHead>\n                        <TableHead>Notes</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {entries.map((entry) => (\n                        <TableRow key={entry.id} className=\"hover:bg-muted/30\">\n                          <TableCell>\n                            <Checkbox\n                              checked={selectedRows.includes(entry.id)}\n                              onCheckedChange={(value) => {\n                                if (value) {\n                                  setSelectedRows(prev => [...prev, entry.id]);\n                                } else {\n                                  setSelectedRows(prev => prev.filter(id => id !== entry.id));\n                                }\n                              }}\n                            />\n                          </TableCell>\n                          <TableCell className=\"font-medium\">{entry.company}</TableCell>\n                          <TableCell>{entry.bdr}</TableCell>\n                          <TableCell className=\"text-center\">\n                            {entry.leadGen ? '✓' : '✗'}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={getStatusBadgeVariant(entry.status)}>\n                              {entry.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {formatDateUK(entry.invoiceDate)}\n                          </TableCell>\n                          <TableCell>\n                            {formatDateUK(entry.dueDate)}\n                          </TableCell>\n                          <TableCell>\n                            {entry.soldAmount ? `$${entry.soldAmount.toLocaleString()}` : '-'}\n                          </TableCell>\n                          <TableCell>\n                            {entry.gbpAmount ? (\n                              <div className=\"space-y-1\">\n                                <div className=\"font-medium\">£{entry.gbpAmount.toLocaleString()}</div>\n                                {entry.exchangeRate && (\n                                  <div className=\"text-xs text-gray-500\">\n                                    Rate: $1 = £{entry.exchangeRate.toFixed(4)}\n                                    {entry.exchangeRateDate && (\n                                      <span className=\"ml-1\">\n                                        ({new Date(entry.exchangeRateDate).toLocaleDateString()})\n                                      </span>\n                                    )}\n                                  </div>\n                                )}\n                              </div>\n                            ) : '-'}\n                          </TableCell>\n                          <TableCell>\n                            {entry.exchangeRate ? `$1 = £${entry.exchangeRate.toFixed(4)}` : '-'}\n                          </TableCell>\n                          <TableCell>\n                            {entry.exchangeRateDate ? new Date(entry.exchangeRateDate).toLocaleDateString() : '-'}\n                          </TableCell>\n                          <TableCell>\n                            {entry.actualGbpReceived ? `£${entry.actualGbpReceived.toLocaleString()}` : '-'}\n                          </TableCell>\n                          <TableCell className=\"text-center\">\n                            {entry.commissionPaid ? '✓' : '✗'}\n                          </TableCell>\n                          <TableCell>\n                            {entry.notes ? (\n                              <div className=\"max-w-[200px] truncate\" title={entry.notes}>\n                                {entry.notes}\n                              </div>\n                            ) : '-'}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center gap-1\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => onEdit(entry)}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (confirm('Are you sure you want to delete this entry?')) {\n                                    onDelete(entry.id);\n                                  }\n                                }}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </Card>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Filters and Actions */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Finance Board</CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"flex items-center border rounded-md\">\n                <Button\n                  variant={viewMode === 'table' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => onViewModeChange('table')}\n                  className=\"rounded-r-none\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === 'groups' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => onViewModeChange('groups')}\n                  className=\"rounded-l-none\"\n                >\n                  <LayoutGrid className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <Button onClick={onCreate}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Entry\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-4\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Search companies, BDRs, or notes...\"\n                value={filters.search}\n                onChange={(e) =>\n                  onFiltersChange({ ...filters, search: e.target.value })\n                }\n                className=\"max-w-sm\"\n              />\n            </div>\n            <Select\n              value={filters.status}\n              onValueChange={(value) =>\n                onFiltersChange({ ...filters, status: value === 'all' ? '' : value })\n              }\n            >\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                {financeStatusEnum.map((status) => (\n                  <SelectItem key={status} value={status}>\n                    {status}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select\n              value={filters.bdr}\n              onValueChange={(value) =>\n                onFiltersChange({ ...filters, bdr: value === 'all' ? '' : value })\n              }\n            >\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by BDR\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All BDRs</SelectItem>\n                {leadBdrEnum.map((bdr) => (\n                  <SelectItem key={bdr} value={bdr}>\n                    {bdr}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {viewMode === 'table' && (\n              <Select\n                value={filters.month || 'all'}\n                onValueChange={(value) =>\n                  onFiltersChange({ ...filters, month: value === 'all' ? '' : value })\n                }\n              >\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"Filter by month\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Months</SelectItem>\n                  <SelectItem value=\"2025-01\">January 2025</SelectItem>\n                  <SelectItem value=\"2025-02\">February 2025</SelectItem>\n                  <SelectItem value=\"2025-03\">March 2025</SelectItem>\n                  <SelectItem value=\"2025-04\">April 2025</SelectItem>\n                  <SelectItem value=\"2025-05\">May 2025</SelectItem>\n                  <SelectItem value=\"2025-06\">June 2025</SelectItem>\n                  <SelectItem value=\"2025-07\">July 2025</SelectItem>\n                  <SelectItem value=\"2025-08\">August 2025</SelectItem>\n                </SelectContent>\n              </Select>\n            )}\n          </div>\n\n          {isLoading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"text-center\">Loading...</div>\n            </div>\n          ) : viewMode === 'groups' ? (\n            renderMonthlyGroups()\n          ) : (\n            <>\n              {/* Table View */}\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    {table.getHeaderGroups().map((headerGroup) => (\n                      <TableRow key={headerGroup.id}>\n                        {headerGroup.headers.map((header) => (\n                          <TableHead key={header.id}>\n                            {header.isPlaceholder\n                              ? null\n                              : flexRender(\n                                  header.column.columnDef.header,\n                                  header.getContext()\n                                )}\n                          </TableHead>\n                        ))}\n                      </TableRow>\n                    ))}\n                  </TableHeader>\n                  <TableBody>\n                    {table.getRowModel().rows?.length ? (\n                      table.getRowModel().rows.map((row) => (\n                        <TableRow\n                          key={row.id}\n                          data-state={row.getIsSelected() && 'selected'}\n                        >\n                          {row.getVisibleCells().map((cell) => (\n                            <TableCell key={cell.id}>\n                              {flexRender(\n                                cell.column.columnDef.cell,\n                                cell.getContext()\n                              )}\n                            </TableCell>\n                          ))}\n                        </TableRow>\n                      ))\n                    ) : (\n                      <TableRow>\n                        <TableCell\n                          colSpan={columns.length}\n                          className=\"h-24 text-center\"\n                        >\n                          No finance entries found.\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {/* Pagination - only show for table view */}\n              {pagination && onPaginationChange && (\n                <div className=\"flex items-center justify-between space-x-2 py-4\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Showing {(pagination.page - 1) * pagination.pageSize + 1} to{' '}\n                    {Math.min(pagination.page * pagination.pageSize, pagination.total)} of{' '}\n                    {pagination.total} entries\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onPaginationChange(pagination.page - 1, pagination.pageSize)}\n                      disabled={pagination.page <= 1}\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                      Previous\n                    </Button>\n                    <span className=\"text-sm\">\n                      Page {pagination.page} of {pagination.totalPages}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onPaginationChange(pagination.page + 1, pagination.pageSize)}\n                      disabled={pagination.page >= pagination.totalPages}\n                    >\n                      Next\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\lead-activity-timeline.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1241,1244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1241,1244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useActivityLogs, useCreateActivityLog } from \"@/lib/hooks\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { activityTypeEnum, leadBdrEnum } from \"@/lib/validations\";\r\nimport { formatDateUK } from \"@/lib/date-utils\";\r\nimport { useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\n\r\nexport function LeadActivityTimeline({ leadId }: { leadId: number }) {\r\n  const { data, isLoading } = useActivityLogs({ leadId, page: 1, pageSize: 20 });\r\n  const { mutate: createLog, isPending } = useCreateActivityLog();\r\n  const [activityType, setActivityType] = useState<string>(activityTypeEnum[0]);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [notes, setNotes] = useState(\"\");\r\n\r\n  const onAdd = () => {\r\n    if (!description.trim()) {\r\n      toast.error(\"Please enter a description\");\r\n      return;\r\n    }\r\n    createLog(\r\n      {\r\n        bdr: leadBdrEnum[0],\r\n        activityType: activityType as any,\r\n        description,\r\n        notes,\r\n        leadId,\r\n      },\r\n      {\r\n        onSuccess: () => {\r\n          setDescription(\"\");\r\n          setNotes(\"\");\r\n          toast.success(\"Activity added\");\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Activity</CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"mb-4 grid gap-2 sm:grid-cols-3\">\r\n          <Select value={activityType} onValueChange={setActivityType}>\r\n            <SelectTrigger>\r\n              <SelectValue placeholder=\"Type\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {activityTypeEnum.map((t) => (\r\n                <SelectItem key={t} value={t}>{t}</SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n          <Input\r\n            placeholder=\"Description\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          />\r\n          <div className=\"flex justify-end\">\r\n            <Button onClick={onAdd} disabled={isPending}>Add</Button>\r\n          </div>\r\n          <div className=\"sm:col-span-3\">\r\n            <Textarea\r\n              placeholder=\"Notes (optional)\"\r\n              value={notes}\r\n              onChange={(e) => setNotes(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"space-y-3\">\r\n          {isLoading ? (\r\n            <div>Loading activity...</div>\r\n          ) : (\r\n            data?.logs.map((log) => (\r\n              <div key={log.id} className=\"rounded-md border p-3\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"font-medium\">{log.activityType}</div>\r\n                  <div className=\"text-xs text-muted-foreground\">{formatDateUK(log.timestamp)}</div>\r\n                </div>\r\n                <div className=\"text-sm\">{log.description}</div>\r\n                {log.notes && <div className=\"text-sm text-muted-foreground whitespace-pre-wrap\">{log.notes}</div>}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\lead-columns.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuSeparator' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'toast' is defined but never used.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used.","line":23,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used.","line":23,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3818,3821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3818,3821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":111,"column":48,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":111,"endColumn":64},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":112,"column":26,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":112,"endColumn":42},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"ReactLib.useEffect\" is called in function \"cell\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":113,"column":9,"nodeType":"MemberExpression","endLine":113,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { ColumnDef } from \"@tanstack/react-table\";\r\nimport { Lead, useBdrManager } from \"@/lib/hooks\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { formatDateUK } from \"@/lib/date-utils\";\r\nimport { createSelectColumn } from \"./leads-table\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useDeleteLead } from \"@/lib/hooks\";\r\nimport { toast } from \"sonner\";\r\nimport { ExternalLink, MoreHorizontal, CheckCircle2 } from \"lucide-react\";\r\nimport { NotesPopover } from \"@/components/ui/notes-popover\";\r\nimport { EditableCell } from \"@/components/ui/editable-cell\";\r\nimport { leadSourceEnum, leadStatusEnum } from \"@/lib/validations\";\r\nimport { LeadToPipelineDialog } from \"./lead-to-pipeline-dialog\";\r\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { LeadUpdatesDialog } from './lead-updates-dialog';\r\n\r\n// Custom type for column meta data\r\ninterface ColumnMeta {\r\n  priority: 'high' | 'medium' | 'low';\r\n}\r\n\r\nexport function useLeadColumns(): ColumnDef<Lead, unknown>[] {\r\n  const router = useRouter();\r\n  const { mutate: deleteLead } = useDeleteLead();\r\n  const { bdrs } = useBdrManager();\r\n\r\n  function handleDelete(id: number) {\r\n    if (confirm(\"Are you sure you want to delete this lead?\")) {\r\n      deleteLead(id);\r\n    }\r\n  }\r\n\r\n  return [\r\n    // Actions column - high priority\r\n    {\r\n      id: \"actions\",\r\n      cell: ({ row }) => {\r\n        const lead = row.original;\r\n\r\n        return (\r\n          <div className=\"flex items-center\">\r\n            <LeadToPipelineDialog lead={lead} />\r\n            <LeadUpdatesDialog lead={lead} />\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\r\n                  <span className=\"sr-only\">Open menu</span>\r\n                  <MoreHorizontal className=\"h-4 w-4\" />\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align=\"end\">\r\n                <DropdownMenuItem onClick={() => router.push(`/leads/${lead.id}/edit`)}>\r\n                  Edit\r\n                </DropdownMenuItem>\r\n                <DropdownMenuItem onClick={() => handleDelete(lead.id)}>\r\n                  Delete\r\n                </DropdownMenuItem>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          </div>\r\n        );\r\n      },\r\n      meta: { priority: 'high' } as ColumnMeta,\r\n    },\r\n\r\n    // Add checkbox column - highest priority\r\n    {\r\n      ...createSelectColumn<Lead>(),\r\n      meta: { priority: 'high' } as ColumnMeta,\r\n    },\r\n\r\n    // Name column - highest priority\r\n    {\r\n      accessorKey: \"name\",\r\n      header: \"Name\",\r\n      cell: ({ row }) => (\r\n        <div className=\"flex items-center space-x-2\">\r\n          <EditableCell value={row.getValue(\"name\")} row={row} column={{ id: \"name\" }} />\r\n          {row.original.notes && <NotesPopover notes={row.original.notes} />}\r\n          {row.original.link && (\r\n            <a \r\n              href={row.original.link} \r\n              target=\"_blank\" \r\n              rel=\"noopener noreferrer\"\r\n              className=\"text-blue-500 hover:text-blue-700 flex-shrink-0\"\r\n            >\r\n              <ExternalLink className=\"h-4 w-4\" />\r\n            </a>\r\n          )}\r\n        </div>\r\n      ),\r\n      meta: { priority: 'high' } as ColumnMeta,\r\n    },\r\n\r\n    // Company column - medium priority, with conflict badge\r\n    {\r\n      accessorKey: \"company\",\r\n      header: \"Company\",\r\n      cell: ({ row }) => {\r\n        const company: string | null = row.getValue(\"company\") as any;\r\n        const [hasConflict, setHasConflict] = (require('react') as typeof import('react')).useState<boolean>(false);\r\n        const ReactLib = require('react') as typeof import('react');\r\n        ReactLib.useEffect(() => {\r\n          if (!company) { setHasConflict(false); return; }\r\n          const params = new URLSearchParams();\r\n          params.append('company', company);\r\n          params.append('days', '14');\r\n          fetch(`/api/duplicates/company-conflicts?${params.toString()}`)\r\n            .then(r => r.ok ? r.json() : null)\r\n            .then(data => setHasConflict(Boolean(data?.conflicts?.[company!])))\r\n            .catch(() => setHasConflict(false));\r\n        }, [company]);\r\n        return (\r\n          <div className=\"flex items-center gap-2\">\r\n            <EditableCell value={company} row={row} column={{ id: \"company\" }} />\r\n            {hasConflict && (\r\n              <span className=\"inline-flex items-center rounded border px-1.5 py-0.5 text-[10px] bg-red-50 text-red-700 border-red-200\">Conflict</span>\r\n            )}\r\n          </div>\r\n        );\r\n      },\r\n      meta: { priority: 'medium' } as ColumnMeta,\r\n    },\r\n\r\n    // Status column - high priority\r\n    {\r\n      accessorKey: \"status\",\r\n      header: \"Status\",\r\n      cell: ({ row }) => (\r\n        <div>\r\n          <EditableCell \r\n            value={row.getValue(\"status\")} \r\n            row={row} \r\n            column={{ id: \"status\" }}\r\n            isSelect={true}\r\n            options={[...leadStatusEnum]}\r\n          />\r\n        </div>\r\n      ),\r\n      meta: { priority: 'high' } as ColumnMeta,\r\n    },\r\n\r\n    // BDR column - medium priority\r\n    {\r\n      accessorKey: \"bdr\",\r\n      header: \"BDR\",\r\n      cell: ({ row }) => (\r\n        <div>\r\n          <EditableCell \r\n            value={row.getValue(\"bdr\")} \r\n            row={row} \r\n            column={{ id: \"bdr\" }}\r\n            isSelect={true}\r\n            options={[...bdrs]}\r\n          />\r\n        </div>\r\n      ),\r\n      meta: { priority: 'medium' } as ColumnMeta,\r\n    },\r\n\r\n    // Title column - medium priority\r\n    {\r\n      accessorKey: \"title\",\r\n      header: \"Title\",\r\n      cell: ({ row }) => (\r\n        <div>\r\n          <EditableCell value={row.getValue(\"title\")} row={row} column={{ id: \"title\" }} />\r\n        </div>\r\n      ),\r\n      meta: { priority: 'medium' } as ColumnMeta,\r\n    },\r\n\r\n    // Source column - medium priority\r\n    {\r\n      accessorKey: \"source\",\r\n      header: \"Source\",\r\n      cell: ({ row }) => (\r\n        <div>\r\n          <EditableCell \r\n            value={row.getValue(\"source\")} \r\n            row={row} \r\n            column={{ id: \"source\" }}\r\n            isSelect={true}\r\n            options={[...leadSourceEnum]}\r\n          />\r\n        </div>\r\n      ),\r\n      meta: { priority: 'medium' } as ColumnMeta,\r\n    },\r\n\r\n    // Added Date column - medium priority\r\n    {\r\n      accessorKey: \"addedDate\",\r\n      header: \"Date Added\",\r\n      cell: ({ row }) => {\r\n        const date = row.getValue(\"addedDate\") as string;\r\n        return date ? (\r\n          <div className=\"whitespace-nowrap\">{formatDateUK(date)}</div>\r\n        ) : (\r\n          \"-\"\r\n        );\r\n      },\r\n      meta: { priority: 'medium' } as ColumnMeta,\r\n    },\r\n\r\n    // Email column - low priority\r\n    {\r\n      accessorKey: \"email\",\r\n      header: \"Email\",\r\n      cell: ({ row }) => (\r\n        <div>\r\n          <EditableCell value={row.getValue(\"email\")} row={row} column={{ id: \"email\" }} />\r\n        </div>\r\n      ),\r\n      meta: { priority: 'low' } as ColumnMeta,\r\n    },\r\n\r\n    // Last Updated column - medium priority\r\n    {\r\n      accessorKey: \"lastUpdated\",\r\n      header: \"Last Updated\",\r\n      cell: ({ row }) => {\r\n        const date = row.getValue(\"lastUpdated\") as string;\r\n        return date ? (\r\n          <div className=\"whitespace-nowrap\">{formatDateUK(date)}</div>\r\n        ) : (\r\n          \"-\"\r\n        );\r\n      },\r\n      meta: { priority: 'medium' } as ColumnMeta,\r\n    },\r\n\r\n    // Phone column - low priority\r\n    {\r\n      accessorKey: \"phone\",\r\n      header: \"Phone\",\r\n      cell: ({ row }) => (\r\n        <div>\r\n          <EditableCell value={row.getValue(\"phone\")} row={row} column={{ id: \"phone\" }} />\r\n        </div>\r\n      ),\r\n      meta: { priority: 'low' } as ColumnMeta,\r\n    },\r\n\r\n    // Pipeline indicator column - highest priority\r\n    {\r\n      id: \"pipeline\",\r\n      header: \"Pipeline\",\r\n      cell: ({ row }) => {\r\n        const lead = row.original;\r\n        if (!lead.inPipeline) return null;\r\n\r\n        return (\r\n          <div className=\"flex items-center gap-2\">\r\n            <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\r\n            <Badge variant=\"outline\" className=\"whitespace-nowrap\">\r\n              {lead.pipelineCategory}\r\n            </Badge>\r\n          </div>\r\n        );\r\n      },\r\n      meta: { priority: 'high' } as ColumnMeta,\r\n    },\r\n  ];\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\lead-form-refactored.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\lead-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'decision' is defined but never used.","line":63,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'warningId' is defined but never used.","line":63,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { useEffect, useCallback, useMemo } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '@/components/ui/form';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Lead, LeadCreateInput, LeadUpdateInput, useBdrManager } from '@/lib/hooks';\r\nimport { leadSchema, leadSourceEnum, leadStatusEnum } from '@/lib/validations';\r\nimport { useRouter } from 'next/navigation';\r\nimport { AddBdrDialog } from '@/components/ui/add-bdr-dialog';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { AlertTriangle, Loader2 } from 'lucide-react';\r\nimport { useDuplicateDetection } from '@/lib/hooks/use-duplicate-detection';\r\nimport { DuplicateWarningDialog } from '@/components/duplicate-warning-dialog';\r\nimport { useDebounce } from '@/lib/hooks/use-debounce';\r\n\r\ninterface LeadFormProps {\r\n  lead?: Lead;\r\n  onSubmit: (data: LeadCreateInput | LeadUpdateInput) => void;\r\n  onSaveAndAddToPipeline?: (data: LeadCreateInput | LeadUpdateInput) => void;\r\n  isSubmitting?: boolean;\r\n}\r\n\r\ntype FormData = z.infer<typeof leadSchema>;\r\n\r\nexport function LeadForm({ lead, onSubmit, onSaveAndAddToPipeline, isSubmitting }: LeadFormProps) {\r\n  const router = useRouter();\r\n  const isEditing = Boolean(lead);\r\n  const { bdrs, addBdr } = useBdrManager();\r\n  \r\n  // Duplicate detection\r\n  const {\r\n    isChecking,\r\n    currentWarning,\r\n    isWarningOpen,\r\n    isProcessing,\r\n    checkDuplicates,\r\n    handleProceed,\r\n    handleCancel,\r\n    closeWarning,\r\n    reset: resetDuplicateState,\r\n    hasWarning,\r\n  } = useDuplicateDetection({\r\n    onDecisionMade: (decision, warningId) => {\r\n    }\r\n  });\r\n\r\n  // Create form with validation\r\n  const form = useForm<FormData>({\r\n    resolver: zodResolver(leadSchema),\r\n    defaultValues: {\r\n      name: lead?.name || '',\r\n      title: lead?.title || '',\r\n      bdr: (lead?.bdr as string | null) || null,\r\n      company: lead?.company || '',\r\n      source: lead?.source || 'LinkedIn',\r\n      status: lead?.status || 'BDR Followed Up',\r\n      link: lead?.link || '',\r\n      phone: lead?.phone || '',\r\n      notes: lead?.notes || '',\r\n      email: lead?.email || '',\r\n    },\r\n  });\r\n\r\n  // Watch form values for duplicate checking\r\n  const formValues = form.watch();\r\n  \r\n  // Debounced values for duplicate checking\r\n  const debouncedName = useDebounce(formValues.name || '', 500);\r\n  const debouncedEmail = useDebounce(formValues.email || '', 500);\r\n  const debouncedCompany = useDebounce(formValues.company || '', 500);\r\n  const debouncedPhone = useDebounce(formValues.phone || '', 500);\r\n  const debouncedLinkedIn = useDebounce(formValues.link || '', 500);\r\n\r\n  // Create duplicate check input\r\n  const duplicateCheckInput = useMemo(() => ({\r\n    name: debouncedName,\r\n    email: debouncedEmail,\r\n    company: debouncedCompany,\r\n    phone: debouncedPhone,\r\n    linkedinUrl: debouncedLinkedIn,\r\n    title: formValues.title || undefined,\r\n  }), [debouncedName, debouncedEmail, debouncedCompany, debouncedPhone, debouncedLinkedIn, formValues.title]);\r\n\r\n  // Auto-check for duplicates when form values change (but not when editing existing lead)\r\n  useEffect(() => {\r\n    if (!isEditing && (debouncedName || debouncedEmail || debouncedCompany)) {\r\n      const hasMinimumData = debouncedName.length >= 2 || \r\n                            debouncedEmail.length >= 5 || \r\n                            debouncedCompany.length >= 2;\r\n                            \r\n      if (hasMinimumData) {\r\n        checkDuplicates(duplicateCheckInput, 'LEAD_CREATE');\r\n      }\r\n    }\r\n  }, [duplicateCheckInput, isEditing, checkDuplicates, debouncedName, debouncedEmail, debouncedCompany]);\r\n\r\n  // Handle form submission with duplicate checking\r\n  const handleSubmitWithDuplicateCheck = useCallback(async (values: FormData) => {\r\n    // Reset any previous duplicate state\r\n    resetDuplicateState();\r\n    \r\n    // If editing, skip duplicate check and submit directly\r\n    if (isEditing && lead) {\r\n      onSubmit({\r\n        id: lead.id,\r\n        ...values,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // For new leads, check for duplicates first\r\n    const duplicateResult = await checkDuplicates({\r\n      name: values.name,\r\n      email: values.email || undefined,\r\n      company: values.company || undefined,\r\n      phone: values.phone || undefined,\r\n      linkedinUrl: values.link || undefined,\r\n      title: values.title || undefined,\r\n    }, 'LEAD_CREATE');\r\n\r\n    // If no warning or user already handled warning, submit\r\n    if (!duplicateResult?.hasWarning) {\r\n      onSubmit(values);\r\n    }\r\n    // If there's a warning, the dialog will handle the flow\r\n  }, [isEditing, lead, onSubmit, checkDuplicates, resetDuplicateState]);\r\n\r\n  // Handle duplicate proceed - submit the form\r\n  const handleDuplicateProceed = useCallback(async (reason?: string) => {\r\n    const success = await handleProceed(reason);\r\n    if (success) {\r\n      // Get current form values and submit\r\n      const currentValues = form.getValues();\r\n      onSubmit(currentValues);\r\n    }\r\n  }, [handleProceed, form, onSubmit]);\r\n\r\n  // Handle duplicate cancel - just close dialog\r\n  const handleDuplicateCancel = useCallback(async () => {\r\n    await handleCancel();\r\n    // Form stays as-is, user can modify and try again\r\n  }, [handleCancel]);\r\n\r\n  // Handle form submission\r\n  function handleSubmit(values: FormData) {\r\n    handleSubmitWithDuplicateCheck(values);\r\n  }\r\n\r\n  const handleAddBdr = (newBdr: string) => {\r\n    const success = addBdr(newBdr);\r\n    if (success) {\r\n      // Update the form field with the new BDR\r\n      form.setValue('bdr', newBdr);\r\n    }\r\n    return success;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\r\n          {/* Duplicate checking indicator */}\r\n          {!isEditing && (isChecking || hasWarning) && (\r\n            <div className=\"mb-4\">\r\n              {isChecking && (\r\n                <div className=\"flex items-center gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n                  <Loader2 className=\"h-4 w-4 animate-spin text-blue-600\" />\r\n                  <span className=\"text-sm text-blue-700\">Checking for duplicates...</span>\r\n                </div>\r\n              )}\r\n              {hasWarning && !isChecking && (\r\n                <div className=\"flex items-center gap-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n                  <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\r\n                  <span className=\"text-sm text-yellow-700\">\r\n                    Potential duplicates detected. Review warning before submitting.\r\n                  </span>\r\n                  <Badge variant=\"outline\" className=\"ml-auto\">\r\n                    {currentWarning?.matches.length} match(es)\r\n                  </Badge>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          {/* Name */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"name\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Name*</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"John Doe\" {...field} className=\"h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur placeholder:text-muted-foreground/70\" />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Title */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"title\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Title</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"CEO\" {...field} value={field.value || ''} className=\"h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur placeholder:text-muted-foreground/70\" />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Company */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"company\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Company</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"Acme Inc.\" {...field} value={field.value || ''} className=\"h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur placeholder:text-muted-foreground/70\" />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* BDR */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"bdr\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>BDR Owner</FormLabel>\r\n                <div className=\"flex gap-2 items-center\">\r\n                  <Select\r\n                    onValueChange={(value) => field.onChange(value === \"none\" ? null : value)}\r\n                    value={field.value || \"none\"}\r\n                  >\r\n                    <FormControl>\r\n                      <SelectTrigger className=\"flex-1 h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur\">\r\n                        <SelectValue placeholder=\"Select a BDR\" />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"none\">None</SelectItem>\r\n                      {bdrs.map((bdr) => (\r\n                        <SelectItem key={bdr} value={bdr}>\r\n                          {bdr}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <AddBdrDialog \r\n                    onAddBdr={handleAddBdr}\r\n                  />\r\n                </div>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Source */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"source\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Source*</FormLabel>\r\n                <Select\r\n                  onValueChange={field.onChange}\r\n                  value={field.value}\r\n                >\r\n                  <FormControl>\r\n                    <SelectTrigger className=\"h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur\">\r\n                      <SelectValue placeholder=\"Select a source\" />\r\n                    </SelectTrigger>\r\n                  </FormControl>\r\n                  <SelectContent>\r\n                    {leadSourceEnum.map((source) => (\r\n                      <SelectItem key={source} value={source}>\r\n                        {source}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Status */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"status\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Status*</FormLabel>\r\n                <Select\r\n                  onValueChange={field.onChange}\r\n                  value={field.value}\r\n                >\r\n                  <FormControl>\r\n                    <SelectTrigger className=\"h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur\">\r\n                      <SelectValue placeholder=\"Select a status\" />\r\n                    </SelectTrigger>\r\n                  </FormControl>\r\n                  <SelectContent>\r\n                    {leadStatusEnum.map((status) => (\r\n                      <SelectItem key={status} value={status}>\r\n                        {status}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Email */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"email\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Email</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"john@example.com\"\r\n                    type=\"email\"\r\n                    {...field}\r\n                    value={field.value || ''}\r\n                    className=\"h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur placeholder:text-muted-foreground/70\"\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Phone */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"phone\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Phone</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    placeholder=\"+44 7700 900123\"\r\n                    {...field}\r\n                    value={field.value || ''}\r\n                    className=\"h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur placeholder:text-muted-foreground/70\"\r\n                    onChange={(e) => {\r\n                      // lightweight mask: keep digits and + space\r\n                      const raw = e.target.value;\r\n                      const masked = raw.replace(/[^+\\d\\s]/g, \"\");\r\n                      field.onChange(masked);\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Link */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"link\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"col-span-1 md:col-span-2\">\r\n                <FormLabel>LinkedIn Profile</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"https://linkedin.com/in/johndoe\" {...field} value={field.value || ''} className=\"h-10 bg-white/60 dark:bg-white/[0.04] backdrop-blur placeholder:text-muted-foreground/70\" />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          {/* Notes */}\r\n          <FormField\r\n            control={form.control}\r\n            name=\"notes\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"col-span-1 md:col-span-2\">\r\n                <FormLabel>Notes</FormLabel>\r\n                <FormControl>\r\n                  <Textarea \r\n                    placeholder=\"Additional notes...\"\r\n                    className=\"min-h-[120px] bg-white/60 dark:bg-white/[0.04] backdrop-blur placeholder:text-muted-foreground/70\"\r\n                    {...field}\r\n                    value={field.value || ''}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"flex justify-end space-x-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            onClick={() => router.push('/leads')} \r\n            type=\"button\"\r\n            className=\"h-10\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {onSaveAndAddToPipeline && (\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"secondary\"\r\n              disabled={isSubmitting}\r\n              className=\"h-10\"\r\n              onClick={form.handleSubmit((values) => {\r\n                if (lead) {\r\n                  onSaveAndAddToPipeline({ id: lead.id, ...values });\r\n                } else {\r\n                  onSaveAndAddToPipeline(values);\r\n                }\r\n              })}\r\n            >\r\n              Save + Add to Pipeline\r\n            </Button>\r\n          )}\r\n          <Button \r\n            type=\"submit\" \r\n            disabled={isSubmitting || isProcessing} \r\n            className=\"h-10\"\r\n          >\r\n            {isSubmitting || isProcessing ? (\r\n              <>\r\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                {isProcessing ? 'Processing...' : 'Submitting...'}\r\n              </>\r\n            ) : (\r\n              <>\r\n                {isEditing ? 'Update Lead' : 'Create Lead'}\r\n              </>\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n\r\n    {/* Duplicate Warning Dialog */}\r\n    {currentWarning && (\r\n      <DuplicateWarningDialog\r\n        isOpen={isWarningOpen}\r\n        onClose={closeWarning}\r\n        onProceed={handleDuplicateProceed}\r\n        onCancel={handleDuplicateCancel}\r\n        warning={currentWarning}\r\n        isProcessing={isProcessing}\r\n      />\r\n    )}\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\lead-to-pipeline-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1802,1805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1802,1805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Lead, useConvertLeadToPipeline } from '@/lib/hooks';\nimport { ArrowRightCircle } from 'lucide-react';\nimport { pipelineCategoryEnum, pipelineStatusEnum } from '@/lib/validations';\n\ninterface LeadToPipelineDialogProps {\n  lead: Lead;\n  onSuccess?: () => void;\n}\n\nexport function LeadToPipelineDialog({\n  lead,\n  onSuccess,\n}: LeadToPipelineDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<string>(pipelineCategoryEnum[0]);\n  const [selectedStatus, setSelectedStatus] = useState<string>(pipelineStatusEnum.Pipeline[0]);\n  const [error, setError] = useState<string | null>(null);\n\n  const { mutate: convertLeadToPipeline, isPending } = useConvertLeadToPipeline();\n\n  // Update selected status when category changes\n  const handleCategoryChange = (category: string) => {\n    setSelectedCategory(category);\n    const statuses = pipelineStatusEnum[category as keyof typeof pipelineStatusEnum];\n    setSelectedStatus(statuses[0]);\n    setError(null);\n  };\n\n  const handleConvert = () => {\n    // Make sure we have a BDR assigned to the lead\n    if (!lead.bdr) {\n      setError(\"A BDR must be assigned to this lead before moving it to the pipeline\");\n      return;\n    }\n\n    convertLeadToPipeline(\n      {\n        leadId: lead.id,\n        category: selectedCategory,\n        status: selectedStatus,\n      },\n      {\n        onSuccess: () => {\n          setOpen(false);\n          onSuccess?.();\n        },\n        onError: (err: any) => {\n          setError(err.message || \"Failed to move lead to pipeline\");\n        }\n      }\n    );\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setOpen(true)}\n        className=\"h-8 px-2\"\n        disabled={!lead.bdr}\n        title={lead.bdr ? \"Move to Pipeline\" : \"Assign a BDR before moving to pipeline\"}\n      >\n        <ArrowRightCircle className=\"h-4 w-4 mr-1\" />\n        Pipeline\n      </Button>\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Move to Pipeline</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-2\">\n            <p className=\"text-sm text-muted-foreground\">\n              Select the pipeline category and status for <span className=\"font-medium\">{lead.name}</span>.\n            </p>\n            \n            {error && (\n              <div className=\"bg-destructive/10 text-destructive text-sm p-2 rounded\">\n                {error}\n              </div>\n            )}\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Category</label>\n                <Select \n                  value={selectedCategory} \n                  onValueChange={handleCategoryChange}\n                >\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Select Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {pipelineCategoryEnum.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category.replace(/_/g, ', ')}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Status</label>\n                <Select \n                  value={selectedStatus} \n                  onValueChange={setSelectedStatus}\n                >\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"Select Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {selectedCategory && \n                      pipelineStatusEnum[selectedCategory as keyof typeof pipelineStatusEnum]?.map((status) => (\n                        <SelectItem key={`${selectedCategory}-${status}`} value={status}>\n                          {status}\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Lead Information</label>\n                <div className=\"text-sm bg-muted/50 p-3 rounded\">\n                  <p><span className=\"font-medium\">BDR:</span> {lead.bdr || \"Not assigned\"}</p>\n                  {lead.company && <p><span className=\"font-medium\">Company:</span> {lead.company}</p>}\n                  {lead.email && <p><span className=\"font-medium\">Email:</span> {lead.email}</p>}\n                  {lead.phone && <p><span className=\"font-medium\">Phone:</span> {lead.phone}</p>}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end gap-2 mt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)} disabled={isPending}>\n              Cancel\n            </Button>\n            <Button type=\"button\" onClick={handleConvert} disabled={isPending}>\n              {isPending ? \"Moving...\" : \"Move to Pipeline\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\lead-updates-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2326,2329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2326,2329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { MessageSquare, Send, Clock, User } from 'lucide-react';\r\nimport { useActivityLogs, useCreateActivityLog, Lead } from '@/lib/hooks';\r\nimport { formatDistanceToNow, format } from 'date-fns';\r\nimport { toast } from 'sonner';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ActivityLogsSkeleton } from '@/components/ui/activity-log-skeleton';\r\n\r\ninterface LeadUpdatesDialogProps {\r\n  lead: Lead;\r\n  trigger?: React.ReactNode;\r\n}\r\n\r\nexport function LeadUpdatesDialog({ lead, trigger }: LeadUpdatesDialogProps) {\r\n  const [open, setOpen] = useState(false);\r\n  \r\n  const handleOpenChange = (newOpen: boolean) => {\r\n    setOpen(newOpen);\r\n    // Don't trigger any navigation when dialog closes\r\n    if (!newOpen) {\r\n      // Prevent any navigation by stopping event propagation\r\n      const event = new CustomEvent('closeAllDialogs');\r\n      window.dispatchEvent(event);\r\n    }\r\n  };\r\n  const [updateText, setUpdateText] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // Fetch activity logs for this lead - only when dialog is open\r\n  const { data: activityLogsData, refetch } = useActivityLogs({\r\n    leadId: lead.id,\r\n    page: 1,\r\n    pageSize: 50,\r\n  }, {\r\n    enabled: open, // Only fetch when dialog is open\r\n    queryKey: ['activityLogs', { leadId: lead.id, page: 1, pageSize: 50 }]\r\n  });\r\n\r\n  const { mutate: createActivityLog } = useCreateActivityLog();\r\n\r\n  // Filter for BDR updates and other relevant activities\r\n  const relevantActivities = activityLogsData?.logs?.filter(log => \r\n    log.activityType === 'BDR_Update' || \r\n    log.activityType === 'Note_Added' ||\r\n    log.activityType === 'Status_Change' ||\r\n    log.activityType === 'Lead_Created'\r\n  ) || [];\r\n\r\n  const handleSubmitUpdate = async () => {\r\n    if (!updateText.trim()) {\r\n      toast.error('Please enter an update message');\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n    \r\n    createActivityLog({\r\n      bdr: (lead.bdr as any) || 'Dan Reeves',\r\n      activityType: 'BDR_Update',\r\n      description: 'BDR added an update',\r\n      notes: updateText.trim(),\r\n      leadId: lead.id,\r\n    }, {\r\n      onSuccess: () => {\r\n        toast.success('Update added successfully');\r\n        setUpdateText('');\r\n        refetch();\r\n      },\r\n      onError: (error) => {\r\n        toast.error('Failed to add update');\r\n        console.error('Error adding update:', error);\r\n      },\r\n      onSettled: () => {\r\n        setIsSubmitting(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\r\n      e.preventDefault();\r\n      handleSubmitUpdate();\r\n    }\r\n  };\r\n\r\n  const getActivityIcon = (activityType: string) => {\r\n    switch (activityType) {\r\n      case 'BDR_Update':\r\n        return <MessageSquare className=\"h-4 w-4 text-blue-600\" />;\r\n      case 'Status_Change':\r\n        return <Clock className=\"h-4 w-4 text-orange-600\" />;\r\n      case 'Lead_Created':\r\n        return <Clock className=\"h-4 w-4 text-green-600\" />;\r\n      default:\r\n        return <User className=\"h-4 w-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getActivityBadgeColor = (activityType: string) => {\r\n    switch (activityType) {\r\n      case 'BDR_Update':\r\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\r\n      case 'Status_Change':\r\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\r\n      case 'Lead_Created':\r\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\r\n    }\r\n  };\r\n\r\n  const defaultTrigger = (\r\n    <Button variant=\"outline\" size=\"sm\" className=\"h-8 px-2\">\r\n      <MessageSquare className=\"h-4 w-4 mr-1\" />\r\n      Updates\r\n      {relevantActivities.length > 0 && (\r\n        <Badge variant=\"secondary\" className=\"ml-2 h-5 text-xs\">\r\n          {relevantActivities.length}\r\n        </Badge>\r\n      )}\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={handleOpenChange}>\r\n      <DialogTrigger asChild>\r\n        <div onClick={(e) => {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n          setOpen(true);\r\n        }}>\r\n          {trigger || defaultTrigger}\r\n        </div>\r\n      </DialogTrigger>\r\n      <DialogContent className=\"max-w-2xl max-h-[80vh] flex flex-col\">\r\n        <DialogHeader className=\"flex-shrink-0\">\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <MessageSquare className=\"h-5 w-5\" />\r\n            Updates for {lead.name}\r\n          </DialogTitle>\r\n          <DialogDescription>\r\n            Add updates and view the timeline for this lead\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"flex flex-col gap-4 flex-1 min-h-0 overflow-hidden\">\r\n          {/* Add Update Section */}\r\n          <div className=\"space-y-3 flex-shrink-0\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <User className=\"h-4 w-4 text-muted-foreground\" />\r\n              <span className=\"text-sm font-medium\">{lead.bdr || 'Unknown'}</span>\r\n            </div>\r\n            <Textarea\r\n              placeholder=\"What's the latest update on this lead? (Ctrl/Cmd + Enter to send)\"\r\n              value={updateText}\r\n              onChange={(e) => setUpdateText(e.target.value)}\r\n              onKeyDown={handleKeyDown}\r\n              className=\"min-h-[80px] resize-none\"\r\n            />\r\n            <div className=\"flex justify-end\">\r\n              <Button \r\n                onClick={handleSubmitUpdate}\r\n                disabled={isSubmitting || !updateText.trim()}\r\n                size=\"sm\"\r\n                className=\"gap-2\"\r\n              >\r\n                <Send className=\"h-4 w-4\" />\r\n                {isSubmitting ? 'Adding...' : 'Add Update'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          <Separator className=\"flex-shrink-0\" />\r\n\r\n          {/* Timeline Section */}\r\n          <div className=\"flex-1 min-h-0 flex flex-col\">\r\n            <h4 className=\"text-sm font-medium mb-3 flex items-center gap-2 flex-shrink-0\">\r\n              <Clock className=\"h-4 w-4\" />\r\n              Timeline ({relevantActivities.length} {relevantActivities.length === 1 ? 'update' : 'updates'})\r\n            </h4>\r\n            <div className=\"flex-1 min-h-0 overflow-y-auto\">\r\n              {!activityLogsData ? (\r\n                <ActivityLogsSkeleton count={3} />\r\n              ) : relevantActivities.length === 0 ? (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  <MessageSquare className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n                  <p className=\"text-sm\">No updates yet</p>\r\n                  <p className=\"text-xs\">Be the first to add an update!</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-4\">\r\n                  {relevantActivities.map((activity, index) => (\r\n                    <div key={activity.id} className=\"flex gap-3\">\r\n                      <div className=\"flex flex-col items-center\">\r\n                        <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-muted\">\r\n                          {getActivityIcon(activity.activityType)}\r\n                        </div>\r\n                        {index < relevantActivities.length - 1 && (\r\n                          <div className=\"mt-2 h-full w-px bg-border\" />\r\n                        )}\r\n                      </div>\r\n                      <div className=\"flex-1 space-y-2 pb-4\">\r\n                        <div className=\"flex items-center gap-2 flex-wrap\">\r\n                          <span className=\"font-medium text-sm\">{activity.bdr}</span>\r\n                          <Badge \r\n                            variant=\"secondary\" \r\n                            className={`text-xs ${getActivityBadgeColor(activity.activityType)}`}\r\n                          >\r\n                            {activity.activityType === 'BDR_Update' ? 'Update' : activity.activityType.replace('_', ' ')}\r\n                          </Badge>\r\n                          <span className=\"text-xs text-muted-foreground\">\r\n                            {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true })}\r\n                          </span>\r\n                        </div>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          {activity.description}\r\n                        </p>\r\n                        {activity.notes && (\r\n                          <div className=\"bg-muted/50 rounded-md p-3\">\r\n                            <p className=\"text-sm whitespace-pre-wrap\">{activity.notes}</p>\r\n                          </div>\r\n                        )}\r\n                        <div className=\"text-xs text-muted-foreground\">\r\n                          {format(new Date(activity.timestamp), 'PPP p')}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\leads-saved-views.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\leads-table-refactored.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createBulkStatusAction' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createBulkDeleteAction' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createBulkConvertAction' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useMemo } from 'react';\r\nimport { ColumnDef, VisibilityState } from '@tanstack/react-table';\r\nimport { Download, Upload, Trash2, Move, CheckCircle2 } from 'lucide-react';\r\nimport { Lead, useBdrManager } from '@/lib/hooks';\r\nimport { leadSourceEnum, leadStatusEnum } from '@/lib/validations';\r\nimport { toast } from 'sonner';\r\nimport { BulkPipelineDialog } from './bulk-pipeline-dialog';\r\nimport { LeadUpdatesDialog } from './lead-updates-dialog';\r\nimport { AddBdrDialog } from '@/components/ui/add-bdr-dialog';\r\nimport { DataTable, FilterConfig, BulkAction } from '@/components/ui/data-table';\r\nimport { \r\n  useBulkUpdateLeads, \r\n  useBulkDeleteLeads, \r\n  useBulkConvertLeads,\r\n  createBulkStatusAction,\r\n  createBulkDeleteAction,\r\n  createBulkConvertAction \r\n} from '@/lib/bulk-operations';\r\nimport { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  filters: Record<string, string>;\r\n  total: number;\r\n  pageCount: number;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  onPaginationChange: (pageIndex: number, pageSize: number) => void;\r\n  onGlobalFilterChange: (value: string) => void;\r\n  onFilterChange: (columnId: string, value: string) => void;\r\n  isLoading?: boolean;\r\n  columnVisibility?: VisibilityState;\r\n  onColumnVisibilityChange?: (state: VisibilityState) => void;\r\n}\r\n\r\nexport function LeadsTableRefactored<TData, TValue>({\r\n  columns,\r\n  data,\r\n  filters,\r\n  total,\r\n  pageCount,\r\n  pageIndex,\r\n  pageSize,\r\n  onPaginationChange,\r\n  onGlobalFilterChange,\r\n  onFilterChange,\r\n  isLoading,\r\n}: DataTableProps<TData, TValue>) {\r\n  const { bdrs, addBdr } = useBdrManager();\r\n  const [bulkPipelineOpen, setBulkPipelineOpen] = useState(false);\r\n  const [selectedRowsForDialog, setSelectedRowsForDialog] = useState<Lead[]>([]);\r\n\r\n  // Bulk operation hooks\r\n  const bulkUpdateLeads = useBulkUpdateLeads();\r\n  const bulkDeleteLeads = useBulkDeleteLeads();\r\n  const bulkConvertLeads = useBulkConvertLeads();\r\n\r\n  // Filter configurations\r\n  const filterConfigs: FilterConfig[] = useMemo(() => [\r\n    {\r\n      key: 'status',\r\n      label: 'Status',\r\n      options: leadStatusEnum.map(status => ({ value: status, label: status })),\r\n      placeholder: 'All Statuses'\r\n    },\r\n    {\r\n      key: 'source',\r\n      label: 'Source',\r\n      options: leadSourceEnum.map(source => ({ value: source, label: source })),\r\n      placeholder: 'All Sources'\r\n    },\r\n    {\r\n      key: 'bdr',\r\n      label: 'BDR',\r\n      options: bdrs.map(bdr => ({ value: bdr, label: bdr })),\r\n      placeholder: 'All BDRs'\r\n    }\r\n  ], [bdrs]);\r\n\r\n  // Bulk actions configuration\r\n  const bulkActions: BulkAction<Lead>[] = useMemo(() => [\r\n    {\r\n      label: 'Mark as Fresh',\r\n      icon: <CheckCircle2 className=\"h-4 w-4 mr-2\" />,\r\n      onClick: (selectedRows) => {\r\n        const selectedIds = selectedRows.map(row => row.id);\r\n        bulkUpdateLeads.mutate(\r\n          { ids: selectedIds, status: 'Fresh' },\r\n          {\r\n            onSuccess: () => {\r\n              toast.success(`Updated ${selectedRows.length} leads to Fresh`);\r\n            },\r\n          }\r\n        );\r\n      }\r\n    },\r\n    {\r\n      label: 'Mark as Qualified',\r\n      icon: <CheckCircle2 className=\"h-4 w-4 mr-2\" />,\r\n      onClick: (selectedRows) => {\r\n        const selectedIds = selectedRows.map(row => row.id);\r\n        bulkUpdateLeads.mutate(\r\n          { ids: selectedIds, status: 'Qualified' },\r\n          {\r\n            onSuccess: () => {\r\n              toast.success(`Updated ${selectedRows.length} leads to Qualified`);\r\n            },\r\n          }\r\n        );\r\n      }\r\n    },\r\n    {\r\n      label: 'Convert to Pipeline',\r\n      icon: <Move className=\"h-4 w-4 mr-2\" />,\r\n      onClick: (selectedRows) => {\r\n        if (selectedRows.length === 0) {\r\n          toast.error('Please select at least one lead to convert');\r\n          return;\r\n        }\r\n        setSelectedRowsForDialog(selectedRows);\r\n        setBulkPipelineOpen(true);\r\n      }\r\n    },\r\n    {\r\n      label: 'Convert All to Pipeline',\r\n      icon: <Move className=\"h-4 w-4 mr-2\" />,\r\n      onClick: (selectedRows) => {\r\n        const selectedIds = selectedRows.map(row => row.id);\r\n        bulkConvertLeads.mutate(\r\n          {\r\n            leadIds: selectedIds,\r\n            category: 'Pipeline',\r\n            status: 'Proposal - Media',\r\n          },\r\n          {\r\n            onSuccess: () => {\r\n              toast.success(`Converted ${selectedRows.length} leads to pipeline`);\r\n            },\r\n          }\r\n        );\r\n      }\r\n    },\r\n    {\r\n      label: 'Delete',\r\n      icon: <Trash2 className=\"h-4 w-4 mr-2\" />,\r\n      variant: 'destructive' as const,\r\n      onClick: (selectedRows) => {\r\n        if (selectedRows.length === 0) {\r\n          toast.error('Please select at least one lead to delete');\r\n          return;\r\n        }\r\n\r\n        if (confirm(`Are you sure you want to delete ${selectedRows.length} leads?`)) {\r\n          const selectedIds = selectedRows.map(row => row.id);\r\n          bulkDeleteLeads.mutate(\r\n            { ids: selectedIds },\r\n            {\r\n              onSuccess: () => {\r\n                toast.success(`Deleted ${selectedRows.length} leads`);\r\n              },\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  ], [bulkUpdateLeads, bulkDeleteLeads, bulkConvertLeads]);\r\n\r\n  const handleAddBdr = (newBdr: string) => {\r\n    const success = addBdr(newBdr);\r\n    if (success) {\r\n      // Update the BDR filter if it's currently set\r\n      if (filters.bdr && filters.bdr !== 'all') {\r\n        onFilterChange('bdr', newBdr);\r\n      }\r\n    }\r\n    return success;\r\n  };\r\n\r\n  // Export functionality (placeholder - would need actual implementation)\r\n  const exportButton = (\r\n    <Button variant=\"outline\" size=\"sm\">\r\n      <Download className=\"h-4 w-4 mr-2\" />\r\n      Export CSV\r\n    </Button>\r\n  );\r\n\r\n  // Additional actions\r\n  const additionalActions = (\r\n    <div className=\"flex items-center space-x-2\">\r\n      <AddBdrDialog onAddBdr={handleAddBdr} />\r\n      <LeadUpdatesDialog\r\n        trigger={\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Upload className=\"h-4 w-4 mr-2\" />\r\n            Import Updates\r\n          </Button>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <DataTable\r\n        columns={columns}\r\n        data={data}\r\n        filters={filters}\r\n        total={total}\r\n        pageCount={pageCount}\r\n        pageIndex={pageIndex}\r\n        pageSize={pageSize}\r\n        onPaginationChange={onPaginationChange}\r\n        onGlobalFilterChange={onGlobalFilterChange}\r\n        onFilterChange={onFilterChange}\r\n        isLoading={isLoading}\r\n        enableRowSelection={true}\r\n        bulkActions={bulkActions}\r\n        filterConfigs={filterConfigs}\r\n        searchPlaceholder=\"Search leads...\"\r\n        title=\"Leads Management\"\r\n        exportButton={exportButton}\r\n        additionalActions={additionalActions}\r\n        emptyStateMessage=\"No leads found\"\r\n        virtualizeRows\r\n        virtualRowEstimatedHeight={44}\r\n      />\r\n\r\n      <BulkPipelineDialog\r\n        isOpen={bulkPipelineOpen}\r\n        onClose={() => {\r\n          setBulkPipelineOpen(false);\r\n          setSelectedRowsForDialog([]);\r\n        }}\r\n        selectedLeads={selectedRowsForDialog}\r\n      />\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\leads-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":34,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Upload' is defined but never used.","line":34,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LeadUpdatesDialog' is defined but never used.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ColumnMeta' is defined but never used.","line":47,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'total' is defined but never used.","line":87,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4740,4743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4740,4743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleConvertAll'. Either include it or remove the dependency array.","line":150,"column":6,"nodeType":"ArrayExpression","endLine":150,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [handleConvertAll, selectedRows.length]","fix":{"range":[5026,5047],"text":"[handleConvertAll, selectedRows.length]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5637,5640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5637,5640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6366,6369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6366,6369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":568,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":568,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20527,20530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20527,20530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport {\r\n  ColumnDef,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  VisibilityState,\r\n} from '@tanstack/react-table';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Filter, Download, Upload, Trash2, Move, CheckCircle2, ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { Lead, useBdrManager } from '@/lib/hooks';\r\nimport { useBulkUpdateLeads, useBulkDeleteLeads, useBulkConvertLeads } from '@/lib/bulk-operations';\r\nimport { leadSourceEnum, leadStatusEnum } from '@/lib/validations';\r\nimport { toast } from 'sonner';\r\nimport { BulkPipelineDialog } from './bulk-pipeline-dialog';\r\nimport { LeadUpdatesDialog } from './lead-updates-dialog';\r\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { AddBdrDialog } from '@/components/ui/add-bdr-dialog';\r\nimport { ConfirmDialog } from '@/components/ui/confirm-dialog';\r\n\r\n// Custom type for column meta data\r\ninterface ColumnMeta {\r\n  priority: 'high' | 'medium' | 'low';\r\n}\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  filters: Record<string, string>;\r\n  total: number;\r\n  pageCount: number;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  onPaginationChange: (pageIndex: number, pageSize: number) => void;\r\n  onGlobalFilterChange: (value: string) => void;\r\n  onFilterChange: (columnId: string, value: string) => void;\r\n  isLoading?: boolean;\r\n  columnVisibility?: VisibilityState;\r\n  onColumnVisibilityChange?: (state: VisibilityState) => void;\r\n}\r\n\r\nfunction TableSkeleton() {\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      {Array.from({ length: 10 }).map((_, i) => (\r\n        <div key={i} className=\"flex items-center space-x-4\">\r\n          <Skeleton className=\"h-4 w-4\" />\r\n          <Skeleton className=\"h-4 w-[200px]\" />\r\n          <Skeleton className=\"h-4 w-[150px]\" />\r\n          <Skeleton className=\"h-4 w-[100px]\" />\r\n          <Skeleton className=\"h-4 w-[120px]\" />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function LeadsTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n  filters,\r\n  total,\r\n  pageCount,\r\n  pageIndex,\r\n  pageSize,\r\n  onPaginationChange,\r\n  onGlobalFilterChange,\r\n  onFilterChange,\r\n  isLoading,\r\n  columnVisibility,\r\n  onColumnVisibilityChange,\r\n}: DataTableProps<TData, TValue>) {\r\n  const { bdrs, addBdr } = useBdrManager();\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [bulkPipelineOpen, setBulkPipelineOpen] = useState(false);\r\n  const bulkUpdateLeads = useBulkUpdateLeads();\r\n  const bulkDeleteLeads = useBulkDeleteLeads();\r\n  const bulkConvertLeads = useBulkConvertLeads();\r\n  const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnVisibilityChange,\r\n    state: {\r\n      rowSelection,\r\n      columnVisibility: columnVisibility || {},\r\n    },\r\n  });\r\n\r\n  // Get selected rows (must be declared before effects that depend on it)\r\n  const selectedRowIds = useMemo(() => Object.keys(rowSelection), [rowSelection]);\r\n  const selectedRowData = useMemo(() => {\r\n    return data.filter((_, index) => \r\n      selectedRowIds.includes(index.toString())\r\n    ) as Lead[];\r\n  }, [data, selectedRowIds]);\r\n  const selectedRows = selectedRowData;\r\n\r\n  // Keyboard shortcuts: / focus search, Del delete, Shift+P convert\r\n  useEffect(() => {\r\n    const onKey = (e: KeyboardEvent) => {\r\n      if (e.key === '/' && !e.ctrlKey && !e.metaKey) {\r\n        e.preventDefault();\r\n        const el = document.getElementById('leads-search') as HTMLInputElement | null;\r\n        el?.focus();\r\n      }\r\n      if ((e.key === 'Delete' || e.key === 'Backspace') && selectedRows.length > 0) {\r\n        e.preventDefault();\r\n        setConfirmOpen(true);\r\n      }\r\n      if (((e as any).key?.toLowerCase?.() === 'p' && (e.shiftKey || e.altKey)) && selectedRows.length > 0) {\r\n        e.preventDefault();\r\n        handleConvertAll();\r\n      }\r\n    };\r\n    window.addEventListener('keydown', onKey);\r\n    return () => window.removeEventListener('keydown', onKey);\r\n  }, [selectedRows.length]);\r\n\r\n  // Note: Virtualization removed to ensure consistent column layout and header alignment\r\n  const tableContainerRef = React.useRef<HTMLDivElement | null>(null);\r\n\r\n  function handleStatusChange(status: string) {\r\n    if (selectedRows.length === 0) {\r\n      toast.error('Please select at least one lead to update');\r\n      return;\r\n    }\r\n    const selectedIds = selectedRows.map(row => row.id);\r\n    const previousStatusById = new Map<number, string>(\r\n      selectedRows.map(r => [r.id, r.status])\r\n    );\r\n\r\n    bulkUpdateLeads.mutate(\r\n      { ids: selectedIds, status: status as any },\r\n      {\r\n        onSuccess: () => {\r\n          setRowSelection({});\r\n          toast.success(\r\n            `Updated ${selectedRows.length} leads to ${status}`,\r\n            {\r\n              action: {\r\n                label: 'Undo',\r\n                onClick: () => {\r\n                  const rollbackIds = Array.from(previousStatusById.keys());\r\n                  // Apply rollback to previous per-lead status is not supported by the bulk API in one call if statuses differ;\r\n                  // best effort: revert all to the first previous status\r\n                  const firstPrev = previousStatusById.values().next().value as string;\r\n                  bulkUpdateLeads.mutate({ ids: rollbackIds, status: firstPrev as any });\r\n                },\r\n              },\r\n              duration: 4000,\r\n            }\r\n          );\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  const handleBulkConvert = async () => {\r\n    if (selectedRows.length === 0) {\r\n      toast.error('Please select at least one lead to convert');\r\n      return;\r\n    }\r\n    setBulkPipelineOpen(true);\r\n  };\r\n\r\n  const handleConvertAll = async () => {\r\n    if (selectedRows.length === 0) {\r\n      toast.error('Please select at least one lead to convert');\r\n      return;\r\n    }\r\n\r\n    const selectedIds = selectedRows.map(row => row.id);\r\n    bulkConvertLeads.mutate(\r\n      { leadIds: selectedIds, category: 'Pipeline', status: 'Proposal - Media' },\r\n      {\r\n        onSuccess: () => {\r\n          setRowSelection({});\r\n          toast.success(`Converted ${selectedRows.length} leads to pipeline`);\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleBulkDelete = () => {\r\n    if (selectedRows.length === 0) {\r\n      toast.error('Please select at least one lead to delete');\r\n      return;\r\n    }\r\n    setConfirmOpen(true);\r\n  };\r\n\r\n  const handleAddBdr = (newBdr: string) => {\r\n    const success = addBdr(newBdr);\r\n    if (success) {\r\n      // Update the BDR filter if it's currently set\r\n      if (filters.bdr && filters.bdr !== 'all') {\r\n        onFilterChange('bdr', newBdr);\r\n      }\r\n    }\r\n    return success;\r\n  };\r\n\r\n  // Render skeleton conditionally, but without changing hook order above\r\n  const maybeSkeleton = isLoading ? <TableSkeleton /> : null;\r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Loading Skeleton */}\r\n      {maybeSkeleton}\r\n\r\n      {/* Bulk Actions */}\r\n      {selectedRows.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\r\n              {selectedRows.length} Lead{selectedRows.length !== 1 ? 's' : ''} Selected\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Select onValueChange={handleStatusChange}>\r\n                <SelectTrigger className=\"w-[200px]\">\r\n                  <SelectValue placeholder=\"Update Status\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {leadStatusEnum.map((status) => (\r\n                    <SelectItem key={`bulk-${status}`} value={status}>\r\n                      {status}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              <BulkPipelineDialog \r\n                isOpen={bulkPipelineOpen}\r\n                onClose={() => setBulkPipelineOpen(false)}\r\n                selectedLeads={selectedRows.map(lead => ({\r\n                  id: lead.id,\r\n                  bdr: lead.bdr || null\r\n                }))}\r\n                onConvert={handleBulkConvert}\r\n              />\r\n\r\n              <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={handleConvertAll}\r\n                    className=\"flex items-center gap-2\"\r\n                  >\r\n                    <Move className=\"h-4 w-4\" />\r\n                    Convert All to Pipeline\r\n                  </Button>\r\n                </TooltipTrigger>\r\n                <TooltipContent>\r\n                  <p>Convert all selected leads to pipeline with default settings</p>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n\r\n              <Button\r\n                variant=\"destructive\"\r\n                size=\"sm\"\r\n                onClick={handleBulkDelete}\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <Trash2 className=\"h-4 w-4\" />\r\n                Delete Selected\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Confirm bulk delete dialog */}\r\n      <ConfirmDialog\r\n        open={confirmOpen}\r\n        onOpenChange={setConfirmOpen}\r\n        title=\"Delete selected leads?\"\r\n        description={`This will permanently remove ${selectedRows.length} lead${selectedRows.length !== 1 ? 's' : ''}. This action cannot be undone.`}\r\n        confirmLabel=\"Delete\"\r\n        onConfirm={() => {\r\n          const ids = selectedRows.map(r => r.id);\r\n          const snapshot = [...selectedRows];\r\n          bulkDeleteLeads.mutate(\r\n            { ids },\r\n            {\r\n              onSuccess: () => {\r\n                setConfirmOpen(false);\r\n                setRowSelection({});\r\n                toast.success(`Deleted ${snapshot.length} lead${snapshot.length !== 1 ? 's' : ''}`);\r\n              },\r\n            }\r\n          );\r\n        }}\r\n      />\r\n\r\n      {/* Filters */}\r\n      <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between pb-16 sm:pb-0\">\r\n        <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center\">\r\n          <div className=\"relative\">\r\n            <Input\r\n              id=\"leads-search\"\r\n              placeholder=\"Search leads...\"\r\n              value={filters.search || ''}\r\n              onChange={(e) => onGlobalFilterChange(e.target.value)}\r\n              className=\"w-full sm:w-[300px]\"\r\n            />\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => setShowFilters(!showFilters)}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <Filter className=\"h-4 w-4\" />\r\n            Filters\r\n          </Button>\r\n        </div>\r\n\r\n        {showFilters && (\r\n          <div className=\"flex flex-wrap gap-4 items-center\">\r\n            <Select\r\n              value={filters.status || 'all'}\r\n              onValueChange={(value) => onFilterChange('status', value)}\r\n            >\r\n              <SelectTrigger className=\"w-full min-w-[160px] max-w-[180px]\">\r\n                <SelectValue placeholder=\"Status\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">All Statuses</SelectItem>\r\n                {leadStatusEnum.map((status) => (\r\n                  <SelectItem key={`filter-${status}`} value={status}>\r\n                    {status}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <Select\r\n              value={filters.source || 'all'}\r\n              onValueChange={(value) => onFilterChange('source', value)}\r\n            >\r\n              <SelectTrigger className=\"w-full min-w-[160px] max-w-[180px]\">\r\n                <SelectValue placeholder=\"Source\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">All Sources</SelectItem>\r\n                {leadSourceEnum.map((source) => (\r\n                  <SelectItem key={source} value={source}>\r\n                    {source}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <Select\r\n              value={filters.bdr || 'all'}\r\n              onValueChange={(value) => onFilterChange('bdr', value)}\r\n            >\r\n              <SelectTrigger className=\"w-full min-w-[160px] max-w-[180px]\">\r\n                <SelectValue placeholder=\"BDR\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">All BDRs</SelectItem>\r\n                {bdrs.map((bdr) => (\r\n                  <SelectItem key={bdr} value={bdr}>\r\n                    {bdr}\r\n                  </SelectItem>\r\n                ))}\r\n                <AddBdrDialog onAddBdr={handleAddBdr} />\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"max-h-[70vh] overflow-auto\" ref={tableContainerRef}>\r\n          <Table className=\"w-full\">\r\n            <TableHeader>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <TableRow key={headerGroup.id}>\r\n                  {headerGroup.headers.map((header) => (\r\n                    <TableHead\r\n                      key={header.id}\r\n                      className=\"whitespace-nowrap px-4 text-foreground/80\"\r\n                    >\r\n                      {header.isPlaceholder\r\n                        ? null\r\n                        : flexRender(\r\n                            header.column.columnDef.header,\r\n                            header.getContext()\r\n                          )}\r\n                    </TableHead>\r\n                  ))}\r\n                </TableRow>\r\n              ))}\r\n            </TableHeader>\r\n            <TableBody>\r\n              {table.getRowModel().rows?.length ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <TableRow\r\n                    key={row.id}\r\n                    data-state={row.getIsSelected() && \"selected\"}\r\n                    className=\"hover:bg-white/50 dark:hover:bg-white/5 transition-colors\"\r\n                  >\r\n                    {row.getVisibleCells().map((cell) => (\r\n                      <TableCell key={cell.id} className=\"px-4\">\r\n                        {flexRender(\r\n                          cell.column.columnDef.cell,\r\n                          cell.getContext()\r\n                        )}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableRow>\r\n                  <TableCell\r\n                    colSpan={columns.length}\r\n                    className=\"h-24 text-center\"\r\n                  >\r\n                    No results.\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\r\n        <div className=\"text-sm text-muted-foreground\">\r\n          {selectedRows.length} of{\" \"}\r\n          {table.getFilteredRowModel().rows.length} row(s) selected.\r\n        </div>\r\n        <div className=\"flex flex-wrap items-center gap-2 sm:gap-4\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <p className=\"text-sm font-medium whitespace-nowrap\">Rows per page</p>\r\n            <Select\r\n              value={`${table.getState().pagination.pageSize}`}\r\n              onValueChange={(value) => {\r\n                onPaginationChange(0, Number(value));\r\n              }}\r\n            >\r\n              <SelectTrigger className=\"h-8 w-[70px]\">\r\n                <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n              </SelectTrigger>\r\n              <SelectContent side=\"top\">\r\n                {[10, 20, 30, 40, 50].map((pageSize) => (\r\n                  <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                    {pageSize}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n          <div className=\"flex items-center whitespace-nowrap text-sm font-medium\">\r\n            Page {pageIndex + 1} of {pageCount}\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <Button\r\n              variant=\"outline\"\r\n              className=\"hidden h-8 w-8 p-0 sm:flex\"\r\n              onClick={() => onPaginationChange(0, pageSize)}\r\n              disabled={pageIndex === 0}\r\n            >\r\n              <span className=\"sr-only\">Go to first page</span>\r\n              <ChevronLeft className=\"h-4 w-4\" />\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              className=\"h-8 w-8 p-0\"\r\n              onClick={() => onPaginationChange(pageIndex - 1, pageSize)}\r\n              disabled={pageIndex === 0}\r\n            >\r\n              <span className=\"sr-only\">Go to previous page</span>\r\n              <ChevronLeft className=\"h-4 w-4\" />\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              className=\"h-8 w-8 p-0\"\r\n              onClick={() => onPaginationChange(pageIndex + 1, pageSize)}\r\n              disabled={pageIndex === pageCount - 1}\r\n            >\r\n              <span className=\"sr-only\">Go to next page</span>\r\n              <ChevronRight className=\"h-4 w-4\" />\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              className=\"hidden h-8 w-8 p-0 sm:flex\"\r\n              onClick={() => onPaginationChange(pageCount - 1, pageSize)}\r\n              disabled={pageIndex === pageCount - 1}\r\n            >\r\n              <span className=\"sr-only\">Go to last page</span>\r\n              <ChevronRight className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Sticky bottom action bar for mobile when rows are selected */}\r\n      {selectedRows.length > 0 && (\r\n        <div className=\"sm:hidden fixed bottom-0 left-0 right-0 z-50 border-t bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\r\n          <div className=\"mx-auto max-w-screen-sm px-4 py-3\">\r\n            <div className=\"flex items-center justify-between gap-2\">\r\n              <div className=\"text-sm font-medium\">\r\n                {selectedRows.length} selected\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Button size=\"sm\" variant=\"outline\" onClick={() => setShowFilters(!showFilters)}>\r\n                  <Filter className=\"h-4 w-4\" />\r\n                </Button>\r\n                <Button size=\"sm\" variant=\"outline\" onClick={handleConvertAll}>\r\n                  <Move className=\"h-4 w-4\" />\r\n                </Button>\r\n                <Button size=\"sm\" variant=\"destructive\" onClick={handleBulkDelete}>\r\n                  <Trash2 className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Remove the duplicate BulkPipelineDialog */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper function to create a checkbox column\r\nexport function createSelectColumn<T>(): ColumnDef<T, any> {\r\n  return {\r\n    id: \"select\",\r\n    header: ({ table }) => (\r\n      <Checkbox\r\n        checked={\r\n          table.getIsAllPageRowsSelected() ||\r\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\r\n        }\r\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n        aria-label=\"Select all\"\r\n      />\r\n    ),\r\n    cell: ({ row }) => (\r\n      <Checkbox\r\n        checked={row.getIsSelected()}\r\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n        aria-label=\"Select row\"\r\n      />\r\n    ),\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n  };\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\pipeline-board-enhanced.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":6,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":80},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useBatchActivityLogs' is defined but never used.","line":16,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMoveItemToSublist' is defined but never used.","line":16,"column":89,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":109},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used.","line":22,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used.","line":22,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used.","line":22,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { FileText, MessageSquare, Move, ChevronDown, ChevronRight, Trash2, Plus, Clock, ExternalLink, BookOpen } from 'lucide-react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\n\r\nimport { PipelineItem, useCreateActivityLog, useBatchActivityLogs, useMovePipelineItem, useMoveItemToSublist, useDeletePipelineItem, useActivityLogs } from '@/lib/hooks';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { pipelineCategoryEnum, pipelineStatusEnum } from '@/lib/validations';\r\nimport { PipelineDialog } from './pipeline-dialog';\r\nimport { PipelineDetail } from './pipeline-detail';\r\nimport { PipelineEditableCell } from './ui/pipeline-editable-cell';\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\r\nimport { toast } from 'sonner';\r\nimport { \r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { UpdatesDialog } from './updates-dialog';\r\nimport { SublistDialog } from './sublist-dialog';\r\nimport { NotesPopover } from './ui/notes-popover';\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { useRouter } from 'next/navigation';\r\n\r\ninterface PipelineBoardEnhancedProps {\r\n  items: PipelineItem[];\r\n  isLoading?: boolean;\r\n  selectedBdr: string;\r\n  onRefresh?: () => void;\r\n  simpleMode?: boolean;\r\n}\r\n\r\ninterface GroupedSection {\r\n  id: string;\r\n  label: string;\r\n  icon: string;\r\n  color: string;\r\n  categories: string[];\r\n  statuses: string[];\r\n}\r\n\r\nexport function PipelineBoardEnhanced({ items, isLoading, selectedBdr, onRefresh, simpleMode = true }: PipelineBoardEnhancedProps) {\r\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['Pipeline', 'Lists_Media_QA', 'Calls', 'Declined_Rescheduled']));\r\n  const [expandedItems, setExpandedItems] = useState<Set<number>>(new Set());\r\n  const [detailOpen, setDetailOpen] = useState<number | null>(null);\r\n  const [moveOpen, setMoveOpen] = useState<number | null>(null);\r\n  const [selectedMoveCategory, setSelectedMoveCategory] = useState<string>('');\r\n  const [selectedMoveStatus, setSelectedMoveStatus] = useState<string>('');\r\n  const [showActivityLog, setShowActivityLog] = useState<number | null>(null);\r\n\r\n  const router = useRouter();\r\n  const { mutate: movePipelineItem } = useMovePipelineItem();\r\n  const { mutate: deletePipelineItem } = useDeletePipelineItem();\r\n  const { mutate: createActivityLog } = useCreateActivityLog();\r\n\r\n  // Fetch activity logs for the selected item\r\n  const { data: activityLogsData } = useActivityLogs({\r\n    pipelineItemId: showActivityLog || undefined,\r\n    pageSize: 50,\r\n  });\r\n\r\n  // Define the grouped sections with proper labels and ordering\r\n  const groupedSections: GroupedSection[] = [\r\n    {\r\n      id: 'Pipeline',\r\n      label: 'Pipeline (Agreements & Proposals)',\r\n      icon: '📋',\r\n      categories: ['Pipeline'],\r\n      statuses: ['Proposal - Media', 'Proposal - Profile', 'Agreement - Media', 'Agreement - Profile', 'Partner List Pending'],\r\n      color: 'bg-blue-50 dark:bg-blue-950/30 border-l-blue-500 dark:border-l-blue-400'\r\n    },\r\n    {\r\n      id: 'Lists_Media_QA',\r\n      label: 'Lists, Media Sales & Q&A',\r\n      icon: '📊',\r\n      categories: ['Lists_Media_QA'],\r\n      statuses: ['Partner List Sent', 'List Out', 'List Out - Not Sold', 'Media Sales', 'Q&A', 'Free Q&A Offered', 'Sold'],\r\n      color: 'bg-green-50 dark:bg-green-950/30 border-l-green-500 dark:border-l-green-400'\r\n    },\r\n    {\r\n      id: 'Calls',\r\n      label: 'Calls',\r\n      icon: '📞',\r\n      categories: ['Calls'],\r\n      statuses: ['Call Proposed', 'Call Booked', 'Call Conducted'],\r\n      color: 'bg-purple-50 dark:bg-purple-950/30 border-l-purple-500 dark:border-l-purple-400'\r\n    },\r\n    {\r\n      id: 'Declined_Rescheduled',\r\n      label: 'Declined & Rescheduled',\r\n      icon: '⏸️',\r\n      categories: ['Declined_Rescheduled'],\r\n      statuses: ['Declined_Rescheduled', 'Rescheduled', 'Lost'],\r\n      color: 'bg-orange-50 dark:bg-orange-950/30 border-l-orange-500 dark:border-l-orange-400'\r\n    }\r\n  ];\r\n  \r\n  // Filter items by the selected BDR\r\n  const filteredItems = items.filter(item => item.bdr === selectedBdr);\r\n  \r\n  // Group and sort items by sections and statuses\r\n  const groupedAndSortedItems: Record<string, PipelineItem[]> = {};\r\n  \r\n  groupedSections.forEach(section => {\r\n    const sectionItems = filteredItems.filter(\r\n      item => section.categories.includes(item.category)\r\n    );\r\n    \r\n    // Sort by status order within section, then by lastUpdated (most recent first)\r\n    groupedAndSortedItems[section.id] = sectionItems.sort((a, b) => {\r\n      // First sort by status order\r\n      const statusOrderA = section.statuses.indexOf(a.status);\r\n      const statusOrderB = section.statuses.indexOf(b.status);\r\n      \r\n      if (statusOrderA !== statusOrderB) {\r\n        return statusOrderA - statusOrderB;\r\n      }\r\n      \r\n      // Then sort by lastUpdated within same status\r\n      const dateA = new Date(a.lastUpdated || a.addedDate || 0);\r\n      const dateB = new Date(b.lastUpdated || b.addedDate || 0);\r\n      return dateB.getTime() - dateA.getTime();\r\n    });\r\n  });\r\n\r\n  const toggleSection = (sectionId: string) => {\r\n    const newExpanded = new Set(expandedSections);\r\n    if (newExpanded.has(sectionId)) {\r\n      newExpanded.delete(sectionId);\r\n    } else {\r\n      newExpanded.add(sectionId);\r\n    }\r\n    setExpandedSections(newExpanded);\r\n  };\r\n\r\n  const toggleExpanded = (itemId: number) => {\r\n    const newExpanded = new Set(expandedItems);\r\n    if (newExpanded.has(itemId)) {\r\n      newExpanded.delete(itemId);\r\n    } else {\r\n      newExpanded.add(itemId);\r\n    }\r\n    setExpandedItems(newExpanded);\r\n  };\r\n\r\n  const handleItemClick = (id: number) => {\r\n    router.push(`/pipeline/${id}`);\r\n  };\r\n\r\n  const handleMoveItem = (item: PipelineItem) => {\r\n    if (selectedMoveCategory === item.category && selectedMoveStatus === item.status) {\r\n      setMoveOpen(null);\r\n      return;\r\n    }\r\n\r\n    movePipelineItem({\r\n      id: item.id,\r\n      newCategory: selectedMoveCategory,\r\n      newStatus: selectedMoveStatus\r\n    }, {\r\n      onSuccess: () => {\r\n        toast.success(`Moved to ${selectedMoveStatus}`);\r\n        setMoveOpen(null);\r\n        onRefresh?.();\r\n      },\r\n      onError: () => {\r\n        toast.error('Failed to move item');\r\n      }\r\n    });\r\n  };\r\n\r\n  function getNextStep(item: PipelineItem): { category: string; status: string; label: string } | null {\r\n    const { category, status } = item;\r\n    if (category === 'Calls') {\r\n      if (status === 'Call Proposed') return { category, status: 'Call Booked', label: 'Book call' };\r\n      if (status === 'Call Booked') return { category, status: 'Call Conducted', label: 'Conducted' };\r\n    }\r\n    if (category === 'Pipeline') {\r\n      if (status === 'Proposal - Profile') return { category, status: 'Agreement - Profile', label: 'Send agreement (Profile)' };\r\n      if (status === 'Proposal - Media') return { category, status: 'Agreement - Media', label: 'Send agreement (Media)' };\r\n      if (status === 'Partner List Pending') return { category: 'Lists_Media_QA', status: 'Partner List Sent', label: 'Send partner list' };\r\n    }\r\n    if (category === 'Lists_Media_QA') {\r\n      if (status === 'Partner List Sent') return { category, status: 'List Out', label: 'Mark list out' };\r\n      if (status === 'List Out') return { category, status: 'Media Sales', label: 'Move to media sales' };\r\n      if (status === 'Media Sales') return { category, status: 'Sold', label: 'Mark sold' };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function handleQuickMove(item: PipelineItem) {\r\n    const next = getNextStep(item);\r\n    if (!next) return;\r\n    movePipelineItem({ id: item.id, newCategory: next.category, newStatus: next.status }, {\r\n      onSuccess: () => {\r\n        toast.success(`Moved to ${next.status}`);\r\n        onRefresh?.();\r\n      },\r\n      onError: () => toast.error('Failed to move item'),\r\n    });\r\n  }\r\n\r\n  function handleQuickLogCall(item: PipelineItem) {\r\n    createActivityLog({\r\n      bdr: item.bdr,\r\n      activityType: 'Call_Completed',\r\n      description: 'Call completed',\r\n      pipelineItemId: item.id,\r\n    }, {\r\n      onSuccess: () => {\r\n        toast.success('Logged call');\r\n        onRefresh?.();\r\n      },\r\n      onError: () => toast.error('Failed to log call'),\r\n    });\r\n  }\r\n\r\n  async function handlePushToEditorial(item: PipelineItem) {\r\n    try {\r\n      const response = await fetch('/api/editorial/sync', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ pipelineItemId: item.id }),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        toast.success(`\"${item.name}\" pushed to editorial board`);\r\n        onRefresh?.();\r\n      } else if (response.status === 409) {\r\n        toast.warning(`\"${item.name}\" is already in editorial board`);\r\n      } else {\r\n        throw new Error(result.error || 'Failed to push to editorial board');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error pushing to editorial board:', error);\r\n      toast.error('Failed to push to editorial board');\r\n    }\r\n  }\r\n\r\n  const handleCategoryChange = (category: string) => {\r\n    setSelectedMoveCategory(category);\r\n    const statuses = pipelineStatusEnum[category as keyof typeof pipelineStatusEnum];\r\n    if (statuses && statuses.length > 0) {\r\n      setSelectedMoveStatus(statuses[0]);\r\n    }\r\n  };\r\n\r\n  const openMoveDialog = (item: PipelineItem) => {\r\n    setSelectedMoveCategory(item.category);\r\n    setSelectedMoveStatus(item.status);\r\n    setMoveOpen(item.id);\r\n  };\r\n\r\n  const handleDeleteItem = (e: React.MouseEvent, item: PipelineItem) => {\r\n    e.stopPropagation();\r\n    if (confirm('Are you sure you want to delete this pipeline item? This action cannot be undone.')) {\r\n      deletePipelineItem(item.id, {\r\n        onSuccess: () => {\r\n          toast.success('Pipeline item deleted successfully');\r\n          onRefresh?.();\r\n        },\r\n        onError: () => {\r\n          toast.error('Failed to delete pipeline item');\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Recursive function to render items and their children\r\n  const renderItemsRecursively = (itemList: PipelineItem[], level: number = 0): React.ReactElement[] => {\r\n    const elements: React.ReactElement[] = [];\r\n    \r\n    itemList.forEach((item) => {\r\n      const hasChildren = item.children && item.children.length > 0;\r\n      const isExpanded = expandedItems.has(item.id);\r\n      \r\n      elements.push(\r\n        <TableRow\r\n          key={item.id}\r\n          className=\"cursor-pointer hover:bg-muted/50 h-12 border-l-2\"\r\n          style={{\r\n            borderLeftColor: \r\n              item.status === 'Call Booked' ? '#16a34a' :\r\n              item.status === 'Call Proposed' ? '#f59e0b' :\r\n              item.status === 'Sold' ? '#059669' :\r\n              item.status.includes('Agreement') ? '#3b82f6' :\r\n              item.status.includes('Proposal') ? '#8b5cf6' :\r\n              item.status.includes('Declined') ? '#ef4444' :\r\n              item.status.includes('Rescheduled') ? '#f97316' :\r\n              '#6b7280'\r\n          }}\r\n          onClick={() => handleItemClick(item.id)}\r\n        >\r\n          <TableCell className=\"py-2\">\r\n            <div className=\"flex items-center gap-2\" style={{ paddingLeft: `${level * 20}px` }}>\r\n              <div onClick={(e) => e.stopPropagation()}>\r\n                {hasChildren ? (\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      className=\"h-4 w-4 p-0 hover:bg-muted\"\r\n                      onClick={() => toggleExpanded(item.id)}\r\n                    >\r\n                      {isExpanded ? (\r\n                        <ChevronDown className=\"h-3 w-3\" />\r\n                      ) : (\r\n                        <ChevronRight className=\"h-3 w-3\" />\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <SublistDialog\r\n                    title=\"Add Sublist Item\"\r\n                    buttonLabel=\"+\"\r\n                    buttonVariant=\"ghost\"\r\n                    buttonSize=\"sm\"\r\n                    buttonIcon={true}\r\n                    defaultCategory={item.category}\r\n                    defaultStatus={item.status}\r\n                    defaultBdr={item.bdr}\r\n                    parentId={item.id}\r\n                    onSuccess={onRefresh}\r\n                    className=\"h-4 w-4 p-0 hover:bg-muted\"\r\n                  />\r\n                )}\r\n              </div>\r\n              <PipelineEditableCell\r\n                value={item.name}\r\n                item={item}\r\n                field=\"name\"\r\n                placeholder=\"Name\"\r\n              />\r\n              {hasChildren && (\r\n                <div className=\"flex items-center gap-1 ml-2\">\r\n                  <div className=\"w-1 h-1 rounded-full bg-primary\"></div>\r\n                  <span className=\"text-xs text-muted-foreground\">\r\n                    {item.children?.length || 0} subitem{item.children && item.children.length !== 1 ? 's' : ''}\r\n                  </span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </TableCell>\r\n          <TableCell className=\"py-2\">\r\n            <PipelineEditableCell\r\n              value={item.company}\r\n              item={item}\r\n              field=\"company\"\r\n              placeholder=\"Company\"\r\n            />\r\n          </TableCell>\r\n          {!simpleMode && (\r\n          <TableCell className=\"py-2\">\r\n            <PipelineEditableCell\r\n              value={item.title}\r\n              item={item}\r\n              field=\"title\"\r\n              placeholder=\"Title\"\r\n            />\r\n          </TableCell>\r\n          )}\r\n          <TableCell className=\"py-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className={`px-2 py-1 rounded-full text-xs font-medium ${\r\n                item.status === 'Call Booked' ? 'bg-green-100 text-green-800' :\r\n                item.status === 'Call Proposed' ? 'bg-yellow-100 text-yellow-800' :\r\n                item.status === 'Sold' ? 'bg-emerald-100 text-emerald-800' :\r\n                item.status.includes('Agreement') ? 'bg-blue-100 text-blue-800' :\r\n                item.status.includes('Proposal') ? 'bg-purple-100 text-purple-800' :\r\n                item.status.includes('Declined') ? 'bg-red-100 text-red-800' :\r\n                item.status.includes('Rescheduled') ? 'bg-orange-100 text-orange-800' :\r\n                'bg-muted text-muted-foreground'\r\n              }`}>\r\n                {item.status}\r\n              </div>\r\n              {simpleMode && getNextStep(item) && (\r\n                <div className=\"inline-flex items-center gap-2\">\r\n                  <span className=\"text-xs text-muted-foreground\">Next:</span>\r\n                  <span className=\"text-xs font-medium\">\r\n                    {getNextStep(item)!.status}\r\n                  </span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </TableCell>\r\n          <TableCell className=\"py-2\">\r\n            <PipelineEditableCell\r\n              value={item.callDate || ''}\r\n              item={item}\r\n              field=\"callDate\"\r\n              placeholder=\"Set call date\"\r\n              isDate={true}\r\n            />\r\n          </TableCell>\r\n          {!simpleMode && (\r\n          <TableCell className=\"py-2\" onClick={(e) => e.stopPropagation()}>\r\n            <Popover open={showActivityLog === item.id} onOpenChange={(open) => !open && setShowActivityLog(null)}>\r\n              <PopoverTrigger asChild>\r\n                <div \r\n                  className=\"cursor-pointer hover:bg-muted/50 p-1 rounded\"\r\n                  onClick={() => setShowActivityLog(item.id)}\r\n                >\r\n                  {item.latestActivityLog ? (\r\n                    <div className=\"flex flex-col gap-0.5\">\r\n                      <span className=\"text-xs font-medium\">\r\n                        {item.latestActivityLog.activityType === 'BDR_Update' ? 'Update' : \r\n                         item.latestActivityLog.activityType.replace('_', ' ')}\r\n                      </span>\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        {item.latestActivityLog.notes ? \r\n                          item.latestActivityLog.notes.length > 30 ? \r\n                            `${item.latestActivityLog.notes.substring(0, 30)}...` : \r\n                            item.latestActivityLog.notes\r\n                          : item.latestActivityLog.description\r\n                        }\r\n                      </span>\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        by {item.latestActivityLog.bdr} {formatDistanceToNow(new Date(item.latestActivityLog.timestamp), { addSuffix: true })}\r\n                      </span>\r\n                    </div>\r\n                  ) : (\r\n                    <span className=\"text-xs text-muted-foreground\">No updates</span>\r\n                  )}\r\n                </div>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-96\" side=\"right\">\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <h4 className=\"font-medium flex items-center gap-2\">\r\n                      <Clock className=\"h-4 w-4\" />\r\n                      Activity History\r\n                    </h4>\r\n                  </div>\r\n                  <ScrollArea className=\"h-[300px]\">\r\n                    <div className=\"space-y-4\">\r\n                      {activityLogsData?.logs.map((log) => (\r\n                        <div key={log.id} className=\"space-y-1\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <span className=\"text-sm font-medium\">\r\n                              {log.activityType === 'BDR_Update' ? 'Update' : \r\n                               log.activityType.replace('_', ' ')}\r\n                            </span>\r\n                            <span className=\"text-xs text-muted-foreground\">\r\n                              {formatDistanceToNow(new Date(log.timestamp), { addSuffix: true })}\r\n                            </span>\r\n                          </div>\r\n                          <p className=\"text-sm text-muted-foreground\">\r\n                            {log.notes || log.description}\r\n                          </p>\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            by {log.bdr}\r\n                          </p>\r\n                          {(log.previousStatus !== log.newStatus || log.previousCategory !== log.newCategory) && (\r\n                            <p className=\"text-xs text-muted-foreground mt-1\">\r\n                              {log.previousCategory && log.newCategory && (\r\n                                <>Moved from {log.previousCategory} to {log.newCategory}<br /></>\r\n                              )}\r\n                              {log.previousStatus && log.newStatus && (\r\n                                <>Status changed from {log.previousStatus} to {log.newStatus}</>\r\n                              )}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </ScrollArea>\r\n                </div>\r\n              </PopoverContent>\r\n            </Popover>\r\n          </TableCell>\r\n          )}\r\n          {!simpleMode && (\r\n          <TableCell className=\"py-2\">\r\n            {item.email && (\r\n              <a \r\n                href={`mailto:${item.email}`}\r\n                onClick={(e) => e.stopPropagation()}\r\n                className=\"text-blue-500 hover:text-blue-700 transition-colors text-xs\"\r\n              >\r\n                {item.email}\r\n              </a>\r\n            )}\r\n          </TableCell>\r\n          )}\r\n          {!simpleMode && (\r\n          <TableCell className=\"py-2\">\r\n            {item.phone && (\r\n              <a \r\n                href={`tel:${item.phone}`}\r\n                onClick={(e) => e.stopPropagation()}\r\n                className=\"text-blue-500 hover:text-blue-700 transition-colors text-xs\"\r\n              >\r\n                {item.phone}\r\n              </a>\r\n            )}\r\n          </TableCell>\r\n          )}\r\n          <TableCell className=\"py-2\">\r\n            <PipelineEditableCell\r\n              value={item.notes}\r\n              item={item}\r\n              field=\"notes\"\r\n              isTextarea={true}\r\n              placeholder=\"Add notes...\"\r\n            />\r\n          </TableCell>\r\n          <TableCell className=\"py-2\">\r\n            <div className=\"flex items-center space-x-1\" onClick={e => e.stopPropagation()}>\r\n              <UpdatesDialog \r\n                pipelineItem={item}\r\n                trigger={\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    size=\"sm\" \r\n                    className=\"h-6 px-2 text-xs\"\r\n                  >\r\n                    <MessageSquare className=\"h-3 w-3 mr-1\" />\r\n                    Updates\r\n                  </Button>\r\n                }\r\n              />\r\n              \r\n              {!simpleMode && (\r\n              <Popover open={moveOpen === item.id} onOpenChange={(open) => !open && setMoveOpen(null)}>\r\n                <PopoverTrigger asChild>\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    size=\"sm\" \r\n                    className=\"h-6 px-2 text-xs\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      openMoveDialog(item);\r\n                    }}\r\n                  >\r\n                    <Move className=\"h-3 w-3 mr-1\" />\r\n                    Move\r\n                  </Button>\r\n                </PopoverTrigger>\r\n                <PopoverContent className=\"w-80 p-4\" side=\"top\" align=\"end\">\r\n                  <div className=\"space-y-4\">\r\n                    <h4 className=\"font-medium\">Move to different group</h4>\r\n                    \r\n                    <div className=\"space-y-3\">\r\n                      <div>\r\n                        <label className=\"text-sm font-medium\">Category</label>\r\n                        <Select\r\n                          value={selectedMoveCategory}\r\n                          onValueChange={handleCategoryChange}\r\n                        >\r\n                          <SelectTrigger className=\"mt-1\">\r\n                            <SelectValue />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {pipelineCategoryEnum.map((category) => (\r\n                              <SelectItem key={category} value={category}>\r\n                                {category.replace('_', ' ')}\r\n                              </SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                      \r\n                      <div>\r\n                        <label className=\"text-sm font-medium\">Status</label>\r\n                        <Select\r\n                          value={selectedMoveStatus}\r\n                          onValueChange={(value) => setSelectedMoveStatus(value)}\r\n                        >\r\n                          <SelectTrigger className=\"mt-1\">\r\n                            <SelectValue />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {selectedMoveCategory && pipelineStatusEnum[selectedMoveCategory as keyof typeof pipelineStatusEnum]?.map((status) => (\r\n                              <SelectItem key={`${selectedMoveCategory}-${status}`} value={status}>\r\n                                {status}\r\n                              </SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"text-xs text-muted-foreground bg-muted/20 p-2 rounded\">\r\n                      Moving from <span className=\"font-medium\">{item.category}</span> ({item.status}) to <span className=\"font-medium\">{selectedMoveCategory}</span> ({selectedMoveStatus})\r\n                    </div>\r\n                    \r\n                    <div className=\"flex justify-end gap-2\">\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"sm\"\r\n                        onClick={() => setMoveOpen(null)}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                      <Button \r\n                        size=\"sm\"\r\n                        onClick={() => handleMoveItem(item)}\r\n                        disabled={selectedMoveCategory === item.category && selectedMoveStatus === item.status}\r\n                      >\r\n                        Move\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </PopoverContent>\r\n              </Popover>\r\n              )}\r\n              \r\n              {!simpleMode && item.notes && <NotesPopover notes={item.notes} />}\r\n              {!simpleMode && item.link && (\r\n                <a \r\n                  href={item.link} \r\n                  target=\"_blank\" \r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"text-blue-500 hover:text-blue-700 transition-colors\"\r\n                >\r\n                  <ExternalLink className=\"h-3 w-3\" />\r\n                </a>\r\n              )}\r\n              {simpleMode && getNextStep(item) && (\r\n                <Button size=\"sm\" className=\"h-6 px-2 text-xs\" onClick={() => handleQuickMove(item)}>\r\n                  Move: {getNextStep(item)!.status}\r\n                </Button>\r\n              )}\r\n              {simpleMode && (\r\n                <Button variant=\"outline\" size=\"sm\" className=\"h-6 px-2 text-xs\" onClick={() => handleQuickLogCall(item)}>\r\n                  Log Call\r\n                </Button>\r\n              )}\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\" \r\n                className=\"h-6 px-2 text-xs bg-purple-50 hover:bg-purple-100 text-purple-700 border-purple-200\" \r\n                onClick={() => handlePushToEditorial(item)}\r\n                title=\"Push to Editorial Board\"\r\n              >\r\n                <BookOpen className=\"h-3 w-3 mr-1\" />\r\n                Editorial\r\n              </Button>\r\n              {!simpleMode && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  className=\"h-6 px-2 text-destructive hover:text-destructive hover:bg-destructive/10\"\r\n                  onClick={(e) => handleDeleteItem(e, item)}\r\n                >\r\n                  <Trash2 className=\"h-3 w-3\" />\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </TableCell>\r\n        </TableRow>\r\n      );\r\n\r\n      // Add children if expanded\r\n      if (hasChildren && isExpanded && item.children) {\r\n        elements.push(...renderItemsRecursively(item.children, level + 1));\r\n        \r\n        // Add \"Add subitem\" row after the children\r\n        elements.push(\r\n          <TableRow key={`add-subitem-${item.id}`} className=\"hover:bg-muted/50 h-10\">\r\n            <TableCell className=\"py-1\">\r\n              <div className=\"flex items-center gap-2\" style={{ paddingLeft: `${(level + 1) * 20}px` }}>\r\n                <div className=\"w-2 h-2 rounded-full bg-muted-foreground/30\"></div>\r\n                <SublistDialog\r\n                  title=\"Add More Sublist Items\"\r\n                  buttonLabel=\"+ Add subitem\"\r\n                  buttonVariant=\"ghost\"\r\n                  buttonSize=\"default\"\r\n                  buttonIcon={false}\r\n                  defaultCategory={item.category}\r\n                  defaultStatus={item.status}\r\n                  defaultBdr={item.bdr}\r\n                  parentId={item.id}\r\n                  onSuccess={onRefresh}\r\n                  className=\"h-5 px-2 text-xs hover:bg-muted text-muted-foreground hover:text-foreground border border-dashed border-muted-foreground/30 hover:border-muted-foreground/50 rounded\"\r\n                />\r\n              </div>\r\n            </TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            {!simpleMode && <TableCell className=\"py-1\"></TableCell>}\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            {!simpleMode && <TableCell className=\"py-1\"></TableCell>}\r\n            {!simpleMode && <TableCell className=\"py-1\"></TableCell>}\r\n            {!simpleMode && <TableCell className=\"py-1\"></TableCell>}\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n          </TableRow>\r\n        );\r\n      }\r\n    });\r\n\r\n    return elements;\r\n  };\r\n\r\n  const renderSkeletonRows = (count: number) => {\r\n    return Array(count)\r\n      .fill(0)\r\n      .map((_, i) => (\r\n        <TableRow key={i}>\r\n          <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\r\n          <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\r\n          {!simpleMode && <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>}\r\n          <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\r\n          <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\r\n          {!simpleMode && <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>}\r\n          {!simpleMode && <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>}\r\n          {!simpleMode && <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>}\r\n          <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\r\n          <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\r\n        </TableRow>\r\n      ));\r\n  };\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"sticky top-4 z-10 border-b pb-4 bg-white/40 dark:bg-white/[0.03] backdrop-blur-xl supports-[backdrop-filter]:bg-white/30\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold\">Enhanced Pipeline Board</h1>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              Managing pipeline for {selectedBdr} • Grouped by workflow stages\r\n            </p>\r\n          </div>\r\n          <PipelineDialog\r\n            title=\"Add New Lead\"\r\n            buttonLabel=\"Add New Lead\"\r\n            buttonVariant=\"default\"\r\n            buttonIcon={true}\r\n            defaultCategory=\"Pipeline\"\r\n            defaultStatus=\"Proposal - Profile\"\r\n            defaultBdr={selectedBdr}\r\n            onSuccess={onRefresh}\r\n            className=\"shadow-[0_15px_40px_-20px_rgba(0,0,0,0.35)]\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Grouped Sections */}\r\n      {groupedSections.map((section) => {\r\n        const sectionItems = groupedAndSortedItems[section.id] || [];\r\n        const isExpanded = expandedSections.has(section.id);\r\n        \r\n        return (\r\n          <div key={section.id} className=\"space-y-0\">\r\n            {/* Section Header */}\r\n            <div \r\n              className={`p-4 rounded-t-lg cursor-pointer hover:bg-opacity-80 transition-colors border-l-4 ${section.color}`}\r\n              onClick={() => toggleSection(section.id)}\r\n            >\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    className=\"h-6 w-6 p-0\"\r\n                  >\r\n                    {isExpanded ? (\r\n                      <ChevronDown className=\"h-4 w-4\" />\r\n                    ) : (\r\n                      <ChevronRight className=\"h-4 w-4\" />\r\n                    )}\r\n                  </Button>\r\n                  <span className=\"text-xl\">{section.icon}</span>\r\n                  <div>\r\n                    <h3 className=\"text-lg font-semibold text-foreground\">\r\n                      {section.label}\r\n                    </h3>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      {sectionItems.length} items\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\" onClick={e => e.stopPropagation()}>\r\n                  <PipelineDialog\r\n                    title={`Add ${section.label} Item`}\r\n                    buttonLabel=\"Add Item\"\r\n                    buttonVariant=\"outline\"\r\n                    buttonIcon={true}\r\n                    defaultCategory={section.categories[0]}\r\n                    defaultStatus={section.statuses[0]}\r\n                    defaultBdr={selectedBdr}\r\n                    onSuccess={onRefresh}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Section Table */}\r\n            {isExpanded && (\r\n              <div className=\"rounded-b-xl border border-t-0 overflow-hidden bg-white/40 dark:bg-white/[0.03] backdrop-blur\">\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow className=\"h-10 bg-white/60 dark:bg-white/[0.06]\">\r\n                      <TableHead className=\"w-[200px]\">Name</TableHead>\r\n                      <TableHead className=\"w-[150px]\">Company</TableHead>\r\n                      {!simpleMode && <TableHead className=\"w-[150px]\">Title</TableHead>}\r\n                      <TableHead className=\"w-[120px]\">Status</TableHead>\r\n                      <TableHead className=\"w-[100px]\">Call Date</TableHead>\r\n                      {!simpleMode && <TableHead className=\"w-[150px]\">Last Update</TableHead>}\r\n                      {!simpleMode && <TableHead className=\"w-[120px]\">Email</TableHead>}\r\n                      {!simpleMode && <TableHead className=\"w-[120px]\">Number</TableHead>}\r\n                      <TableHead className=\"w-[200px]\">Notes</TableHead>\r\n                      <TableHead className=\"w-[160px]\">Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {isLoading ? (\r\n                      renderSkeletonRows(3)\r\n                    ) : sectionItems.length > 0 ? (\r\n                      renderItemsRecursively(sectionItems)\r\n                    ) : (\r\n                      <TableRow>\r\n                        <TableCell colSpan={simpleMode ? 6 : 10} className=\"text-center py-8 text-muted-foreground\">\r\n                          <div className=\"flex flex-col items-center gap-2\">\r\n                            <span>No items in this section</span>\r\n                            <PipelineDialog\r\n                              title={`Add ${section.label} Item`}\r\n                              buttonLabel=\"Add First Item\"\r\n                              buttonVariant=\"outline\"\r\n                              buttonSize=\"sm\"\r\n                              buttonIcon={false}\r\n                              defaultCategory={section.categories[0]}\r\n                              defaultStatus={section.statuses[0]}\r\n                              defaultBdr={selectedBdr}\r\n                              onSuccess={onRefresh}\r\n                              className=\"text-xs\"\r\n                            />\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n      \r\n      {/* Pipeline Item Detail Dialog */}\r\n      <PipelineDetail \r\n        pipelineItemId={detailOpen || 0} \r\n        open={!!detailOpen} \r\n        onOpenChange={(open) => {\r\n          setDetailOpen(open ? detailOpen : null);\r\n        }}\r\n      />\r\n      \r\n      {/* Floating Action Button for Quick Add */}\r\n      <div className=\"fixed bottom-6 right-6 z-50\">\r\n        <PipelineDialog\r\n          title=\"Add New Lead\"\r\n          buttonLabel=\"\"\r\n          buttonVariant=\"default\"\r\n          buttonSize=\"icon\"\r\n          buttonIcon={true}\r\n          defaultCategory=\"Pipeline\"\r\n          defaultStatus=\"Proposal - Profile\"\r\n          defaultBdr={selectedBdr}\r\n          onSuccess={onRefresh}\r\n          className=\"h-14 w-14 rounded-full shadow-lg hover:shadow-xl transition-shadow\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\pipeline-detail.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSelectChange' is assigned a value but never used.","line":78,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { PipelineItem, usePipelineItem, useUpdatePipelineItem, useMovePipelineItem, useCreateActivityLog, useActivityLogs, useDeletePipelineItem } from '@/lib/hooks';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { formatDateUK, formatDateForInput } from '@/lib/date-utils';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { pipelineCategoryEnum, pipelineStatusEnum } from '@/lib/validations';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { toast } from 'sonner';\r\nimport { Trash2 } from 'lucide-react';\r\nimport { useRouter } from 'next/navigation';\r\n\r\ninterface PipelineDetailProps {\r\n  pipelineItemId: number;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n}\r\n\r\nexport function PipelineDetail({ pipelineItemId, open, onOpenChange }: PipelineDetailProps) {\r\n  const { data: pipelineItem, isLoading } = usePipelineItem(pipelineItemId);\r\n  const { mutate: updatePipelineItem } = useUpdatePipelineItem();\r\n  const { mutate: movePipelineItem } = useMovePipelineItem();\r\n  const { mutate: createActivityLog } = useCreateActivityLog();\r\n  const { mutate: deletePipelineItem } = useDeletePipelineItem();\r\n  const { data: activityData } = useActivityLogs({ \r\n    pipelineItemId, \r\n    page: 1, \r\n    pageSize: 10 \r\n  }, {\r\n    enabled: open, // Only fetch when dialog is open\r\n    queryKey: ['activityLogs', { pipelineItemId, page: 1, pageSize: 10 }]\r\n  });\r\n  const router = useRouter();\r\n  \r\n  const [editMode, setEditMode] = useState(false);\r\n  const [formData, setFormData] = useState<Partial<PipelineItem>>({});\r\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\r\n  const [selectedStatus, setSelectedStatus] = useState<string>('');\r\n\r\n  // Initialize form data when pipeline item data is loaded\r\n  React.useEffect(() => {\r\n    if (pipelineItem) {\r\n      setFormData({\r\n        name: pipelineItem.name,\r\n        title: pipelineItem.title,\r\n        company: pipelineItem.company,\r\n        bdr: pipelineItem.bdr,\r\n        notes: pipelineItem.notes,\r\n        email: pipelineItem.email,\r\n        phone: pipelineItem.phone,\r\n        link: pipelineItem.link,\r\n        expectedCloseDate: pipelineItem.expectedCloseDate \r\n          ? formatDateForInput(pipelineItem.expectedCloseDate)\r\n          : undefined,\r\n      });\r\n      \r\n      setSelectedCategory(pipelineItem.category);\r\n      setSelectedStatus(pipelineItem.status);\r\n    }\r\n  }, [pipelineItem]);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSelectChange = (name: string, value: string) => {\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (!pipelineItem) return;\r\n\r\n    const updatedItem = {\r\n      ...pipelineItem,\r\n      ...formData\r\n    };\r\n    \r\n    updatePipelineItem(updatedItem, {\r\n      onSuccess: () => {\r\n        setEditMode(false);\r\n        \r\n        // Log the activity\r\n        createActivityLog({\r\n          bdr: pipelineItem.bdr,\r\n          activityType: 'Note_Added',\r\n          description: 'Updated pipeline item details',\r\n          pipelineItemId: pipelineItem.id,\r\n          notes: 'Details updated'\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleMoveItem = () => {\r\n    if (!pipelineItem || selectedCategory === pipelineItem.category && selectedStatus === pipelineItem.status) return;\r\n    \r\n    movePipelineItem({\r\n      id: pipelineItem.id,\r\n      newCategory: selectedCategory,\r\n      newStatus: selectedStatus\r\n    }, {\r\n      onSuccess: () => {\r\n        toast.success(`Item moved to ${selectedStatus}`);\r\n        onOpenChange(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleDeleteItem = () => {\r\n    if (!pipelineItem) return;\r\n    \r\n    if (confirm('Are you sure you want to delete this pipeline item? This action cannot be undone.')) {\r\n      deletePipelineItem(pipelineItem.id, {\r\n        onSuccess: () => {\r\n          toast.success('Pipeline item deleted successfully');\r\n          onOpenChange(false);\r\n          // Refresh the page to update the pipeline view\r\n          router.refresh();\r\n        },\r\n        onError: () => {\r\n          toast.error('Failed to delete pipeline item');\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle category change and update available statuses\r\n  const handleCategoryChange = (category: string) => {\r\n    setSelectedCategory(category);\r\n    // Set the status to the first status in the new category\r\n    const statuses = pipelineStatusEnum[category as keyof typeof pipelineStatusEnum];\r\n    if (statuses && statuses.length > 0) {\r\n      setSelectedStatus(statuses[0]);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Dialog open={open} onOpenChange={onOpenChange}>\r\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>Loading...</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"h-40 flex items-center justify-center\">\r\n            Loading pipeline item details...\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  if (!pipelineItem) {\r\n    return (\r\n      <Dialog open={open} onOpenChange={onOpenChange}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Error</DialogTitle>\r\n          </DialogHeader>\r\n          <div>Pipeline item not found or error loading data.</div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  const activityLogs = activityData?.logs || [];\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"max-w-3xl max-h=[90vh] overflow-y-auto bg-white/70 dark:bg-white/[0.06] backdrop-blur-xl border border-white/20 dark:border-white/10\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"text-xl flex items-center justify-between\">\r\n            <span>{editMode ? 'Edit ' : ''}{pipelineItem.name}</span>\r\n            <div className=\"flex space-x-2\">\r\n              {editMode ? (\r\n                <>\r\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => setEditMode(false)}>\r\n                    Cancel\r\n                  </Button>\r\n                  <Button size=\"sm\" onClick={handleSave}>\r\n                    Save Changes\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Button size=\"sm\" onClick={() => setEditMode(true)}>\r\n                    Edit\r\n                  </Button>\r\n                  <Button \r\n                    variant=\"destructive\" \r\n                    size=\"sm\" \r\n                    onClick={handleDeleteItem}\r\n                    className=\"flex items-center gap-1\"\r\n                  >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n                    Delete\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <Tabs defaultValue=\"details\">\r\n          <TabsList>\r\n            <TabsTrigger value=\"details\">Details</TabsTrigger>\r\n            <TabsTrigger value=\"move\">Move</TabsTrigger>\r\n            <TabsTrigger value=\"activity\">Activity Log ({activityLogs.length})</TabsTrigger>\r\n          </TabsList>\r\n          \r\n          <TabsContent value=\"details\" className=\"space-y-4 py-4\">\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"name\">Name</Label>\r\n                {editMode ? (\r\n                  <Input \r\n                    id=\"name\" \r\n                    name=\"name\" \r\n                    value={formData.name || ''} \r\n                    onChange={handleInputChange} \r\n                  />\r\n                ) : (\r\n                  <div className=\"p-2 border rounded-md\">{pipelineItem.name}</div>\r\n                )}\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"title\">Title</Label>\r\n                {editMode ? (\r\n                  <Input \r\n                    id=\"title\" \r\n                    name=\"title\" \r\n                    value={formData.title || ''} \r\n                    onChange={handleInputChange} \r\n                  />\r\n                ) : (\r\n                  <div className=\"p-2 border rounded-md\">{pipelineItem.title || 'N/A'}</div>\r\n                )}\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"company\">Company</Label>\r\n                {editMode ? (\r\n                  <Input \r\n                    id=\"company\" \r\n                    name=\"company\" \r\n                    value={formData.company || ''} \r\n                    onChange={handleInputChange} \r\n                  />\r\n                ) : (\r\n                  <div className=\"p-2 border rounded-md\">{pipelineItem.company || 'N/A'}</div>\r\n                )}\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"bdr\">BDR</Label>\r\n                <div className=\"p-2 border rounded-md\">{pipelineItem.bdr}</div>\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"category\">Category</Label>\r\n                <div className=\"p-2 border rounded-md\">{pipelineItem.category.replace('_', ' ')}</div>\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"status\">Status</Label>\r\n                <div className=\"p-2 border rounded-md\">{pipelineItem.status}</div>\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"expectedCloseDate\">Expected Close Date</Label>\r\n                {editMode ? (\r\n                  <Input \r\n                    id=\"expectedCloseDate\" \r\n                    name=\"expectedCloseDate\" \r\n                    type=\"date\" \r\n                    value={formData.expectedCloseDate?.toString() || ''} \r\n                    onChange={handleInputChange} \r\n                  />\r\n                ) : (\r\n                  <div className=\"p-2 border rounded-md\">\r\n                    {pipelineItem.expectedCloseDate \r\n                      ? formatDateUK(pipelineItem.expectedCloseDate)\r\n                      : 'N/A'}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"phone\">Phone</Label>\r\n                {editMode ? (\r\n                  <Input \r\n                    id=\"phone\" \r\n                    name=\"phone\" \r\n                    value={formData.phone || ''} \r\n                    onChange={handleInputChange} \r\n                  />\r\n                ) : (\r\n                  <div className=\"p-2 border rounded-md\">{pipelineItem.phone || 'N/A'}</div>\r\n                )}\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"email\">Email</Label>\r\n                {editMode ? (\r\n                  <Input \r\n                    id=\"email\" \r\n                    name=\"email\" \r\n                    type=\"email\"\r\n                    value={formData.email || ''} \r\n                    onChange={handleInputChange} \r\n                  />\r\n                ) : (\r\n                  <div className=\"p-2 border rounded-md\">{pipelineItem.email || 'N/A'}</div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"sm:col-span-2\">\r\n                <Label htmlFor=\"link\">Link</Label>\r\n                {editMode ? (\r\n                  <Input \r\n                    id=\"link\" \r\n                    name=\"link\" \r\n                    value={formData.link || ''} \r\n                    onChange={handleInputChange} \r\n                  />\r\n                ) : (\r\n                  <div className=\"p-2 border rounded-md\">\r\n                    {pipelineItem.link ? (\r\n                      <a href={pipelineItem.link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">\r\n                        {pipelineItem.link}\r\n                      </a>\r\n                    ) : 'N/A'}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"sm:col-span-2\">\r\n                <Label htmlFor=\"notes\">Notes</Label>\r\n                {editMode ? (\r\n                  <Textarea \r\n                    id=\"notes\" \r\n                    name=\"notes\" \r\n                    rows={5}\r\n                    value={formData.notes || ''} \r\n                    onChange={handleInputChange} \r\n                  />\r\n                ) : (\r\n                  <div className=\"p-2 border rounded-md min-h-[100px] whitespace-pre-wrap\">\r\n                    {pipelineItem.notes || 'No notes available'}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              <div className=\"sm:col-span-2\">\r\n                <Label>Added Date</Label>\r\n                <div className=\"p-2 border rounded-md\">\r\n                  {formatDateUK(pipelineItem.addedDate)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"move\" className=\"space-y-4 py-4\">\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"moveCategory\">Select Category</Label>\r\n                <Select\r\n                  value={selectedCategory}\r\n                  onValueChange={handleCategoryChange}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select Category\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {pipelineCategoryEnum.map((category) => (\r\n                      <SelectItem key={category} value={category}>\r\n                        {category.replace('_', ' ')}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"moveStatus\">Select Status</Label>\r\n                <Select\r\n                  value={selectedStatus}\r\n                  onValueChange={(value) => setSelectedStatus(value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select Status\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {selectedCategory && pipelineStatusEnum[selectedCategory as keyof typeof pipelineStatusEnum]?.map((status) => (\r\n                      <SelectItem key={`${selectedCategory}-${status}`} value={status}>\r\n                        {status}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"mt-4 border rounded-md p-4 bg-muted/20\">\r\n              <p className=\"text-sm mb-2\">\r\n                Moving this item will:\r\n              </p>\r\n              <ul className=\"list-disc list-inside text-sm space-y-1 text-muted-foreground\">\r\n                <li>Change its category from <span className=\"font-medium\">{pipelineItem.category}</span> to <span className=\"font-medium\">{selectedCategory}</span></li>\r\n                <li>Change its status from <span className=\"font-medium\">{pipelineItem.status}</span> to <span className=\"font-medium\">{selectedStatus}</span></li>\r\n                <li>Create an activity log entry</li>\r\n                <li>Maintain all other item details</li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-end mt-4\">\r\n              <Button\r\n                onClick={handleMoveItem}\r\n                disabled={selectedCategory === pipelineItem.category && selectedStatus === pipelineItem.status}\r\n              >\r\n                Move Item\r\n              </Button>\r\n            </div>\r\n          </TabsContent>\r\n          \r\n          <TabsContent value=\"activity\" className=\"py-4\">\r\n            <div className=\"space-y-4\">\r\n              <h3 className=\"text-lg font-semibold\">Activity History</h3>\r\n              \r\n              {activityLogs.length === 0 ? (\r\n                <p className=\"text-muted-foreground text-sm\">No activity logs found for this item.</p>\r\n              ) : (\r\n                <div className=\"border rounded-md divide-y\">\r\n                  {activityLogs.map((log) => (\r\n                    <div key={log.id} className=\"p-3\">\r\n                      <div className=\"flex justify-between items-start\">\r\n                        <div>\r\n                          <p className=\"font-medium\">{log.activityType.replace('_', ' ')}</p>\r\n                          <p className=\"text-sm text-muted-foreground\">{log.description}</p>\r\n                        </div>\r\n                        <div className=\"text-sm text-right\">\r\n                          <p>{formatDateUK(log.timestamp)}</p>\r\n                          <p className=\"text-muted-foreground\">{new Date(log.timestamp).toLocaleString('en-GB', { hour: '2-digit', minute: '2-digit' })}</p>\r\n                        </div>\r\n                      </div>\r\n                      {log.notes && (\r\n                        <p className=\"mt-2 text-sm bg-muted/20 p-2 rounded\">{log.notes}</p>\r\n                      )}\r\n                      {(log.previousCategory && log.newCategory) && (\r\n                        <p className=\"mt-1 text-xs text-muted-foreground\">\r\n                          Moved from {log.previousCategory} to {log.newCategory}\r\n                        </p>\r\n                      )}\r\n                      {log.bdr && (\r\n                        <p className=\"mt-1 text-xs text-muted-foreground\">\r\n                          By: {log.bdr}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\pipeline-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\pipeline-form-refactored.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\pipeline-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '@/components/ui/form';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { ConfirmDialog } from '@/components/ui/confirm-dialog';\r\nimport { PipelineItem, useBdrManager } from '@/lib/hooks';\r\nimport { \r\n  pipelineSchema, \r\n  pipelineCategoryEnum, \r\n  pipelineStatusEnum \r\n} from '@/lib/validations';\r\nimport { useRouter } from 'next/navigation';\r\nimport { AddBdrDialog } from '@/components/ui/add-bdr-dialog';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { toast } from 'sonner';\r\n\r\ninterface PipelineFormProps {\r\n  initialData?: PipelineItem;\r\n  onSuccess?: () => void;\r\n  onCancel?: () => void;\r\n  defaultCategory?: string;\r\n  defaultStatus?: string;\r\n  defaultBdr?: string;\r\n}\r\n\r\ntype FormValues = z.infer<typeof pipelineSchema>;\r\n\r\nexport function PipelineForm({\r\n  initialData,\r\n  onSuccess,\r\n  onCancel,\r\n  defaultCategory,\r\n  defaultStatus,\r\n  defaultBdr,\r\n}: PipelineFormProps) {\r\n  const router = useRouter();\r\n  const { bdrs, addBdr } = useBdrManager();\r\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(\r\n    initialData?.category || defaultCategory || null\r\n  );\r\n  const [duplicateInfo, setDuplicateInfo] = useState<{\r\n    error: string;\r\n    details: string;\r\n    duplicateId: number;\r\n    duplicateBdr: string;\r\n    formValues: FormValues;\r\n  } | null>(null);\r\n  const [showDuplicateDialog, setShowDuplicateDialog] = useState(false);\r\n\r\n  const form = useForm<FormValues>({\r\n    resolver: zodResolver(pipelineSchema),\r\n    defaultValues: {\r\n      name: initialData?.name || '',\r\n      company: initialData?.company || '',\r\n      bdr: initialData?.bdr || defaultBdr || '',\r\n      category: initialData?.category || defaultCategory || 'Pipeline',\r\n      status: initialData?.status || defaultStatus || 'Proposal - Media',\r\n      value: initialData?.value || 0,\r\n      notes: initialData?.notes || '',\r\n      link: initialData?.link || '',\r\n      phone: initialData?.phone || '',\r\n      email: initialData?.email || '',\r\n    },\r\n  });\r\n\r\n  // Watch category changes to update available statuses\r\n  const watchedCategory = form.watch('category');\r\n  useEffect(() => {\r\n    setSelectedCategory(watchedCategory);\r\n  }, [watchedCategory]);\r\n\r\n  const onSubmit = async (values: FormValues) => {\r\n    const submitData = {\r\n      ...values,\r\n      value: Number(values.value),\r\n    };\r\n    \r\n\r\n    if (initialData) {\r\n      // Update existing pipeline item\r\n      try {\r\n        const response = await fetch(`/api/pipeline/${initialData.id}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(submitData),\r\n        });\r\n        \r\n        if (response.ok) {\r\n          toast.success('Pipeline item updated successfully');\r\n          onSuccess?.();\r\n          router.push('/pipeline');\r\n        } else {\r\n          const error = await response.json();\r\n          toast.error(error.error || 'Failed to update pipeline item');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating pipeline item:', error);\r\n        toast.error('Failed to update pipeline item');\r\n      }\r\n    } else {\r\n      // Create new pipeline item\r\n      try {\r\n        const response = await fetch('/api/pipeline', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(submitData),\r\n        });\r\n        \r\n        if (response.ok) {\r\n          toast.success('Pipeline item created successfully');\r\n          onSuccess?.();\r\n          router.push('/pipeline');\r\n        } else if (response.status === 409) {\r\n          // Handle duplicate detection\r\n          const duplicateError = await response.json();\r\n          if (duplicateError.type === 'DUPLICATE_LEAD') {\r\n            setDuplicateInfo({\r\n              error: duplicateError.error,\r\n              details: duplicateError.details,\r\n              duplicateId: duplicateError.duplicateId,\r\n              duplicateBdr: duplicateError.duplicateBdr,\r\n              formValues: values\r\n            });\r\n            setShowDuplicateDialog(true);\r\n          } else {\r\n            toast.error(duplicateError.error || 'Failed to create pipeline item');\r\n          }\r\n        } else {\r\n          const error = await response.json();\r\n          toast.error(error.error || 'Failed to create pipeline item');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error creating pipeline item:', error);\r\n        toast.error('Failed to create pipeline item');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddBdr = (newBdr: string) => {\r\n    const success = addBdr(newBdr);\r\n    if (success) {\r\n      // Update the form field with the new BDR\r\n      form.setValue('bdr', newBdr);\r\n    }\r\n    return success;\r\n  };\r\n\r\n  const handleForceCreate = async () => {\r\n    if (!duplicateInfo) return;\r\n    \r\n    try {\r\n      const response = await fetch('/api/pipeline?force=true', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          ...duplicateInfo.formValues,\r\n          value: Number(duplicateInfo.formValues.value),\r\n        }),\r\n      });\r\n      \r\n      if (response.ok) {\r\n        toast.success('Pipeline item created successfully (duplicate allowed)');\r\n        setShowDuplicateDialog(false);\r\n        setDuplicateInfo(null);\r\n        onSuccess?.();\r\n        router.push('/pipeline');\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(error.error || 'Failed to create pipeline item');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error force creating pipeline item:', error);\r\n      toast.error('Failed to create pipeline item');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"name\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Name*</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"John Doe\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"company\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Company</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"Acme Inc.\" {...field} value={field.value || ''} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"bdr\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>BDR</FormLabel>\r\n                <div className=\"flex gap-2\">\r\n                  <Select \r\n                    onValueChange={field.onChange} \r\n                    defaultValue={field.value}\r\n                    value={field.value}\r\n                  >\r\n                    <FormControl>\r\n                      <SelectTrigger className=\"flex-1\">\r\n                        <SelectValue placeholder=\"Select BDR\" />\r\n                      </SelectTrigger>\r\n                    </FormControl>\r\n                    <SelectContent>\r\n                      {bdrs.map((bdr) => (\r\n                        <SelectItem key={bdr} value={bdr}>\r\n                          {bdr}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <AddBdrDialog \r\n                    onAddBdr={handleAddBdr}\r\n                  />\r\n                </div>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"category\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Category</FormLabel>\r\n                <Select \r\n                  onValueChange={field.onChange} \r\n                  defaultValue={field.value}\r\n                  value={field.value}\r\n                >\r\n                  <FormControl>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Select Category\" />\r\n                    </SelectTrigger>\r\n                  </FormControl>\r\n                  <SelectContent>\r\n                    {pipelineCategoryEnum.map((category) => (\r\n                      <SelectItem key={category} value={category}>\r\n                        {category.replace(/_/g, ', ')}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"status\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Status</FormLabel>\r\n                <Select \r\n                  onValueChange={field.onChange} \r\n                  defaultValue={field.value}\r\n                  value={field.value}\r\n                >\r\n                  <FormControl>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Select Status\" />\r\n                    </SelectTrigger>\r\n                  </FormControl>\r\n                  <SelectContent>\r\n                    {selectedCategory && \r\n                      pipelineStatusEnum[selectedCategory as keyof typeof pipelineStatusEnum]?.map((status) => (\r\n                        <SelectItem key={`${selectedCategory}-${status}`} value={status}>\r\n                          {status}\r\n                        </SelectItem>\r\n                      ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"value\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Deal Value ($)</FormLabel>\r\n                <FormControl>\r\n                  <Input type=\"number\" placeholder=\"0.00\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"phone\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Phone</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"+1234567890\" {...field} value={field.value || ''} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name=\"email\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Email</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"john@example.com\" {...field} value={field.value || ''} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"link\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>LinkedIn Profile</FormLabel>\r\n              <FormControl>\r\n                <Input placeholder=\"https://linkedin.com/in/johndoe\" {...field} value={field.value || ''} />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <FormField\r\n          control={form.control}\r\n          name=\"notes\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Notes</FormLabel>\r\n              <FormControl>\r\n                <Textarea \r\n                  placeholder=\"Additional notes...\"\r\n                  className=\"min-h-[100px]\"\r\n                  {...field}\r\n                  value={field.value || ''}\r\n                />\r\n              </FormControl>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n\r\n        <div className=\"flex justify-end space-x-2\">\r\n          <Button \r\n            variant=\"outline\" \r\n            onClick={() => {\r\n              onCancel?.();\r\n              router.push('/pipeline');\r\n            }} \r\n            type=\"button\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button type=\"submit\">\r\n            {initialData ? 'Update Pipeline Item' : 'Create Pipeline Item'}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n\r\n      {/* Duplicate Detection Dialog */}\r\n      <ConfirmDialog\r\n        open={showDuplicateDialog}\r\n        title=\"Duplicate Lead Detected\"\r\n        description={`${duplicateInfo?.details}\\n\\nDo you want to continue and create this as a duplicate entry, or would you like to cancel and review the existing lead?`}\r\n        confirmLabel=\"Create Anyway\"\r\n        cancelLabel=\"Cancel\"\r\n        onConfirm={handleForceCreate}\r\n        onOpenChange={(open) => {\r\n          setShowDuplicateDialog(open);\r\n          if (!open) {\r\n            setDuplicateInfo(null);\r\n          }\r\n        }}\r\n      />\r\n    </Form>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\pipeline-table-refactored.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":5,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":5,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":5,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SublistDialog' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bulkUpdatePipeline' is assigned a value but never used.","line":30,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bulkDeletePipeline' is assigned a value but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedIds' is assigned a value but never used.","line":69,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5456,5459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5456,5459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { ColumnDef } from '@tanstack/react-table';\r\nimport { Filter, ExternalLink, MessageSquare, Move, Clock, Plus, Trash2 } from 'lucide-react';\r\nimport { PipelineItem, useMovePipelineItem, useDeletePipelineItem } from '@/lib/hooks';\r\nimport { pipelineCategoryEnum, allPipelineStatusValues } from '@/lib/validations';\r\nimport { useRouter } from 'next/navigation';\r\nimport { toast } from 'sonner';\r\nimport { UpdatesDialog } from '@/components/updates-dialog';\r\nimport { SublistDialog } from '@/components/sublist-dialog';\r\nimport { PipelineDialog } from '@/components/pipeline-dialog';\r\nimport { DataTable, FilterConfig, BulkAction } from '@/components/ui/data-table';\r\nimport { useBulkUpdatePipeline, useBulkDeletePipeline } from '@/lib/bulk-operations';\r\nimport { Button } from '@/components/ui/button';\r\n\r\ninterface PipelineTableProps {\r\n  items: PipelineItem[];\r\n  onRefresh?: () => void;\r\n  selectedBdr?: string;\r\n}\r\n\r\nexport function PipelineTableRefactored({ items, onRefresh, selectedBdr }: PipelineTableProps) {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const router = useRouter();\r\n  const { mutate: movePipelineItem } = useMovePipelineItem();\r\n  const { mutate: deletePipelineItem } = useDeletePipelineItem();\r\n  \r\n  // Bulk operation hooks\r\n  const bulkUpdatePipeline = useBulkUpdatePipeline();\r\n  const bulkDeletePipeline = useBulkDeletePipeline();\r\n\r\n  // Filter configurations\r\n  const filterConfigs: FilterConfig[] = useMemo(() => [\r\n    {\r\n      key: 'category',\r\n      label: 'Category',\r\n      options: pipelineCategoryEnum.map(category => ({ \r\n        value: category, \r\n        label: category.replace('_', ' ') \r\n      })),\r\n      placeholder: 'All Categories'\r\n    },\r\n    {\r\n      key: 'status',\r\n      label: 'Status',\r\n      options: allPipelineStatusValues.map(status => ({ value: status, label: status })),\r\n      placeholder: 'All Statuses'\r\n    },\r\n    {\r\n      key: 'bdr',\r\n      label: 'BDR',\r\n      options: [...new Set(items.map(item => item.bdr).filter(Boolean))].map(bdr => ({ \r\n        value: bdr, \r\n        label: bdr \r\n      })),\r\n      placeholder: 'All BDRs'\r\n    }\r\n  ], [items]);\r\n\r\n  // Bulk actions configuration\r\n  const bulkActions: BulkAction<PipelineItem>[] = useMemo(() => [\r\n    {\r\n      label: 'Move to Pipeline',\r\n      icon: <Move className=\"h-4 w-4 mr-2\" />,\r\n      onClick: (selectedRows) => {\r\n        // For simplicity, move all to a default Pipeline status\r\n        // In a real implementation, you'd want a dialog to select target status\r\n        const selectedIds = selectedRows.map(row => row.id);\r\n        selectedRows.forEach(item => {\r\n          movePipelineItem({\r\n            id: item.id,\r\n            newCategory: 'Pipeline',\r\n            newStatus: 'Proposal - Media'\r\n          }, {\r\n            onSuccess: () => {\r\n              toast.success(`Moved ${selectedRows.length} items to Pipeline`);\r\n              onRefresh?.();\r\n            },\r\n            onError: () => {\r\n              toast.error('Failed to move items');\r\n            }\r\n          });\r\n        });\r\n      }\r\n    },\r\n    {\r\n      label: 'Delete Selected',\r\n      icon: <Trash2 className=\"h-4 w-4 mr-2\" />,\r\n      variant: 'destructive' as const,\r\n      onClick: (selectedRows) => {\r\n        if (selectedRows.length === 0) {\r\n          toast.error('Please select at least one item to delete');\r\n          return;\r\n        }\r\n\r\n        if (confirm(`Are you sure you want to delete ${selectedRows.length} pipeline items? This action cannot be undone.`)) {\r\n          selectedRows.forEach(item => {\r\n            deletePipelineItem(item.id, {\r\n              onSuccess: () => {\r\n                toast.success('Pipeline items deleted successfully');\r\n                onRefresh?.();\r\n              },\r\n              onError: () => {\r\n                toast.error('Failed to delete pipeline items');\r\n              }\r\n            });\r\n          });\r\n        }\r\n      }\r\n    }\r\n  ], [movePipelineItem, deletePipelineItem, onRefresh]);\r\n\r\n  // Filter items based on search query\r\n  const filteredItems = useMemo(() => {\r\n    if (!searchQuery) return items;\r\n    \r\n    return items.filter(item => \r\n      item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      item.company?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      item.bdr?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      item.email?.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n  }, [items, searchQuery]);\r\n\r\n  // Convert to flat table data (this loses the hierarchical structure)\r\n  // For a full implementation, you'd need custom row rendering in DataTable\r\n  const tableData = useMemo(() => {\r\n    const flattenItems = (items: PipelineItem[], level = 0): (PipelineItem & { level: number })[] => {\r\n      const result: (PipelineItem & { level: number })[] = [];\r\n      \r\n      items.forEach(item => {\r\n        result.push({ ...item, level });\r\n        if (item.children && item.children.length > 0) {\r\n          result.push(...flattenItems(item.children, level + 1));\r\n        }\r\n      });\r\n      \r\n      return result;\r\n    };\r\n    \r\n    return flattenItems(filteredItems);\r\n  }, [filteredItems]);\r\n\r\n  // Mock pagination props (in real implementation, these would come from parent)\r\n  const mockFilters = {\r\n    search: searchQuery,\r\n    category: 'all',\r\n    status: 'all',\r\n    bdr: 'all'\r\n  };\r\n\r\n  const handleRowClick = (row: any) => {\r\n    router.push(`/pipeline/${row.original.id}`);\r\n  };\r\n\r\n  // Additional actions\r\n  const additionalActions = (\r\n    <PipelineDialog\r\n      title=\"Add New Lead\"\r\n      buttonLabel=\"Add New Lead\"\r\n      buttonVariant=\"default\"\r\n      buttonIcon={true}\r\n      defaultCategory=\"Pipeline\"\r\n      defaultStatus=\"New\"\r\n      defaultBdr={selectedBdr}\r\n      onSuccess={onRefresh}\r\n      className=\"shadow-lg\"\r\n    />\r\n  );\r\n\r\n  // Create mock columns for demonstration\r\n  // In a real implementation, you'd define proper columns with all the pipeline-specific functionality\r\n  const columns: ColumnDef<PipelineItem & { level: number }>[] = useMemo(() => [\r\n    {\r\n      accessorKey: 'name',\r\n      header: 'Name',\r\n      cell: ({ row }) => (\r\n        <div style={{ paddingLeft: `${row.original.level * 20}px` }} className=\"flex items-center gap-2\">\r\n          <span>{row.original.name}</span>\r\n          {row.original.company && (\r\n            <span className=\"text-sm text-muted-foreground\">({row.original.company})</span>\r\n          )}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      accessorKey: 'category',\r\n      header: 'Category',\r\n      cell: ({ row }) => row.original.category.replace('_', ' '),\r\n    },\r\n    {\r\n      accessorKey: 'status',\r\n      header: 'Status',\r\n    },\r\n    {\r\n      accessorKey: 'bdr',\r\n      header: 'BDR',\r\n    },\r\n    {\r\n      accessorKey: 'value',\r\n      header: 'Value',\r\n      cell: ({ row }) => row.original.value ? `£${row.original.value.toLocaleString()}` : '-',\r\n    },\r\n    {\r\n      id: 'actions',\r\n      header: 'Actions',\r\n      cell: ({ row }) => (\r\n        <div className=\"flex items-center space-x-1\" onClick={e => e.stopPropagation()}>\r\n          <UpdatesDialog \r\n            pipelineItem={row.original}\r\n            trigger={\r\n              <Button \r\n                variant=\"outline\" \r\n                size=\"sm\" \r\n                className=\"h-6 px-2 text-xs\"\r\n              >\r\n                <MessageSquare className=\"h-3 w-3 mr-1\" />\r\n                Updates\r\n              </Button>\r\n            }\r\n          />\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\" \r\n            className=\"h-6 px-2 text-xs\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              // Handle move action - in real implementation, this would open a move dialog\r\n              console.log('Move item:', row.original);\r\n            }}\r\n          >\r\n            <Move className=\"h-3 w-3 mr-1\" />\r\n            Move\r\n          </Button>\r\n        </div>\r\n      ),\r\n    },\r\n  ], []);\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <DataTable\r\n        columns={columns}\r\n        data={tableData}\r\n        filters={mockFilters}\r\n        total={tableData.length}\r\n        pageCount={1}\r\n        pageIndex={0}\r\n        pageSize={50}\r\n        onPaginationChange={() => {}}\r\n        onGlobalFilterChange={setSearchQuery}\r\n        onFilterChange={() => {}}\r\n        isLoading={false}\r\n        enableRowSelection={true}\r\n        bulkActions={bulkActions}\r\n        filterConfigs={filterConfigs}\r\n        searchPlaceholder=\"Search pipeline...\"\r\n        title=\"Pipeline Management\"\r\n        additionalActions={additionalActions}\r\n        emptyStateMessage=\"No pipeline items found\"\r\n        onRowClick={handleRowClick}\r\n        getRowId={(row) => row.id.toString()}\r\n        virtualizeRows\r\n        virtualRowEstimatedHeight={44}\r\n      />\r\n      \r\n      <div className=\"text-sm text-muted-foreground\">\r\n        Note: This refactored version shows a flattened view. The original hierarchical structure \r\n        with expandable sublists would require custom row rendering in the DataTable component.\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\pipeline-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":19,"column":95,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":99}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Card, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { PipelineItem, useMovePipelineItem, useActivityLogs, useDeletePipelineItem } from '@/lib/hooks';\r\nimport { allPipelineStatusValues, pipelineCategoryEnum, pipelineStatusEnum } from '@/lib/validations';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Filter, ExternalLink, MessageSquare, Move, Clock, ChevronDown, ChevronRight, Trash2, Plus } from 'lucide-react';\r\nimport { NotesPopover } from '@/components/ui/notes-popover';\r\nimport { UpdatesDialog } from '@/components/updates-dialog';\r\nimport { SublistDialog } from '@/components/sublist-dialog';\r\nimport { PipelineEditableCell } from '@/components/ui/pipeline-editable-cell';\r\nimport { PipelineDialog } from '@/components/pipeline-dialog';\r\nimport { \r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { toast } from 'sonner';\r\nimport { Badge } from '@/components/ui/badge';\r\n\r\ninterface PipelineTableProps {\r\n  items: PipelineItem[];\r\n  onRefresh?: () => void;\r\n  selectedBdr?: string;\r\n  simpleMode?: boolean;\r\n}\r\n\r\nexport function PipelineTable({ items, onRefresh, selectedBdr, simpleMode = true }: PipelineTableProps) {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [moveOpen, setMoveOpen] = useState<number | null>(null);\r\n  const [selectedMoveCategory, setSelectedMoveCategory] = useState<string>('');\r\n  const [selectedMoveStatus, setSelectedMoveStatus] = useState<string>('');\r\n  const [expandedItems, setExpandedItems] = useState<Set<number>>(new Set());\r\n  const router = useRouter();\r\n  const { mutate: movePipelineItem } = useMovePipelineItem();\r\n  const { mutate: deletePipelineItem } = useDeletePipelineItem();\r\n  const [showActivityLog, setShowActivityLog] = useState<number | null>(null);\r\n\r\n  // Fetch activity logs for the selected item\r\n  const { data: activityLogsData } = useActivityLogs({\r\n    pipelineItemId: showActivityLog || undefined,\r\n    pageSize: 50,\r\n  });\r\n\r\n  // Function to toggle item expansion\r\n  const toggleExpanded = (itemId: number) => {\r\n    const newExpanded = new Set(expandedItems);\r\n    if (newExpanded.has(itemId)) {\r\n      newExpanded.delete(itemId);\r\n    } else {\r\n      newExpanded.add(itemId);\r\n    }\r\n    setExpandedItems(newExpanded);\r\n  };\r\n\r\n  // Track companies with recent conflicts\r\n  const [conflictCompanies, setConflictCompanies] = useState<Set<string>>(new Set());\r\n  useState(() => { return; });\r\n\r\n  // Fetch conflict flags for companies displayed\r\n  // Lightweight: fire once per render set; for production, memoize by items hash\r\n  React.useEffect(() => {\r\n    const companies = Array.from(new Set(items.map(i => i.company).filter(Boolean) as string[]));\r\n    if (companies.length === 0) { setConflictCompanies(new Set()); return; }\r\n    const params = new URLSearchParams();\r\n    companies.forEach(c => params.append('company', c));\r\n    params.append('days', '14');\r\n    fetch(`/api/duplicates/company-conflicts?${params.toString()}`)\r\n      .then(r => r.ok ? r.json() : null)\r\n      .then(data => {\r\n        if (!data?.conflicts) return;\r\n        const flagged = new Set<string>();\r\n        Object.entries<boolean>(data.conflicts).forEach(([company, has]) => { if (has) flagged.add(company); });\r\n        setConflictCompanies(flagged);\r\n      })\r\n      .catch(() => {});\r\n  }, [items]);\r\n\r\n  // Recursive function to render items and their children\r\n  const renderItemsRecursively = (itemList: PipelineItem[], level: number = 0): React.ReactElement[] => {\r\n          const elements: React.ReactElement[] = [];\r\n    \r\n    itemList.forEach((item) => {\r\n      const hasChildren = item.children && item.children.length > 0;\r\n      const isExpanded = expandedItems.has(item.id);\r\n      \r\n      elements.push(\r\n                      <TableRow\r\n                        key={item.id}\r\n                        className=\"cursor-pointer hover:bg-muted/50 h-12\"\r\n                        onClick={() => handleItemClick(item.id)}\r\n          style={{ paddingLeft: `${level * 20}px` }}\r\n                      >\r\n                        <TableCell className=\"py-2\">\r\n            <div className=\"flex items-center gap-2\" style={{ paddingLeft: `${level * 20}px` }}>\r\n              <div onClick={(e) => e.stopPropagation()}>\r\n                {hasChildren ? (\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      className=\"h-4 w-4 p-0 hover:bg-muted\"\r\n                      onClick={() => toggleExpanded(item.id)}\r\n                    >\r\n                      {isExpanded ? (\r\n                        <ChevronDown className=\"h-3 w-3\" />\r\n                      ) : (\r\n                        <ChevronRight className=\"h-3 w-3\" />\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                ) : (\r\n                  <SublistDialog\r\n                    title=\"Add Sublist Item\"\r\n                    buttonLabel=\"+\"\r\n                    buttonVariant=\"ghost\"\r\n                    buttonSize=\"sm\"\r\n                    buttonIcon={true}\r\n                    defaultCategory={item.category}\r\n                    defaultStatus={item.status}\r\n                    defaultBdr={item.bdr}\r\n                    parentId={item.id}\r\n                    onSuccess={onRefresh}\r\n                    className=\"h-4 w-4 p-0 hover:bg-muted\"\r\n                  />\r\n                )}\r\n              </div>\r\n                          <PipelineEditableCell\r\n                            value={item.name}\r\n                            item={item}\r\n                            field=\"name\"\r\n                            placeholder=\"Name\"\r\n                          />\r\n                          {conflictCompanies.has(item.company || '') && (\r\n                            <Badge variant=\"destructive\" className=\"ml-2\">Conflict</Badge>\r\n                          )}\r\n                          {hasChildren && (\r\n                            <div className=\"flex items-center gap-1 ml-2\">\r\n                              <div className=\"w-1 h-1 rounded-full bg-primary\"></div>\r\n                              <span className=\"text-xs text-muted-foreground\">\r\n                                {item.children?.length || 0} subitem{item.children && item.children.length !== 1 ? 's' : ''}\r\n                              </span>\r\n                            </div>\r\n                          )}\r\n            </div>\r\n                        </TableCell>\r\n                        {!simpleMode && (\r\n                        <TableCell className=\"py-2\">\r\n                          <PipelineEditableCell\r\n                            value={item.company}\r\n                            item={item}\r\n                            field=\"company\"\r\n                            placeholder=\"Company\"\r\n                          />\r\n                        </TableCell>\r\n                        )}\r\n                        {!simpleMode && (\r\n                        <TableCell className=\"py-2\">\r\n                          <PipelineEditableCell\r\n                            value={item.title}\r\n                            item={item}\r\n                            field=\"title\"\r\n                            placeholder=\"Title\"\r\n                          />\r\n                        </TableCell>\r\n                        )}\r\n                        <TableCell className=\"py-2\">\r\n                          <PipelineEditableCell\r\n                            value={item.callDate || ''}\r\n                            item={item}\r\n                            field=\"callDate\"\r\n                            placeholder=\"Set call date\"\r\n                            isDate={true}\r\n                          />\r\n                        </TableCell>\r\n                        {!simpleMode && (\r\n                        <TableCell className=\"py-2\" onClick={(e) => e.stopPropagation()}>\r\n                          <Popover open={showActivityLog === item.id} onOpenChange={(open) => !open && setShowActivityLog(null)}>\r\n                            <PopoverTrigger asChild>\r\n                              <div \r\n                                className=\"cursor-pointer hover:bg-muted/50 p-1 rounded\"\r\n                                onClick={() => setShowActivityLog(item.id)}\r\n                              >\r\n                                {item.latestActivityLog ? (\r\n                                  <div className=\"flex flex-col gap-0.5\">\r\n                                    <span className=\"text-xs font-medium\">\r\n                                      {item.latestActivityLog.activityType === 'BDR_Update' ? 'Update' : \r\n                                       item.latestActivityLog.activityType.replace('_', ' ')}\r\n                                    </span>\r\n                                    <span className=\"text-xs text-muted-foreground\">\r\n                                      {item.latestActivityLog.notes ? \r\n                                        item.latestActivityLog.notes.length > 30 ? \r\n                                          `${item.latestActivityLog.notes.substring(0, 30)}...` : \r\n                                          item.latestActivityLog.notes\r\n                                        : item.latestActivityLog.description\r\n                                      }\r\n                                    </span>\r\n                                    <span className=\"text-xs text-muted-foreground\">\r\n                                      by {item.latestActivityLog.bdr} {formatDistanceToNow(new Date(item.latestActivityLog.timestamp), { addSuffix: true })}\r\n                                    </span>\r\n                                  </div>\r\n                                ) : (\r\n                                  <span className=\"text-xs text-muted-foreground\">No updates</span>\r\n                                )}\r\n                              </div>\r\n                            </PopoverTrigger>\r\n                            <PopoverContent className=\"w-96\" side=\"right\">\r\n                              <div className=\"space-y-4\">\r\n                                <div className=\"flex items-center justify-between\">\r\n                                  <h4 className=\"font-medium flex items-center gap-2\">\r\n                                    <Clock className=\"h-4 w-4\" />\r\n                                    Activity History\r\n                                  </h4>\r\n                                </div>\r\n                                <ScrollArea className=\"h-[300px]\">\r\n                                  <div className=\"space-y-4\">\r\n                                    {activityLogsData?.logs.map((log) => (\r\n                                      <div key={log.id} className=\"space-y-1\">\r\n                                        <div className=\"flex items-center justify-between\">\r\n                                          <span className=\"text-sm font-medium\">\r\n                                            {log.activityType === 'BDR_Update' ? 'Update' : \r\n                                             log.activityType.replace('_', ' ')}\r\n                                          </span>\r\n                                          <span className=\"text-xs text-muted-foreground\">\r\n                                            {formatDistanceToNow(new Date(log.timestamp), { addSuffix: true })}\r\n                                          </span>\r\n                                        </div>\r\n                                        <p className=\"text-sm text-muted-foreground\">\r\n                                          {log.notes || log.description}\r\n                                        </p>\r\n                                        <p className=\"text-xs text-muted-foreground\">\r\n                                          by {log.bdr}\r\n                                        </p>\r\n                                        {(log.previousStatus !== log.newStatus || log.previousCategory !== log.newCategory) && (\r\n                                          <p className=\"text-xs text-muted-foreground mt-1\">\r\n                                            {log.previousCategory && log.newCategory && (\r\n                                              <>Moved from {log.previousCategory} to {log.newCategory}<br /></>\r\n                                            )}\r\n                                            {log.previousStatus && log.newStatus && (\r\n                                              <>Status changed from {log.previousStatus} to {log.newStatus}</>\r\n                                            )}\r\n                                          </p>\r\n                                        )}\r\n                                      </div>\r\n                                    ))}\r\n                                  </div>\r\n                                </ScrollArea>\r\n                              </div>\r\n                            </PopoverContent>\r\n                          </Popover>\r\n                        </TableCell>\r\n                        )}\r\n\r\n                        {!simpleMode && (\r\n                        <TableCell className=\"py-2\">\r\n                          {item.email && (\r\n                            <a \r\n                              href={`mailto:${item.email}`}\r\n                              onClick={(e) => e.stopPropagation()}\r\n                              className=\"text-blue-500 hover:text-blue-700 transition-colors text-xs\"\r\n                            >\r\n                              {item.email}\r\n                            </a>\r\n                          )}\r\n                        </TableCell>\r\n                        )}\r\n                        {!simpleMode && (\r\n                        <TableCell className=\"py-2\">\r\n                          {item.phone && (\r\n                            <a \r\n                              href={`tel:${item.phone}`}\r\n                              onClick={(e) => e.stopPropagation()}\r\n                              className=\"text-blue-500 hover:text-blue-700 transition-colors text-xs\"\r\n                            >\r\n                              {item.phone}\r\n                            </a>\r\n                          )}\r\n                        </TableCell>\r\n                        )}\r\n                        <TableCell className=\"py-2\">\r\n                          <PipelineEditableCell\r\n                            value={item.notes}\r\n                            item={item}\r\n                            field=\"notes\"\r\n                            isTextarea={true}\r\n                            placeholder=\"Add notes...\"\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell className=\"py-2\">\r\n                          <div className=\"flex items-center space-x-1\" onClick={e => e.stopPropagation()}>\r\n                            <UpdatesDialog \r\n                              pipelineItem={item}\r\n                              trigger={\r\n                                <Button \r\n                                  variant=\"outline\" \r\n                                  size=\"sm\" \r\n                                  className=\"h-6 px-2 text-xs\"\r\n                                >\r\n                                  <MessageSquare className=\"h-3 w-3 mr-1\" />\r\n                                  Updates\r\n                                </Button>\r\n                              }\r\n                            />\r\n                            \r\n                            <Popover open={moveOpen === item.id} onOpenChange={(open) => !open && setMoveOpen(null)}>\r\n                              <PopoverTrigger asChild>\r\n                                <Button \r\n                                  variant=\"outline\" \r\n                                  size=\"sm\" \r\n                                  className=\"h-6 px-2 text-xs\"\r\n                                  onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    openMoveDialog(item);\r\n                                  }}\r\n                                >\r\n                                  <Move className=\"h-3 w-3 mr-1\" />\r\n                                  Move\r\n                                </Button>\r\n                              </PopoverTrigger>\r\n                              <PopoverContent className=\"w-80 p-4\" side=\"top\" align=\"end\">\r\n                                <div className=\"space-y-4\">\r\n                                  <h4 className=\"font-medium\">Move to different group</h4>\r\n                                  \r\n                                  <div className=\"space-y-3\">\r\n                                    <div>\r\n                                      <label className=\"text-sm font-medium\">Category</label>\r\n                                      <Select\r\n                                        value={selectedMoveCategory}\r\n                                        onValueChange={handleCategoryChange}\r\n                                      >\r\n                                        <SelectTrigger className=\"mt-1\">\r\n                                          <SelectValue />\r\n                                        </SelectTrigger>\r\n                                        <SelectContent>\r\n                                          {pipelineCategoryEnum.map((category) => (\r\n                                            <SelectItem key={category} value={category}>\r\n                                              {category.replace('_', ' ')}\r\n                                            </SelectItem>\r\n                                          ))}\r\n                                        </SelectContent>\r\n                                      </Select>\r\n                                    </div>\r\n                                    \r\n                                    <div>\r\n                                      <label className=\"text-sm font-medium\">Status</label>\r\n                                      <Select\r\n                                        value={selectedMoveStatus}\r\n                                        onValueChange={(value) => setSelectedMoveStatus(value)}\r\n                                      >\r\n                                        <SelectTrigger className=\"mt-1\">\r\n                                          <SelectValue />\r\n                                        </SelectTrigger>\r\n                                        <SelectContent>\r\n                                          {selectedMoveCategory && pipelineStatusEnum[selectedMoveCategory as keyof typeof pipelineStatusEnum]?.map((status) => (\r\n                                            <SelectItem key={`${selectedMoveCategory}-${status}`} value={status}>\r\n                                              {status}\r\n                                            </SelectItem>\r\n                                          ))}\r\n                                        </SelectContent>\r\n                                      </Select>\r\n                                    </div>\r\n                                  </div>\r\n                                  \r\n                                  <div className=\"text-xs text-muted-foreground bg-muted/20 p-2 rounded\">\r\n                                    Moving from <span className=\"font-medium\">{item.category}</span> ({item.status}) to <span className=\"font-medium\">{selectedMoveCategory}</span> ({selectedMoveStatus})\r\n                                  </div>\r\n                                  \r\n                                  <div className=\"flex justify-end gap-2\">\r\n                                    <Button \r\n                                      variant=\"outline\" \r\n                                      size=\"sm\"\r\n                                      onClick={() => setMoveOpen(null)}\r\n                                    >\r\n                                      Cancel\r\n                                    </Button>\r\n                                    <Button \r\n                                      size=\"sm\"\r\n                                      onClick={() => handleMoveItem(item)}\r\n                                      disabled={selectedMoveCategory === item.category && selectedMoveStatus === item.status}\r\n                                    >\r\n                                      Move\r\n                                    </Button>\r\n                                  </div>\r\n                                </div>\r\n                              </PopoverContent>\r\n                            </Popover>\r\n                            \r\n                            {item.notes && <NotesPopover notes={item.notes} />}\r\n                            {item.link && (\r\n                              <a \r\n                                href={item.link} \r\n                                target=\"_blank\" \r\n                                rel=\"noopener noreferrer\"\r\n                                className=\"text-blue-500 hover:text-blue-700 transition-colors\"\r\n                              >\r\n                                <ExternalLink className=\"h-3 w-3\" />\r\n                              </a>\r\n                            )}\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              className=\"h-6 px-2 text-destructive hover:text-destructive hover:bg-destructive/10\"\r\n                              onClick={(e) => handleDeleteItem(e, item)}\r\n                            >\r\n                              <Trash2 className=\"h-3 w-3\" />\r\n                            </Button>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n\r\n      // Add children if expanded\r\n      if (hasChildren && isExpanded && item.children) {\r\n        elements.push(...renderItemsRecursively(item.children, level + 1));\r\n        \r\n        // Add \"Add subitem\" row after the children\r\n        elements.push(\r\n          <TableRow key={`add-subitem-${item.id}`} className=\"hover:bg-muted/50 h-10\">\r\n            <TableCell className=\"py-1\">\r\n              <div className=\"flex items-center gap-2\" style={{ paddingLeft: `${(level + 1) * 20}px` }}>\r\n                <div className=\"w-2 h-2 rounded-full bg-muted-foreground/30\"></div>\r\n                <SublistDialog\r\n                  title=\"Add More Sublist Items\"\r\n                  buttonLabel=\"+ Add subitem\"\r\n                  buttonVariant=\"ghost\"\r\n                  buttonSize=\"default\"\r\n                  buttonIcon={false}\r\n                  defaultCategory={item.category}\r\n                  defaultStatus={item.status}\r\n                  defaultBdr={item.bdr}\r\n                  parentId={item.id}\r\n                  onSuccess={onRefresh}\r\n                  className=\"h-5 px-2 text-xs hover:bg-muted text-muted-foreground hover:text-foreground border border-dashed border-muted-foreground/30 hover:border-muted-foreground/50 rounded\"\r\n                />\r\n              </div>\r\n            </TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n            <TableCell className=\"py-1\"></TableCell>\r\n          </TableRow>\r\n        );\r\n      }\r\n    });\r\n\r\n    return elements;\r\n  };\r\n\r\n  // Group items by status\r\n  const itemsByStatus = allPipelineStatusValues.reduce<Record<string, PipelineItem[]>>(\r\n    (acc, status) => {\r\n      acc[status] = items.filter(item => \r\n        item.status === status &&\r\n        (searchQuery === '' || \r\n          item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n          item.company?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n          item.title?.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n      );\r\n      return acc;\r\n    },\r\n    {} as Record<string, PipelineItem[]>\r\n  );\r\n\r\n  const handleItemClick = (id: number) => {\r\n    router.push(`/pipeline/${id}`);\r\n  };\r\n\r\n  const handleMoveItem = (item: PipelineItem) => {\r\n    if (selectedMoveCategory === item.category && selectedMoveStatus === item.status) {\r\n      setMoveOpen(null);\r\n      return;\r\n    }\r\n\r\n    movePipelineItem({\r\n      id: item.id,\r\n      newCategory: selectedMoveCategory,\r\n      newStatus: selectedMoveStatus\r\n    }, {\r\n      onSuccess: () => {\r\n        toast.success(`Moved to ${selectedMoveStatus}`);\r\n        setMoveOpen(null);\r\n        onRefresh?.();\r\n      },\r\n      onError: () => {\r\n        toast.error('Failed to move item');\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCategoryChange = (category: string) => {\r\n    setSelectedMoveCategory(category);\r\n    // Set the status to the first status in the new category\r\n    const statuses = pipelineStatusEnum[category as keyof typeof pipelineStatusEnum];\r\n    if (statuses && statuses.length > 0) {\r\n      setSelectedMoveStatus(statuses[0]);\r\n    }\r\n  };\r\n\r\n  const openMoveDialog = (item: PipelineItem) => {\r\n    setSelectedMoveCategory(item.category);\r\n    setSelectedMoveStatus(item.status);\r\n    setMoveOpen(item.id);\r\n  };\r\n\r\n  const handleDeleteItem = (e: React.MouseEvent, item: PipelineItem) => {\r\n    e.stopPropagation();\r\n    if (confirm('Are you sure you want to delete this pipeline item? This action cannot be undone.')) {\r\n      deletePipelineItem(item.id, {\r\n        onSuccess: () => {\r\n          toast.success('Pipeline item deleted successfully');\r\n          onRefresh?.();\r\n        },\r\n        onError: () => {\r\n          toast.error('Failed to delete pipeline item');\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      {/* Search Bar and Add New Lead */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-2 rounded-xl border border-white/30 dark:border-white/10 bg-white/60 dark:bg-white/[0.05] backdrop-blur p-2\">\r\n          <Input\r\n            placeholder=\"Search pipeline...\"\r\n            className=\"max-w-xs h-9\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"icon\" \r\n            className=\"h-9 w-9\"\r\n            onClick={() => setShowFilters(!showFilters)}\r\n          >\r\n            <Filter className=\"h-4 w-4\" />\r\n          </Button>\r\n        </div>\r\n        \r\n        {/* Add New Lead Button */}\r\n        <PipelineDialog\r\n          title=\"Add New Lead\"\r\n          buttonLabel=\"Add New Lead\"\r\n          buttonVariant=\"default\"\r\n          buttonIcon={true}\r\n          defaultCategory=\"Pipeline\"\r\n          defaultStatus=\"New\"\r\n          defaultBdr={selectedBdr}\r\n          onSuccess={onRefresh}\r\n          className=\"shadow-lg\"\r\n        />\r\n      </div>\r\n\r\n      {/* Pipeline Sections */}\r\n      {allPipelineStatusValues.map(status => {\r\n        const statusItems = itemsByStatus[status] || [];\r\n        if (statusItems.length === 0) return null;\r\n\r\n        return (\r\n          <div key={status} className=\"space-y-4\">\r\n            <Card>\r\n              <CardHeader className=\"py-3\">\r\n                <CardTitle className=\"text-lg font-semibold flex items-center justify-between\">\r\n                  <span>{status}</span>\r\n                  <div className=\"flex items-center gap-4\">\r\n                    <div className=\"text-xs text-muted-foreground\">\r\n                      {statusItems.length} items\r\n                    </div>\r\n                  </div>\r\n                </CardTitle>\r\n              </CardHeader>\r\n            </Card>\r\n\r\n            <div className=\"rounded-xl border border-white/20 dark:border-white/10 bg-white/40 dark:bg-white/[0.03] backdrop-blur\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow className=\"h-10 bg-white/60 dark:bg-white/[0.06]\">\r\n                    <TableHead className=\"w-[200px]\">Name</TableHead>\r\n                    {!simpleMode && <TableHead className=\"w-[150px]\">Company</TableHead>}\r\n                    {!simpleMode && <TableHead className=\"w-[150px]\">Title</TableHead>}\r\n                    <TableHead className=\"w-[100px]\">Call Date</TableHead>\r\n                    {!simpleMode && <TableHead className=\"w-[150px]\">Last Update</TableHead>}\r\n                    {!simpleMode && <TableHead className=\"w-[120px]\">Email</TableHead>}\r\n                    {!simpleMode && <TableHead className=\"w-[120px]\">Number</TableHead>}\r\n                    <TableHead className=\"w-[200px]\">Notes</TableHead>\r\n                    <TableHead className=\"w-[160px]\">Actions</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {renderItemsRecursively(statusItems)}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\real-time-notifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refetch' is assigned a value but never used.","line":73,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { Bell, X, CheckCircle, AlertTriangle, Info, Clock } from 'lucide-react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover';\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'success' | 'warning' | 'error' | 'info';\r\n  title: string;\r\n  message: string;\r\n  timestamp: string;\r\n  read: boolean;\r\n  priority: 'low' | 'medium' | 'high';\r\n  userId?: string;\r\n}\r\n\r\ninterface RealTimeNotificationsProps {\r\n  userId?: string;\r\n  showHighPriorityOnly?: boolean;\r\n  maxNotifications?: number;\r\n  autoRefresh?: boolean;\r\n  refreshInterval?: number;\r\n  // When true, renders an inline high-priority banner under the bell.\r\n  // In compact placements like the sidebar, this should be false to avoid layout overflow.\r\n  showAlertBanner?: boolean;\r\n}\r\n\r\nconst fetchNotifications = async (userId?: string) => {\r\n  const params = new URLSearchParams();\r\n  if (userId) params.append('userId', userId);\r\n\r\n  const response = await fetch(`/api/reporting/advanced/notifications?${params.toString()}`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch notifications');\r\n  }\r\n  return response.json();\r\n};\r\n\r\nconst markNotificationAsRead = async (notificationId: string) => {\r\n  const response = await fetch('/api/reporting/advanced/notifications', {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ notificationId, read: true }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Failed to mark notification as read');\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\nexport function RealTimeNotifications({\r\n  userId,\r\n  showHighPriorityOnly = false,\r\n  maxNotifications = 10,\r\n  autoRefresh = true,\r\n  refreshInterval = 30000,\r\n  showAlertBanner = false,\r\n}: RealTimeNotificationsProps) {\r\n  const [open, setOpen] = useState(false);\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n\r\n  const { data: notificationData, refetch } = useQuery({\r\n    queryKey: ['notifications', userId],\r\n    queryFn: () => fetchNotifications(userId),\r\n    refetchInterval: autoRefresh ? refreshInterval : false,\r\n    enabled: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (notificationData) {\r\n      let filteredNotifications = notificationData;\r\n      \r\n      if (showHighPriorityOnly) {\r\n        filteredNotifications = notificationData.filter((n: Notification) => n.priority === 'high');\r\n      }\r\n      \r\n      setNotifications(filteredNotifications.slice(0, maxNotifications));\r\n    }\r\n  }, [notificationData, showHighPriorityOnly, maxNotifications]);\r\n\r\n  const unreadNotifications = notifications.filter(n => !n.read);\r\n  const highPriorityNotifications = notifications.filter(n => n.priority === 'high' && !n.read);\r\n\r\n  const handleMarkAsRead = async (notificationId: string) => {\r\n    try {\r\n      await markNotificationAsRead(notificationId);\r\n      setNotifications(prev => \r\n        prev.map(n => n.id === notificationId ? { ...n, read: true } : n)\r\n      );\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const handleMarkAllAsRead = async () => {\r\n    try {\r\n      await Promise.all(\r\n        unreadNotifications.map(n => markNotificationAsRead(n.id))\r\n      );\r\n      setNotifications(prev => \r\n        prev.map(n => ({ ...n, read: true }))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error marking all notifications as read:', error);\r\n    }\r\n  };\r\n\r\n  const getNotificationIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'success':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'warning':\r\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\r\n      case 'error':\r\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'info':\r\n      default:\r\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'high':\r\n        return 'bg-red-100 text-red-800 border-red-200';\r\n      case 'medium':\r\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'low':\r\n        return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const formatTimestamp = (timestamp: string) => {\r\n    const date = new Date(timestamp);\r\n    const now = new Date();\r\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n    \r\n    if (diffInMinutes < 1) return 'Just now';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Popover open={open} onOpenChange={setOpen}>\r\n        {/* Notification Bell */}\r\n        <PopoverTrigger asChild>\r\n          <Button variant=\"outline\" size=\"sm\" className=\"relative\">\r\n            <Bell className=\"h-4 w-4\" />\r\n            {unreadNotifications.length > 0 && (\r\n              <Badge \r\n                variant=\"destructive\" \r\n                className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\r\n              >\r\n                {unreadNotifications.length}\r\n              </Badge>\r\n            )}\r\n          </Button>\r\n        </PopoverTrigger>\r\n\r\n        {/* Notifications Panel */}\r\n        <PopoverContent side=\"top\" align=\"end\" sideOffset={8} className=\"z-[70] w-96 p-0 border-0 shadow-lg\">\r\n          <Card className=\"border\">\r\n            <CardHeader className=\"pb-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <CardTitle className=\"text-lg\">Notifications</CardTitle>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  {unreadNotifications.length > 0 && (\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={handleMarkAllAsRead}\r\n                      className=\"text-xs\"\r\n                    >\r\n                      Mark all read\r\n                    </Button>\r\n                  )}\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => setOpen(false)}\r\n                  >\r\n                    <X className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className=\"p-0\">\r\n              {notifications.length === 0 ? (\r\n                <div className=\"p-6 text-center text-muted-foreground\">\r\n                  <Bell className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n                  <p>No notifications</p>\r\n                </div>\r\n              ) : (\r\n                <ScrollArea className=\"h-80\">\r\n                  <div className=\"divide-y\">\r\n                    {notifications.map((notification) => (\r\n                      <div \r\n                        key={notification.id} \r\n                        className={`p-4 hover:bg-muted/50 transition-colors ${\r\n                          !notification.read ? 'bg-muted/30' : ''\r\n                        }`}\r\n                      >\r\n                        <div className=\"flex items-start space-x-3\">\r\n                          <div className=\"mt-1\">\r\n                            {getNotificationIcon(notification.type)}\r\n                          </div>\r\n                          <div className=\"flex-1 min-w-0\">\r\n                            <div className=\"flex items-center justify-between mb-1\">\r\n                              <h4 className=\"font-medium text-sm truncate\">\r\n                                {notification.title}\r\n                              </h4>\r\n                              <div className=\"flex items-center space-x-2\">\r\n                                <Badge \r\n                                  variant=\"outline\" \r\n                                  className={`text-xs ${getPriorityColor(notification.priority)}`}\r\n                                >\r\n                                  {notification.priority}\r\n                                </Badge>\r\n                                {!notification.read && (\r\n                                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                            <p className=\"text-sm text-muted-foreground mb-2\">\r\n                              {notification.message}\r\n                            </p>\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\r\n                                <Clock className=\"h-3 w-3\" />\r\n                                <span>{formatTimestamp(notification.timestamp)}</span>\r\n                              </div>\r\n                              {!notification.read && (\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => handleMarkAsRead(notification.id)}\r\n                                  className=\"text-xs h-6 px-2\"\r\n                                >\r\n                                  Mark read\r\n                                </Button>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </ScrollArea>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </PopoverContent>\r\n      </Popover>\r\n\r\n      {/* High Priority Alert Banner (opt-in; hidden by default to prevent sidebar layout issues) */}\r\n      {showAlertBanner && highPriorityNotifications.length > 0 && !open && (\r\n        <Alert className=\"mt-2 border-red-200 bg-red-50\">\r\n          <AlertTriangle className=\"h-4 w-4\" />\r\n          <AlertDescription>\r\n            <strong>{highPriorityNotifications.length} high priority notification(s)</strong> require immediate attention.\r\n            <Button\r\n              variant=\"link\"\r\n              size=\"sm\"\r\n              onClick={() => setOpen(true)}\r\n              className=\"p-0 h-auto font-semibold ml-1\"\r\n            >\r\n              View now\r\n            </Button>\r\n          </AlertDescription>\r\n        </Alert>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Standalone notification component for displaying individual notifications\r\nexport function NotificationItem({ notification }: { notification: Notification }) {\r\n  const [isRead, setIsRead] = useState(notification.read);\r\n\r\n  const handleMarkAsRead = async () => {\r\n    try {\r\n      await markNotificationAsRead(notification.id);\r\n      setIsRead(true);\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n    }\r\n  };\r\n\r\n  const getNotificationIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'success':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case 'warning':\r\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\r\n      case 'error':\r\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\r\n      case 'info':\r\n      default:\r\n        return <Info className=\"h-4 w-4 text-blue-500\" />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'high':\r\n        return 'bg-red-100 text-red-800 border-red-200';\r\n      case 'medium':\r\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'low':\r\n        return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const formatTimestamp = (timestamp: string) => {\r\n    const date = new Date(timestamp);\r\n    const now = new Date();\r\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n    \r\n    if (diffInMinutes < 1) return 'Just now';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\r\n    return date.toLocaleDateString();\r\n  };\r\n\r\n  return (\r\n    <div className={`p-4 border rounded-lg ${!isRead ? 'bg-muted/30' : ''}`}>\r\n      <div className=\"flex items-start space-x-3\">\r\n        <div className=\"mt-1\">\r\n          {getNotificationIcon(notification.type)}\r\n        </div>\r\n        <div className=\"flex-1\">\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <h4 className=\"font-medium\">{notification.title}</h4>\r\n            <Badge \r\n              variant=\"outline\" \r\n              className={`text-xs ${getPriorityColor(notification.priority)}`}\r\n            >\r\n              {notification.priority}\r\n            </Badge>\r\n          </div>\r\n          <p className=\"text-sm text-muted-foreground mb-2\">\r\n            {notification.message}\r\n          </p>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\r\n              <Clock className=\"h-3 w-3\" />\r\n              <span>{formatTimestamp(notification.timestamp)}</span>\r\n            </div>\r\n            {!isRead && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={handleMarkAsRead}\r\n                className=\"text-xs h-6 px-2\"\r\n              >\r\n                Mark read\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\role-based-dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserPlus' is defined but never used.","line":10,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":11,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":21},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":111,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3618,3660],"text":"Here&apos;s your personal performance dashboard"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3618,3660],"text":"Here&lsquo;s your personal performance dashboard"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3618,3660],"text":"Here&#39;s your personal performance dashboard"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3618,3660],"text":"Here&rsquo;s your personal performance dashboard"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":123,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4118,4131],"text":"Today&apos;s Calls"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4118,4131],"text":"Today&lsquo;s Calls"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4118,4131],"text":"Today&#39;s Calls"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4118,4131],"text":"Today&rsquo;s Calls"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":201,"column":22,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7548,7598],"text":"\r\n                Today&apos;s Schedule\r\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7548,7598],"text":"\r\n                Today&lsquo;s Schedule\r\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7548,7598],"text":"\r\n                Today&#39;s Schedule\r\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7548,7598],"text":"\r\n                Today&rsquo;s Schedule\r\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":222,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8470,8491],"text":"This month&apos;s progress"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8470,8491],"text":"This month&lsquo;s progress"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8470,8491],"text":"This month&#39;s progress"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8470,8491],"text":"This month&rsquo;s progress"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":240,"column":67,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9065,9109],"text":"Monitor your team&apos;s performance and progress"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9065,9109],"text":"Monitor your team&lsquo;s performance and progress"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9065,9109],"text":"Monitor your team&#39;s performance and progress"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9065,9109],"text":"Monitor your team&rsquo;s performance and progress"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useSession } from 'next-auth/react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Users, LineChart, TrendingUp, Phone, Target, Calendar, \r\n  BarChart3, Shield, UserPlus, Settings, PieChart,\r\n  CheckCircle, Clock, Award, Activity\r\n} from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { useState, useEffect } from 'react';\r\n\r\ninterface DashboardMetrics {\r\n  totalLeads: number;\r\n  callsToday: number;\r\n  agreementsThisWeek: number;\r\n  pipelineValue: number;\r\n  targetProgress: number;\r\n  recentActivity: string[];\r\n}\r\n\r\ninterface PersonalizedKPIs {\r\n  callsTarget: number;\r\n  callsActual: number;\r\n  agreementsTarget: number;\r\n  agreementsActual: number;\r\n  conversionRate: number;\r\n  weeklyGoalProgress: number;\r\n}\r\n\r\nexport function RoleBasedDashboard() {\r\n  const { data: session } = useSession();\r\n  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\r\n  const [kpis, setKpis] = useState<PersonalizedKPIs | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const userRole = session?.user?.role;\r\n  const userName = session?.user?.name || 'User';\r\n\r\n  useEffect(() => {\r\n    const fetchMetrics = async () => {\r\n      if (!session?.user) return;\r\n      \r\n      try {\r\n        // Simulate API call for now - in real implementation, this would fetch user-specific metrics\r\n        setMetrics({\r\n          totalLeads: userRole === 'ADMIN' ? 1247 : userRole === 'BDR' ? 45 : 312,\r\n          callsToday: userRole === 'BDR' ? 12 : userRole === 'TEAM_LEAD' ? 25 : 45,\r\n          agreementsThisWeek: userRole === 'BDR' ? 3 : userRole === 'TEAM_LEAD' ? 15 : 28,\r\n          pipelineValue: userRole === 'BDR' ? 15000 : userRole === 'TEAM_LEAD' ? 85000 : 250000,\r\n          targetProgress: Math.floor(Math.random() * 100),\r\n          recentActivity: [\r\n            'New lead added: Tech Solutions Inc.',\r\n            'Agreement closed with StartupXYZ',\r\n            'Follow-up call scheduled'\r\n          ]\r\n        });\r\n\r\n        if (userRole === 'BDR') {\r\n          setKpis({\r\n            callsTarget: 50,\r\n            callsActual: 42,\r\n            agreementsTarget: 5,\r\n            agreementsActual: 3,\r\n            conversionRate: 7.1,\r\n            weeklyGoalProgress: 84\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching metrics:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMetrics();\r\n  }, [session, userRole]);\r\n\r\n  if (!session) {\r\n    return null;\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\r\n        {[...Array(4)].map((_, i) => (\r\n          <Card key={i} className=\"animate-pulse\">\r\n            <CardHeader className=\"pb-2\">\r\n              <div className=\"h-4 bg-muted rounded w-3/4\"></div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\r\n              <div className=\"h-3 bg-muted rounded w-full\"></div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // BDR-specific dashboard\r\n  if (userRole === 'BDR') {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h2 className=\"text-2xl font-bold\">Welcome back, {userName}!</h2>\r\n            <p className=\"text-muted-foreground\">Here's your personal performance dashboard</p>\r\n          </div>\r\n          <Badge variant=\"outline\" className=\"gap-1\">\r\n            <Target className=\"h-3 w-3\" />\r\n            BDR Dashboard\r\n          </Badge>\r\n        </div>\r\n\r\n        {/* Personal KPIs */}\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Today's Calls</CardTitle>\r\n              <Phone className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{kpis?.callsActual || 0}</div>\r\n              <div className=\"text-xs text-muted-foreground\">\r\n                Target: {kpis?.callsTarget || 0}\r\n              </div>\r\n              <Progress \r\n                value={(kpis?.callsActual || 0) / (kpis?.callsTarget || 1) * 100} \r\n                className=\"mt-2\"\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Agreements This Week</CardTitle>\r\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{kpis?.agreementsActual || 0}</div>\r\n              <div className=\"text-xs text-muted-foreground\">\r\n                Target: {kpis?.agreementsTarget || 0}\r\n              </div>\r\n              <Progress \r\n                value={(kpis?.agreementsActual || 0) / (kpis?.agreementsTarget || 1) * 100} \r\n                className=\"mt-2\"\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\r\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{kpis?.conversionRate || 0}%</div>\r\n              <p className=\"text-xs text-muted-foreground\">+0.5% from last week</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Weekly Goal</CardTitle>\r\n              <Award className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{kpis?.weeklyGoalProgress || 0}%</div>\r\n              <p className=\"text-xs text-muted-foreground\">Keep pushing!</p>\r\n              <Progress value={kpis?.weeklyGoalProgress || 0} className=\"mt-2\" />\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* BDR-specific quick actions */}\r\n        <div className=\"grid gap-4 md:grid-cols-3\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Users className=\"h-5 w-5\" />\r\n                My Leads\r\n              </CardTitle>\r\n              <CardDescription>View and manage your assigned leads</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold mb-2\">{metrics?.totalLeads || 0}</div>\r\n              <Link href=\"/leads?filter=mine\" className=\"w-full\">\r\n                <Button className=\"w-full\">View My Leads</Button>\r\n              </Link>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Calendar className=\"h-5 w-5\" />\r\n                Today's Schedule\r\n              </CardTitle>\r\n              <CardDescription>Your calls and activities for today</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold mb-2\">{metrics?.callsToday || 0}</div>\r\n              <Link href=\"/pipeline?view=today\" className=\"w-full\">\r\n                <Button className=\"w-full\">View Schedule</Button>\r\n              </Link>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Activity className=\"h-5 w-5\" />\r\n                My Performance\r\n              </CardTitle>\r\n              <CardDescription>Track your progress and analytics</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-sm text-muted-foreground mb-2\">This month's progress</div>\r\n              <Link href=\"/reporting?view=personal\" className=\"w-full\">\r\n                <Button className=\"w-full\">View Analytics</Button>\r\n              </Link>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Team Lead dashboard\r\n  if (userRole === 'TEAM_LEAD') {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h2 className=\"text-2xl font-bold\">Team Lead Dashboard</h2>\r\n            <p className=\"text-muted-foreground\">Monitor your team's performance and progress</p>\r\n          </div>\r\n          <Badge variant=\"default\" className=\"gap-1\">\r\n            <Users className=\"h-3 w-3\" />\r\n            Team Lead\r\n          </Badge>\r\n        </div>\r\n\r\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Team Calls Today</CardTitle>\r\n              <Phone className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics?.callsToday || 0}</div>\r\n              <p className=\"text-xs text-muted-foreground\">+12% from yesterday</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Team Agreements</CardTitle>\r\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics?.agreementsThisWeek || 0}</div>\r\n              <p className=\"text-xs text-muted-foreground\">This week</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Pipeline Value</CardTitle>\r\n              <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">${(metrics?.pipelineValue || 0).toLocaleString()}</div>\r\n              <p className=\"text-xs text-muted-foreground\">Team total</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n              <CardTitle className=\"text-sm font-medium\">Team Performance</CardTitle>\r\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-2xl font-bold\">{metrics?.targetProgress || 0}%</div>\r\n              <p className=\"text-xs text-muted-foreground\">of monthly target</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        <div className=\"grid gap-4 md:grid-cols-2\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Team Management</CardTitle>\r\n              <CardDescription>Manage your team members and their performance</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <Link href=\"/team\" className=\"w-full\">\r\n                <Button className=\"w-full\">Manage Team</Button>\r\n              </Link>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Team Reports</CardTitle>\r\n              <CardDescription>View detailed team performance analytics</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <Link href=\"/reporting?view=team\" className=\"w-full\">\r\n                <Button className=\"w-full\">View Team Reports</Button>\r\n              </Link>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Manager/Director/Admin dashboard\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">Executive Dashboard</h2>\r\n          <p className=\"text-muted-foreground\">Complete overview of organizational performance</p>\r\n        </div>\r\n        <Badge variant=\"default\" className=\"gap-1\">\r\n          <Shield className=\"h-3 w-3\" />\r\n          {userRole}\r\n        </Badge>\r\n      </div>\r\n\r\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Total Leads</CardTitle>\r\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{metrics?.totalLeads || 0}</div>\r\n            <p className=\"text-xs text-muted-foreground\">+180 this month</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Daily Calls</CardTitle>\r\n            <Phone className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{metrics?.callsToday || 0}</div>\r\n            <p className=\"text-xs text-muted-foreground\">Across all teams</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Weekly Agreements</CardTitle>\r\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{metrics?.agreementsThisWeek || 0}</div>\r\n            <p className=\"text-xs text-muted-foreground\">+15% vs last week</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Pipeline Value</CardTitle>\r\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">${(metrics?.pipelineValue || 0).toLocaleString()}</div>\r\n            <p className=\"text-xs text-muted-foreground\">Total active pipeline</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <div className=\"grid gap-4 md:grid-cols-3\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <PieChart className=\"h-5 w-5\" />\r\n              Executive Reporting\r\n            </CardTitle>\r\n            <CardDescription>Comprehensive business analytics and KPIs</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Link href=\"/reporting\" className=\"w-full\">\r\n              <Button className=\"w-full\">View Reports</Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {userRole === 'ADMIN' && (\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Settings className=\"h-5 w-5\" />\r\n                System Management\r\n              </CardTitle>\r\n              <CardDescription>User management and system administration</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <Link href=\"/admin/users\" className=\"w-full\">\r\n                <Button className=\"w-full\">Admin Panel</Button>\r\n              </Link>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <LineChart className=\"h-5 w-5\" />\r\n              Financial Overview\r\n            </CardTitle>\r\n            <CardDescription>Revenue tracking and financial metrics</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Link href=\"/finance\" className=\"w-full\">\r\n              <Button className=\"w-full\">View Finances</Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\sublist-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pipelineCategoryEnum' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pipelineStatusEnum' is defined but never used.","line":7,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'List' is defined but never used.","line":8,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used.","line":8,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'title' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { useCreateSublist } from '@/lib/hooks';\r\nimport { pipelineCategoryEnum, pipelineStatusEnum } from '@/lib/validations';\r\nimport { Plus, List, ChevronDown } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\n\r\ninterface SublistDialogProps {\r\n  title: string;\r\n  buttonLabel: string;\r\n  buttonVariant?: 'default' | 'outline' | 'secondary' | 'ghost' | 'link' | 'destructive';\r\n  buttonSize?: 'default' | 'sm' | 'lg' | 'icon';\r\n  buttonIcon?: boolean;\r\n  defaultCategory?: string;\r\n  defaultStatus?: string;\r\n  defaultBdr?: string;\r\n  parentId?: number | null;\r\n  onSuccess?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport function SublistDialog({\r\n  title,\r\n  buttonLabel,\r\n  buttonVariant = 'default',\r\n  buttonSize = 'default',\r\n  buttonIcon = false,\r\n  defaultCategory = 'prospect',\r\n  defaultStatus = 'new',\r\n  defaultBdr = '',\r\n  parentId = null,\r\n  onSuccess,\r\n  className = ''\r\n}: SublistDialogProps) {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const createSublist = useCreateSublist();\r\n\r\n  const handleButtonClick = () => {\r\n    setIsEditing(true);\r\n    setInputValue('');\r\n    // Focus the input after a short delay to ensure it's rendered\r\n    setTimeout(() => {\r\n      inputRef.current?.focus();\r\n    }, 0);\r\n  };\r\n\r\n  const handleInputKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      handleSave();\r\n    } else if (e.key === 'Escape') {\r\n      e.preventDefault();\r\n      handleCancel();\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!inputValue.trim()) {\r\n      handleCancel();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await createSublist.mutateAsync({\r\n        name: inputValue.trim(),\r\n        category: defaultCategory,\r\n        status: defaultStatus,\r\n        bdr: defaultBdr,\r\n        parentId: parentId\r\n      });\r\n\r\n      toast.success('Sublist item created successfully');\r\n      setIsEditing(false);\r\n      setInputValue('');\r\n      onSuccess?.();\r\n    } catch (error) {\r\n      toast.error('Failed to create sublist item');\r\n      console.error('Error creating sublist:', error);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsEditing(false);\r\n    setInputValue('');\r\n  };\r\n\r\n  // Handle click outside to cancel\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (inputRef.current && !inputRef.current.contains(event.target as Node)) {\r\n        handleCancel();\r\n      }\r\n    };\r\n\r\n    if (isEditing) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n      return () => {\r\n        document.removeEventListener('mousedown', handleClickOutside);\r\n      };\r\n    }\r\n  }, [isEditing]);\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <div className=\"inline-flex items-center gap-2\">\r\n        <Input\r\n          ref={inputRef}\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          onKeyDown={handleInputKeyDown}\r\n          placeholder=\"Enter sublist item name...\"\r\n          className=\"h-6 px-2 text-xs min-w-[200px]\"\r\n          autoFocus\r\n        />\r\n        <Button\r\n          size=\"sm\"\r\n          variant=\"outline\"\r\n          onClick={handleCancel}\r\n          className=\"h-6 px-2 text-xs\"\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      variant={buttonVariant}\r\n      size={buttonSize}\r\n      onClick={handleButtonClick}\r\n      className={className}\r\n      disabled={createSublist.isPending}\r\n    >\r\n      {buttonIcon ? (\r\n        <Plus className=\"h-3 w-3\" />\r\n      ) : (\r\n        buttonLabel\r\n      )}\r\n    </Button>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\activity-log-skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\add-bdr-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronLeft' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used.","line":4,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\r\nimport { DayPicker } from \"react-day-picker\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { buttonVariants } from \"@/components/ui/button\";\r\n\r\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\r\n\r\nfunction Calendar({\r\n  className,\r\n  classNames,\r\n  showOutsideDays = true,\r\n  ...props\r\n}: CalendarProps) {\r\n  return (\r\n    <DayPicker\r\n      showOutsideDays={showOutsideDays}\r\n      className={cn(\"p-3\", className)}\r\n      classNames={{\r\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\r\n        month: \"space-y-4\",\r\n        caption: \"flex justify-center pt-1 relative items-center\",\r\n        caption_label: \"text-sm font-medium\",\r\n        nav: \"space-x-1 flex items-center\",\r\n        nav_button: cn(\r\n          buttonVariants({ variant: \"outline\" }),\r\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\r\n        ),\r\n        nav_button_previous: \"absolute left-1\",\r\n        nav_button_next: \"absolute right-1\",\r\n        table: \"w-full border-collapse\",\r\n        head_row: \"grid grid-cols-7 gap-0\",\r\n        head_cell: \"text-muted-foreground font-normal text-[0.8rem] text-center p-2\",\r\n        row: \"grid grid-cols-7 gap-0 mt-1\",\r\n        cell: \"text-center text-sm p-0 relative focus-within:relative focus-within:z-20\",\r\n        day: cn(\r\n          buttonVariants({ variant: \"ghost\" }),\r\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\r\n        ),\r\n        day_selected:\r\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\r\n        day_today: \"bg-accent text-accent-foreground\",\r\n        day_outside: \"text-muted-foreground opacity-50\",\r\n        day_disabled: \"text-muted-foreground opacity-50\",\r\n        day_range_middle:\r\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\r\n        day_hidden: \"invisible\",\r\n        ...classNames,\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\nCalendar.displayName = \"Calendar\";\r\n\r\nexport { Calendar }; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\common-form-fields.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\confirm-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\data-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ColumnMeta' is defined but never used.","line":40,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":187,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":37},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"React.useRef\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":206,"column":29,"nodeType":"MemberExpression","endLine":206,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useVirtualizer\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":209,"column":7,"nodeType":"Identifier","endLine":209,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useMemo, ReactNode } from 'react';\r\nimport { useVirtualizer } from '@tanstack/react-virtual';\r\nimport {\r\n  ColumnDef,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  VisibilityState,\r\n  Row,\r\n} from '@tanstack/react-table';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Filter, ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\n\r\n// Custom type for column meta data\r\ninterface ColumnMeta {\r\n  priority: 'high' | 'medium' | 'low';\r\n}\r\n\r\n// Generic filter option interface\r\nexport interface FilterOption {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\n// Generic bulk action interface\r\nexport interface BulkAction<TData> {\r\n  label: string;\r\n  icon?: ReactNode;\r\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\r\n  onClick: (selectedRows: TData[]) => void;\r\n  disabled?: (selectedRows: TData[]) => boolean;\r\n}\r\n\r\n// Generic filter config interface\r\nexport interface FilterConfig {\r\n  key: string;\r\n  label: string;\r\n  options: FilterOption[];\r\n  placeholder?: string;\r\n}\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n  filters: Record<string, string>;\r\n  total: number;\r\n  pageCount: number;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  onPaginationChange: (pageIndex: number, pageSize: number) => void;\r\n  onGlobalFilterChange: (value: string) => void;\r\n  onFilterChange: (columnId: string, value: string) => void;\r\n  isLoading?: boolean;\r\n  columnVisibility?: VisibilityState;\r\n  onColumnVisibilityChange?: (state: VisibilityState) => void;\r\n  \r\n  // Bulk operations\r\n  enableRowSelection?: boolean;\r\n  bulkActions?: BulkAction<TData>[];\r\n  \r\n  // Filtering\r\n  filterConfigs?: FilterConfig[];\r\n  searchPlaceholder?: string;\r\n  \r\n  // Customization\r\n  title?: string;\r\n  exportButton?: ReactNode;\r\n  additionalActions?: ReactNode;\r\n  emptyStateMessage?: string;\r\n  \r\n  // Custom row handling\r\n  onRowClick?: (row: Row<TData>) => void;\r\n  getRowId?: (row: TData) => string;\r\n\r\n  // Virtualization\r\n  virtualizeRows?: boolean;\r\n  virtualRowEstimatedHeight?: number;\r\n}\r\n\r\nfunction TableSkeleton() {\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      {Array.from({ length: 10 }).map((_, i) => (\r\n        <div key={i} className=\"flex items-center space-x-4\">\r\n          <Skeleton className=\"h-4 w-4\" />\r\n          <Skeleton className=\"h-4 w-[200px]\" />\r\n          <Skeleton className=\"h-4 w-[150px]\" />\r\n          <Skeleton className=\"h-4 w-[100px]\" />\r\n          <Skeleton className=\"h-4 w-[120px]\" />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function DataTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n  filters,\r\n  total,\r\n  pageCount,\r\n  pageIndex,\r\n  pageSize,\r\n  onPaginationChange,\r\n  onGlobalFilterChange,\r\n  onFilterChange,\r\n  isLoading,\r\n  columnVisibility,\r\n  onColumnVisibilityChange,\r\n  enableRowSelection = false,\r\n  bulkActions = [],\r\n  filterConfigs = [],\r\n  searchPlaceholder = \"Search...\",\r\n  title,\r\n  exportButton,\r\n  additionalActions,\r\n  emptyStateMessage = \"No data available\",\r\n  onRowClick,\r\n  getRowId,\r\n  virtualizeRows = false,\r\n  virtualRowEstimatedHeight = 44,\r\n}: DataTableProps<TData, TValue>) {\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [showFilters, setShowFilters] = useState(false);\r\n\r\n  // Add selection column if enabled\r\n  const tableColumns = useMemo(() => {\r\n    if (!enableRowSelection) return columns;\r\n    \r\n    const selectionColumn: ColumnDef<TData, TValue> = {\r\n      id: \"select\",\r\n      header: ({ table }) => (\r\n        <Checkbox\r\n          checked={table.getIsAllPageRowsSelected()}\r\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n          aria-label=\"Select all\"\r\n        />\r\n      ),\r\n      cell: ({ row }) => (\r\n        <Checkbox\r\n          checked={row.getIsSelected()}\r\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n          aria-label=\"Select row\"\r\n        />\r\n      ),\r\n      enableSorting: false,\r\n      enableHiding: false,\r\n    };\r\n    \r\n    return [selectionColumn, ...columns];\r\n  }, [columns, enableRowSelection]);\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns: tableColumns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onRowSelectionChange: enableRowSelection ? setRowSelection : undefined,\r\n    onColumnVisibilityChange,\r\n    getRowId: getRowId ? (row, index) => getRowId(row) : undefined,\r\n    state: {\r\n      rowSelection: enableRowSelection ? rowSelection : {},\r\n      columnVisibility,\r\n    },\r\n  });\r\n\r\n  // Get selected rows\r\n  const selectedRowIds = useMemo(() => Object.keys(rowSelection), [rowSelection]);\r\n  const selectedRowData = useMemo(() => {\r\n    return data.filter((_, index) => \r\n      selectedRowIds.includes(index.toString())\r\n    );\r\n  }, [data, selectedRowIds]);\r\n\r\n  if (isLoading) {\r\n    return <TableSkeleton />;\r\n  }\r\n\r\n  const tableContainerRef = React.useRef<HTMLDivElement | null>(null);\r\n\r\n  const rowVirtualizer = virtualizeRows\r\n    ? useVirtualizer({\r\n        count: table.getRowModel().rows.length,\r\n        getScrollElement: () => tableContainerRef.current,\r\n        estimateSize: () => virtualRowEstimatedHeight,\r\n        overscan: 10,\r\n      })\r\n    : null;\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Header with Title and Actions */}\r\n      {(title || exportButton || additionalActions) && (\r\n        <div className=\"flex justify-between items-center\">\r\n          {title && <h2 className=\"text-xl font-semibold\">{title}</h2>}\r\n          <div className=\"flex items-center space-x-2\">\r\n            {exportButton}\r\n            {additionalActions}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Bulk Actions */}\r\n      {enableRowSelection && bulkActions.length > 0 && selectedRowData.length > 0 && (\r\n        <Card>\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"text-sm\">\r\n              Bulk Actions ({selectedRowData.length} selected)\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"pt-0\">\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {bulkActions.map((action, index) => (\r\n                <Button\r\n                  key={index}\r\n                  size=\"sm\"\r\n                  variant={action.variant || 'outline'}\r\n                  onClick={() => action.onClick(selectedRowData)}\r\n                  disabled={action.disabled ? action.disabled(selectedRowData) : false}\r\n                >\r\n                  {action.icon}\r\n                  {action.label}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Search and Filters */}\r\n      <div className=\"flex flex-col space-y-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-2 flex-1\">\r\n            <Input\r\n              placeholder={searchPlaceholder}\r\n              value={filters.search || ''}\r\n              onChange={(event) => onGlobalFilterChange(event.target.value)}\r\n              className=\"max-w-sm\"\r\n            />\r\n            {filterConfigs.length > 0 && (\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setShowFilters(!showFilters)}\r\n              >\r\n                <Filter className=\"h-4 w-4 mr-2\" />\r\n                Filters\r\n                {Object.values(filters).filter(Boolean).length > 0 && (\r\n                  <Badge variant=\"secondary\" className=\"ml-2 h-5 w-5 rounded-full p-0 text-xs\">\r\n                    {Object.values(filters).filter(Boolean).length}\r\n                  </Badge>\r\n                )}\r\n              </Button>\r\n            )}\r\n          </div>\r\n          <div className=\"text-sm text-muted-foreground\">\r\n            Showing {data.length} of {total} results\r\n          </div>\r\n        </div>\r\n\r\n        {showFilters && filterConfigs.length > 0 && (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4 p-4 border rounded-lg bg-muted/20\">\r\n            {filterConfigs.map((config) => (\r\n              <div key={config.key} className=\"space-y-2\">\r\n                <label className=\"text-sm font-medium\">{config.label}</label>\r\n                <Select\r\n                  value={filters[config.key] || 'all'}\r\n                  onValueChange={(value) => onFilterChange(config.key, value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={config.placeholder} />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All {config.label}</SelectItem>\r\n                    {config.options.map((option) => (\r\n                      <SelectItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Table */}\r\n      <div className=\"rounded-md border max-h-[70vh] overflow-auto\" ref={tableContainerRef}>\r\n        <Table style={virtualizeRows ? { position: 'relative' } : undefined}>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => (\r\n                  <TableHead key={header.id}>\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(\r\n                          header.column.columnDef.header,\r\n                          header.getContext()\r\n                        )}\r\n                  </TableHead>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              virtualizeRows && rowVirtualizer ? (\r\n                <>\r\n                  <tr>\r\n                    <td style={{ height: rowVirtualizer.getTotalSize() }} />\r\n                  </tr>\r\n                  {rowVirtualizer.getVirtualItems().map((virtualRow) => {\r\n                    const row = table.getRowModel().rows[virtualRow.index];\r\n                    return (\r\n                      <TableRow\r\n                        key={row.id}\r\n                        data-index={virtualRow.key}\r\n                        data-state={row.getIsSelected() && \"selected\"}\r\n                        className={onRowClick ? \"cursor-pointer hover:bg-muted/50\" : \"\"}\r\n                        onClick={() => onRowClick && onRowClick(row)}\r\n                        style={{\r\n                          position: 'absolute',\r\n                          top: 0,\r\n                          left: 0,\r\n                          width: '100%',\r\n                          transform: `translateY(${virtualRow.start}px)`,\r\n                        }}\r\n                      >\r\n                        {row.getVisibleCells().map((cell) => (\r\n                          <TableCell key={cell.id}>\r\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                          </TableCell>\r\n                        ))}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </>\r\n              ) : (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <TableRow\r\n                    key={row.id}\r\n                    data-state={row.getIsSelected() && \"selected\"}\r\n                    className={onRowClick ? \"cursor-pointer hover:bg-muted/50\" : \"\"}\r\n                    onClick={() => onRowClick && onRowClick(row)}\r\n                  >\r\n                    {row.getVisibleCells().map((cell) => (\r\n                      <TableCell key={cell.id}>\r\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                ))\r\n              )\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                  {emptyStateMessage}\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* Pagination */}\r\n      {pageCount > 1 && (\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"text-sm text-muted-foreground\">\r\n            Page {pageIndex + 1} of {pageCount}\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => onPaginationChange(Math.max(0, pageIndex - 1), pageSize)}\r\n              disabled={pageIndex === 0}\r\n            >\r\n              <ChevronLeft className=\"h-4 w-4 mr-2\" />\r\n              Previous\r\n            </Button>\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => onPaginationChange(Math.min(pageCount - 1, pageIndex + 1), pageSize)}\r\n              disabled={pageIndex >= pageCount - 1}\r\n            >\r\n              Next\r\n              <ChevronRight className=\"h-4 w-4 ml-2\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\editable-cell.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1596,1599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1596,1599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\emoji-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\funnel-chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'maxValue' is assigned a value but never used.","line":50,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":152,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\r\n\r\ninterface FunnelStage {\r\n  name: string;\r\n  value: number;\r\n  color: string;\r\n  conversionRate?: number;\r\n}\r\n\r\ninterface FunnelChartProps {\r\n  data: FunnelStage[];\r\n  className?: string;\r\n}\r\n\r\nexport function ResponsiveFunnelChart({ data, className = '' }: FunnelChartProps) {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [dimensions, setDimensions] = useState({ width: 600, height: 400 });\r\n\r\n  useEffect(() => {\r\n    const updateDimensions = () => {\r\n      if (containerRef.current) {\r\n        const rect = containerRef.current.getBoundingClientRect();\r\n        setDimensions({\r\n          width: rect.width,\r\n          height: Math.max(400, rect.height)\r\n        });\r\n      }\r\n    };\r\n\r\n    updateDimensions();\r\n    window.addEventListener('resize', updateDimensions);\r\n    return () => window.removeEventListener('resize', updateDimensions);\r\n  }, []);\r\n\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div className={`flex items-center justify-center h-96 ${className}`}>\r\n        <p className=\"text-muted-foreground\">No data available</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { width, height } = dimensions;\r\n  \r\n  // Calculate the maximum value for scaling\r\n  const maxValue = Math.max(...data.map(d => d.value));\r\n  \r\n  // Calculate funnel dimensions\r\n  const funnelWidth = width * 0.8;\r\n  const funnelHeight = height * 0.7;\r\n  const stageHeight = funnelHeight / data.length;\r\n  const centerX = width / 2;\r\n  \r\n  // Calculate conversion rates\r\n  const stagesWithRates = data.map((stage, index) => {\r\n    const nextStage = data[index + 1];\r\n    const conversionRate = nextStage ? ((nextStage.value / stage.value) * 100) : null;\r\n    return { ...stage, conversionRate };\r\n  });\r\n\r\n  return (\r\n    <div ref={containerRef} className={`w-full h-96 ${className}`}>\r\n      <svg width={width} height={height} className=\"overflow-visible\">\r\n        {stagesWithRates.map((stage, index) => {\r\n          // Calculate funnel shape for this stage\r\n          const progress = index / (data.length - 1);\r\n          const stageWidth = funnelWidth * (1 - progress * 0.6); // Funnel gets narrower\r\n          const y = (height - funnelHeight) / 2 + index * stageHeight;\r\n          \r\n          return (\r\n            <g key={stage.name}>\r\n              {/* Funnel segment */}\r\n              <Tooltip>\r\n                <TooltipTrigger asChild>\r\n                  <rect\r\n                    x={centerX - stageWidth / 2}\r\n                    y={y}\r\n                    width={stageWidth}\r\n                    height={stageHeight - 4}\r\n                    rx={8}\r\n                    fill={stage.color}\r\n                    fillOpacity=\"0.8\"\r\n                    className=\"cursor-pointer transition-all hover:opacity-100\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"1\"\r\n                    strokeOpacity=\"0.2\"\r\n                  />\r\n                </TooltipTrigger>\r\n                <TooltipContent>\r\n                  <div className=\"space-y-1\">\r\n                    <p className=\"font-semibold\">{stage.name}</p>\r\n                    <p>Count: {stage.value.toLocaleString()}</p>\r\n                    {stage.conversionRate !== null && (\r\n                      <p>Conversion: {stage.conversionRate.toFixed(1)}%</p>\r\n                    )}\r\n                  </div>\r\n                </TooltipContent>\r\n              </Tooltip>\r\n              \r\n              {/* Stage label */}\r\n              <text\r\n                x={centerX}\r\n                y={y + stageHeight / 2 + 4}\r\n                textAnchor=\"middle\"\r\n                className=\"text-xs font-medium fill-foreground\"\r\n              >\r\n                {stage.name}\r\n              </text>\r\n              \r\n              {/* Value label */}\r\n              <text\r\n                x={centerX}\r\n                y={y + stageHeight / 2 - 8}\r\n                textAnchor=\"middle\"\r\n                className=\"text-sm font-bold fill-foreground\"\r\n              >\r\n                {stage.value.toLocaleString()}\r\n              </text>\r\n              \r\n              {/* Conversion rate indicator */}\r\n              {stage.conversionRate !== null && (\r\n                <g>\r\n                  <line\r\n                    x1={centerX + stageWidth / 2 + 10}\r\n                    y1={y + stageHeight / 2}\r\n                    x2={centerX + stageWidth / 2 + 30}\r\n                    y2={y + stageHeight / 2}\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"2\"\r\n                    strokeOpacity=\"0.4\"\r\n                  />\r\n                  <text\r\n                    x={centerX + stageWidth / 2 + 35}\r\n                    y={y + stageHeight / 2 + 4}\r\n                    className=\"text-xs fill-muted-foreground\"\r\n                  >\r\n                    {stage.conversionRate.toFixed(1)}%\r\n                  </text>\r\n                </g>\r\n              )}\r\n            </g>\r\n          );\r\n        })}\r\n      </svg>\r\n      \r\n      {/* Legend */}\r\n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-center gap-4 text-xs text-muted-foreground\">\r\n        {data.map((stage, index) => (\r\n          <div key={stage.name} className=\"flex items-center gap-1\">\r\n            <div \r\n              className=\"w-3 h-3 rounded\"\r\n              style={{ backgroundColor: stage.color }}\r\n            />\r\n            <span>{stage.name}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\heatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\notes-popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\pipeline-editable-cell.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CalendarIcon' is defined but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatDateForInput' is defined but never used.","line":17,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EDITORIAL_ELIGIBLE_STATUSES' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[943,946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[943,946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lastDay' is assigned a value but never used.","line":45,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4773,4776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4773,4776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5902,5905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5902,5905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":205,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":205,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":244,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":368,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":368,"endColumn":38}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Check, X, Edit, CalendarIcon, ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { PipelineItem, useUpdatePipelineItem, useCreateActivityLog } from '@/lib/hooks';\r\nimport { toast } from 'sonner';\r\nimport { formatDateUKShort, formatDateForInput } from '@/lib/date-utils';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\r\nimport { cn } from '@/lib/utils';\r\nimport { EDITORIAL_ELIGIBLE_STATUSES, shouldSyncToEditorial } from '@/lib/editorial-sync';\r\nimport { ConfirmDialog } from './confirm-dialog';\r\n\r\ninterface PipelineEditableCellProps {\r\n  value: any;\r\n  item: PipelineItem;\r\n  field: keyof PipelineItem;\r\n  isSelect?: boolean;\r\n  isTextarea?: boolean;\r\n  isNumber?: boolean;\r\n  isDate?: boolean;\r\n  options?: readonly string[];\r\n  className?: string;\r\n  placeholder?: string;\r\n}\r\n\r\n// Simple custom calendar component\r\nconst SimpleCalendar = ({ selected, onSelect }: { selected?: Date; onSelect: (date: Date) => void }) => {\r\n  const [currentDate, setCurrentDate] = useState(selected || new Date());\r\n  \r\n  const today = new Date();\r\n  const year = currentDate.getFullYear();\r\n  const month = currentDate.getMonth();\r\n  \r\n  const firstDay = new Date(year, month, 1);\r\n  const lastDay = new Date(year, month + 1, 0);\r\n  const startDate = new Date(firstDay);\r\n  startDate.setDate(startDate.getDate() - firstDay.getDay());\r\n  \r\n  const days = [];\r\n  const current = new Date(startDate);\r\n  \r\n  // Generate 42 days (6 weeks)\r\n  for (let i = 0; i < 42; i++) {\r\n    days.push(new Date(current));\r\n    current.setDate(current.getDate() + 1);\r\n  }\r\n  \r\n  const monthNames = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n  \r\n  const dayNames = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\r\n  \r\n  const goToPrevMonth = () => {\r\n    setCurrentDate(new Date(year, month - 1, 1));\r\n  };\r\n  \r\n  const goToNextMonth = () => {\r\n    setCurrentDate(new Date(year, month + 1, 1));\r\n  };\r\n  \r\n  return (\r\n    <div className=\"p-3 w-64\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-center items-center mb-4 relative\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"absolute left-0 h-7 w-7 p-0\"\r\n          onClick={goToPrevMonth}\r\n        >\r\n          <ChevronLeft className=\"h-4 w-4\" />\r\n        </Button>\r\n        <div className=\"text-sm font-medium\">\r\n          {monthNames[month]} {year}\r\n        </div>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"absolute right-0 h-7 w-7 p-0\"\r\n          onClick={goToNextMonth}\r\n        >\r\n          <ChevronRight className=\"h-4 w-4\" />\r\n        </Button>\r\n      </div>\r\n      \r\n      {/* Day headers */}\r\n      <div className=\"grid grid-cols-7 gap-1 mb-2\">\r\n        {dayNames.map((day) => (\r\n          <div key={day} className=\"text-center text-xs font-medium text-muted-foreground p-2\">\r\n            {day}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      {/* Calendar grid */}\r\n      <div className=\"grid grid-cols-7 gap-1\">\r\n        {days.map((day, index) => {\r\n          const isToday = day.toDateString() === today.toDateString();\r\n          const isSelected = selected && day.toDateString() === selected.toDateString();\r\n          const isCurrentMonth = day.getMonth() === month;\r\n          \r\n          return (\r\n            <Button\r\n              key={index}\r\n              variant=\"ghost\"\r\n              className={cn(\r\n                \"h-8 w-8 p-0 text-xs\",\r\n                isToday && \"bg-accent text-accent-foreground\",\r\n                isSelected && \"bg-primary text-primary-foreground\",\r\n                !isCurrentMonth && \"text-muted-foreground opacity-50\"\r\n              )}\r\n              onClick={() => onSelect(day)}\r\n            >\r\n              {day.getDate()}\r\n            </Button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport function PipelineEditableCell({\r\n  value,\r\n  item,\r\n  field,\r\n  isSelect = false,\r\n  isTextarea = false,\r\n  isNumber = false,\r\n  isDate = false,\r\n  options = [],\r\n  className = '',\r\n  placeholder = '',\r\n}: PipelineEditableCellProps) {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [tempValue, setTempValue] = useState(value || '');\r\n  const [showEditorialConfirm, setShowEditorialConfirm] = useState(false);\r\n  const [pendingUpdate, setPendingUpdate] = useState<any>(null);\r\n  const { mutate: updatePipelineItem } = useUpdatePipelineItem();\r\n  const { mutate: createActivityLog } = useCreateActivityLog();\r\n\r\n  useEffect(() => {\r\n    setTempValue(value || '');\r\n  }, [value]);\r\n\r\n  const handleSave = () => {\r\n    if (tempValue === value) {\r\n      setIsEditing(false);\r\n      return;\r\n    }\r\n\r\n    let processedValue = tempValue;\r\n    if (isDate && tempValue) {\r\n      // Convert date string to ISO string for storage\r\n      processedValue = new Date(tempValue).toISOString();\r\n    } else if (isNumber) {\r\n      processedValue = Number(tempValue) || null;\r\n    } else {\r\n      processedValue = tempValue || null;\r\n    }\r\n\r\n    const updatedItem = {\r\n      ...item,\r\n      [field]: processedValue,\r\n    };\r\n\r\n    // Check if this is a status update that should trigger editorial sync confirmation\r\n    if (field === 'status' && shouldSyncToEditorial(value || '', tempValue)) {\r\n      setPendingUpdate(updatedItem);\r\n      setShowEditorialConfirm(true);\r\n      return;\r\n    }\r\n\r\n    // Proceed with normal update\r\n    performUpdate(updatedItem);\r\n  };\r\n\r\n  const performUpdate = (updatedItem: any) => {\r\n    updatePipelineItem(updatedItem, {\r\n      onSuccess: () => {\r\n        setIsEditing(false);\r\n        setPendingUpdate(null);\r\n        \r\n        // Log the activity\r\n        createActivityLog({\r\n          bdr: item.bdr,\r\n          activityType: 'Note_Added',\r\n          description: `Updated ${field}: ${value || 'empty'} → ${updatedItem[field] || 'empty'}`,\r\n          pipelineItemId: item.id,\r\n          notes: `Field ${field} updated`\r\n        });\r\n      },\r\n      onError: (error) => {\r\n        toast.error(`Failed to update ${field}`);\r\n        setTempValue(value || '');\r\n        setPendingUpdate(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTempValue(value || '');\r\n    setIsEditing(false);\r\n    setPendingUpdate(null);\r\n  };\r\n\r\n  const handleEditorialConfirm = async () => {\r\n    if (!pendingUpdate) return;\r\n    \r\n    // Update the pipeline item first\r\n    performUpdate(pendingUpdate);\r\n    setShowEditorialConfirm(false);\r\n\r\n    // Then sync to editorial board\r\n    try {\r\n      const response = await fetch('/api/editorial/sync', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          pipelineItemId: item.id,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        toast.success('Pipeline item synced to editorial board');\r\n      } else {\r\n        const error = await response.json();\r\n        toast.error(error.error || 'Failed to sync to editorial board');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Failed to sync to editorial board');\r\n    }\r\n  };\r\n\r\n  const handleEditorialDecline = () => {\r\n    if (!pendingUpdate) return;\r\n    \r\n    // Update the pipeline item without syncing to editorial\r\n    performUpdate(pendingUpdate);\r\n    setShowEditorialConfirm(false);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !isTextarea) {\r\n      e.preventDefault();\r\n      handleSave();\r\n    } else if (e.key === 'Escape') {\r\n      handleCancel();\r\n    }\r\n  };\r\n\r\n  if (isEditing) {\r\n    return (\r\n      <div className={`flex items-center gap-1 ${className}`} onClick={(e) => e.stopPropagation()}>\r\n        {isSelect ? (\r\n          <Select value={tempValue} onValueChange={setTempValue}>\r\n            <SelectTrigger className=\"h-6 text-xs\">\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {options.map((option) => (\r\n                <SelectItem key={option} value={option}>\r\n                  {option}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        ) : isTextarea ? (\r\n          <Textarea\r\n            value={tempValue}\r\n            onChange={(e) => setTempValue(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            className=\"min-h-[40px] text-xs\"\r\n            autoFocus\r\n          />\r\n        ) : (\r\n          <Input\r\n            type={isNumber ? 'number' : 'text'}\r\n            value={tempValue}\r\n            onChange={(e) => setTempValue(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            className=\"h-6 text-xs\"\r\n            placeholder={placeholder}\r\n            autoFocus\r\n          />\r\n        )}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"h-5 w-5 p-0\"\r\n          onClick={handleSave}\r\n        >\r\n          <Check className=\"h-3 w-3\" />\r\n        </Button>\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"h-5 w-5 p-0\"\r\n          onClick={handleCancel}\r\n        >\r\n          <X className=\"h-3 w-3\" />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`group cursor-pointer hover:bg-muted/50 rounded px-1 py-0.5 flex items-center gap-1 ${className}`}\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        {isDate ? (\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button\r\n                variant=\"ghost\"\r\n                className={cn(\r\n                  \"h-auto p-0 text-xs justify-start text-left font-normal hover:bg-transparent\",\r\n                  !value && \"text-muted-foreground\"\r\n                )}\r\n              >\r\n                {value ? (\r\n                  formatDateUKShort(value)\r\n                ) : (\r\n                  <span>{placeholder || 'Click to set date'}</span>\r\n                )}\r\n                <Edit className=\"h-3 w-3 opacity-0 group-hover:opacity-50 transition-opacity ml-1\" />\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-auto p-0\" align=\"start\" onClick={(e) => e.stopPropagation()}>\r\n              <SimpleCalendar\r\n                selected={value ? new Date(value) : undefined}\r\n                onSelect={(date) => {\r\n                  if (date) {\r\n                    const dateString = date.toISOString();\r\n                    setTempValue(dateString);\r\n                    // Update the item directly without going through the editing state\r\n                    const updatedItem = {\r\n                      ...item,\r\n                      [field]: dateString,\r\n                    };\r\n                    updatePipelineItem(updatedItem, {\r\n                      onSuccess: () => {\r\n                        // Log the activity\r\n                        createActivityLog({\r\n                          bdr: item.bdr,\r\n                          activityType: 'Note_Added',\r\n                          description: `Updated ${field}: ${value || 'empty'} → ${dateString}`,\r\n                          pipelineItemId: item.id,\r\n                          notes: `Field ${field} updated`\r\n                        });\r\n                      },\r\n                      onError: (error) => {\r\n                        toast.error(`Failed to update ${field}`);\r\n                      }\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </PopoverContent>\r\n          </Popover>\r\n        ) : (\r\n          <div\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              setIsEditing(true);\r\n            }}\r\n          >\r\n            <span className=\"text-xs truncate\">\r\n              {value || placeholder || 'Click to edit'}\r\n            </span>\r\n            <Edit className=\"h-3 w-3 opacity-0 group-hover:opacity-50 transition-opacity\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <ConfirmDialog\r\n        open={showEditorialConfirm}\r\n        title=\"Add to Editorial Board?\"\r\n        description={`This will update the status to \"${tempValue}\" and add this item to the editorial board. Do you want to proceed?`}\r\n        confirmLabel=\"Yes, Add to Editorial\"\r\n        cancelLabel=\"Just Update Status\"\r\n        onConfirm={handleEditorialConfirm}\r\n        onOpenChange={(open) => {\r\n          if (!open) {\r\n            handleEditorialDecline();\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\reporting-filters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\rich-text-editor.tsx","messages":[{"ruleId":"deprecation/deprecation","message":"Definition for rule 'deprecation/deprecation' was not found.","line":40,"column":5,"endLine":40,"endColumn":56,"severity":2,"nodeType":null},{"ruleId":"deprecation/deprecation","message":"Definition for rule 'deprecation/deprecation' was not found.","line":70,"column":5,"endLine":70,"endColumn":56,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { Button } from './button'\r\nimport { cn } from '@/lib/utils'\r\nimport { sanitizeEmailHtml } from '@/lib/html'\r\nimport { Bold, Italic, Underline, List, ListOrdered, Link as LinkIcon, Heading1, Heading2, Heading3, Undo2, Redo2, Eraser } from 'lucide-react'\r\n\r\ntype RichTextEditorProps = {\r\n  value: string\r\n  onChange: (html: string) => void\r\n  placeholder?: string\r\n  className?: string\r\n  heightClassName?: string\r\n}\r\n\r\nexport function RichTextEditor({ value, onChange, placeholder, className, heightClassName }: RichTextEditorProps) {\r\n  const [internal, setInternal] = useState<string>(value || '')\r\n  const ref = useRef<HTMLDivElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    setInternal(value || '')\r\n  }, [value])\r\n\r\n  const focusEditor = useCallback(() => {\r\n    if (!ref.current) return\r\n    ref.current.focus()\r\n    const selection = window.getSelection()\r\n    if (selection && selection.rangeCount === 0) {\r\n      const range = document.createRange()\r\n      range.selectNodeContents(ref.current)\r\n      range.collapse(false)\r\n      selection.removeAllRanges()\r\n      selection.addRange(range)\r\n    }\r\n  }, [])\r\n\r\n  const exec = useCallback((command: string, valueArg?: string) => {\r\n    focusEditor()\r\n    // eslint-disable-next-line deprecation/deprecation\r\n    document.execCommand(command, false, valueArg)\r\n  }, [focusEditor])\r\n\r\n  const handleInput = useCallback(() => {\r\n    if (!ref.current) return\r\n    // Do NOT sanitize on every keystroke; it interferes with caret movement and backspace.\r\n    const html = ref.current.innerHTML\r\n    setInternal(html)\r\n    onChange(html)\r\n  }, [onChange])\r\n\r\n  const plainTextToHtml = useCallback((text: string) => {\r\n    const normalized = text\r\n      .replace(/\\r/g, '')\r\n      .replace(/[\\t\\u00A0]+/g, ' ') // tabs & nbsp -> space\r\n      .trim()\r\n    const paragraphs = normalized\r\n      .split(/\\n{2,}/)\r\n      .map(p => `<p>${p.replace(/\\n/g, '<br>')}</p>`)\r\n      .join('')\r\n    return paragraphs || ''\r\n  }, [])\r\n\r\n  const handlePaste = useCallback((e: React.ClipboardEvent<HTMLDivElement>) => {\r\n    e.preventDefault()\r\n    const fromHtml = e.clipboardData.getData('text/html')\r\n    const fromText = e.clipboardData.getData('text/plain')\r\n    const rawHtml = fromHtml && fromHtml.length > 0 ? fromHtml : plainTextToHtml(fromText)\r\n    const sanitized = sanitizeEmailHtml(rawHtml)\r\n    // eslint-disable-next-line deprecation/deprecation\r\n    document.execCommand('insertHTML', false, sanitized)\r\n    setTimeout(handleInput, 0)\r\n  }, [handleInput, plainTextToHtml])\r\n\r\n  const handleBlur = useCallback(() => {\r\n    if (!ref.current) return\r\n    const sanitized = sanitizeEmailHtml(ref.current.innerHTML)\r\n    // Only update if changed to avoid unnecessary selection resets\r\n    if (sanitized !== internal) {\r\n      ref.current.innerHTML = sanitized\r\n      setInternal(sanitized)\r\n      onChange(sanitized)\r\n    }\r\n  }, [internal, onChange])\r\n\r\n  return (\r\n    <div className={cn('w-full', className)}>\r\n      <div className=\"flex flex-wrap items-center gap-1 mb-2 sticky top-0 bg-background/80 backdrop-blur z-10 py-1\">\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('bold')} title=\"Bold\"><Bold className=\"h-4 w-4\" /></Button>\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('italic')} title=\"Italic\"><Italic className=\"h-4 w-4\" /></Button>\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('underline')} title=\"Underline\"><Underline className=\"h-4 w-4\" /></Button>\r\n        <span className=\"mx-1\" />\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('insertUnorderedList')} title=\"Bulleted list\"><List className=\"h-4 w-4\" /></Button>\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('insertOrderedList')} title=\"Numbered list\"><ListOrdered className=\"h-4 w-4\" /></Button>\r\n        <span className=\"mx-1\" />\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('formatBlock', 'h1')} title=\"Heading 1\"><Heading1 className=\"h-4 w-4\" /></Button>\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('formatBlock', 'h2')} title=\"Heading 2\"><Heading2 className=\"h-4 w-4\" /></Button>\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('formatBlock', 'h3')} title=\"Heading 3\"><Heading3 className=\"h-4 w-4\" /></Button>\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => {\r\n          const url = window.prompt('Enter URL') || ''\r\n          if (url) exec('createLink', url)\r\n        }} title=\"Insert link\"><LinkIcon className=\"h-4 w-4\" /></Button>\r\n        <span className=\"mx-1\" />\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('undo')} title=\"Undo\"><Undo2 className=\"h-4 w-4\" /></Button>\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('redo')} title=\"Redo\"><Redo2 className=\"h-4 w-4\" /></Button>\r\n        <Button type=\"button\" size=\"icon\" variant=\"outline\" className=\"h-8 w-8\" onClick={() => exec('removeFormat')} title=\"Clear formatting\"><Eraser className=\"h-4 w-4\" /></Button>\r\n      </div>\r\n      <div\r\n        ref={ref}\r\n        contentEditable\r\n        suppressContentEditableWarning\r\n        className={cn(\r\n          'rounded-md border border-input bg-background px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 min-h-[200px] max-h-[60vh] overflow-auto break-words',\r\n          heightClassName\r\n        )}\r\n        data-placeholder={placeholder || ''}\r\n        onInput={handleInput}\r\n        onPaste={handlePaste}\r\n        onBlur={handleBlur}\r\n        dangerouslySetInnerHTML={{ __html: internal }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RichTextEditor\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\updates-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\components\\user-nav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\context\\ReportingFiltersContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\api-hooks.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[191,194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[191,194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[209,212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[209,212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2133,2136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2133,2136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2167,2170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2167,2170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2441,2444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2441,2444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3010,3013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3010,3013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3044,3047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3044,3047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3355,3358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3355,3358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5130,5133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5130,5133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5486,5489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5486,5489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6086,6089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6086,6089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6416,6419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6416,6419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7440,7443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7440,7443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { toast } from 'sonner';\r\n\r\n// Generic API mutation hook\r\nexport function useApiMutation<TData = any, TVariables = any>(\r\n  endpoint: string,\r\n  method: 'POST' | 'PUT' | 'DELETE' = 'POST',\r\n  options: {\r\n    invalidateKeys?: string[];\r\n    successMessage?: string;\r\n    errorMessage?: string;\r\n    onSuccess?: (data: TData) => void;\r\n    onError?: (error: Error) => void;\r\n  } = {}\r\n) {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation<TData, Error, TVariables>({\r\n    mutationFn: async (variables: TVariables) => {\r\n      const response = await fetch(endpoint, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: method !== 'DELETE' ? JSON.stringify(variables) : undefined,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return response.json();\r\n    },\r\n    onSuccess: (data) => {\r\n      // Invalidate specified query keys\r\n      if (options.invalidateKeys) {\r\n        options.invalidateKeys.forEach(key => {\r\n          queryClient.invalidateQueries({ queryKey: [key] });\r\n        });\r\n      }\r\n\r\n      // Show success message\r\n      if (options.successMessage) {\r\n        toast.success(options.successMessage);\r\n      }\r\n\r\n      // Call custom success handler\r\n      options.onSuccess?.(data);\r\n    },\r\n    onError: (error) => {\r\n      console.error('API mutation failed:', error);\r\n      \r\n      // Show error message\r\n      const errorMessage = options.errorMessage || error.message || 'Operation failed';\r\n      toast.error(errorMessage);\r\n\r\n      // Call custom error handler\r\n      options.onError?.(error);\r\n    },\r\n  });\r\n}\r\n\r\n// Specialized hooks for common operations\r\n\r\n// Lead operations\r\nexport function useCreateLead() {\r\n  return useApiMutation('/api/leads', 'POST', {\r\n    invalidateKeys: ['leads'],\r\n    successMessage: 'Lead created successfully',\r\n    errorMessage: 'Failed to create lead',\r\n  });\r\n}\r\n\r\nexport function useUpdateLead() {\r\n  return useApiMutation<any, { id: number; [key: string]: any }>(\r\n    '', // Dynamic endpoint\r\n    'PUT',\r\n    {\r\n      invalidateKeys: ['leads', 'lead'],\r\n      successMessage: 'Lead updated successfully',\r\n      errorMessage: 'Failed to update lead',\r\n    }\r\n  );\r\n}\r\n\r\nexport function useDeleteLead() {\r\n  return useApiMutation<any, { id: number }>(\r\n    '', // Dynamic endpoint\r\n    'DELETE',\r\n    {\r\n      invalidateKeys: ['leads'],\r\n      successMessage: 'Lead deleted successfully',\r\n      errorMessage: 'Failed to delete lead',\r\n    }\r\n  );\r\n}\r\n\r\n// Pipeline operations\r\nexport function useCreatePipelineItem() {\r\n  return useApiMutation('/api/pipeline', 'POST', {\r\n    invalidateKeys: ['pipeline'],\r\n    successMessage: 'Pipeline item created successfully',\r\n    errorMessage: 'Failed to create pipeline item',\r\n  });\r\n}\r\n\r\nexport function useUpdatePipelineItem() {\r\n  return useApiMutation<any, { id: number; [key: string]: any }>(\r\n    '', // Dynamic endpoint\r\n    'PUT',\r\n    {\r\n      invalidateKeys: ['pipeline', 'pipelineItem'],\r\n      successMessage: 'Pipeline item updated successfully',\r\n      errorMessage: 'Failed to update pipeline item',\r\n    }\r\n  );\r\n}\r\n\r\nexport function useDeletePipelineItem() {\r\n  return useApiMutation<any, { id: number }>(\r\n    '', // Dynamic endpoint\r\n    'DELETE',\r\n    {\r\n      invalidateKeys: ['pipeline'],\r\n      successMessage: 'Pipeline item deleted successfully',\r\n      errorMessage: 'Failed to delete pipeline item',\r\n    }\r\n  );\r\n}\r\n\r\n// Activity log operations\r\nexport function useCreateActivityLog() {\r\n  return useApiMutation('/api/activity-logs', 'POST', {\r\n    invalidateKeys: ['activityLogs', 'pipeline', 'leads'],\r\n    successMessage: 'Activity logged successfully',\r\n    errorMessage: 'Failed to log activity',\r\n  });\r\n}\r\n\r\nexport function useBatchCreateActivityLogs() {\r\n  return useApiMutation('/api/activity-logs/batch', 'POST', {\r\n    invalidateKeys: ['activityLogs', 'pipeline', 'leads'],\r\n    successMessage: 'Activities logged successfully',\r\n    errorMessage: 'Failed to log activities',\r\n  });\r\n}\r\n\r\n// KPI Target operations\r\nexport function useUpdateKpiTargets() {\r\n  return useApiMutation('/api/kpi-targets', 'PUT', {\r\n    invalidateKeys: ['kpiTargets'],\r\n    successMessage: 'KPI targets updated successfully',\r\n    errorMessage: 'Failed to update KPI targets',\r\n  });\r\n}\r\n\r\n// Specialized conversion operations\r\nexport function useConvertLeadToPipeline() {\r\n  return useApiMutation('/api/pipeline/convert-lead', 'POST', {\r\n    invalidateKeys: ['leads', 'pipeline'],\r\n    successMessage: 'Lead converted to pipeline successfully',\r\n    errorMessage: 'Failed to convert lead to pipeline',\r\n  });\r\n}\r\n\r\nexport function useConvertAllLeads() {\r\n  return useApiMutation('/api/pipeline/convert-all', 'POST', {\r\n    invalidateKeys: ['leads', 'pipeline'],\r\n    successMessage: 'Leads converted successfully',\r\n    errorMessage: 'Failed to convert leads',\r\n  });\r\n}\r\n\r\n// Move operations\r\nexport function useMovePipelineItem() {\r\n  return useApiMutation<any, { id: number; newCategory: string; newStatus: string }>(\r\n    '', // Dynamic endpoint\r\n    'PUT',\r\n    {\r\n      invalidateKeys: ['pipeline', 'pipelineItem'],\r\n      successMessage: 'Pipeline item moved successfully',\r\n      errorMessage: 'Failed to move pipeline item',\r\n    }\r\n  );\r\n}\r\n\r\nexport function useMoveToSublist() {\r\n  return useApiMutation<any, { id: number; sublistId: number | null }>(\r\n    '', // Dynamic endpoint\r\n    'POST',\r\n    {\r\n      invalidateKeys: ['pipeline'],\r\n      successMessage: 'Item moved to sublist successfully',\r\n      errorMessage: 'Failed to move item to sublist',\r\n    }\r\n  );\r\n}\r\n\r\n// Sublist operations\r\nexport function useCreateSublist() {\r\n  return useApiMutation('/api/pipeline/sublists', 'POST', {\r\n    invalidateKeys: ['pipeline'],\r\n    successMessage: 'Sublist created successfully',\r\n    errorMessage: 'Failed to create sublist',\r\n  });\r\n}\r\n\r\nexport function useDeleteSublist() {\r\n  return useApiMutation<any, { id: number; moveItemsTo?: number | null }>(\r\n    '', // Dynamic endpoint\r\n    'DELETE',\r\n    {\r\n      invalidateKeys: ['pipeline'],\r\n      successMessage: 'Sublist deleted successfully',\r\n      errorMessage: 'Failed to delete sublist',\r\n    }\r\n  );\r\n}\r\n\r\nexport function useReorderSublistItems() {\r\n  return useApiMutation<any, { id: number; itemOrder: { id: number; sortOrder: number }[] }>(\r\n    '', // Dynamic endpoint\r\n    'POST',\r\n    {\r\n      invalidateKeys: ['pipeline'],\r\n      successMessage: 'Items reordered successfully',\r\n      errorMessage: 'Failed to reorder items',\r\n    }\r\n  );\r\n}\r\n\r\n// Helper function to build dynamic endpoints\r\nexport function buildEndpoint(baseEndpoint: string, id?: number | string, action?: string): string {\r\n  let endpoint = baseEndpoint;\r\n  \r\n  if (id !== undefined) {\r\n    endpoint += `/${id}`;\r\n  }\r\n  \r\n  if (action) {\r\n    endpoint += `/${action}`;\r\n  }\r\n  \r\n  return endpoint;\r\n}\r\n\r\n// Higher-order function to create ID-based mutations\r\nexport function createIdBasedMutation<TVariables extends { id: number }>(\r\n  baseEndpoint: string,\r\n  method: 'PUT' | 'DELETE',\r\n  options: {\r\n    invalidateKeys?: string[];\r\n    successMessage?: string;\r\n    errorMessage?: string;\r\n    action?: string;\r\n  } = {}\r\n) {\r\n  return function() {\r\n    const queryClient = useQueryClient();\r\n\r\n    return useMutation<any, Error, TVariables>({\r\n      mutationFn: async (variables: TVariables) => {\r\n        const endpoint = buildEndpoint(baseEndpoint, variables.id, options.action);\r\n        \r\n        const response = await fetch(endpoint, {\r\n          method,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: method !== 'DELETE' ? JSON.stringify(variables) : undefined,\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return response.json();\r\n      },\r\n      onSuccess: () => {\r\n        if (options.invalidateKeys) {\r\n          options.invalidateKeys.forEach(key => {\r\n            queryClient.invalidateQueries({ queryKey: [key] });\r\n          });\r\n        }\r\n\r\n        if (options.successMessage) {\r\n          toast.success(options.successMessage);\r\n        }\r\n      },\r\n      onError: (error) => {\r\n        console.error('API mutation failed:', error);\r\n        const errorMessage = options.errorMessage || error.message || 'Operation failed';\r\n        toast.error(errorMessage);\r\n      },\r\n    });\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\auth-api.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Permission' is defined but never used.","line":5,"column":84,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":94},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used.","line":15,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4171,4174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4171,4174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from './auth-options';\r\nimport { prisma } from './db';\r\nimport { hasPermission, canViewUserData, getDataAccessFilter, UserWithPermissions, Permission } from './permissions';\r\nimport { Resource, Action, Role } from '@prisma/client';\r\n\r\nexport interface AuthenticatedUser extends UserWithPermissions {\r\n  email: string;\r\n  name?: string | null;\r\n  isActive: boolean;\r\n}\r\n\r\n// Get authenticated user with permissions from session\r\nexport async function getAuthenticatedUser(request?: NextRequest): Promise<AuthenticatedUser | null> {\r\n  const session = await getServerSession(authOptions);\r\n  \r\n  if (!session?.user?.email) {\r\n    return null;\r\n  }\r\n\r\n  const user = await prisma.user.findUnique({\r\n    where: { email: session.user.email },\r\n    include: {\r\n      permissions: {\r\n        include: {\r\n          permission: true\r\n        }\r\n      },\r\n      managedTerritories: {\r\n        select: { id: true }\r\n      }\r\n    }\r\n  });\r\n\r\n  if (!user || !user.isActive) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    id: user.id,\r\n    email: user.email,\r\n    name: user.name,\r\n    role: user.role,\r\n    territoryId: user.territoryId,\r\n    isActive: user.isActive,\r\n    permissions: user.permissions,\r\n    managedTerritories: user.managedTerritories,\r\n  };\r\n}\r\n\r\n// Middleware-style permission checker for API routes\r\nexport function requirePermission(resource: Resource, action: Action) {\r\n  return async (request: NextRequest, handler: (user: AuthenticatedUser, request: NextRequest) => Promise<Response>) => {\r\n    const user = await getAuthenticatedUser(request);\r\n    \r\n    if (!user) {\r\n      return new Response('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    if (!hasPermission(user, resource, action)) {\r\n      return new Response('Forbidden', { status: 403 });\r\n    }\r\n\r\n    return handler(user, request);\r\n  };\r\n}\r\n\r\n// Check if user can access specific data (by owner)\r\nexport async function canAccessData(\r\n  user: AuthenticatedUser,\r\n  resource: Resource,\r\n  action: Action,\r\n  dataOwnerId: string,\r\n  dataOwnerTerritoryId?: string | null\r\n): Promise<boolean> {\r\n  // Check basic permission first\r\n  if (!hasPermission(user, resource, action)) {\r\n    return false;\r\n  }\r\n\r\n  // If user has VIEW_ALL permission, they can access any data\r\n  if (hasPermission(user, resource, Action.VIEW_ALL)) {\r\n    return true;\r\n  }\r\n\r\n  // Check if user can view this specific user's data\r\n  return canViewUserData(user, dataOwnerId, dataOwnerTerritoryId);\r\n}\r\n\r\n// Get Prisma filter for data access based on user permissions\r\nexport function getDataFilter(user: AuthenticatedUser, resource: Resource) {\r\n  return getDataAccessFilter(user, resource);\r\n}\r\n\r\n// Role-based route protection\r\nexport function requireRole(...allowedRoles: Role[]) {\r\n  return async (request: NextRequest, handler: (user: AuthenticatedUser, request: NextRequest) => Promise<Response>) => {\r\n    const user = await getAuthenticatedUser(request);\r\n    \r\n    if (!user) {\r\n      return new Response('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    if (!allowedRoles.includes(user.role)) {\r\n      return new Response('Forbidden', { status: 403 });\r\n    }\r\n\r\n    return handler(user, request);\r\n  };\r\n}\r\n\r\n// Check if user is admin\r\nexport function isAdmin(user: AuthenticatedUser): boolean {\r\n  return user.role === Role.ADMIN;\r\n}\r\n\r\n// Check if user is manager or above\r\nexport function isManagerOrAbove(user: AuthenticatedUser): boolean {\r\n  return [Role.ADMIN, Role.DIRECTOR, Role.MANAGER].includes(user.role);\r\n}\r\n\r\n// Check if user is team lead or above\r\nexport function isTeamLeadOrAbove(user: AuthenticatedUser): boolean {\r\n  return [Role.ADMIN, Role.DIRECTOR, Role.MANAGER, Role.TEAM_LEAD].includes(user.role);\r\n}\r\n\r\n// Utility to create JSON error responses\r\nexport function createErrorResponse(message: string, status: number): Response {\r\n  return new Response(\r\n    JSON.stringify({ error: message }),\r\n    { \r\n      status,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    }\r\n  );\r\n}\r\n\r\n// Utility to create JSON success responses\r\nexport function createSuccessResponse(data: any, status: number = 200): Response {\r\n  return new Response(\r\n    JSON.stringify(data),\r\n    { \r\n      status,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    }\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\auth-options.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2095,2098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2095,2098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2521,2524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2521,2524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2577,2580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2577,2580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2635,2638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2635,2638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2716,2719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2716,2719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2801,2804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2801,2804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextAuthOptions } from 'next-auth';\r\nimport CredentialsProvider from 'next-auth/providers/credentials';\r\nimport { prisma } from './db';\r\nimport bcrypt from 'bcryptjs';\r\nimport { Role } from '@prisma/client';\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: 'credentials',\r\n      credentials: {\r\n        username: { label: \"Username\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.username || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        try {\r\n          // Find user by email with territory info\r\n          const user = await prisma.user.findUnique({\r\n            where: {\r\n              email: credentials.username\r\n            },\r\n            include: {\r\n              territory: true,\r\n              managedTerritories: true\r\n            }\r\n          });\r\n\r\n          if (!user) {\r\n            return null;\r\n          }\r\n\r\n          // Verify password\r\n          const isPasswordValid = await bcrypt.compare(credentials.password, user.hashedPassword);\r\n\r\n          if (!isPasswordValid) {\r\n            return null;\r\n          }\r\n\r\n          // Update last login timestamp\r\n          await prisma.user.update({\r\n            where: { id: user.id },\r\n            data: { lastLoginAt: new Date() }\r\n          });\r\n\r\n          return {\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            role: user.role,\r\n            territoryId: user.territoryId,\r\n            territoryName: user.territory?.name,\r\n            managedTerritoryIds: user.managedTerritories.map(t => t.id),\r\n          };\r\n        } catch (error) {\r\n          console.error('Auth error:', error);\r\n          return null;\r\n        }\r\n      }\r\n    }),\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  session: {\r\n    strategy: 'jwt',\r\n  },\r\n  pages: {\r\n    signIn: '/auth/login',\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        const userData = user as any;\r\n        token.id = userData.id;\r\n        token.role = userData.role;\r\n        token.name = userData.name;\r\n        token.territoryId = userData.territoryId;\r\n        token.territoryName = userData.territoryName;\r\n        token.managedTerritoryIds = userData.managedTerritoryIds;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token && session.user) {\r\n        (session.user as any).id = token.id as string;\r\n        (session.user as any).role = token.role as Role;\r\n        (session.user as any).territoryId = token.territoryId as string | null;\r\n        (session.user as any).territoryName = token.territoryName as string | null;\r\n        (session.user as any).managedTerritoryIds = token.managedTerritoryIds as string[];\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n}; ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\auth-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\authorize.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[476,479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[476,479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth-options';\r\n\r\nexport type Role = 'admin' | 'manager' | 'bdr' | 'viewer';\r\n\r\nexport function requireRole(allowed: Role[], handler: (req: NextRequest) => Promise<NextResponse> | NextResponse) {\r\n  return async function (req: NextRequest) {\r\n    const session = await getServerSession(authOptions);\r\n    const role = (session?.user as any)?.role as Role | undefined;\r\n\r\n    if (!session || !role || !allowed.includes(role)) {\r\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\r\n    }\r\n\r\n    return handler(req);\r\n  } as unknown as (req: NextRequest) => Promise<NextResponse>;\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\bulk-operations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TData' is defined but never used.","line":7,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[195,198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[195,198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[413,416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[413,416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2026,2029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2026,2029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2640,2643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2640,2643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3437,3440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3437,3440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport { toast } from 'sonner';\r\n\r\n// Generic bulk operation hook\r\nexport function useBulkOperation<TData = any>(\r\n  endpoint: string,\r\n  method: 'PUT' | 'POST' | 'DELETE' | 'PATCH' = 'PUT',\r\n  invalidateKeys: string[] = []\r\n) {\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation({\r\n    mutationFn: async (data: any) => {\r\n      const response = await fetch(endpoint, {\r\n        method,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to perform bulk operation: ${response.statusText}`);\r\n      }\r\n\r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      // Invalidate specified query keys\r\n      invalidateKeys.forEach(key => {\r\n        queryClient.invalidateQueries({ queryKey: [key] });\r\n      });\r\n    },\r\n    onError: (error: Error) => {\r\n      console.error('Bulk operation failed:', error);\r\n      toast.error(error.message || 'Operation failed');\r\n    },\r\n  });\r\n}\r\n\r\n// Specific hooks for leads\r\nexport function useBulkUpdateLeads() {\r\n  return useBulkOperation('/api/leads/bulk-update', 'PATCH', ['leads']);\r\n}\r\n\r\nexport function useBulkDeleteLeads() {\r\n  return useBulkOperation('/api/leads/bulk-delete', 'DELETE', ['leads']);\r\n}\r\n\r\nexport function useBulkConvertLeads() {\r\n  return useBulkOperation('/api/pipeline/convert-all', 'POST', ['leads', 'pipeline']);\r\n}\r\n\r\n// Specific hooks for pipeline items\r\nexport function useBulkUpdatePipeline() {\r\n  return useBulkOperation('/api/pipeline/bulk-update', 'PUT', ['pipeline']);\r\n}\r\n\r\nexport function useBulkDeletePipeline() {\r\n  return useBulkOperation('/api/pipeline/bulk-delete', 'DELETE', ['pipeline']);\r\n}\r\n\r\n// Helper functions for common bulk operations\r\nexport const createBulkStatusAction = (\r\n  status: string,\r\n  mutationHook: () => ReturnType<typeof useBulkOperation>\r\n) => {\r\n  return (selectedRows: any[]) => {\r\n    if (selectedRows.length === 0) {\r\n      toast.error('Please select at least one item to update');\r\n      return;\r\n    }\r\n\r\n    const { mutate } = mutationHook();\r\n    const selectedIds = selectedRows.map(row => row.id);\r\n    \r\n    mutate(\r\n      { ids: selectedIds, status },\r\n      {\r\n        onSuccess: () => {\r\n          toast.success(`Updated ${selectedRows.length} items to ${status}`);\r\n        },\r\n      }\r\n    );\r\n  };\r\n};\r\n\r\nexport const createBulkDeleteAction = (\r\n  mutationHook: () => ReturnType<typeof useBulkOperation>,\r\n  itemType: string = 'items'\r\n) => {\r\n  return (selectedRows: any[]) => {\r\n    if (selectedRows.length === 0) {\r\n      toast.error(`Please select at least one ${itemType.slice(0, -1)} to delete`);\r\n      return;\r\n    }\r\n\r\n    if (confirm(`Are you sure you want to delete ${selectedRows.length} ${itemType}?`)) {\r\n      const { mutate } = mutationHook();\r\n      const selectedIds = selectedRows.map(row => row.id);\r\n      \r\n      mutate(\r\n        { ids: selectedIds },\r\n        {\r\n          onSuccess: () => {\r\n            toast.success(`Deleted ${selectedRows.length} ${itemType}`);\r\n          },\r\n        }\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport const createBulkConvertAction = (\r\n  mutationHook: () => ReturnType<typeof useBulkOperation>,\r\n  defaultCategory: string = 'Pipeline',\r\n  defaultStatus: string = 'Proposal - Media'\r\n) => {\r\n  return (selectedRows: any[]) => {\r\n    if (selectedRows.length === 0) {\r\n      toast.error('Please select at least one lead to convert');\r\n      return;\r\n    }\r\n\r\n    const { mutate } = mutationHook();\r\n    const selectedIds = selectedRows.map(row => row.id);\r\n    \r\n    mutate(\r\n      {\r\n        leadIds: selectedIds,\r\n        category: defaultCategory,\r\n        status: defaultStatus,\r\n      },\r\n      {\r\n        onSuccess: () => {\r\n          toast.success(`Converted ${selectedRows.length} leads to pipeline`);\r\n        },\r\n      }\r\n    );\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\csv.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54,57],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54,57],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[552,555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[552,555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export function arrayToCsv(rows: Array<Record<string, any>>): string {\r\n  if (rows.length === 0) return '';\r\n  const headers = Object.keys(rows[0]);\r\n  const lines = [headers.join(',')];\r\n  for (const row of rows) {\r\n    const line = headers\r\n      .map((h) => {\r\n        const val = row[h] ?? '';\r\n        const escaped = String(val).replace(/\"/g, '\"\"');\r\n        return `\"${escaped}\"`;\r\n      })\r\n      .join(',');\r\n    lines.push(line);\r\n  }\r\n  return lines.join('\\n');\r\n}\r\n\r\nexport function downloadCsv(filename: string, rows: Array<Record<string, any>>) {\r\n  const csvContent = arrayToCsv(rows);\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.setAttribute('download', filename);\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\date-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\duplicate-detection.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[491,494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[491,494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":826,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":826,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25484,25487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25484,25487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from './db';\r\nimport { \r\n  DuplicateAction, \r\n  DuplicateType, \r\n  WarningSeverity, \r\n  UserDecision,\r\n  Role \r\n} from '@prisma/client';\r\n\r\n// Types for duplicate detection\r\nexport interface DuplicateCheckInput {\r\n  name?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  company?: string;\r\n  linkedinUrl?: string;\r\n  title?: string;\r\n}\r\n\r\nexport interface DuplicateMatch {\r\n  id: string;\r\n  matchType: DuplicateType;\r\n  confidence: number;\r\n  matchDetails: Record<string, any>;\r\n  existingRecord: {\r\n    id?: number;\r\n    type: 'lead' | 'pipeline' | 'company' | 'contact';\r\n    name?: string;\r\n    company?: string;\r\n    email?: string;\r\n    phone?: string;\r\n    owner?: {\r\n      id: string;\r\n      name: string;\r\n      role: Role;\r\n    };\r\n    lastContactDate?: Date;\r\n    status?: string;\r\n    isActive?: boolean;\r\n  };\r\n  severity: WarningSeverity;\r\n}\r\n\r\nexport interface DuplicateWarningResult {\r\n  hasWarning: boolean;\r\n  severity: WarningSeverity;\r\n  matches: DuplicateMatch[];\r\n  warningId?: string;\r\n  message?: string;\r\n}\r\n\r\n// Text normalization utilities\r\nexport function normalizeCompanyName(company: string): string {\r\n  if (!company) return '';\r\n  \r\n  return company\r\n    .toLowerCase()\r\n    .trim()\r\n    // Remove common company suffixes\r\n    .replace(/\\s+(ltd|limited|inc|incorporated|corp|corporation|llc|plc|gmbh|sa|sas|bv|ab|oy|as)\\.?$/gi, '')\r\n    // Remove common prefixes\r\n    .replace(/^(the\\s+)/gi, '')\r\n    // Remove special characters except spaces and hyphens\r\n    .replace(/[^\\w\\s-]/g, '')\r\n    // Normalize multiple spaces to single space\r\n    .replace(/\\s+/g, ' ')\r\n    .trim();\r\n}\r\n\r\nexport function normalizePersonName(name: string): string {\r\n  if (!name) return '';\r\n  \r\n  return name\r\n    .toLowerCase()\r\n    .trim()\r\n    // Remove titles and suffixes\r\n    .replace(/\\b(mr|mrs|ms|dr|prof|sir|dame|jr|sr|ii|iii|iv|v)\\b\\.?/gi, '')\r\n    .replace(/[^\\w\\s]/g, '')\r\n    .replace(/\\s+/g, ' ')\r\n    .trim();\r\n}\r\n\r\nexport function normalizeEmail(email: string): string {\r\n  if (!email) return '';\r\n  return email.toLowerCase().trim();\r\n}\r\n\r\nexport function normalizePhone(phone: string): string {\r\n  if (!phone) return '';\r\n  // Extract only digits\r\n  return phone.replace(/\\D/g, '');\r\n}\r\n\r\nexport function extractDomainFromEmail(email: string): string {\r\n  if (!email) return '';\r\n  const parts = email.split('@');\r\n  return parts.length > 1 ? parts[1].toLowerCase() : '';\r\n}\r\n\r\n// Similarity scoring functions\r\nexport function calculateStringSimilarity(str1: string, str2: string): number {\r\n  if (!str1 || !str2) return 0;\r\n  if (str1 === str2) return 1;\r\n  \r\n  // Levenshtein distance implementation\r\n  const matrix: number[][] = [];\r\n  const len1 = str1.length;\r\n  const len2 = str2.length;\r\n  \r\n  for (let i = 0; i <= len2; i++) {\r\n    matrix[i] = [i];\r\n  }\r\n  \r\n  for (let j = 0; j <= len1; j++) {\r\n    matrix[0][j] = j;\r\n  }\r\n  \r\n  for (let i = 1; i <= len2; i++) {\r\n    for (let j = 1; j <= len1; j++) {\r\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\r\n        matrix[i][j] = matrix[i - 1][j - 1];\r\n      } else {\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j - 1] + 1,\r\n          matrix[i][j - 1] + 1,\r\n          matrix[i - 1][j] + 1\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  const maxLength = Math.max(len1, len2);\r\n  return maxLength === 0 ? 1 : (maxLength - matrix[len2][len1]) / maxLength;\r\n}\r\n\r\n// Main duplicate detection service\r\nexport class DuplicateDetectionService {\r\n  private static instance: DuplicateDetectionService;\r\n  \r\n  public static getInstance(): DuplicateDetectionService {\r\n    if (!DuplicateDetectionService.instance) {\r\n      DuplicateDetectionService.instance = new DuplicateDetectionService();\r\n    }\r\n    return DuplicateDetectionService.instance;\r\n  }\r\n\r\n  // Check for duplicates when creating a lead/contact\r\n  async checkForDuplicates(\r\n    input: DuplicateCheckInput,\r\n    userId: string,\r\n    action: DuplicateAction = DuplicateAction.LEAD_CREATE\r\n  ): Promise<DuplicateWarningResult> {\r\n    const matches: DuplicateMatch[] = [];\r\n    \r\n    try {\r\n      // Company matches\r\n      if (input.company) {\r\n        const companyMatches = await this.findCompanyMatches(input.company, userId);\r\n        matches.push(...companyMatches);\r\n      }\r\n      \r\n      // Contact matches\r\n      if (input.email) {\r\n        const emailMatches = await this.findEmailMatches(input.email, userId);\r\n        matches.push(...emailMatches);\r\n      }\r\n      \r\n      if (input.phone) {\r\n        const phoneMatches = await this.findPhoneMatches(input.phone, userId);\r\n        matches.push(...phoneMatches);\r\n      }\r\n      \r\n      if (input.name) {\r\n        const nameMatches = await this.findNameMatches(input.name, userId);\r\n        matches.push(...nameMatches);\r\n      }\r\n      \r\n      if (input.linkedinUrl) {\r\n        const linkedinMatches = await this.findLinkedInMatches(input.linkedinUrl, userId);\r\n        matches.push(...linkedinMatches);\r\n      }\r\n      \r\n      // Determine overall severity\r\n      const severity = this.calculateOverallSeverity(matches);\r\n      const hasWarning = matches.length > 0 && severity !== WarningSeverity.LOW;\r\n      \r\n      let warningId: string | undefined;\r\n      \r\n      // Create warning record if there are significant matches\r\n      if (hasWarning) {\r\n        const warning = await prisma.duplicateWarning.create({\r\n          data: {\r\n            triggeredByUserId: userId,\r\n            triggerAction: action,\r\n            warningType: this.getPrimaryWarningType(matches),\r\n            severity,\r\n            triggerData: input,\r\n            potentialDuplicates: {\r\n              create: matches.map(match => ({\r\n                matchType: match.matchType,\r\n                confidence: match.confidence,\r\n                matchDetails: match.matchDetails,\r\n                existingLeadId: match.existingRecord.type === 'lead' ? match.existingRecord.id : undefined,\r\n                existingPipelineId: match.existingRecord.type === 'pipeline' ? match.existingRecord.id : undefined,\r\n                existingCompany: match.existingRecord.company,\r\n                existingContactInfo: {\r\n                  name: match.existingRecord.name,\r\n                  email: match.existingRecord.email,\r\n                  phone: match.existingRecord.phone,\r\n                },\r\n                ownedByUserId: match.existingRecord.owner?.id,\r\n                lastContactDate: match.existingRecord.lastContactDate,\r\n                recordStatus: match.existingRecord.status,\r\n              }))\r\n            }\r\n          }\r\n        });\r\n        \r\n        warningId = warning.id;\r\n        \r\n        // Log the warning\r\n        await this.logDuplicateAudit(userId, 'warning_shown', warningId, {\r\n          entityType: action.includes('LEAD') ? 'lead' : 'pipeline',\r\n          matchCount: matches.length,\r\n          highestSeverity: severity,\r\n        });\r\n      }\r\n      \r\n      return {\r\n        hasWarning,\r\n        severity,\r\n        matches,\r\n        warningId,\r\n        message: this.generateWarningMessage(matches),\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('Error in duplicate detection:', error);\r\n      \r\n      // Return safe fallback - no warning to avoid blocking user workflow\r\n      return {\r\n        hasWarning: false,\r\n        severity: WarningSeverity.LOW,\r\n        matches: [],\r\n        message: undefined,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Find company matches\r\n  private async findCompanyMatches(company: string, userId: string): Promise<DuplicateMatch[]> {\r\n    const normalizedCompany = normalizeCompanyName(company);\r\n    const matches: DuplicateMatch[] = [];\r\n    \r\n    // Exact company name matches in leads\r\n    const leadMatches = await prisma.lead.findMany({\r\n      where: {\r\n        company: {\r\n          not: null,\r\n        },\r\n        bdrId: {\r\n          not: userId, // Exclude own records initially\r\n        },\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true, role: true }\r\n        },\r\n        activityLogs: {\r\n          where: {\r\n            timestamp: {\r\n              gte: new Date(Date.now() - 12 * 30 * 24 * 60 * 60 * 1000) // 12 months\r\n            }\r\n          },\r\n          orderBy: { timestamp: 'desc' },\r\n          take: 1,\r\n        }\r\n      }\r\n    });\r\n    \r\n    for (const lead of leadMatches) {\r\n      if (!lead.company) continue;\r\n      \r\n      const normalizedExisting = normalizeCompanyName(lead.company);\r\n      const similarity = calculateStringSimilarity(normalizedCompany, normalizedExisting);\r\n      \r\n      if (similarity >= 0.8) { // High similarity threshold\r\n        const lastActivity = lead.activityLogs[0];\r\n        const confidence = similarity;\r\n        const severity = this.calculateMatchSeverity(confidence, lastActivity?.timestamp);\r\n        \r\n        matches.push({\r\n          id: `lead-company-${lead.id}`,\r\n          matchType: DuplicateType.COMPANY_NAME,\r\n          confidence,\r\n          matchDetails: {\r\n            originalCompany: company,\r\n            matchedCompany: lead.company,\r\n            similarity,\r\n          },\r\n          existingRecord: {\r\n            id: lead.id,\r\n            type: 'lead',\r\n            name: lead.name,\r\n            company: lead.company,\r\n            email: lead.email,\r\n            phone: lead.phone,\r\n            owner: lead.bdr,\r\n            lastContactDate: lastActivity?.timestamp,\r\n            status: lead.status,\r\n            isActive: lead.status !== 'Closed',\r\n          },\r\n          severity,\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Similar check for pipeline items\r\n    const pipelineMatches = await prisma.pipelineItem.findMany({\r\n      where: {\r\n        company: {\r\n          not: null,\r\n        },\r\n        bdrId: {\r\n          not: userId,\r\n        },\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true, role: true }\r\n        },\r\n        activityLogs: {\r\n          where: {\r\n            timestamp: {\r\n              gte: new Date(Date.now() - 12 * 30 * 24 * 60 * 60 * 1000)\r\n            }\r\n          },\r\n          orderBy: { timestamp: 'desc' },\r\n          take: 1,\r\n        }\r\n      }\r\n    });\r\n    \r\n    for (const pipeline of pipelineMatches) {\r\n      if (!pipeline.company) continue;\r\n      \r\n      const normalizedExisting = normalizeCompanyName(pipeline.company);\r\n      const similarity = calculateStringSimilarity(normalizedCompany, normalizedExisting);\r\n      \r\n      if (similarity >= 0.8) {\r\n        const lastActivity = pipeline.activityLogs[0];\r\n        const confidence = similarity;\r\n        const severity = this.calculateMatchSeverity(confidence, lastActivity?.timestamp);\r\n        \r\n        matches.push({\r\n          id: `pipeline-company-${pipeline.id}`,\r\n          matchType: DuplicateType.COMPANY_NAME,\r\n          confidence,\r\n          matchDetails: {\r\n            originalCompany: company,\r\n            matchedCompany: pipeline.company,\r\n            similarity,\r\n          },\r\n          existingRecord: {\r\n            id: pipeline.id,\r\n            type: 'pipeline',\r\n            name: pipeline.name,\r\n            company: pipeline.company,\r\n            email: pipeline.email,\r\n            phone: pipeline.phone,\r\n            owner: pipeline.bdr,\r\n            lastContactDate: lastActivity?.timestamp || pipeline.lastUpdated,\r\n            status: pipeline.status,\r\n            isActive: !['Closed - Won', 'Closed - Lost', 'Dead'].includes(pipeline.status),\r\n          },\r\n          severity,\r\n        });\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  // Find email matches\r\n  private async findEmailMatches(email: string, userId: string): Promise<DuplicateMatch[]> {\r\n    const normalizedEmail = normalizeEmail(email);\r\n    const domain = extractDomainFromEmail(normalizedEmail);\r\n    const matches: DuplicateMatch[] = [];\r\n    \r\n    // Exact email matches\r\n    const exactMatches = await prisma.lead.findMany({\r\n      where: {\r\n        email: normalizedEmail,\r\n        bdrId: {\r\n          not: userId,\r\n        }\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true, role: true }\r\n        },\r\n        activityLogs: {\r\n          orderBy: { timestamp: 'desc' },\r\n          take: 1,\r\n        }\r\n      }\r\n    });\r\n    \r\n    for (const lead of exactMatches) {\r\n      const lastActivity = lead.activityLogs[0];\r\n      const severity = this.calculateMatchSeverity(1.0, lastActivity?.timestamp);\r\n      \r\n      matches.push({\r\n        id: `lead-email-${lead.id}`,\r\n        matchType: DuplicateType.CONTACT_EMAIL,\r\n        confidence: 1.0,\r\n        matchDetails: {\r\n          originalEmail: email,\r\n          matchedEmail: lead.email,\r\n          exactMatch: true,\r\n        },\r\n        existingRecord: {\r\n          id: lead.id,\r\n          type: 'lead',\r\n          name: lead.name,\r\n          company: lead.company,\r\n          email: lead.email,\r\n          phone: lead.phone,\r\n          owner: lead.bdr,\r\n          lastContactDate: lastActivity?.timestamp,\r\n          status: lead.status,\r\n          isActive: lead.status !== 'Closed',\r\n        },\r\n        severity,\r\n      });\r\n    }\r\n    \r\n    // Domain matches (company level)\r\n    if (domain) {\r\n      const domainMatches = await prisma.lead.findMany({\r\n        where: {\r\n          email: {\r\n            contains: `@${domain}`,\r\n          },\r\n          bdrId: {\r\n            not: userId,\r\n          }\r\n        },\r\n        include: {\r\n          bdr: {\r\n            select: { id: true, name: true, role: true }\r\n          },\r\n          activityLogs: {\r\n            where: {\r\n              timestamp: {\r\n                gte: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000) // 6 months for domain matches\r\n              }\r\n            },\r\n            orderBy: { timestamp: 'desc' },\r\n            take: 1,\r\n          }\r\n        },\r\n        take: 5, // Limit domain matches\r\n      });\r\n      \r\n      for (const lead of domainMatches) {\r\n        if (lead.email === normalizedEmail) continue; // Skip exact matches already found\r\n        \r\n        const lastActivity = lead.activityLogs[0];\r\n        const severity = this.calculateMatchSeverity(0.7, lastActivity?.timestamp);\r\n        \r\n        matches.push({\r\n          id: `lead-domain-${lead.id}`,\r\n          matchType: DuplicateType.COMPANY_DOMAIN,\r\n          confidence: 0.7,\r\n          matchDetails: {\r\n            originalDomain: domain,\r\n            matchedEmail: lead.email,\r\n            sameDomain: true,\r\n          },\r\n          existingRecord: {\r\n            id: lead.id,\r\n            type: 'lead',\r\n            name: lead.name,\r\n            company: lead.company,\r\n            email: lead.email,\r\n            phone: lead.phone,\r\n            owner: lead.bdr,\r\n            lastContactDate: lastActivity?.timestamp,\r\n            status: lead.status,\r\n            isActive: lead.status !== 'Closed',\r\n          },\r\n          severity,\r\n        });\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  // Find phone matches\r\n  private async findPhoneMatches(phone: string, userId: string): Promise<DuplicateMatch[]> {\r\n    const normalizedPhone = normalizePhone(phone);\r\n    if (normalizedPhone.length < 7) return []; // Skip short numbers\r\n    \r\n    const matches: DuplicateMatch[] = [];\r\n    \r\n    // Find leads with similar phone numbers\r\n    const phoneMatches = await prisma.lead.findMany({\r\n      where: {\r\n        phone: {\r\n          not: null,\r\n        },\r\n        bdrId: {\r\n          not: userId,\r\n        }\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true, role: true }\r\n        },\r\n        activityLogs: {\r\n          orderBy: { timestamp: 'desc' },\r\n          take: 1,\r\n        }\r\n      }\r\n    });\r\n    \r\n    for (const lead of phoneMatches) {\r\n      if (!lead.phone) continue;\r\n      \r\n      const normalizedExisting = normalizePhone(lead.phone);\r\n      \r\n      // Check for exact match or similar endings (last 7-10 digits)\r\n      const isExactMatch = normalizedPhone === normalizedExisting;\r\n      const endsMatch = normalizedPhone.length >= 7 && \r\n                       normalizedExisting.length >= 7 && \r\n                       normalizedPhone.slice(-7) === normalizedExisting.slice(-7);\r\n      \r\n      if (isExactMatch || endsMatch) {\r\n        const confidence = isExactMatch ? 1.0 : 0.8;\r\n        const lastActivity = lead.activityLogs[0];\r\n        const severity = this.calculateMatchSeverity(confidence, lastActivity?.timestamp);\r\n        \r\n        matches.push({\r\n          id: `lead-phone-${lead.id}`,\r\n          matchType: DuplicateType.CONTACT_PHONE,\r\n          confidence,\r\n          matchDetails: {\r\n            originalPhone: phone,\r\n            matchedPhone: lead.phone,\r\n            exactMatch: isExactMatch,\r\n            endsMatch,\r\n          },\r\n          existingRecord: {\r\n            id: lead.id,\r\n            type: 'lead',\r\n            name: lead.name,\r\n            company: lead.company,\r\n            email: lead.email,\r\n            phone: lead.phone,\r\n            owner: lead.bdr,\r\n            lastContactDate: lastActivity?.timestamp,\r\n            status: lead.status,\r\n            isActive: lead.status !== 'Closed',\r\n          },\r\n          severity,\r\n        });\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  // Find name matches\r\n  private async findNameMatches(name: string, userId: string): Promise<DuplicateMatch[]> {\r\n    const normalizedName = normalizePersonName(name);\r\n    const matches: DuplicateMatch[] = [];\r\n    \r\n    // Find leads with similar names\r\n    const nameMatches = await prisma.lead.findMany({\r\n      where: {\r\n        bdrId: {\r\n          not: userId,\r\n        }\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true, role: true }\r\n        },\r\n        activityLogs: {\r\n          orderBy: { timestamp: 'desc' },\r\n          take: 1,\r\n        }\r\n      }\r\n    });\r\n    \r\n    for (const lead of nameMatches) {\r\n      const normalizedExisting = normalizePersonName(lead.name);\r\n      const similarity = calculateStringSimilarity(normalizedName, normalizedExisting);\r\n      \r\n      if (similarity >= 0.85) { // High threshold for name matches\r\n        const lastActivity = lead.activityLogs[0];\r\n        const confidence = similarity;\r\n        const severity = this.calculateMatchSeverity(confidence, lastActivity?.timestamp);\r\n        \r\n        matches.push({\r\n          id: `lead-name-${lead.id}`,\r\n          matchType: DuplicateType.CONTACT_NAME,\r\n          confidence,\r\n          matchDetails: {\r\n            originalName: name,\r\n            matchedName: lead.name,\r\n            similarity,\r\n          },\r\n          existingRecord: {\r\n            id: lead.id,\r\n            type: 'lead',\r\n            name: lead.name,\r\n            company: lead.company,\r\n            email: lead.email,\r\n            phone: lead.phone,\r\n            owner: lead.bdr,\r\n            lastContactDate: lastActivity?.timestamp,\r\n            status: lead.status,\r\n            isActive: lead.status !== 'Closed',\r\n          },\r\n          severity,\r\n        });\r\n      }\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  // Find LinkedIn profile matches\r\n  private async findLinkedInMatches(linkedinUrl: string, userId: string): Promise<DuplicateMatch[]> {\r\n    if (!linkedinUrl) return [];\r\n    \r\n    const matches: DuplicateMatch[] = [];\r\n    \r\n    // Normalize LinkedIn URL\r\n    const normalizedUrl = linkedinUrl.toLowerCase()\r\n      .replace(/https?:\\/\\/(www\\.)?linkedin\\.com\\/in\\//, '')\r\n      .replace(/\\/$/, '');\r\n    \r\n    const linkedinMatches = await prisma.lead.findMany({\r\n      where: {\r\n        link: {\r\n          contains: normalizedUrl,\r\n        },\r\n        bdrId: {\r\n          not: userId,\r\n        }\r\n      },\r\n      include: {\r\n        bdr: {\r\n          select: { id: true, name: true, role: true }\r\n        },\r\n        activityLogs: {\r\n          orderBy: { timestamp: 'desc' },\r\n          take: 1,\r\n        }\r\n      }\r\n    });\r\n    \r\n    for (const lead of linkedinMatches) {\r\n      const lastActivity = lead.activityLogs[0];\r\n      const severity = this.calculateMatchSeverity(0.95, lastActivity?.timestamp);\r\n      \r\n      matches.push({\r\n        id: `lead-linkedin-${lead.id}`,\r\n        matchType: DuplicateType.LINKEDIN_PROFILE,\r\n        confidence: 0.95,\r\n        matchDetails: {\r\n          originalUrl: linkedinUrl,\r\n          matchedUrl: lead.link,\r\n        },\r\n        existingRecord: {\r\n          id: lead.id,\r\n          type: 'lead',\r\n          name: lead.name,\r\n          company: lead.company,\r\n          email: lead.email,\r\n          phone: lead.phone,\r\n          owner: lead.bdr,\r\n          lastContactDate: lastActivity?.timestamp,\r\n          status: lead.status,\r\n          isActive: lead.status !== 'Closed',\r\n        },\r\n        severity,\r\n      });\r\n    }\r\n    \r\n    return matches;\r\n  }\r\n\r\n  // Calculate match severity based on confidence and recency\r\n  private calculateMatchSeverity(confidence: number, lastContactDate?: Date): WarningSeverity {\r\n    const now = new Date();\r\n    const threeMonthsAgo = new Date(now.getTime() - 3 * 30 * 24 * 60 * 60 * 1000);\r\n    const sixMonthsAgo = new Date(now.getTime() - 6 * 30 * 24 * 60 * 60 * 1000);\r\n    \r\n    // High confidence exact matches\r\n    if (confidence >= 0.95) {\r\n      if (lastContactDate && lastContactDate > threeMonthsAgo) {\r\n        return WarningSeverity.CRITICAL; // Recent contact with exact match\r\n      }\r\n      if (lastContactDate && lastContactDate > sixMonthsAgo) {\r\n        return WarningSeverity.HIGH;\r\n      }\r\n      return WarningSeverity.MEDIUM;\r\n    }\r\n    \r\n    // Good confidence matches\r\n    if (confidence >= 0.8) {\r\n      if (lastContactDate && lastContactDate > threeMonthsAgo) {\r\n        return WarningSeverity.HIGH;\r\n      }\r\n      return WarningSeverity.MEDIUM;\r\n    }\r\n    \r\n    // Lower confidence matches\r\n    return WarningSeverity.LOW;\r\n  }\r\n\r\n  // Calculate overall warning severity\r\n  private calculateOverallSeverity(matches: DuplicateMatch[]): WarningSeverity {\r\n    if (matches.length === 0) return WarningSeverity.LOW;\r\n    \r\n    const hasCritical = matches.some(m => m.severity === WarningSeverity.CRITICAL);\r\n    const hasHigh = matches.some(m => m.severity === WarningSeverity.HIGH);\r\n    const hasMedium = matches.some(m => m.severity === WarningSeverity.MEDIUM);\r\n    \r\n    if (hasCritical) return WarningSeverity.CRITICAL;\r\n    if (hasHigh) return WarningSeverity.HIGH;\r\n    if (hasMedium) return WarningSeverity.MEDIUM;\r\n    \r\n    return WarningSeverity.LOW;\r\n  }\r\n\r\n  // Get primary warning type from matches\r\n  private getPrimaryWarningType(matches: DuplicateMatch[]): DuplicateType {\r\n    if (matches.length === 0) return DuplicateType.COMPANY_NAME;\r\n    \r\n    // Prioritize by severity and confidence\r\n    const sortedMatches = matches.sort((a, b) => {\r\n      if (a.severity !== b.severity) {\r\n        const severityOrder = { \r\n          [WarningSeverity.CRITICAL]: 4, \r\n          [WarningSeverity.HIGH]: 3, \r\n          [WarningSeverity.MEDIUM]: 2, \r\n          [WarningSeverity.LOW]: 1 \r\n        };\r\n        return severityOrder[b.severity] - severityOrder[a.severity];\r\n      }\r\n      return b.confidence - a.confidence;\r\n    });\r\n    \r\n    return sortedMatches[0].matchType;\r\n  }\r\n\r\n  // Generate warning message\r\n  private generateWarningMessage(matches: DuplicateMatch[]): string | undefined {\r\n    if (matches.length === 0) return undefined;\r\n    \r\n    const highSeverityMatches = matches.filter(m => \r\n      m.severity === WarningSeverity.CRITICAL || m.severity === WarningSeverity.HIGH\r\n    );\r\n    \r\n    if (highSeverityMatches.length > 0) {\r\n      const match = highSeverityMatches[0];\r\n      const timeAgo = match.existingRecord.lastContactDate \r\n        ? this.getTimeAgo(match.existingRecord.lastContactDate)\r\n        : 'some time ago';\r\n      \r\n      return `Potential duplicate detected: Similar ${match.matchType.toLowerCase().replace('_', ' ')} was contacted ${timeAgo} by ${match.existingRecord.owner?.name || 'another BDR'}`;\r\n    }\r\n    \r\n    return `${matches.length} potential duplicate(s) found. Please review before proceeding.`;\r\n  }\r\n\r\n  // Utility to get human-readable time difference\r\n  private getTimeAgo(date: Date): string {\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n    \r\n    if (diffInSeconds < 60) return 'just now';\r\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\r\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\r\n    if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\r\n    if (diffInSeconds < 31536000) return `${Math.floor(diffInSeconds / 2592000)} months ago`;\r\n    \r\n    return `${Math.floor(diffInSeconds / 31536000)} years ago`;\r\n  }\r\n\r\n  // Record user decision on duplicate warning\r\n  async recordDecision(\r\n    warningId: string,\r\n    decision: UserDecision,\r\n    userId: string,\r\n    reason?: string\r\n  ): Promise<void> {\r\n    await prisma.duplicateWarning.update({\r\n      where: { id: warningId },\r\n      data: {\r\n        userDecision: decision,\r\n        decisionMade: true,\r\n        decisionAt: new Date(),\r\n        proceedReason: reason,\r\n      }\r\n    });\r\n    \r\n    // Log the decision\r\n    await this.logDuplicateAudit(userId, decision === UserDecision.PROCEEDED ? 'proceeded_anyway' : 'cancelled', warningId, {\r\n      decision,\r\n      reason,\r\n    });\r\n  }\r\n\r\n  // Log duplicate audit trail\r\n  async logDuplicateAudit(\r\n    userId: string,\r\n    action: string,\r\n    warningId?: string,\r\n    context?: Record<string, any>\r\n  ): Promise<void> {\r\n    try {\r\n      await prisma.duplicateAuditLog.create({\r\n        data: {\r\n          userId,\r\n          action,\r\n          warningId,\r\n          entityType: context?.entityType,\r\n          entityId: context?.entityId,\r\n          decisionReason: context?.reason,\r\n          systemSuggestion: context?.systemSuggestion,\r\n          actualOutcome: context?.actualOutcome,\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to log duplicate audit:', error);\r\n      // Don't throw - audit logging shouldn't break the main flow\r\n    }\r\n  }\r\n\r\n  // Admin functions for duplicate management\r\n  async getDuplicateStatistics(dateRange?: { from: Date; to: Date }) {\r\n    const whereClause = dateRange ? {\r\n      createdAt: {\r\n        gte: dateRange.from,\r\n        lte: dateRange.to,\r\n      }\r\n    } : {};\r\n    \r\n    const [totalWarnings, proceedCount, cancelledCount, severityBreakdown] = await Promise.all([\r\n      prisma.duplicateWarning.count({ where: whereClause }),\r\n      prisma.duplicateWarning.count({ \r\n        where: { \r\n          ...whereClause,\r\n          userDecision: UserDecision.PROCEEDED \r\n        } \r\n      }),\r\n      prisma.duplicateWarning.count({ \r\n        where: { \r\n          ...whereClause,\r\n          userDecision: UserDecision.CANCELLED \r\n        } \r\n      }),\r\n      prisma.duplicateWarning.groupBy({\r\n        by: ['severity'],\r\n        where: whereClause,\r\n        _count: true,\r\n      })\r\n    ]);\r\n    \r\n    return {\r\n      totalWarnings,\r\n      proceedCount,\r\n      cancelledCount,\r\n      proceedRate: totalWarnings > 0 ? (proceedCount / totalWarnings) * 100 : 0,\r\n      severityBreakdown: severityBreakdown.reduce((acc, item) => {\r\n        acc[item.severity] = item._count;\r\n        return acc;\r\n      }, {} as Record<WarningSeverity, number>),\r\n    };\r\n  }\r\n\r\n  // Get recent duplicate warnings for admin dashboard\r\n  async getRecentWarnings(limit = 50, includeResolved = false) {\r\n    return prisma.duplicateWarning.findMany({\r\n      where: includeResolved ? {} : { decisionMade: false },\r\n      orderBy: { createdAt: 'desc' },\r\n      take: limit,\r\n      include: {\r\n        triggeredBy: {\r\n          select: { id: true, name: true, email: true, role: true }\r\n        },\r\n        potentialDuplicates: {\r\n          include: {\r\n            ownedBy: {\r\n              select: { id: true, name: true, email: true, role: true }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const duplicateDetectionService = DuplicateDetectionService.getInstance();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\editorial-hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\editorial-sync.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2674,2677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2674,2677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from '@/lib/db';\r\n\r\n// Statuses that should automatically trigger editorial board sync\r\nexport const EDITORIAL_ELIGIBLE_STATUSES = [\r\n  'List Out',\r\n  'Partner List Sent', \r\n  'Q&A',\r\n  'Free Q&A Offered',\r\n  'Sold'\r\n];\r\n\r\n// Check if a pipeline status change should trigger editorial sync\r\nexport function shouldSyncToEditorial(oldStatus: string, newStatus: string): boolean {\r\n  return !EDITORIAL_ELIGIBLE_STATUSES.includes(oldStatus) && \r\n         EDITORIAL_ELIGIBLE_STATUSES.includes(newStatus);\r\n}\r\n\r\n// Auto-sync a single pipeline item to editorial board\r\nexport async function autoSyncPipelineItemToEditorial(pipelineItemId: number): Promise<void> {\r\n  try {\r\n    const pipelineItem = await prisma.pipelineItem.findUnique({\r\n      where: { id: pipelineItemId },\r\n      include: {\r\n        bdr: { select: { id: true, name: true, email: true } },\r\n        lead: { select: { id: true, name: true, company: true, email: true, phone: true } }\r\n      }\r\n    });\r\n\r\n    if (!pipelineItem) {\r\n      console.log(`Pipeline item ${pipelineItemId} not found`);\r\n      return;\r\n    }\r\n\r\n    // Check if eligible status\r\n    if (!EDITORIAL_ELIGIBLE_STATUSES.includes(pipelineItem.status)) {\r\n      console.log(`Pipeline item ${pipelineItemId} status \"${pipelineItem.status}\" not eligible for editorial sync`);\r\n      return;\r\n    }\r\n\r\n    // Check if already exists\r\n    const existingEditorialItem = await prisma.editorialBoardItem.findFirst({\r\n      where: { pipelineItemId }\r\n    });\r\n\r\n    if (existingEditorialItem) {\r\n      console.log(`Pipeline item ${pipelineItemId} already exists in editorial board`);\r\n      return;\r\n    }\r\n\r\n    // Determine initial editorial status based on pipeline status\r\n    let editorialStatus: string;\r\n    switch (pipelineItem.status) {\r\n      case 'List Out':\r\n      case 'Partner List Sent':\r\n        editorialStatus = 'LIST_OUT_QA_INTERVIEW_PROPOSED';\r\n        break;\r\n      case 'Q&A':\r\n      case 'Free Q&A Offered':\r\n        editorialStatus = 'QA_SUBMITTED';\r\n        break;\r\n      case 'Sold':\r\n        editorialStatus = 'QA_APPROVED';\r\n        break;\r\n      default:\r\n        editorialStatus = 'LIST_OUT_QA_INTERVIEW_PROPOSED';\r\n    }\r\n\r\n    // Create editorial board item\r\n    const editorialItem = await prisma.editorialBoardItem.create({\r\n      data: {\r\n        name: pipelineItem.name,\r\n        title: pipelineItem.title || undefined,\r\n        company: pipelineItem.company || undefined,\r\n        email: pipelineItem.email || pipelineItem.lead?.email || undefined,\r\n        phone: pipelineItem.phone || pipelineItem.lead?.phone || undefined,\r\n        bdrId: pipelineItem.bdrId,\r\n        status: editorialStatus as any,\r\n        notes: `Auto-synced from pipeline: ${pipelineItem.notes || 'No notes'}`,\r\n        link: pipelineItem.link || undefined,\r\n        leadId: pipelineItem.leadId || undefined,\r\n        pipelineItemId: pipelineItem.id,\r\n        lastUpdated: new Date(),\r\n      }\r\n    });\r\n\r\n    // Log the sync activity\r\n    await prisma.activityLog.create({\r\n      data: {\r\n        bdrId: pipelineItem.bdrId,\r\n        activityType: 'Editorial_Auto_Sync',\r\n        description: `Pipeline item auto-synced to editorial board`,\r\n        notes: `Status: ${pipelineItem.status} → ${editorialStatus}`,\r\n        pipelineItemId: pipelineItem.id,\r\n        editorialItemId: editorialItem.id,\r\n      }\r\n    });\r\n\r\n    console.log(`Successfully auto-synced pipeline item ${pipelineItemId} to editorial board`);\r\n    \r\n  } catch (error) {\r\n    console.error(`Failed to auto-sync pipeline item ${pipelineItemId} to editorial board:`, error);\r\n    // Don't throw - we don't want pipeline updates to fail because of editorial sync issues\r\n  }\r\n}\r\n\r\n// Batch sync multiple pipeline items\r\nexport async function batchAutoSyncToEditorial(pipelineItemIds: number[]): Promise<void> {\r\n  for (const id of pipelineItemIds) {\r\n    await autoSyncPipelineItemToEditorial(id);\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\error-handling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\exchange-rate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\export-service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[253,256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[253,256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9259,9262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9259,9262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9276,9279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9276,9279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":370,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":370,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11037,11040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11037,11040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":371,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11059,11062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11059,11062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":392,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11613,11616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11613,11616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":392,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11653,11656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11653,11656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":394,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11736,11739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11736,11739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":406,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11965,11968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11965,11968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":406,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":406,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12005,12008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12005,12008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":502,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":502,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14230,14233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14230,14233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":502,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":502,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14265,14268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14265,14268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SecurityService, SecurityContext } from './security';\r\nimport { prisma } from './db';\r\nimport { Role, Resource } from '@prisma/client';\r\n\r\nexport interface ExportRequest {\r\n  resource: Resource;\r\n  format: 'csv' | 'json' | 'xlsx';\r\n  filters?: any;\r\n  fields?: string[];\r\n  dateRange?: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n}\r\n\r\nexport interface ExportRestrictions {\r\n  maxRecords: number;\r\n  allowedFields: string[];\r\n  sensitiveFields: string[];\r\n  requireApproval: boolean;\r\n  allowedFormats: string[];\r\n}\r\n\r\nexport class DataExportService {\r\n  private static readonly EXPORT_RESTRICTIONS: Record<Role, Record<Resource, ExportRestrictions>> = {\r\n    BDR: {\r\n      LEADS: {\r\n        maxRecords: 500,\r\n        allowedFields: ['name', 'company', 'status', 'source', 'addedDate', 'notes'],\r\n        sensitiveFields: ['phone', 'email'],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv']\r\n      },\r\n      PIPELINE: {\r\n        maxRecords: 500,\r\n        allowedFields: ['name', 'company', 'category', 'status', 'value', 'probability'],\r\n        sensitiveFields: ['phone', 'email'],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv']\r\n      },\r\n      FINANCE: {\r\n        maxRecords: 0, // No access\r\n        allowedFields: [],\r\n        sensitiveFields: [],\r\n        requireApproval: true,\r\n        allowedFormats: []\r\n      },\r\n      USERS: {\r\n        maxRecords: 0,\r\n        allowedFields: [],\r\n        sensitiveFields: [],\r\n        requireApproval: true,\r\n        allowedFormats: []\r\n      },\r\n      REPORTS: {\r\n        maxRecords: 100,\r\n        allowedFields: ['basic_metrics'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv']\r\n      },\r\n      SETTINGS: {\r\n        maxRecords: 0,\r\n        allowedFields: [],\r\n        sensitiveFields: [],\r\n        requireApproval: true,\r\n        allowedFormats: []\r\n      },\r\n      ACTIVITY_LOGS: {\r\n        maxRecords: 100,\r\n        allowedFields: ['timestamp', 'activityType', 'description'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv']\r\n      }\r\n    },\r\n    TEAM_LEAD: {\r\n      LEADS: {\r\n        maxRecords: 2000,\r\n        allowedFields: ['name', 'company', 'status', 'source', 'addedDate', 'notes', 'bdrId'],\r\n        sensitiveFields: ['phone', 'email'],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'xlsx']\r\n      },\r\n      PIPELINE: {\r\n        maxRecords: 2000,\r\n        allowedFields: ['name', 'company', 'category', 'status', 'value', 'probability', 'bdrId'],\r\n        sensitiveFields: ['phone', 'email'],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'xlsx']\r\n      },\r\n      FINANCE: {\r\n        maxRecords: 0, // Limited access\r\n        allowedFields: [],\r\n        sensitiveFields: [],\r\n        requireApproval: true,\r\n        allowedFormats: []\r\n      },\r\n      USERS: {\r\n        maxRecords: 50,\r\n        allowedFields: ['name', 'email', 'role', 'territory'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv']\r\n      },\r\n      REPORTS: {\r\n        maxRecords: 1000,\r\n        allowedFields: ['team_metrics', 'individual_metrics'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'xlsx']\r\n      },\r\n      SETTINGS: {\r\n        maxRecords: 0,\r\n        allowedFields: [],\r\n        sensitiveFields: [],\r\n        requireApproval: true,\r\n        allowedFormats: []\r\n      },\r\n      ACTIVITY_LOGS: {\r\n        maxRecords: 1000,\r\n        allowedFields: ['timestamp', 'activityType', 'description', 'bdrId'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv']\r\n      }\r\n    },\r\n    MANAGER: {\r\n      LEADS: {\r\n        maxRecords: 10000,\r\n        allowedFields: ['*'], // All fields\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      PIPELINE: {\r\n        maxRecords: 10000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      FINANCE: {\r\n        maxRecords: 5000,\r\n        allowedFields: ['company', 'status', 'soldAmount', 'gbpAmount', 'month', 'bdrId'],\r\n        sensitiveFields: ['actualGbpReceived', 'commissionPaid'],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'xlsx']\r\n      },\r\n      USERS: {\r\n        maxRecords: 200,\r\n        allowedFields: ['name', 'email', 'role', 'territory', 'lastLoginAt', 'isActive'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'xlsx']\r\n      },\r\n      REPORTS: {\r\n        maxRecords: 10000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      SETTINGS: {\r\n        maxRecords: 100,\r\n        allowedFields: ['basic_settings'],\r\n        sensitiveFields: ['api_keys', 'secrets'],\r\n        requireApproval: false,\r\n        allowedFormats: ['json']\r\n      },\r\n      ACTIVITY_LOGS: {\r\n        maxRecords: 10000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json']\r\n      }\r\n    },\r\n    DIRECTOR: {\r\n      LEADS: {\r\n        maxRecords: 50000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      PIPELINE: {\r\n        maxRecords: 50000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      FINANCE: {\r\n        maxRecords: 50000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      USERS: {\r\n        maxRecords: 1000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      REPORTS: {\r\n        maxRecords: 100000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      SETTINGS: {\r\n        maxRecords: 1000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      ACTIVITY_LOGS: {\r\n        maxRecords: 100000,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      }\r\n    },\r\n    ADMIN: {\r\n      LEADS: {\r\n        maxRecords: -1, // Unlimited\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      PIPELINE: {\r\n        maxRecords: -1,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      FINANCE: {\r\n        maxRecords: -1,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      USERS: {\r\n        maxRecords: -1,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      REPORTS: {\r\n        maxRecords: -1,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      SETTINGS: {\r\n        maxRecords: -1,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      },\r\n      ACTIVITY_LOGS: {\r\n        maxRecords: -1,\r\n        allowedFields: ['*'],\r\n        sensitiveFields: [],\r\n        requireApproval: false,\r\n        allowedFormats: ['csv', 'json', 'xlsx']\r\n      }\r\n    }\r\n  };\r\n\r\n  static async canExport(\r\n    context: SecurityContext,\r\n    request: ExportRequest\r\n  ): Promise<{ allowed: boolean; restrictions?: ExportRestrictions; reason?: string }> {\r\n    const restrictions = this.EXPORT_RESTRICTIONS[context.role]?.[request.resource];\r\n    \r\n    if (!restrictions) {\r\n      return { allowed: false, reason: 'Resource not accessible for this role' };\r\n    }\r\n\r\n    if (restrictions.maxRecords === 0) {\r\n      return { allowed: false, reason: 'Export not permitted for this resource' };\r\n    }\r\n\r\n    if (!restrictions.allowedFormats.includes(request.format)) {\r\n      return { \r\n        allowed: false, \r\n        reason: `Format ${request.format} not allowed. Permitted formats: ${restrictions.allowedFormats.join(', ')}` \r\n      };\r\n    }\r\n\r\n    if (restrictions.requireApproval) {\r\n      return { \r\n        allowed: false, \r\n        reason: 'This export requires approval from a manager or admin' \r\n      };\r\n    }\r\n\r\n    return { allowed: true, restrictions };\r\n  }\r\n\r\n  static async executeExport(\r\n    context: SecurityContext,\r\n    request: ExportRequest\r\n  ): Promise<{ data: any[]; metadata: any }> {\r\n    const { allowed, restrictions, reason } = await this.canExport(context, request);\r\n    \r\n    if (!allowed) {\r\n      throw new Error(reason || 'Export not allowed');\r\n    }\r\n\r\n    // Log the export attempt\r\n    await SecurityService.logAction({\r\n      action: 'EXPORT',\r\n      resource: request.resource,\r\n      details: {\r\n        format: request.format,\r\n        recordCount: restrictions?.maxRecords || 'unlimited',\r\n        filters: request.filters\r\n      }\r\n    });\r\n\r\n    // Build secure query based on user context and restrictions\r\n    let query = this.buildExportQuery(context, request);\r\n    \r\n    // Apply field restrictions\r\n    if (restrictions && !restrictions.allowedFields.includes('*')) {\r\n      query = this.applyFieldRestrictions(query, restrictions);\r\n    }\r\n\r\n    // Execute the query based on resource type\r\n    const data = await this.fetchData(request.resource, query, context);\r\n\r\n    // Apply record limit\r\n    let limitedData = data;\r\n    if (restrictions && restrictions.maxRecords > 0 && data.length > restrictions.maxRecords) {\r\n      limitedData = data.slice(0, restrictions.maxRecords);\r\n    }\r\n\r\n    // Remove sensitive fields for non-admin users\r\n    if (context.role !== 'ADMIN' && restrictions?.sensitiveFields.length) {\r\n      limitedData = this.removeSensitiveFields(limitedData, restrictions.sensitiveFields);\r\n    }\r\n\r\n    return {\r\n      data: limitedData,\r\n      metadata: {\r\n        totalRecords: data.length,\r\n        exportedRecords: limitedData.length,\r\n        format: request.format,\r\n        exportedBy: context.userId,\r\n        exportedAt: new Date(),\r\n        restrictions: restrictions\r\n      }\r\n    };\r\n  }\r\n\r\n  private static buildExportQuery(context: SecurityContext, request: ExportRequest): any {\r\n    let query: any = {\r\n      where: request.filters || {}\r\n    };\r\n\r\n    // Apply date range if specified\r\n    if (request.dateRange) {\r\n      const dateField = this.getDateFieldForResource(request.resource);\r\n      if (dateField) {\r\n        query.where[dateField] = {\r\n          gte: request.dateRange.start,\r\n          lte: request.dateRange.end\r\n        };\r\n      }\r\n    }\r\n\r\n    // Apply row-level security\r\n    query = SecurityService.buildSecureQuery(query, context, request.resource);\r\n\r\n    return query;\r\n  }\r\n\r\n  private static applyFieldRestrictions(query: any, restrictions: ExportRestrictions): any {\r\n    const allowedFields = restrictions.allowedFields;\r\n    const selectObj: any = {};\r\n    \r\n    allowedFields.forEach(field => {\r\n      selectObj[field] = true;\r\n    });\r\n\r\n    return {\r\n      ...query,\r\n      select: selectObj\r\n    };\r\n  }\r\n\r\n  private static async fetchData(resource: Resource, query: any, context: SecurityContext): Promise<any[]> {\r\n    switch (resource) {\r\n      case 'LEADS':\r\n        return prisma.lead.findMany({\r\n          ...query,\r\n          include: {\r\n            bdr: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n      case 'PIPELINE':\r\n        return prisma.pipelineItem.findMany({\r\n          ...query,\r\n          include: {\r\n            bdr: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n      case 'FINANCE':\r\n        return prisma.financeEntry.findMany({\r\n          ...query,\r\n          include: {\r\n            bdr: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n      case 'USERS':\r\n        return prisma.user.findMany({\r\n          ...query,\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            role: true,\r\n            isActive: true,\r\n            lastLoginAt: true,\r\n            createdAt: true,\r\n            territory: {\r\n              select: {\r\n                name: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n      case 'ACTIVITY_LOGS':\r\n        return prisma.activityLog.findMany({\r\n          ...query,\r\n          include: {\r\n            bdr: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n      default:\r\n        throw new Error(`Export not supported for resource: ${resource}`);\r\n    }\r\n  }\r\n\r\n  private static getDateFieldForResource(resource: Resource): string | null {\r\n    const dateFieldMap: Record<Resource, string> = {\r\n      LEADS: 'addedDate',\r\n      PIPELINE: 'addedDate',\r\n      FINANCE: 'createdAt',\r\n      USERS: 'createdAt',\r\n      ACTIVITY_LOGS: 'timestamp',\r\n      REPORTS: 'createdAt',\r\n      SETTINGS: 'createdAt'\r\n    };\r\n\r\n    return dateFieldMap[resource] || null;\r\n  }\r\n\r\n  private static removeSensitiveFields(data: any[], sensitiveFields: string[]): any[] {\r\n    return data.map(record => {\r\n      const cleanRecord = { ...record };\r\n      sensitiveFields.forEach(field => {\r\n        if (field in cleanRecord) {\r\n          delete cleanRecord[field];\r\n        }\r\n      });\r\n      return cleanRecord;\r\n    });\r\n  }\r\n\r\n  static async getExportHistory(userId: string, days = 30) {\r\n    const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000);\r\n    \r\n    return prisma.auditLog.findMany({\r\n      where: {\r\n        userId,\r\n        action: 'EXPORT',\r\n        timestamp: { gte: since }\r\n      },\r\n      orderBy: {\r\n        timestamp: 'desc'\r\n      }\r\n    });\r\n  }\r\n\r\n  static async requestExportApproval(\r\n    context: SecurityContext,\r\n    request: ExportRequest,\r\n    justification: string\r\n  ): Promise<string> {\r\n    // In a real implementation, this would create an approval workflow\r\n    // For now, we'll log the request\r\n    const requestId = `export_req_${Date.now()}`;\r\n    \r\n    await SecurityService.logAction({\r\n      action: 'EXPORT_REQUEST',\r\n      resource: request.resource,\r\n      details: {\r\n        requestId,\r\n        format: request.format,\r\n        justification,\r\n        status: 'pending'\r\n      }\r\n    });\r\n\r\n    return requestId;\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\hooks.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'allPipelineStatusValues' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":16,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useQuery, useMutation, useQueryClient, UseQueryOptions, keepPreviousData } from '@tanstack/react-query';\r\nimport { toast } from 'sonner';\r\nimport { \r\n  leadFilterSchema, \r\n  leadSourceEnum, \r\n  leadStatusEnum,\r\n  pipelineFilterSchema,\r\n  pipelineCategoryEnum,\r\n  allPipelineStatusValues,\r\n  leadBdrEnum,\r\n  activityTypeEnum\r\n} from './validations';\r\nimport { z } from 'zod';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// Types\r\nexport type Lead = {\r\n  id: number;\r\n  name: string;\r\n  title?: string | null;\r\n  addedDate: string | Date;\r\n  lastUpdated: string | Date;\r\n  bdr?: string | null;\r\n  company?: string | null;\r\n  source: typeof leadSourceEnum[number];\r\n  status: typeof leadStatusEnum[number];\r\n  link?: string | null;\r\n  phone?: string | null;\r\n  notes?: string | null;\r\n  email?: string | null;\r\n  inPipeline?: boolean;\r\n  pipelineCategory?: string | null;\r\n}\r\n\r\nexport type PipelineItem = {\r\n  id: number;\r\n  name: string;\r\n  title?: string | null;\r\n  addedDate: string | Date;\r\n  lastUpdated: string | Date;\r\n  bdr: typeof leadBdrEnum[number];\r\n  company?: string | null;\r\n  category: typeof pipelineCategoryEnum[number];\r\n  status: string; // One of the statuses from pipelineStatusEnum\r\n  value?: number | null;\r\n  probability?: number | null;\r\n  expectedCloseDate?: string | Date | null;\r\n  callDate?: string | Date | null;\r\n  link?: string | null;\r\n  phone?: string | null;\r\n  notes?: string | null;\r\n  email?: string | null;\r\n  leadId?: number | null;\r\n  // Sublist functionality fields\r\n  parentId?: number | null;\r\n  parent?: PipelineItem | null;\r\n  children?: PipelineItem[];\r\n  isSublist?: boolean;\r\n  sublistName?: string | null;\r\n  sortOrder?: number | null;\r\n  latestActivityLog?: {\r\n    id: number;\r\n    timestamp: string | Date;\r\n    bdr: string;\r\n    activityType: string;\r\n    description: string;\r\n    notes?: string | null;\r\n  } | null;\r\n  activityLogs?: ActivityLog[];\r\n}\r\n\r\nexport type ActivityLog = {\r\n  id: number;\r\n  timestamp: string | Date;\r\n  bdr: typeof leadBdrEnum[number];\r\n  activityType: typeof activityTypeEnum[number];\r\n  description: string;\r\n  scheduledDate?: string | Date | null;\r\n  completedDate?: string | Date | null;\r\n  notes?: string | null;\r\n  leadId?: number | null;\r\n  lead?: {\r\n    id: number;\r\n    name: string;\r\n    company?: string | null;\r\n  } | null;\r\n  pipelineItemId?: number | null;\r\n  pipelineItem?: {\r\n    id: number;\r\n    name: string;\r\n    company?: string | null;\r\n    category: string;\r\n    status: string;\r\n  } | null;\r\n  previousStatus?: string | null;\r\n  newStatus?: string | null;\r\n  previousCategory?: string | null;\r\n  newCategory?: string | null;\r\n}\r\n\r\nexport type LeadFilter = z.infer<typeof leadFilterSchema>;\r\nexport type PipelineFilter = z.infer<typeof pipelineFilterSchema>;\r\n\r\nexport type LeadCreateInput = Omit<Lead, 'id' | 'addedDate'>;\r\nexport type LeadUpdateInput = Omit<Lead, 'addedDate'>;\r\n\r\nexport type PipelineItemCreateInput = Omit<PipelineItem, 'id' | 'addedDate'>;\r\nexport type PipelineItemUpdateInput = Omit<PipelineItem, 'addedDate'>;\r\n\r\nexport type ActivityLogCreateInput = {\r\n  bdr: typeof leadBdrEnum[number];\r\n  activityType: typeof activityTypeEnum[number];\r\n  description: string;\r\n  scheduledDate?: Date | string | null;\r\n  completedDate?: Date | string | null;\r\n  notes?: string | null;\r\n  leadId?: number | null;\r\n  pipelineItemId?: number | null;\r\n  previousStatus?: string | null;\r\n  newStatus?: string | null;\r\n  previousCategory?: string | null;\r\n  newCategory?: string | null;\r\n};\r\n\r\nexport type LeadsResponse = {\r\n  leads: Lead[];\r\n  total: number;\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n}\r\n\r\nexport type PipelineItemsResponse = {\r\n  items: PipelineItem[];\r\n  total: number;\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n}\r\n\r\nexport type ActivityLogsResponse = {\r\n  logs: ActivityLog[];\r\n  total: number;\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n}\r\n\r\n// Templates Types\r\nexport type Template = {\r\n  id: string;\r\n  title: string;\r\n  content: string;\r\n  type: string;\r\n  tags: string[];\r\n  isArchived: boolean;\r\n  categoryId?: string | null;\r\n  createdAt: string | Date;\r\n  updatedAt: string | Date;\r\n};\r\n\r\nexport type TemplatesResponse = {\r\n  items: Template[];\r\n  total: number;\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n};\r\n\r\n// Helper function to get base URL\r\nfunction getBaseUrl() {\r\n  if (typeof window !== 'undefined') {\r\n    // browser should use relative path\r\n    return '';\r\n  }\r\n  \r\n  if (process.env.VERCEL_URL) {\r\n    // reference for vercel.com\r\n    return `https://${process.env.VERCEL_URL}`;\r\n  }\r\n\r\n  if (process.env.RENDER_INTERNAL_HOSTNAME) {\r\n    // reference for render.com\r\n    return `http://${process.env.RENDER_INTERNAL_HOSTNAME}:${process.env.PORT}`;\r\n  }\r\n\r\n  // assume localhost\r\n  return `http://localhost:${process.env.PORT ?? 3000}`;\r\n}\r\n// Templates API\r\nasync function fetchTemplates(params: { search?: string; type?: string; categoryId?: string | null; includeArchived?: boolean; page?: number; pageSize?: number; }): Promise<TemplatesResponse> {\r\n  const sp = new URLSearchParams();\r\n  if (params.search) sp.set('search', params.search);\r\n  if (params.type) sp.set('type', params.type);\r\n  if (params.categoryId) sp.set('categoryId', params.categoryId);\r\n  if (params.includeArchived) sp.set('includeArchived', '1');\r\n  if (params.page) sp.set('page', String(params.page));\r\n  if (params.pageSize) sp.set('pageSize', String(params.pageSize));\r\n  const resp = await fetch(`${getBaseUrl()}/api/templates?${sp.toString()}`);\r\n  if (!resp.ok) throw new Error('Failed to fetch templates');\r\n  return resp.json();\r\n}\r\n\r\nexport function useTemplates(params: { search?: string; type?: string; categoryId?: string | null; includeArchived?: boolean; page?: number; pageSize?: number; }) {\r\n  return useQuery({\r\n    queryKey: ['templates', params],\r\n    queryFn: () => fetchTemplates(params),\r\n    placeholderData: keepPreviousData,\r\n  });\r\n}\r\n\r\n\r\n// API Functions for Leads\r\nasync function fetchLeads(filters: LeadFilter): Promise<LeadsResponse> {\r\n  const params = new URLSearchParams();\r\n  \r\n  if (filters.search) params.append('search', filters.search);\r\n  if (filters.status) params.append('status', filters.status);\r\n  if (filters.source) params.append('source', filters.source);\r\n  if (filters.bdr) params.append('bdr', filters.bdr);\r\n  params.append('page', filters.page.toString());\r\n  params.append('pageSize', filters.pageSize.toString());\r\n  \r\n  const response = await fetch(`${getBaseUrl()}/api/leads?${params.toString()}`);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch leads');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function fetchLead(id: number): Promise<Lead> {\r\n  const response = await fetch(`${getBaseUrl()}/api/leads/${id}`);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch lead');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function createLead(data: LeadCreateInput): Promise<Lead> {\r\n  const response = await fetch(`${getBaseUrl()}/api/leads`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to create lead');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function updateLead(data: LeadUpdateInput): Promise<Lead> {\r\n  const response = await fetch(`${getBaseUrl()}/api/leads/${data.id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to update lead');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function deleteLead(id: number): Promise<void> {\r\n  const response = await fetch(`${getBaseUrl()}/api/leads/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to delete lead');\r\n  }\r\n}\r\n\r\nasync function bulkUpdateLeads(ids: number[], status: typeof leadStatusEnum[number]): Promise<void> {\r\n  const response = await fetch(`${getBaseUrl()}/api/leads/bulk-update`, {\r\n    method: 'PATCH',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ ids, status }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to update leads');\r\n  }\r\n}\r\n\r\n// API Functions for Pipeline Items\r\nasync function fetchPipelineItems(filters: PipelineFilter): Promise<PipelineItemsResponse> {\r\n  const params = new URLSearchParams();\r\n  \r\n  if (filters.search) params.append('search', filters.search);\r\n  if (filters.category) params.append('category', filters.category);\r\n  if (filters.status) params.append('status', filters.status);\r\n  if (filters.bdr) params.append('bdr', filters.bdr);\r\n  params.append('page', filters.page.toString());\r\n  params.append('pageSize', filters.pageSize.toString());\r\n  \r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline?${params.toString()}`);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch pipeline items');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function fetchPipelineItem(id: number): Promise<PipelineItem> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/${id}`);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch pipeline item');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function createPipelineItem(data: PipelineItemCreateInput): Promise<PipelineItem> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to create pipeline item');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function updatePipelineItem(data: PipelineItemUpdateInput): Promise<PipelineItem> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/${data.id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to update pipeline item');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function deletePipelineItem(id: number): Promise<void> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to delete pipeline item');\r\n  }\r\n}\r\n\r\nasync function movePipelineItem(id: number, newCategory: string, newStatus: string): Promise<PipelineItem> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/${id}/move`, {\r\n    method: 'PATCH',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ newCategory, newStatus }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to move pipeline item');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function convertLeadToPipeline(leadId: number, category: string, status: string): Promise<PipelineItem> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/convert-lead`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ leadId, category, status }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to convert lead to pipeline item');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\n// Sublist API Functions\r\nasync function createSublist(data: {\r\n  name: string;\r\n  category: string;\r\n  status: string;\r\n  bdr: string;\r\n  parentId?: number | null;\r\n  sortOrder?: number | null;\r\n}): Promise<PipelineItem> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/sublists`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      ...data,\r\n      isSublist: true,\r\n      sublistName: data.name,\r\n    }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to create sublist');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function moveItemToSublist(itemId: number, sublistId: number | null, sortOrder?: number): Promise<PipelineItem> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/${itemId}/move-to-sublist`, {\r\n    method: 'PATCH',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ sublistId, sortOrder }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to move item to sublist');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function deleteSublist(sublistId: number, moveItemsTo?: number | null): Promise<void> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/sublists/${sublistId}`, {\r\n    method: 'DELETE',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ moveItemsTo }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to delete sublist');\r\n  }\r\n}\r\n\r\nasync function reorderSublistItems(sublistId: number, itemOrder: { id: number; sortOrder: number }[]): Promise<void> {\r\n  const response = await fetch(`${getBaseUrl()}/api/pipeline/sublists/${sublistId}/reorder`, {\r\n    method: 'PATCH',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ itemOrder }),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to reorder sublist items');\r\n  }\r\n}\r\n\r\n// API Functions for Activity Logs\r\nasync function fetchActivityLogs(params: {\r\n  bdr?: string;\r\n  activityType?: string;\r\n  fromDate?: Date | string;\r\n  toDate?: Date | string;\r\n  leadId?: number;\r\n  pipelineItemId?: number;\r\n  page?: number;\r\n  pageSize?: number;\r\n}): Promise<ActivityLogsResponse> {\r\n  const searchParams = new URLSearchParams();\r\n  \r\n  if (params.bdr) searchParams.append('bdr', params.bdr);\r\n  if (params.activityType) searchParams.append('activityType', params.activityType);\r\n  if (params.fromDate) searchParams.append('fromDate', params.fromDate.toString());\r\n  if (params.toDate) searchParams.append('toDate', params.toDate.toString());\r\n  if (params.leadId) searchParams.append('leadId', params.leadId.toString());\r\n  if (params.pipelineItemId) searchParams.append('pipelineItemId', params.pipelineItemId.toString());\r\n  \r\n  searchParams.append('page', (params.page || 1).toString());\r\n  searchParams.append('pageSize', (params.pageSize || 20).toString());\r\n  \r\n  const response = await fetch(`${getBaseUrl()}/api/activity-logs?${searchParams.toString()}`);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch activity logs');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\nasync function createActivityLog(data: ActivityLogCreateInput): Promise<ActivityLog> {\r\n  const response = await fetch(`${getBaseUrl()}/api/activity-logs`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.error || 'Failed to create activity log');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\n// Batch activity logs function\r\nasync function fetchBatchActivityLogs(pipelineItemIds: number[]): Promise<{ groupedLogs: Record<number, ActivityLog[]> }> {\r\n  if (pipelineItemIds.length === 0) {\r\n    return { groupedLogs: {} };\r\n  }\r\n  \r\n  const searchParams = new URLSearchParams();\r\n  searchParams.append('pipelineItemIds', pipelineItemIds.join(','));\r\n  \r\n  const response = await fetch(`${getBaseUrl()}/api/activity-logs/batch?${searchParams.toString()}`);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch batch activity logs');\r\n  }\r\n  \r\n  return response.json();\r\n}\r\n\r\n// React Query Hooks for Leads\r\nexport function useLeads(filters: LeadFilter, options?: UseQueryOptions<LeadsResponse>) {\r\n  // Create a more specific query key that includes all filter parameters\r\n  const queryKey = [\r\n    'leads', \r\n    filters.page,\r\n    filters.pageSize,\r\n    filters.search || '',\r\n    filters.status || '',\r\n    filters.source || '',\r\n    filters.bdr || ''\r\n  ];\r\n  \r\n  return useQuery({\r\n    queryKey,\r\n    queryFn: () => fetchLeads(filters),\r\n    placeholderData: keepPreviousData,\r\n    ...options,\r\n  });\r\n}\r\n\r\nexport function useLead(id: number) {\r\n  return useQuery({\r\n    queryKey: ['lead', id],\r\n    queryFn: () => fetchLead(id),\r\n    enabled: Boolean(id),\r\n  });\r\n}\r\n\r\nexport function useCreateLead() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: createLead,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['leads'] });\r\n      toast.success('Lead created successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useUpdateLead() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: updateLead,\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: ['leads'] });\r\n      queryClient.invalidateQueries({ queryKey: ['lead', data.id] });\r\n      toast.success('Lead updated successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useDeleteLead() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: deleteLead,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['leads'] });\r\n      toast.success('Lead deleted successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useBulkUpdateLeads() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: ({ ids, status }: { ids: number[], status: typeof leadStatusEnum[number] }) => \r\n      bulkUpdateLeads(ids, status),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['leads'] });\r\n      toast.success('Leads updated successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\n// React Query Hooks for Pipeline\r\nexport function usePipelineItems(filters: PipelineFilter, options?: UseQueryOptions<PipelineItemsResponse>) {\r\n  return useQuery({\r\n    queryKey: ['pipeline', filters],\r\n    queryFn: () => fetchPipelineItems(filters),\r\n    placeholderData: keepPreviousData,\r\n    ...options,\r\n  });\r\n}\r\n\r\nexport function usePipelineItem(id: number) {\r\n  return useQuery({\r\n    queryKey: ['pipelineItem', id],\r\n    queryFn: () => fetchPipelineItem(id),\r\n    enabled: Boolean(id),\r\n  });\r\n}\r\n\r\nexport function useCreatePipelineItem() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: createPipelineItem,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      toast.success('Pipeline item created successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useUpdatePipelineItem() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: updatePipelineItem,\r\n    onSuccess: (data) => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      queryClient.invalidateQueries({ queryKey: ['pipelineItem', data.id] });\r\n      toast.success('Pipeline item updated successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useDeletePipelineItem() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: deletePipelineItem,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      toast.success('Pipeline item deleted successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useMovePipelineItem() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: ({ id, newCategory, newStatus }: { id: number, newCategory: string, newStatus: string }) => \r\n      movePipelineItem(id, newCategory, newStatus),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      toast.success('Pipeline item moved successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useConvertLeadToPipeline() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: ({ leadId, category, status }: { leadId: number, category: string, status: string }) => \r\n      convertLeadToPipeline(leadId, category, status),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      queryClient.invalidateQueries({ queryKey: ['leads'] });\r\n      toast.success('Lead converted to pipeline item successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message);\r\n    },\r\n  });\r\n}\r\n\r\n// React Query Hooks for Activity Logs\r\nexport function useActivityLogs(params: {\r\n  bdr?: string;\r\n  activityType?: string;\r\n  fromDate?: Date | string;\r\n  toDate?: Date | string;\r\n  leadId?: number;\r\n  pipelineItemId?: number;\r\n  page?: number;\r\n  pageSize?: number;\r\n}, options?: UseQueryOptions<ActivityLogsResponse>) {\r\n  return useQuery({\r\n    queryKey: ['activityLogs', params],\r\n    queryFn: () => fetchActivityLogs(params),\r\n    enabled: Boolean(params.bdr || params.activityType || params.leadId || params.pipelineItemId || params.fromDate || params.toDate),\r\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\r\n    gcTime: 10 * 60 * 1000, // Keep in cache for 10 minutes\r\n    ...options,\r\n  });\r\n}\r\n\r\nexport function useBatchActivityLogs(pipelineItemIds: number[]) {\r\n  return useQuery({\r\n    queryKey: ['batchActivityLogs', pipelineItemIds],\r\n    queryFn: () => fetchBatchActivityLogs(pipelineItemIds),\r\n    enabled: pipelineItemIds.length > 0,\r\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\r\n    gcTime: 10 * 60 * 1000, // Keep in cache for 10 minutes\r\n  });\r\n}\r\n\r\nexport function useCreateActivityLog() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: createActivityLog,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['activityLogs'] });\r\n      queryClient.invalidateQueries({ queryKey: ['batchActivityLogs'] });\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      // Success message handled by the component using this hook\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(error.message || 'Failed to log activity');\r\n    },\r\n  });\r\n}\r\n\r\n// Sublist Hooks\r\nexport function useCreateSublist() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: createSublist,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      toast.success('Sublist created successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(`Failed to create sublist: ${error.message}`);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useMoveItemToSublist() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: ({ itemId, sublistId, sortOrder }: { itemId: number; sublistId: number | null; sortOrder?: number }) =>\r\n      moveItemToSublist(itemId, sublistId, sortOrder),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      queryClient.invalidateQueries({ queryKey: ['activityLogs'] });\r\n      toast.success('Item moved to sublist successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(`Failed to move item to sublist: ${error.message}`);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useDeleteSublist() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: ({ sublistId, moveItemsTo }: { sublistId: number; moveItemsTo?: number | null }) =>\r\n      deleteSublist(sublistId, moveItemsTo),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n      toast.success('Sublist deleted successfully');\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(`Failed to delete sublist: ${error.message}`);\r\n    },\r\n  });\r\n}\r\n\r\nexport function useReorderSublistItems() {\r\n  const queryClient = useQueryClient();\r\n  \r\n  return useMutation({\r\n    mutationFn: ({ sublistId, itemOrder }: { sublistId: number; itemOrder: { id: number; sortOrder: number }[] }) =>\r\n      reorderSublistItems(sublistId, itemOrder),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['pipeline'] });\r\n    },\r\n    onError: (error: Error) => {\r\n      toast.error(`Failed to reorder sublist items: ${error.message}`);\r\n    },\r\n  });\r\n} \r\n\r\n// Custom hook for managing BDRs\r\nexport function useBdrManager(currentUserName?: string | null) {\r\n  const [bdrs, setBdrs] = useState<string[]>(Array.from(leadBdrEnum));\r\n  const [isAddingBdr, setIsAddingBdr] = useState(false);\r\n\r\n  const addBdr = (newBdr: string) => {\r\n    if (newBdr.trim() && !bdrs.includes(newBdr)) {\r\n      setBdrs([...bdrs, newBdr]);\r\n      toast.success(`BDR \"${newBdr}\" added successfully`);\r\n      return true;\r\n    } else if (bdrs.includes(newBdr)) {\r\n      toast.error(`BDR \"${newBdr}\" already exists`);\r\n      return false;\r\n    } else {\r\n      toast.error('Please enter a valid BDR name');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Helper function to get default BDR based on current user\r\n  const getDefaultBdr = () => {\r\n    if (currentUserName && bdrs.includes(currentUserName)) {\r\n      return currentUserName;\r\n    }\r\n    return bdrs[0] || '';\r\n  };\r\n\r\n  return {\r\n    bdrs,\r\n    addBdr,\r\n    isAddingBdr,\r\n    setIsAddingBdr,\r\n    getDefaultBdr\r\n  };\r\n} ","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\hooks\\use-debounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\hooks\\use-duplicate-detection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\html.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\permissions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":311,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12352,12355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12352,12355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Role, Resource, Action } from '@prisma/client';\r\n\r\n// Permission checking utilities\r\nexport interface Permission {\r\n  resource: Resource;\r\n  action: Action;\r\n}\r\n\r\nexport interface UserWithPermissions {\r\n  id: string;\r\n  role: Role;\r\n  territoryId?: string | null;\r\n  permissions?: Array<{ permission: Permission }>;\r\n  managedTerritories?: Array<{ id: string }>;\r\n}\r\n\r\n// Default role-based permissions\r\nconst DEFAULT_ROLE_PERMISSIONS: Record<Role, Permission[]> = {\r\n  ADMIN: [\r\n    // Full access to everything\r\n    { resource: Resource.LEADS, action: Action.CREATE },\r\n    { resource: Resource.LEADS, action: Action.READ },\r\n    { resource: Resource.LEADS, action: Action.UPDATE },\r\n    { resource: Resource.LEADS, action: Action.DELETE },\r\n    { resource: Resource.LEADS, action: Action.VIEW_ALL },\r\n    { resource: Resource.LEADS, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.PIPELINE, action: Action.CREATE },\r\n    { resource: Resource.PIPELINE, action: Action.READ },\r\n    { resource: Resource.PIPELINE, action: Action.UPDATE },\r\n    { resource: Resource.PIPELINE, action: Action.DELETE },\r\n    { resource: Resource.PIPELINE, action: Action.VIEW_ALL },\r\n    { resource: Resource.PIPELINE, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.FINANCE, action: Action.CREATE },\r\n    { resource: Resource.FINANCE, action: Action.READ },\r\n    { resource: Resource.FINANCE, action: Action.UPDATE },\r\n    { resource: Resource.FINANCE, action: Action.DELETE },\r\n    { resource: Resource.FINANCE, action: Action.VIEW_ALL },\r\n    { resource: Resource.FINANCE, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.USERS, action: Action.CREATE },\r\n    { resource: Resource.USERS, action: Action.READ },\r\n    { resource: Resource.USERS, action: Action.UPDATE },\r\n    { resource: Resource.USERS, action: Action.DELETE },\r\n    { resource: Resource.USERS, action: Action.MANAGE },\r\n    { resource: Resource.USERS, action: Action.VIEW_ALL },\r\n    \r\n    { resource: Resource.REPORTS, action: Action.READ },\r\n    { resource: Resource.REPORTS, action: Action.VIEW_ALL },\r\n    { resource: Resource.REPORTS, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.SETTINGS, action: Action.READ },\r\n    { resource: Resource.SETTINGS, action: Action.UPDATE },\r\n    { resource: Resource.SETTINGS, action: Action.MANAGE },\r\n    \r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.READ },\r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.VIEW_ALL },\r\n    \r\n    { resource: Resource.DUPLICATES, action: Action.READ },\r\n    { resource: Resource.DUPLICATES, action: Action.MANAGE },\r\n    { resource: Resource.DUPLICATES, action: Action.VIEW_ALL },\r\n\r\n    // Messaging\r\n    { resource: Resource.MESSAGING, action: Action.READ },\r\n    { resource: Resource.MESSAGING, action: Action.CREATE },\r\n    { resource: Resource.MESSAGING, action: Action.UPDATE },\r\n    { resource: Resource.MESSAGING, action: Action.DELETE },\r\n\r\n    // Templates knowledgebase\r\n    { resource: Resource.TEMPLATES, action: Action.CREATE },\r\n    { resource: Resource.TEMPLATES, action: Action.READ },\r\n    { resource: Resource.TEMPLATES, action: Action.UPDATE },\r\n    { resource: Resource.TEMPLATES, action: Action.DELETE },\r\n  ],\r\n\r\n  DIRECTOR: [\r\n    // Similar to admin but no user management\r\n    { resource: Resource.LEADS, action: Action.CREATE },\r\n    { resource: Resource.LEADS, action: Action.READ },\r\n    { resource: Resource.LEADS, action: Action.UPDATE },\r\n    { resource: Resource.LEADS, action: Action.DELETE },\r\n    { resource: Resource.LEADS, action: Action.VIEW_ALL },\r\n    { resource: Resource.LEADS, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.PIPELINE, action: Action.CREATE },\r\n    { resource: Resource.PIPELINE, action: Action.READ },\r\n    { resource: Resource.PIPELINE, action: Action.UPDATE },\r\n    { resource: Resource.PIPELINE, action: Action.DELETE },\r\n    { resource: Resource.PIPELINE, action: Action.VIEW_ALL },\r\n    { resource: Resource.PIPELINE, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.FINANCE, action: Action.READ },\r\n    { resource: Resource.FINANCE, action: Action.VIEW_ALL },\r\n    { resource: Resource.FINANCE, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.USERS, action: Action.READ },\r\n    { resource: Resource.USERS, action: Action.VIEW_ALL },\r\n    \r\n    { resource: Resource.REPORTS, action: Action.READ },\r\n    { resource: Resource.REPORTS, action: Action.VIEW_ALL },\r\n    { resource: Resource.REPORTS, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.READ },\r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.VIEW_ALL },\r\n    \r\n    { resource: Resource.DUPLICATES, action: Action.READ },\r\n    { resource: Resource.DUPLICATES, action: Action.VIEW_ALL },\r\n\r\n    // Messaging\r\n    { resource: Resource.MESSAGING, action: Action.READ },\r\n    { resource: Resource.MESSAGING, action: Action.CREATE },\r\n\r\n    // Templates knowledgebase\r\n    { resource: Resource.TEMPLATES, action: Action.READ },\r\n  ],\r\n\r\n  MANAGER: [\r\n    // Territory-based management\r\n    { resource: Resource.LEADS, action: Action.CREATE },\r\n    { resource: Resource.LEADS, action: Action.READ },\r\n    { resource: Resource.LEADS, action: Action.UPDATE },\r\n    { resource: Resource.LEADS, action: Action.DELETE },\r\n    { resource: Resource.LEADS, action: Action.VIEW_TEAM },\r\n    { resource: Resource.LEADS, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.PIPELINE, action: Action.CREATE },\r\n    { resource: Resource.PIPELINE, action: Action.READ },\r\n    { resource: Resource.PIPELINE, action: Action.UPDATE },\r\n    { resource: Resource.PIPELINE, action: Action.DELETE },\r\n    { resource: Resource.PIPELINE, action: Action.VIEW_TEAM },\r\n    { resource: Resource.PIPELINE, action: Action.EXPORT },\r\n    \r\n    { resource: Resource.FINANCE, action: Action.READ },\r\n    { resource: Resource.FINANCE, action: Action.VIEW_TEAM },\r\n    \r\n    { resource: Resource.USERS, action: Action.READ },\r\n    { resource: Resource.USERS, action: Action.VIEW_TEAM },\r\n    \r\n    { resource: Resource.REPORTS, action: Action.READ },\r\n    { resource: Resource.REPORTS, action: Action.VIEW_TEAM },\r\n    \r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.READ },\r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.VIEW_TEAM },\r\n    \r\n    { resource: Resource.DUPLICATES, action: Action.READ },\r\n    { resource: Resource.DUPLICATES, action: Action.VIEW_TEAM },\r\n\r\n    // Messaging\r\n    { resource: Resource.MESSAGING, action: Action.READ },\r\n    { resource: Resource.MESSAGING, action: Action.CREATE },\r\n\r\n    // Templates knowledgebase\r\n    { resource: Resource.TEMPLATES, action: Action.READ },\r\n    { resource: Resource.TEMPLATES, action: Action.CREATE },\r\n    { resource: Resource.TEMPLATES, action: Action.UPDATE },\r\n  ],\r\n\r\n  TEAM_LEAD: [\r\n    // Team visibility with limited management\r\n    { resource: Resource.LEADS, action: Action.CREATE },\r\n    { resource: Resource.LEADS, action: Action.READ },\r\n    { resource: Resource.LEADS, action: Action.UPDATE },\r\n    { resource: Resource.LEADS, action: Action.VIEW_TEAM },\r\n    \r\n    { resource: Resource.PIPELINE, action: Action.CREATE },\r\n    { resource: Resource.PIPELINE, action: Action.READ },\r\n    { resource: Resource.PIPELINE, action: Action.UPDATE },\r\n    { resource: Resource.PIPELINE, action: Action.VIEW_TEAM },\r\n    \r\n    { resource: Resource.FINANCE, action: Action.READ },\r\n    \r\n    { resource: Resource.USERS, action: Action.READ },\r\n    \r\n    { resource: Resource.REPORTS, action: Action.READ },\r\n    { resource: Resource.REPORTS, action: Action.VIEW_TEAM },\r\n    \r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.READ },\r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.VIEW_TEAM },\r\n    \r\n    { resource: Resource.DUPLICATES, action: Action.READ },\r\n\r\n    // Messaging\r\n    { resource: Resource.MESSAGING, action: Action.READ },\r\n    { resource: Resource.MESSAGING, action: Action.CREATE },\r\n\r\n    // Templates knowledgebase\r\n    { resource: Resource.TEMPLATES, action: Action.READ },\r\n    { resource: Resource.TEMPLATES, action: Action.CREATE },\r\n    { resource: Resource.TEMPLATES, action: Action.UPDATE },\r\n  ],\r\n\r\n  BDR: [\r\n    // Own data only\r\n    { resource: Resource.LEADS, action: Action.CREATE },\r\n    { resource: Resource.LEADS, action: Action.READ },\r\n    { resource: Resource.LEADS, action: Action.UPDATE },\r\n    { resource: Resource.LEADS, action: Action.DELETE },\r\n    \r\n    { resource: Resource.PIPELINE, action: Action.CREATE },\r\n    { resource: Resource.PIPELINE, action: Action.READ },\r\n    { resource: Resource.PIPELINE, action: Action.UPDATE },\r\n    { resource: Resource.PIPELINE, action: Action.DELETE },\r\n    \r\n    { resource: Resource.FINANCE, action: Action.READ },\r\n    \r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.CREATE },\r\n    { resource: Resource.ACTIVITY_LOGS, action: Action.READ },\r\n    \r\n    { resource: Resource.DUPLICATES, action: Action.READ },\r\n\r\n    // Messaging\r\n    { resource: Resource.MESSAGING, action: Action.READ },\r\n    { resource: Resource.MESSAGING, action: Action.CREATE },\r\n\r\n    // Templates knowledgebase (BDRs can read and contribute)\r\n    { resource: Resource.TEMPLATES, action: Action.READ },\r\n    { resource: Resource.TEMPLATES, action: Action.CREATE },\r\n    { resource: Resource.TEMPLATES, action: Action.UPDATE },\r\n  ],\r\n};\r\n\r\n// Check if user has a specific permission\r\nexport function hasPermission(\r\n  user: UserWithPermissions,\r\n  resource: Resource,\r\n  action: Action\r\n): boolean {\r\n  // Check explicit user permissions first\r\n  if (user.permissions) {\r\n    const hasExplicitPermission = user.permissions.some(\r\n      (up) => up.permission.resource === resource && up.permission.action === action\r\n    );\r\n    if (hasExplicitPermission) return true;\r\n  }\r\n\r\n  // Fall back to role-based permissions\r\n  const rolePermissions = DEFAULT_ROLE_PERMISSIONS[user.role] || [];\r\n  return rolePermissions.some(\r\n    (permission) => permission.resource === resource && permission.action === action\r\n  );\r\n}\r\n\r\n// Check if user can view data from another user (for team leads, managers, etc.)\r\nexport function canViewUserData(\r\n  currentUser: UserWithPermissions,\r\n  targetUserId: string,\r\n  targetUserTerritoryId?: string | null\r\n): boolean {\r\n  // Users can always view their own data\r\n  if (currentUser.id === targetUserId) return true;\r\n\r\n  // Admins and directors can view all data\r\n  if (currentUser.role === Role.ADMIN || currentUser.role === Role.DIRECTOR) {\r\n    return true;\r\n  }\r\n\r\n  // Managers can view data from their managed territories\r\n  if (currentUser.role === Role.MANAGER && currentUser.managedTerritories) {\r\n    const managesTargetTerritory = currentUser.managedTerritories.some(\r\n      (territory) => territory.id === targetUserTerritoryId\r\n    );\r\n    if (managesTargetTerritory) return true;\r\n  }\r\n\r\n  // Team leads can view data from users in the same territory\r\n  if (\r\n    (currentUser.role === Role.TEAM_LEAD || currentUser.role === Role.MANAGER) &&\r\n    currentUser.territoryId &&\r\n    currentUser.territoryId === targetUserTerritoryId\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// Get effective permissions for a user\r\nexport function getEffectivePermissions(user: UserWithPermissions): Permission[] {\r\n  const rolePermissions = DEFAULT_ROLE_PERMISSIONS[user.role] || [];\r\n  const userPermissions = user.permissions?.map((up) => up.permission) || [];\r\n  \r\n  // Combine and deduplicate permissions\r\n  const allPermissions = [...rolePermissions, ...userPermissions];\r\n  const uniquePermissions = allPermissions.filter((permission, index, self) => \r\n    index === self.findIndex((p) => \r\n      p.resource === permission.resource && p.action === permission.action\r\n    )\r\n  );\r\n\r\n  return uniquePermissions;\r\n}\r\n\r\n// Filter data based on user permissions and territory\r\nexport function getDataAccessFilter(\r\n  user: UserWithPermissions,\r\n  resource: Resource\r\n) {\r\n  // Admin and director can access all data\r\n  if (user.role === Role.ADMIN || user.role === Role.DIRECTOR) {\r\n    return {}; // No filter - access all\r\n  }\r\n\r\n  // Check if user has VIEW_ALL permission for this resource\r\n  if (hasPermission(user, resource, Action.VIEW_ALL)) {\r\n    return {};\r\n  }\r\n\r\n  // Check if user has VIEW_TEAM permission\r\n  if (hasPermission(user, resource, Action.VIEW_TEAM)) {\r\n    const filters: any = {};\r\n    \r\n    // Managers can see data from their managed territories\r\n    if (user.role === Role.MANAGER && user.managedTerritories) {\r\n      const managedTerritoryIds = user.managedTerritories.map(t => t.id);\r\n      if (managedTerritoryIds.length > 0) {\r\n        filters.OR = [\r\n          { bdr: { territoryId: { in: managedTerritoryIds } } },\r\n          { bdrId: user.id } // Plus their own data\r\n        ];\r\n      }\r\n    }\r\n    // Team leads and others can see data from their territory\r\n    else if (user.territoryId) {\r\n      filters.OR = [\r\n        { bdr: { territoryId: user.territoryId } },\r\n        { bdrId: user.id } // Plus their own data\r\n      ];\r\n    }\r\n    \r\n    return filters;\r\n  }\r\n\r\n  // Default: only own data\r\n  return { bdrId: user.id };\r\n}\r\n\r\n// Permission constants for easy reference\r\nexport const PERMISSIONS = {\r\n  LEADS: {\r\n    CREATE: { resource: Resource.LEADS, action: Action.CREATE },\r\n    READ: { resource: Resource.LEADS, action: Action.READ },\r\n    UPDATE: { resource: Resource.LEADS, action: Action.UPDATE },\r\n    DELETE: { resource: Resource.LEADS, action: Action.DELETE },\r\n    VIEW_ALL: { resource: Resource.LEADS, action: Action.VIEW_ALL },\r\n    VIEW_TEAM: { resource: Resource.LEADS, action: Action.VIEW_TEAM },\r\n    EXPORT: { resource: Resource.LEADS, action: Action.EXPORT },\r\n  },\r\n  PIPELINE: {\r\n    CREATE: { resource: Resource.PIPELINE, action: Action.CREATE },\r\n    READ: { resource: Resource.PIPELINE, action: Action.READ },\r\n    UPDATE: { resource: Resource.PIPELINE, action: Action.UPDATE },\r\n    DELETE: { resource: Resource.PIPELINE, action: Action.DELETE },\r\n    VIEW_ALL: { resource: Resource.PIPELINE, action: Action.VIEW_ALL },\r\n    VIEW_TEAM: { resource: Resource.PIPELINE, action: Action.VIEW_TEAM },\r\n    EXPORT: { resource: Resource.PIPELINE, action: Action.EXPORT },\r\n  },\r\n  FINANCE: {\r\n    CREATE: { resource: Resource.FINANCE, action: Action.CREATE },\r\n    READ: { resource: Resource.FINANCE, action: Action.READ },\r\n    UPDATE: { resource: Resource.FINANCE, action: Action.UPDATE },\r\n    DELETE: { resource: Resource.FINANCE, action: Action.DELETE },\r\n    VIEW_ALL: { resource: Resource.FINANCE, action: Action.VIEW_ALL },\r\n    VIEW_TEAM: { resource: Resource.FINANCE, action: Action.VIEW_TEAM },\r\n    EXPORT: { resource: Resource.FINANCE, action: Action.EXPORT },\r\n  },\r\n  USERS: {\r\n    CREATE: { resource: Resource.USERS, action: Action.CREATE },\r\n    READ: { resource: Resource.USERS, action: Action.READ },\r\n    UPDATE: { resource: Resource.USERS, action: Action.UPDATE },\r\n    DELETE: { resource: Resource.USERS, action: Action.DELETE },\r\n    MANAGE: { resource: Resource.USERS, action: Action.MANAGE },\r\n    VIEW_ALL: { resource: Resource.USERS, action: Action.VIEW_ALL },\r\n    VIEW_TEAM: { resource: Resource.USERS, action: Action.VIEW_TEAM },\r\n  },\r\n  REPORTS: {\r\n    READ: { resource: Resource.REPORTS, action: Action.READ },\r\n    VIEW_ALL: { resource: Resource.REPORTS, action: Action.VIEW_ALL },\r\n    VIEW_TEAM: { resource: Resource.REPORTS, action: Action.VIEW_TEAM },\r\n    EXPORT: { resource: Resource.REPORTS, action: Action.EXPORT },\r\n  },\r\n  SETTINGS: {\r\n    READ: { resource: Resource.SETTINGS, action: Action.READ },\r\n    UPDATE: { resource: Resource.SETTINGS, action: Action.UPDATE },\r\n    MANAGE: { resource: Resource.SETTINGS, action: Action.MANAGE },\r\n  },\r\n  ACTIVITY_LOGS: {\r\n    CREATE: { resource: Resource.ACTIVITY_LOGS, action: Action.CREATE },\r\n    READ: { resource: Resource.ACTIVITY_LOGS, action: Action.READ },\r\n    VIEW_ALL: { resource: Resource.ACTIVITY_LOGS, action: Action.VIEW_ALL },\r\n    VIEW_TEAM: { resource: Resource.ACTIVITY_LOGS, action: Action.VIEW_TEAM },\r\n  },\r\n  DUPLICATES: {\r\n    READ: { resource: Resource.DUPLICATES, action: Action.READ },\r\n    MANAGE: { resource: Resource.DUPLICATES, action: Action.MANAGE },\r\n    VIEW_ALL: { resource: Resource.DUPLICATES, action: Action.VIEW_ALL },\r\n    VIEW_TEAM: { resource: Resource.DUPLICATES, action: Action.VIEW_TEAM },\r\n  },\r\n  TEMPLATES: {\r\n    CREATE: { resource: Resource.TEMPLATES, action: Action.CREATE },\r\n    READ: { resource: Resource.TEMPLATES, action: Action.READ },\r\n    UPDATE: { resource: Resource.TEMPLATES, action: Action.UPDATE },\r\n    DELETE: { resource: Resource.TEMPLATES, action: Action.DELETE },\r\n  },\r\n} as const;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\rate-limit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\react-query.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\realtime-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[542,545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[542,545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[734,737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[734,737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport Pusher from 'pusher-js';\r\n\r\nconst key = (process.env.NEXT_PUBLIC_PUSHER_KEY as string) || \"\";\r\nconst cluster = (process.env.NEXT_PUBLIC_PUSHER_CLUSTER as string) || 'eu';\r\n\r\n// Provide a no-op fallback when no key is configured so dev can run without Pusher\r\nconst createNoopChannel = () => ({\r\n  bind: () => {},\r\n  unbind: () => {},\r\n  unbind_all: () => {},\r\n  unsubscribe: () => {},\r\n});\r\n\r\nconst noopClient = {\r\n  subscribe: () => createNoopChannel(),\r\n};\r\n\r\nexport const pusherClient: { subscribe: (name: string) => any } = key\r\n  ? new Pusher(key, {\r\n      cluster,\r\n      channelAuthorization: {\r\n        endpoint: '/api/chat/pusher/auth',\r\n        transport: 'ajax',\r\n      },\r\n    })\r\n  : (noopClient as any);\r\n\r\nexport function subscribeToConversation(conversationId: string) {\r\n  return pusherClient.subscribe(`presence-conv-${conversationId}`);\r\n}\r\n\r\nexport function subscribeToUser(userId: string) {\r\n  return pusherClient.subscribe(`private-user-${userId}`);\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\reporting-helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[576,579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[576,579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[597,600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[597,600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bdrItems' is assigned a value but never used.","line":36,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3751,3754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3751,3754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3772,3775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3772,3775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":116,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":119,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3814,3817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3814,3817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7467,7470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7467,7470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7488,7491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7488,7491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7530,7533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7530,7533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10169,10172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10169,10172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10190,10193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10190,10193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10214,10217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10214,10217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12853,12856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12853,12856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12874,12877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12874,12877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":121,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":124,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12916,12919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12916,12919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":378,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14430,14433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14430,14433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":378,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14451,14454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14451,14454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":378,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14466,14469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14466,14469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":382,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14650,14653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14650,14653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":385,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14901,14904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14901,14904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":388,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15141,15144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15141,15144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":393,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15399,15402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15399,15402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { startOfWeek, endOfWeek, startOfMonth, endOfMonth, subWeeks, subMonths, format, addDays, subDays, startOfQuarter, endOfQuarter } from 'date-fns';\r\n\r\n// Re-export functions from new modules for backward compatibility\r\nexport { \r\n  detectAutomaticCallCompletions, \r\n  getAllCallCompletions \r\n} from './reporting/call-analytics';\r\n\r\nexport { \r\n  calculateKPIs \r\n} from './reporting/kpi-calculator';\r\n\r\n// Import functions we need internally\r\nimport { getAllCallCompletions } from './reporting/call-analytics';\r\n\r\n\r\nexport function calculateTeamPerformance(pipelineItems: any[], activityLogs: any[], financeEntries: any[] = []) {\r\n  // Get unique BDRs from the provided data\r\n  const bdrSet = new Set<string>();\r\n  pipelineItems.forEach(item => item.bdr?.name && bdrSet.add(item.bdr.name));\r\n  activityLogs.forEach(log => log.bdr?.name && bdrSet.add(log.bdr.name));\r\n  financeEntries.forEach(entry => entry.bdr?.name && bdrSet.add(entry.bdr.name));\r\n  \r\n  const allBDRs = Array.from(bdrSet);\r\n  \r\n  const activeBDRs = allBDRs.filter(bdr => {\r\n    const recentActivity = activityLogs.filter(log => \r\n      log.bdr?.name === bdr && \r\n      log.timestamp >= subDays(new Date(), 7)\r\n    );\r\n    return recentActivity.length > 0;\r\n  });\r\n  \r\n  // Calculate individual BDR performance\r\n  const bdrPerformance = allBDRs.map(bdr => {\r\n    const bdrItems = pipelineItems.filter(item => item.bdr?.name === bdr);\r\n    const bdrActivities = activityLogs.filter(log => log.bdr?.name === bdr);\r\n    const bdrFinanceEntries = financeEntries.filter(entry => entry.bdr?.name === bdr);\r\n    \r\n    // Use enhanced call completion logic for BDR performance\r\n    const allCallCompletions = getAllCallCompletions(pipelineItems, activityLogs, new Date(0), new Date());\r\n    const bdrCallCompletions = allCallCompletions.filter(completion => completion.bdr?.name === bdr);\r\n    const calls = bdrCallCompletions.length;\r\n    \r\n    const agreements = bdrActivities.filter(log => log.activityType === 'Agreement_Sent').length;\r\n    const lists = bdrActivities.filter(log => log.activityType === 'Partner_List_Sent').length;\r\n    // Count all sales generated by this BDR\r\n    const sales = bdrFinanceEntries.length;\r\n    \r\n    const score = calls * 1 + agreements * 3 + lists * 2 + sales * 5;\r\n    \r\n    return { bdr, score, calls, agreements, lists, sales };\r\n  });\r\n  \r\n  // Sort by performance score\r\n  bdrPerformance.sort((a, b) => b.score - a.score);\r\n  \r\n  const topPerformers = bdrPerformance.slice(0, 3).map(p => p.bdr);\r\n  const needsSupport = bdrPerformance.filter(p => p.score < 10 && p.calls < 5).map(p => p.bdr);\r\n  \r\n  // Calculate benchmark metrics using enhanced call completion logic\r\n  const allCallCompletions = getAllCallCompletions(pipelineItems, activityLogs, new Date(0), new Date());\r\n  const totalCalls = allCallCompletions.length;\r\n  const totalAgreements = activityLogs.filter(log => log.activityType === 'Agreement_Sent').length;\r\n  const totalLists = activityLogs.filter(log => log.activityType === 'Partner_List_Sent').length;\r\n  // Count all sales generated\r\n  const totalSales = financeEntries.length;\r\n  \r\n  return {\r\n    totalBDRs: allBDRs.length,\r\n    activeBDRs: activeBDRs.length,\r\n    topPerformers,\r\n    needsSupport,\r\n    benchmarkMetrics: {\r\n      avgCallsPerWeek: allBDRs.length > 0 ? Math.round((totalCalls / allBDRs.length) * 10) / 10 : 0,\r\n      avgAgreementsPerMonth: allBDRs.length > 0 ? Math.round((totalAgreements / allBDRs.length) * 10) / 10 : 0,\r\n      avgListsPerMonth: allBDRs.length > 0 ? Math.round((totalLists / allBDRs.length) * 10) / 10 : 0,\r\n      teamConversionRate: totalCalls > 0 ? Math.round((totalSales / totalCalls) * 100 * 100) / 100 : 0\r\n    }\r\n  };\r\n}\r\n\r\nexport function assessPipelineHealth(pipelineItems: any[], activityLogs: any[], currentDate: Date, financeEntries: any[] = []) {\r\n  const now = currentDate;\r\n  const nextWeekEnd = endOfWeek(addDays(now, 7), { weekStartsOn: 1 });\r\n  const next2WeeksEnd = endOfWeek(addDays(now, 14), { weekStartsOn: 1 });\r\n  \r\n  // Upcoming calls\r\n  const upcomingCallsNextWeek = pipelineItems.filter(item => \r\n    item.callDate && item.callDate > now && item.callDate <= nextWeekEnd\r\n  ).length;\r\n  \r\n  const upcomingCallsNext2Weeks = pipelineItems.filter(item => \r\n    item.callDate && item.callDate > nextWeekEnd && item.callDate <= next2WeeksEnd\r\n  ).length;\r\n  \r\n  const totalUpcomingCalls = pipelineItems.filter(item => \r\n    item.callDate && item.callDate > now\r\n  ).length;\r\n  \r\n  // Pending agreements\r\n  const proposalsAwaitingResponse = pipelineItems.filter(item => \r\n    item.status && item.status.includes('Proposal') && !item.status.includes('Agreement')\r\n  ).length;\r\n  \r\n  const agreementsAwaitingLists = pipelineItems.filter(item => \r\n    item.status && item.status.includes('Agreement') && !item.partnerListSentDate\r\n  ).length;\r\n  \r\n  const overduePartnerLists = pipelineItems.filter(item => \r\n    item.expectedCloseDate && item.expectedCloseDate < now && \r\n    !item.partnerListSentDate && item.status && item.status.includes('Agreement')\r\n  ).length;\r\n  \r\n  // Active lists out\r\n  const activeListsTotal = pipelineItems.filter(item => \r\n    item.partnerListSentDate && \r\n    !['Sold', 'List Out - Not Sold', 'Free Q&A Offered'].includes(item.status || '')\r\n  ).length;\r\n  \r\n  const activeLists = pipelineItems.filter(item => \r\n    item.partnerListSentDate && item.partnerListSize &&\r\n    !['Sold', 'List Out - Not Sold', 'Free Q&A Offered'].includes(item.status || '')\r\n  );\r\n  \r\n  const smallLists = activeLists.filter(item => item.partnerListSize! >= 3 && item.partnerListSize! <= 8).length;\r\n  const mediumLists = activeLists.filter(item => item.partnerListSize! >= 9 && item.partnerListSize! <= 15).length;\r\n  const largeLists = activeLists.filter(item => item.partnerListSize! >= 16).length;\r\n  \r\n  const averageListSize = activeLists.length > 0 ? \r\n    activeLists.reduce((sum, item) => sum + (item.partnerListSize || 0), 0) / activeLists.length : 0;\r\n  \r\n  // Conversion funnel - use enhanced call completion logic\r\n  const callsBooked = pipelineItems.filter(item => \r\n    item.category === 'Calls' && item.status === 'Call Booked'\r\n  ).length;\r\n  \r\n  const allCallCompletions = getAllCallCompletions(pipelineItems, activityLogs, new Date(0), new Date());\r\n  const callsConducted = allCallCompletions.length;\r\n  \r\n  const proposalsSent = activityLogs.filter(log => \r\n    log.activityType === 'Proposal_Sent'\r\n  ).length;\r\n  \r\n  const agreementsSigned = activityLogs.filter(log => \r\n    log.activityType === 'Agreement_Sent'\r\n  ).length;\r\n  \r\n  const listsSent = activityLogs.filter(log => \r\n    log.activityType === 'Partner_List_Sent'\r\n  ).length;\r\n  \r\n  // Count all sales generated, regardless of payment status\r\n  const salesGenerated = financeEntries.length;\r\n  \r\n  return {\r\n    upcomingCalls: {\r\n      nextWeek: upcomingCallsNextWeek,\r\n      next2Weeks: upcomingCallsNext2Weeks,\r\n      total: totalUpcomingCalls\r\n    },\r\n    pendingAgreements: {\r\n      proposalsAwaitingResponse,\r\n      agreementsAwaitingLists,\r\n      overduePartnerLists\r\n    },\r\n    activeListsOut: {\r\n      total: activeListsTotal,\r\n      smallLists,\r\n      mediumLists,\r\n      largeLists,\r\n      averageListSize: Math.round(averageListSize * 10) / 10\r\n    },\r\n    conversionFunnel: {\r\n      callsBooked,\r\n      callsConducted,\r\n      proposalsSent,\r\n      agreementsSigned,\r\n      listsSent,\r\n      salesGenerated\r\n    }\r\n  };\r\n}\r\n\r\nexport function calculateTrends(pipelineItems: any[], activityLogs: any[], currentDate: Date, financeEntries: any[] = []) {\r\n  const now = currentDate;\r\n  \r\n  // Weekly call volume trend (last 4 weeks) - use enhanced call completion logic\r\n  const weeklyCallVolume = [];\r\n  for (let i = 3; i >= 0; i--) {\r\n    const weekStart = startOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\r\n    const weekEnd = endOfWeek(subWeeks(now, i), { weekStartsOn: 1 });\r\n    \r\n    const callCompletions = getAllCallCompletions(pipelineItems, activityLogs, weekStart, weekEnd);\r\n    const calls = callCompletions.length;\r\n    \r\n    const target = 40; // Target calls per week\r\n    const variance = ((calls - target) / target) * 100;\r\n    \r\n    weeklyCallVolume.push({\r\n      week: format(weekStart, 'MMM dd'),\r\n      calls,\r\n      target,\r\n      variance: Math.round(variance)\r\n    });\r\n  }\r\n  \r\n  // Monthly agreements trend (last 4 months)\r\n  const monthlyAgreements = [];\r\n  for (let i = 3; i >= 0; i--) {\r\n    const monthStart = startOfMonth(subMonths(now, i));\r\n    const monthEnd = endOfMonth(subMonths(now, i));\r\n    \r\n    const agreements = activityLogs.filter(log => \r\n      log.activityType === 'Agreement_Sent' && \r\n      log.timestamp >= monthStart && log.timestamp <= monthEnd\r\n    ).length;\r\n    \r\n    const target = 20; // Target agreements per month\r\n    const variance = ((agreements - target) / target) * 100;\r\n    \r\n    monthlyAgreements.push({\r\n      month: format(monthStart, 'MMM yyyy'),\r\n      agreements,\r\n      target,\r\n      variance: Math.round(variance)\r\n    });\r\n  }\r\n  \r\n  // Quarterly lists out trend (current and previous quarters) - use finance entries for sales data\r\n  const quarterlyListsOut = [];\r\n  for (let i = 1; i >= 0; i--) {\r\n    const quarterStart = startOfQuarter(subMonths(now, i * 3));\r\n    const quarterEnd = endOfQuarter(subMonths(now, i * 3));\r\n    \r\n    const lists = activityLogs.filter(log => \r\n      log.activityType === 'Partner_List_Sent' && \r\n      log.timestamp >= quarterStart && log.timestamp <= quarterEnd\r\n    ).length;\r\n    \r\n    // Count all sales generated in the quarter\r\n    const quarterSales = financeEntries.filter(entry => \r\n      entry.createdAt >= quarterStart && entry.createdAt <= quarterEnd\r\n    );\r\n    const conversions = quarterSales.length;\r\n    \r\n    const revenue = quarterSales.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n    \r\n    quarterlyListsOut.push({\r\n      quarter: `Q${Math.floor((quarterStart.getMonth()) / 3) + 1} ${quarterStart.getFullYear()}`,\r\n      lists,\r\n      conversions,\r\n      revenue\r\n    });\r\n  }\r\n  \r\n  return {\r\n    weeklyCallVolume,\r\n    monthlyAgreements,\r\n    quarterlyListsOut\r\n  };\r\n}\r\n\r\nexport function identifyCriticalActions(pipelineItems: any[], activityLogs: any[], teamPerformance: any, currentDate: Date): Array<{\r\n  priority: 'urgent' | 'high' | 'medium';\r\n  category: 'calls' | 'agreements' | 'lists' | 'team';\r\n  action: string;\r\n  assignedTo?: string;\r\n  metric?: number;\r\n  deadline?: string;\r\n}> {\r\n  const actions: Array<{\r\n    priority: 'urgent' | 'high' | 'medium';\r\n    category: 'calls' | 'agreements' | 'lists' | 'team';\r\n    action: string;\r\n    assignedTo?: string;\r\n    metric?: number;\r\n    deadline?: string;\r\n  }> = [];\r\n  const now = currentDate;\r\n  \r\n  // Check for overdue partner lists\r\n  const overdueCount = pipelineItems.filter(item => \r\n    item.expectedCloseDate && item.expectedCloseDate < now && \r\n    !item.partnerListSentDate && item.status && item.status.includes('Agreement')\r\n  ).length;\r\n  \r\n  if (overdueCount > 0) {\r\n    actions.push({\r\n      priority: 'urgent' as const,\r\n      category: 'lists' as const,\r\n      action: `Send ${overdueCount} overdue partner lists immediately`,\r\n      metric: overdueCount,\r\n      deadline: 'Today'\r\n    });\r\n  }\r\n  \r\n  // Check for low call volume - use enhanced call completion logic\r\n  const thisWeekCallCompletions = getAllCallCompletions(pipelineItems, activityLogs, startOfWeek(now, { weekStartsOn: 1 }), now);\r\n  const thisWeekCalls = thisWeekCallCompletions.length;\r\n  \r\n  if (thisWeekCalls < 25) {\r\n    actions.push({\r\n      priority: 'high' as const,\r\n      category: 'calls' as const,\r\n      action: 'Boost call volume - current week significantly below target',\r\n      metric: thisWeekCalls,\r\n      deadline: 'End of week'\r\n    });\r\n  }\r\n  \r\n  // Check for team members needing support\r\n  if (teamPerformance.needsSupport.length > 0) {\r\n    actions.push({\r\n      priority: 'medium' as const,\r\n      category: 'team' as const,\r\n      action: `Provide support to underperforming BDRs: ${teamPerformance.needsSupport.join(', ')}`,\r\n      metric: teamPerformance.needsSupport.length,\r\n      deadline: 'This week'\r\n    });\r\n  }\r\n  \r\n  // Check for upcoming calls without enough pipeline\r\n  const upcomingCalls = pipelineItems.filter(item => \r\n    item.callDate && item.callDate > now && item.callDate <= addDays(now, 7)\r\n  ).length;\r\n  \r\n  if (upcomingCalls < 30) {\r\n    actions.push({\r\n      priority: 'high' as const,\r\n      category: 'calls' as const,\r\n      action: 'Schedule more calls for next week to maintain pipeline',\r\n      metric: upcomingCalls,\r\n      deadline: 'End of week'\r\n    });\r\n  }\r\n  \r\n  return actions.sort((a, b) => {\r\n    const priorityOrder = { urgent: 3, high: 2, medium: 1 };\r\n    return priorityOrder[b.priority] - priorityOrder[a.priority];\r\n  });\r\n}\r\n\r\nexport function calculateFinancialSummary(pipelineItems: any[], activityLogs: any[], currentDate: Date, financeEntries: any[] = []) {\r\n  const now = currentDate;\r\n  const thisMonthStart = startOfMonth(now);\r\n  const thisQuarterStart = startOfQuarter(now);\r\n  \r\n  // Use all finance entries for revenue calculations\r\n  const monthlyRevenue = financeEntries\r\n    .filter(entry => entry.createdAt >= thisMonthStart)\r\n    .reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n  \r\n  const quarterlyRevenue = financeEntries\r\n    .filter(entry => entry.createdAt >= thisQuarterStart)\r\n    .reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n  \r\n  const totalRevenue = financeEntries.reduce((sum, entry) => sum + (entry.gbpAmount || 0), 0);\r\n  \r\n  const activeBDRs = Array.from(new Set(pipelineItems.map(item => item.bdr).filter(Boolean))).length;\r\n  \r\n  // Use enhanced call completion logic for financial metrics\r\n  const allCallCompletions = getAllCallCompletions(pipelineItems, activityLogs, new Date(0), new Date());\r\n  const totalCalls = allCallCompletions.length;\r\n  \r\n  const totalLists = activityLogs.filter(log => log.activityType === 'Partner_List_Sent').length;\r\n  \r\n  return {\r\n    monthlyRevenue,\r\n    quarterlyRevenue,\r\n    revenuePerBDR: activeBDRs > 0 ? Math.round(totalRevenue / activeBDRs) : 0,\r\n    revenuePerCall: totalCalls > 0 ? Math.round(totalRevenue / totalCalls) : 0,\r\n    revenuePerList: totalLists > 0 ? Math.round(totalRevenue / totalLists) : 0,\r\n    forecastAccuracy: 85 // Would require historical forecasting data to calculate\r\n  };\r\n}\r\n\r\nexport function generatePredictiveInsights(pipelineItems: any[], activityLogs: any[], trends: any, currentDate: Date) {\r\n  const now = currentDate;\r\n  \r\n  // Simple predictions based on current trends\r\n  const avgWeeklyCalls = trends.weeklyCallVolume.reduce((sum: number, week: any) => sum + week.calls, 0) / trends.weeklyCallVolume.length;\r\n  const expectedCallsNextWeek = Math.round(avgWeeklyCalls * 1.1); // Slight optimistic projection\r\n  \r\n  const avgMonthlyAgreements = trends.monthlyAgreements.reduce((sum: number, month: any) => sum + month.agreements, 0) / trends.monthlyAgreements.length;\r\n  const expectedAgreementsNextMonth = Math.round(avgMonthlyAgreements * 1.05);\r\n  \r\n  const avgQuarterlyRevenue = trends.quarterlyListsOut.reduce((sum: number, quarter: any) => sum + quarter.revenue, 0) / trends.quarterlyListsOut.length;\r\n  const expectedRevenueNextQuarter = Math.round(avgQuarterlyRevenue * 1.1);\r\n  \r\n  // Risk factors\r\n  const riskFactors = [];\r\n  const lowCallWeeks = trends.weeklyCallVolume.filter((week: any) => week.calls < week.target * 0.8).length;\r\n  if (lowCallWeeks > 1) {\r\n    riskFactors.push('Declining call volume trend could impact future pipeline');\r\n  }\r\n  \r\n  const upcomingCalls = pipelineItems.filter(item => \r\n    item.callDate && item.callDate > now && item.callDate <= addDays(now, 14)\r\n  ).length;\r\n  if (upcomingCalls < 40) {\r\n    riskFactors.push('Insufficient upcoming calls scheduled for next 2 weeks');\r\n  }\r\n  \r\n  // Opportunities\r\n  const opportunities = [];\r\n  const strongPerformers: { [key: string]: number } = {};\r\n  const recentLogs = activityLogs.filter(log => log.timestamp >= subDays(now, 30));\r\n  for (const log of recentLogs) {\r\n    if (log.bdr) {\r\n      strongPerformers[log.bdr] = (strongPerformers[log.bdr] || 0) + 1;\r\n    }\r\n  }\r\n  \r\n  const topBDR = Object.entries(strongPerformers).sort(([,a], [,b]) => b - a)[0];\r\n  if (topBDR) {\r\n    opportunities.push(`${topBDR[0]} showing strong activity - consider replicating their approach`);\r\n  }\r\n  \r\n  return {\r\n    expectedCallsNextWeek,\r\n    expectedAgreementsNextMonth,\r\n    expectedRevenueNextQuarter,\r\n    riskFactors,\r\n    opportunities\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\reporting\\call-analytics.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addDays' is defined but never used.","line":1,"column":89,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":96},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[980,983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[980,983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1005,1008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1005,1008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2353,2356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2353,2356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2378,2381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2378,2381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3532,3535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3532,3535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3557,3560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3557,3560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5354,5357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5354,5357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5379,5382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5379,5382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7553,7556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7553,7556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":220,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7578,7581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7578,7581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { startOfWeek, endOfWeek, startOfMonth, endOfMonth, subWeeks, subMonths, format, addDays, subDays } from 'date-fns';\r\n\r\n/**\r\n * Call Analytics Module\r\n * Handles all call-related calculations and analysis\r\n */\r\n\r\n// Type definitions for call analytics\r\nexport interface CallCompletion {\r\n  id: number;\r\n  bdr: string;\r\n  timestamp: Date;\r\n  pipelineItemId?: number;\r\n  leadId?: number;\r\n  previousStatus?: string;\r\n  newStatus?: string;\r\n  description: string;\r\n  activityType: string;\r\n  isAutomatic?: boolean;\r\n}\r\n\r\nexport interface CallMetrics {\r\n  total: number;\r\n  byBdr: { [bdr: string]: number };\r\n  byPeriod: { [period: string]: number };\r\n  conversionRate: number;\r\n  averageCallsPerBdr: number;\r\n}\r\n\r\n/**\r\n * Detects automatic call completions based on status transitions\r\n * A call is considered automatically completed when status changes from \"Call Booked\" to any valid completion status\r\n */\r\nexport function detectAutomaticCallCompletions(\r\n  pipelineItems: any[], \r\n  activityLogs: any[], \r\n  startDate: Date, \r\n  endDate: Date\r\n): CallCompletion[] {\r\n  const completedCalls: CallCompletion[] = [];\r\n  \r\n  // Get all pipeline items that had status changes during the period\r\n  const statusChangeLogs = activityLogs.filter(log => \r\n    log.activityType === 'Status_Change' &&\r\n    log.timestamp >= startDate && \r\n    log.timestamp <= endDate &&\r\n    log.previousStatus === 'Call Booked' &&\r\n    log.newStatus && \r\n    log.newStatus !== 'Call Booked' &&\r\n    !['no show', 'rescheduled', 'No Show', 'Rescheduled'].includes(log.newStatus.toLowerCase())\r\n  );\r\n  \r\n  // For each status change from \"Call Booked\" to a valid completion status\r\n  for (const log of statusChangeLogs) {\r\n    completedCalls.push({\r\n      id: log.id,\r\n      bdr: log.bdr,\r\n      timestamp: log.timestamp,\r\n      pipelineItemId: log.pipelineItemId,\r\n      leadId: log.leadId,\r\n      previousStatus: log.previousStatus,\r\n      newStatus: log.newStatus,\r\n      description: `Automatic call completion: ${log.previousStatus} → ${log.newStatus}`,\r\n      activityType: 'Call_Completed',\r\n      isAutomatic: true\r\n    });\r\n  }\r\n  \r\n  return completedCalls;\r\n}\r\n\r\n/**\r\n * Gets all call completions (both manual and automatic)\r\n * Combines manual call completion logs with detected automatic completions\r\n */\r\nexport function getAllCallCompletions(\r\n  pipelineItems: any[], \r\n  activityLogs: any[], \r\n  startDate: Date, \r\n  endDate: Date\r\n): CallCompletion[] {\r\n  // Get manual call completions (existing logic)\r\n  const manualCallCompletions = activityLogs.filter(log => \r\n    log.activityType === 'Call_Completed' && \r\n    log.timestamp >= startDate && log.timestamp <= endDate\r\n  );\r\n  \r\n  // Get automatic call completions (new logic)\r\n  const automaticCallCompletions = detectAutomaticCallCompletions(pipelineItems, activityLogs, startDate, endDate);\r\n  \r\n  // Combine both types of call completions\r\n  const allCallCompletions = [...manualCallCompletions, ...automaticCallCompletions];\r\n  \r\n  // Remove duplicates based on pipelineItemId and timestamp (in case both manual and automatic exist)\r\n  const uniqueCallCompletions = allCallCompletions.filter((completion, index, self) => \r\n    index === self.findIndex(c => \r\n      c.pipelineItemId === completion.pipelineItemId && \r\n      Math.abs(c.timestamp.getTime() - completion.timestamp.getTime()) < 60000 // Within 1 minute\r\n    )\r\n  );\r\n  \r\n  return uniqueCallCompletions;\r\n}\r\n\r\n/**\r\n * Calculates comprehensive call metrics\r\n */\r\nexport function calculateCallMetrics(\r\n  pipelineItems: any[], \r\n  activityLogs: any[], \r\n  startDate: Date, \r\n  endDate: Date\r\n): CallMetrics {\r\n  const callCompletions = getAllCallCompletions(pipelineItems, activityLogs, startDate, endDate);\r\n  \r\n  // Count calls by BDR\r\n  const callsByBdr: { [bdr: string]: number } = {};\r\n  callCompletions.forEach(call => {\r\n    if (call.bdr) {\r\n      callsByBdr[call.bdr] = (callsByBdr[call.bdr] || 0) + 1;\r\n    }\r\n  });\r\n  \r\n  // Count calls by day/week/month\r\n  const callsByPeriod: { [period: string]: number } = {};\r\n  callCompletions.forEach(call => {\r\n    const day = format(call.timestamp, 'yyyy-MM-dd');\r\n    const week = format(startOfWeek(call.timestamp, { weekStartsOn: 1 }), 'yyyy-MM-dd');\r\n    const month = format(call.timestamp, 'yyyy-MM');\r\n    \r\n    callsByPeriod[`day-${day}`] = (callsByPeriod[`day-${day}`] || 0) + 1;\r\n    callsByPeriod[`week-${week}`] = (callsByPeriod[`week-${week}`] || 0) + 1;\r\n    callsByPeriod[`month-${month}`] = (callsByPeriod[`month-${month}`] || 0) + 1;\r\n  });\r\n  \r\n  // Calculate conversion rate (calls that led to agreements)\r\n  const agreements = activityLogs.filter(log => \r\n    log.activityType === 'Agreement_Sent' && \r\n    log.timestamp >= startDate && \r\n    log.timestamp <= endDate\r\n  );\r\n  \r\n  const conversionRate = callCompletions.length > 0 ? (agreements.length / callCompletions.length) * 100 : 0;\r\n  \r\n  // Calculate average calls per BDR\r\n  const activeBdrs = Object.keys(callsByBdr).length;\r\n  const averageCallsPerBdr = activeBdrs > 0 ? callCompletions.length / activeBdrs : 0;\r\n  \r\n  return {\r\n    total: callCompletions.length,\r\n    byBdr: callsByBdr,\r\n    byPeriod: callsByPeriod,\r\n    conversionRate,\r\n    averageCallsPerBdr,\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates call volume trends over different time periods\r\n */\r\nexport function calculateCallVolumeTrends(\r\n  pipelineItems: any[], \r\n  activityLogs: any[], \r\n  currentDate: Date\r\n) {\r\n  const now = currentDate;\r\n  const thisWeekStart = startOfWeek(now, { weekStartsOn: 1 });\r\n  const thisWeekEnd = endOfWeek(now, { weekStartsOn: 1 });\r\n  const lastWeekStart = startOfWeek(subWeeks(now, 1), { weekStartsOn: 1 });\r\n  const lastWeekEnd = endOfWeek(subWeeks(now, 1), { weekStartsOn: 1 });\r\n  const thisMonthStart = startOfMonth(now);\r\n  const thisMonthEnd = endOfMonth(now);\r\n  const lastMonthStart = startOfMonth(subMonths(now, 1));\r\n  const lastMonthEnd = endOfMonth(subMonths(now, 1));\r\n  \r\n  // Get call completions for different periods\r\n  const thisWeekCalls = getAllCallCompletions(pipelineItems, activityLogs, thisWeekStart, thisWeekEnd);\r\n  const lastWeekCalls = getAllCallCompletions(pipelineItems, activityLogs, lastWeekStart, lastWeekEnd);\r\n  const thisMonthCalls = getAllCallCompletions(pipelineItems, activityLogs, thisMonthStart, thisMonthEnd);\r\n  const lastMonthCalls = getAllCallCompletions(pipelineItems, activityLogs, lastMonthStart, lastMonthEnd);\r\n  \r\n  // Calculate trends\r\n  const weeklyTrend = lastWeekCalls.length > 0 \r\n    ? ((thisWeekCalls.length - lastWeekCalls.length) / lastWeekCalls.length) * 100 \r\n    : thisWeekCalls.length > 0 ? 100 : 0;\r\n    \r\n  const monthlyTrend = lastMonthCalls.length > 0 \r\n    ? ((thisMonthCalls.length - lastMonthCalls.length) / lastMonthCalls.length) * 100 \r\n    : thisMonthCalls.length > 0 ? 100 : 0;\r\n  \r\n  return {\r\n    thisWeek: {\r\n      count: thisWeekCalls.length,\r\n      period: `${format(thisWeekStart, 'MMM d')} - ${format(thisWeekEnd, 'MMM d')}`,\r\n    },\r\n    lastWeek: {\r\n      count: lastWeekCalls.length,\r\n      period: `${format(lastWeekStart, 'MMM d')} - ${format(lastWeekEnd, 'MMM d')}`,\r\n    },\r\n    thisMonth: {\r\n      count: thisMonthCalls.length,\r\n      period: format(thisMonthStart, 'MMMM yyyy'),\r\n    },\r\n    lastMonth: {\r\n      count: lastMonthCalls.length,\r\n      period: format(lastMonthStart, 'MMMM yyyy'),\r\n    },\r\n    trends: {\r\n      weekly: weeklyTrend,\r\n      monthly: monthlyTrend,\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Identifies call-related performance issues and opportunities\r\n */\r\nexport function analyzeCallPerformance(\r\n  pipelineItems: any[], \r\n  activityLogs: any[], \r\n  kpiTargets: { [key: string]: number },\r\n  currentDate: Date\r\n) {\r\n  const callMetrics = calculateCallMetrics(pipelineItems, activityLogs, subDays(currentDate, 30), currentDate);\r\n  const trends = calculateCallVolumeTrends(pipelineItems, activityLogs, currentDate);\r\n  \r\n  const issues: string[] = [];\r\n  const opportunities: string[] = [];\r\n  \r\n  // Check if call volume is below targets\r\n  const weeklyTarget = kpiTargets.weeklyCalls || 10;\r\n  if (trends.thisWeek.count < weeklyTarget) {\r\n    issues.push(`Weekly call volume (${trends.thisWeek.count}) is below target (${weeklyTarget})`);\r\n  }\r\n  \r\n  // Check conversion rate\r\n  if (callMetrics.conversionRate < 20) {\r\n    issues.push(`Call conversion rate (${callMetrics.conversionRate.toFixed(1)}%) is below 20%`);\r\n  } else if (callMetrics.conversionRate > 30) {\r\n    opportunities.push(`Strong call conversion rate (${callMetrics.conversionRate.toFixed(1)}%)`);\r\n  }\r\n  \r\n  // Check for declining trends\r\n  if (trends.trends.weekly < -10) {\r\n    issues.push(`Weekly calls declining by ${Math.abs(trends.trends.weekly).toFixed(1)}%`);\r\n  }\r\n  \r\n  if (trends.trends.monthly < -10) {\r\n    issues.push(`Monthly calls declining by ${Math.abs(trends.trends.monthly).toFixed(1)}%`);\r\n  }\r\n  \r\n  // Check for improving trends\r\n  if (trends.trends.weekly > 20) {\r\n    opportunities.push(`Weekly calls improving by ${trends.trends.weekly.toFixed(1)}%`);\r\n  }\r\n  \r\n  return {\r\n    metrics: callMetrics,\r\n    trends,\r\n    issues,\r\n    opportunities,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\reporting\\kpi-calculator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1300,1303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1300,1303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1325,1328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1325,1328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3692,3695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3692,3695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3716,3719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3716,3719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5707,5710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5707,5710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5731,5734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5731,5734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8112,8115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8112,8115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8136,8139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8136,8139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8162,8165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8162,8165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8912,8915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8912,8915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":256,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8936,8939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8936,8939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9011,9014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9011,9014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { startOfWeek, endOfWeek, startOfMonth, endOfMonth, subWeeks, subMonths, subDays } from 'date-fns';\r\nimport { getAllCallCompletions } from './call-analytics';\r\n\r\n/**\r\n * KPI Calculator Module\r\n * Handles all KPI calculations and target tracking\r\n */\r\n\r\n// Type definitions for KPI calculations\r\nexport interface KPIMetric {\r\n  current: number;\r\n  target: number;\r\n  status: 'excellent' | 'good' | 'needs_attention' | 'critical';\r\n}\r\n\r\nexport interface ConversionMetric {\r\n  current: number; // percentage\r\n  target: number; // percentage\r\n  status: 'excellent' | 'good' | 'needs_attention' | 'critical';\r\n}\r\n\r\nexport interface PeriodKPIs {\r\n  callVolume: KPIMetric;\r\n  agreements: KPIMetric;\r\n  listsOut: KPIMetric;\r\n  sales?: KPIMetric;\r\n  conversionRate?: ConversionMetric;\r\n}\r\n\r\nexport interface KPITargets {\r\n  weeklyCalls?: number;\r\n  weeklyAgreements?: number;\r\n  weeklyListsOut?: number;\r\n  weeklySales?: number;\r\n  monthlyCalls?: number;\r\n  monthlyAgreements?: number;\r\n  monthlyListsOut?: number;\r\n  monthlySales?: number;\r\n}\r\n\r\nexport interface TeamTargets {\r\n  calls: number;\r\n  agreements: number;\r\n  listsOut: number;\r\n  sales: number;\r\n}\r\n\r\n/**\r\n * Calculates team targets based on active BDRs and individual targets\r\n */\r\nexport function calculateTeamTargets(\r\n  pipelineItems: any[], \r\n  activityLogs: any[], \r\n  kpiTargets: KPITargets\r\n): { weekly: TeamTargets; monthly: TeamTargets; activeBdrs: string[] } {\r\n  // Get unique BDRs for team calculation\r\n  const bdrSet = new Set<string>();\r\n  pipelineItems.forEach(item => item.bdr && bdrSet.add(item.bdr));\r\n  activityLogs.forEach(log => log.bdr && bdrSet.add(log.bdr));\r\n  const allBDRs = Array.from(bdrSet);\r\n  \r\n  // Filter for active BDRs (those with activity in the last 7 days)\r\n  const activeBDRs = allBDRs.filter(bdr => {\r\n    const recentActivity = activityLogs.filter(log => \r\n      log.bdr === bdr && \r\n      log.timestamp >= subDays(new Date(), 7)\r\n    );\r\n    return recentActivity.length > 0;\r\n  });\r\n  \r\n  // Calculate team targets based on number of active BDRs\r\n  const teamWeeklyTargets: TeamTargets = {\r\n    calls: activeBDRs.length * (kpiTargets.weeklyCalls || 10),\r\n    agreements: activeBDRs.length * (kpiTargets.weeklyAgreements || 3),\r\n    listsOut: activeBDRs.length * (kpiTargets.weeklyListsOut || 1),\r\n    sales: activeBDRs.length * (kpiTargets.weeklySales || 0.5)\r\n  };\r\n  \r\n  const teamMonthlyTargets: TeamTargets = {\r\n    calls: activeBDRs.length * (kpiTargets.monthlyCalls || 40),\r\n    agreements: activeBDRs.length * (kpiTargets.monthlyAgreements || 12),\r\n    listsOut: activeBDRs.length * (kpiTargets.monthlyListsOut || 4),\r\n    sales: activeBDRs.length * (kpiTargets.monthlySales || 2)\r\n  };\r\n\r\n  return {\r\n    weekly: teamWeeklyTargets,\r\n    monthly: teamMonthlyTargets,\r\n    activeBdrs: activeBDRs,\r\n  };\r\n}\r\n\r\n/**\r\n * Detects sales indicators in text\r\n */\r\nexport function detectSalesIndicators(text: string): boolean {\r\n  if (!text) return false;\r\n  const lowerText = text.toLowerCase();\r\n  \r\n  // Check for sales indicators\r\n  const salesKeywords = ['sold', 'deal', 'purchase', 'bought', 'payment', 'invoice', 'revenue'];\r\n  const currencySymbols = ['£', '$', '€'];\r\n  \r\n  // Check for sales keywords\r\n  const hasSalesKeywords = salesKeywords.some(keyword => lowerText.includes(keyword));\r\n  \r\n  // Check for currency symbols\r\n  const hasCurrencySymbols = currencySymbols.some(symbol => text.includes(symbol));\r\n  \r\n  return hasSalesKeywords || hasCurrencySymbols;\r\n}\r\n\r\n/**\r\n * Calculates KPI for a specific period and activity type\r\n */\r\nexport function calculateKPIForPeriod(\r\n  activityType: string,\r\n  startDate: Date,\r\n  endDate: Date,\r\n  target: number,\r\n  pipelineItems: any[],\r\n  activityLogs: any[]\r\n): KPIMetric {\r\n  let count: number;\r\n\r\n  if (activityType === 'Call_Completed') {\r\n    // Use enhanced call completion logic\r\n    const callCompletions = getAllCallCompletions(pipelineItems, activityLogs, startDate, endDate);\r\n    count = callCompletions.length;\r\n  } else if (activityType === 'Agreement_Sent') {\r\n    // Prefer pipeline agreementDate if present, fallback to activity logs\r\n    const pipelineCount = pipelineItems.filter((item) => item.agreementDate && item.agreementDate >= startDate && item.agreementDate <= endDate).length;\r\n    const logCount = activityLogs.filter((log) => log.activityType === 'Agreement_Sent' && log.timestamp >= startDate && log.timestamp <= endDate).length;\r\n    count = Math.max(pipelineCount, logCount);\r\n  } else if (activityType === 'Partner_List_Sent') {\r\n    // Prefer pipeline partnerListSentDate if present, fallback to activity logs\r\n    const pipelineCount = pipelineItems.filter((item) => item.partnerListSentDate && item.partnerListSentDate >= startDate && item.partnerListSentDate <= endDate).length;\r\n    const logCount = activityLogs.filter((log) => log.activityType === 'Partner_List_Sent' && log.timestamp >= startDate && log.timestamp <= endDate).length;\r\n    count = Math.max(pipelineCount, logCount);\r\n  } else {\r\n    // Use existing logic for other activity types\r\n    count = activityLogs.filter(\r\n      (log) => log.activityType === activityType && log.timestamp >= startDate && log.timestamp <= endDate\r\n    ).length;\r\n  }\r\n  \r\n  const status = count >= target * 1.25 ? 'excellent' : \r\n                 count >= target ? 'good' : \r\n                 count >= target * 0.5 ? 'needs_attention' : 'critical';\r\n  \r\n  return {\r\n    current: count,\r\n    target: target,\r\n    status: status as 'excellent' | 'good' | 'needs_attention' | 'critical'\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates conversion rate for a specific period\r\n */\r\nexport function calculateConversionForPeriod(\r\n  startDate: Date,\r\n  endDate: Date,\r\n  pipelineItems: any[],\r\n  activityLogs: any[]\r\n): ConversionMetric {\r\n  // Use enhanced call completion logic for conversion rate calculation\r\n  const callsInPeriod = getAllCallCompletions(pipelineItems, activityLogs, startDate, endDate).length;\r\n  \r\n  // Track unique pipeline items that have sales indicators to avoid double-counting\r\n  const salesPipelineItems = new Set<number>();\r\n  \r\n  // Check pipeline items for sales indicators in notes\r\n  // Only count if the item was updated during the period AND has sales indicators\r\n  pipelineItems.forEach(item => {\r\n    if (item.notes && detectSalesIndicators(item.notes)) {\r\n      // Only count if the item was updated during the period\r\n      if (item.lastUpdated >= startDate && item.lastUpdated <= endDate) {\r\n        salesPipelineItems.add(item.id);\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Check activity logs for sales indicators in notes\r\n  // Only count if the activity log was created during the period AND has sales indicators\r\n  activityLogs.forEach(log => {\r\n    if (log.notes && detectSalesIndicators(log.notes)) {\r\n      // Only count if the activity log was created during the period\r\n      if (log.timestamp >= startDate && log.timestamp <= endDate) {\r\n        // If this activity log is associated with a pipeline item, add it to our set\r\n        if (log.pipelineItemId) {\r\n          salesPipelineItems.add(log.pipelineItemId);\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Also include pipeline items with 'Sold' status that were updated during the period\r\n  pipelineItems.forEach(item => {\r\n    if (item.status === 'Sold' && \r\n        item.lastUpdated >= startDate && \r\n        item.lastUpdated <= endDate) {\r\n      salesPipelineItems.add(item.id);\r\n    }\r\n  });\r\n  \r\n  const salesInPeriod = salesPipelineItems.size;\r\n  \r\n  const conversionRate = callsInPeriod > 0 ? (salesInPeriod / callsInPeriod) * 100 : 0;\r\n  \r\n  const status = conversionRate >= 25 ? 'excellent' : \r\n                 conversionRate >= 18 ? 'good' : \r\n                 conversionRate >= 12 ? 'needs_attention' : 'critical';\r\n  \r\n  return {\r\n    current: Math.round(conversionRate * 100) / 100,\r\n    target: 20,\r\n    status: status as 'excellent' | 'good' | 'needs_attention' | 'critical'\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates sales for a specific period using finance entries\r\n */\r\nexport function calculateSalesForPeriod(\r\n  startDate: Date,\r\n  endDate: Date,\r\n  target: number,\r\n  pipelineItems: any[],\r\n  activityLogs: any[],\r\n  financeEntries: any[] = []\r\n): KPIMetric {\r\n  // Count all sales generated in the period based on invoice date, regardless of payment status\r\n  const salesInPeriod = financeEntries.filter(entry => \r\n    entry.invoiceDate && \r\n    entry.invoiceDate >= startDate && \r\n    entry.invoiceDate <= endDate\r\n  ).length;\r\n  \r\n  const status = salesInPeriod >= target * 1.25 ? 'excellent' : \r\n                 salesInPeriod >= target ? 'good' : \r\n                 salesInPeriod >= target * 0.5 ? 'needs_attention' : 'critical';\r\n  \r\n  return {\r\n    current: salesInPeriod,\r\n    target: target,\r\n    status: status as 'excellent' | 'good' | 'needs_attention' | 'critical'\r\n  };\r\n}\r\n\r\n/**\r\n * Main KPI calculation function\r\n */\r\nexport function calculateKPIs(\r\n  pipelineItems: any[],\r\n  activityLogs: any[],\r\n  kpiTargets: KPITargets,\r\n  currentDate: Date,\r\n  financeEntries: any[] = []\r\n) {\r\n  const now = currentDate;\r\n  const thisWeekStart = startOfWeek(now, { weekStartsOn: 1 });\r\n  const thisWeekEnd = endOfWeek(now, { weekStartsOn: 1 });\r\n  const lastWeekStart = startOfWeek(subWeeks(now, 1), { weekStartsOn: 1 });\r\n  const lastWeekEnd = endOfWeek(subWeeks(now, 1), { weekStartsOn: 1 });\r\n  const thisMonthStart = startOfMonth(now);\r\n  const thisMonthEnd = endOfMonth(now);\r\n  const lastMonthStart = startOfMonth(subMonths(now, 1));\r\n  const lastMonthEnd = endOfMonth(subMonths(now, 1));\r\n  \r\n  // Calculate team targets\r\n  const { weekly: teamWeeklyTargets, monthly: teamMonthlyTargets } = calculateTeamTargets(\r\n    pipelineItems,\r\n    activityLogs,\r\n    kpiTargets\r\n  );\r\n\r\n  return {\r\n    thisWeek: {\r\n      callVolume: calculateKPIForPeriod('Call_Completed', thisWeekStart, thisWeekEnd, teamWeeklyTargets.calls, pipelineItems, activityLogs),\r\n      agreements: calculateKPIForPeriod('Agreement_Sent', thisWeekStart, thisWeekEnd, teamWeeklyTargets.agreements, pipelineItems, activityLogs),\r\n      listsOut: calculateKPIForPeriod('Partner_List_Sent', thisWeekStart, thisWeekEnd, teamWeeklyTargets.listsOut, pipelineItems, activityLogs),\r\n      sales: calculateSalesForPeriod(thisWeekStart, thisWeekEnd, teamWeeklyTargets.sales, pipelineItems, activityLogs, financeEntries)\r\n    } as PeriodKPIs,\r\n    lastWeek: {\r\n      callVolume: calculateKPIForPeriod('Call_Completed', lastWeekStart, lastWeekEnd, teamWeeklyTargets.calls, pipelineItems, activityLogs),\r\n      agreements: calculateKPIForPeriod('Agreement_Sent', lastWeekStart, lastWeekEnd, teamWeeklyTargets.agreements, pipelineItems, activityLogs),\r\n      listsOut: calculateKPIForPeriod('Partner_List_Sent', lastWeekStart, lastWeekEnd, teamWeeklyTargets.listsOut, pipelineItems, activityLogs),\r\n      sales: calculateSalesForPeriod(lastWeekStart, lastWeekEnd, teamWeeklyTargets.sales, pipelineItems, activityLogs, financeEntries)\r\n    } as PeriodKPIs,\r\n    thisMonth: {\r\n      callVolume: calculateKPIForPeriod('Call_Completed', thisMonthStart, thisMonthEnd, teamMonthlyTargets.calls, pipelineItems, activityLogs),\r\n      agreements: calculateKPIForPeriod('Agreement_Sent', thisMonthStart, thisMonthEnd, teamMonthlyTargets.agreements, pipelineItems, activityLogs),\r\n      listsOut: calculateKPIForPeriod('Partner_List_Sent', thisMonthStart, thisMonthEnd, teamMonthlyTargets.listsOut, pipelineItems, activityLogs),\r\n      conversionRate: calculateConversionForPeriod(thisMonthStart, thisMonthEnd, pipelineItems, activityLogs)\r\n    } as PeriodKPIs,\r\n    lastMonth: {\r\n      callVolume: calculateKPIForPeriod('Call_Completed', lastMonthStart, lastMonthEnd, teamMonthlyTargets.calls, pipelineItems, activityLogs),\r\n      agreements: calculateKPIForPeriod('Agreement_Sent', lastMonthStart, lastMonthEnd, teamMonthlyTargets.agreements, pipelineItems, activityLogs),\r\n      listsOut: calculateKPIForPeriod('Partner_List_Sent', lastMonthStart, lastMonthEnd, teamMonthlyTargets.listsOut, pipelineItems, activityLogs),\r\n      conversionRate: calculateConversionForPeriod(lastMonthStart, lastMonthEnd, pipelineItems, activityLogs)\r\n    } as PeriodKPIs,\r\n    teamTargets: {\r\n      weekly: teamWeeklyTargets,\r\n      monthly: teamMonthlyTargets,\r\n    },\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\security.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[884,887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[884,887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2482,2485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2482,2485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3139,3142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3139,3142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4098,4101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4098,4101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4856,4859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4856,4859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5586,5589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5586,5589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6201,6204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6201,6204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6984,6987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6984,6987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'templateData' is defined but never used.","line":237,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":237,"endColumn":91},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7429,7432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7429,7432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":296,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9459,9462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9459,9462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9954,9957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9954,9957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":323,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10017,10020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10017,10020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10576,10579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10576,10579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10608,10611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10608,10611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11438,11441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11438,11441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":384,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11470,11473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11470,11473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":424,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12278,12281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12278,12281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":424,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12310,12313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12310,12313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from './db';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from './auth-options';\nimport { Role, Resource, Action } from '@prisma/client';\nimport { NextRequest } from 'next/server';\nimport { getEffectivePermissions } from './permissions';\n\nexport interface SecurityContext {\n  userId: string;\n  role: Role;\n  territoryId?: string;\n  managedTerritoryIds: string[];\n  permissions: string[];\n}\n\nexport interface AuditLogData {\n  action: string;\n  resource: string;\n  resourceId?: string;\n  details?: any;\n  success?: boolean;\n  errorMsg?: string;\n  ipAddress?: string;\n  userAgent?: string;\n  sessionId?: string;\n}\n\nexport class SecurityService {\n  static async getSecurityContext(): Promise<SecurityContext | null> {\n    const session = await getServerSession(authOptions);\n    if (!session?.user) return null;\n\n    const user = session.user as any; // Type assertion for extended user properties\n\n    // Get user permissions\n    const userPermissions = await prisma.userPermission.findMany({\n      where: {\n        userId: user.id,\n        OR: [\n          { expiresAt: null },\n          { expiresAt: { gt: new Date() } }\n        ]\n      },\n      include: {\n        permission: true\n      }\n    });\n\n    // Get role permissions\n    const rolePermissions = await prisma.rolePermission.findMany({\n      where: { role: user.role },\n      include: {\n        permission: true\n      }\n    });\n\n    const assignedPermissionStrings = [\n      ...userPermissions.map(up => `${up.permission.resource}:${up.permission.action}`),\n      ...rolePermissions.map(rp => `${rp.permission.resource}:${rp.permission.action}`)\n    ];\n\n    // Always include baseline defaults for the user's role so missing DB rows don't block core features\n    const defaultEffective = getEffectivePermissions({\n      id: user.id,\n      role: user.role as Role,\n      territoryId: user.territoryId || undefined,\n      managedTerritories: user.managedTerritories || [],\n      permissions: [],\n    }).map(p => `${p.resource}:${p.action}`);\n\n    const allPermissions = Array.from(new Set([...assignedPermissionStrings, ...defaultEffective]));\n\n    return {\n      userId: user.id,\n      role: user.role,\n      territoryId: user.territoryId || undefined,\n      managedTerritoryIds: user.managedTerritoryIds || [],\n      permissions: allPermissions\n    };\n  }\n\n  static async canAccessResource(\n    context: SecurityContext,\n    resource: Resource,\n    action: Action,\n    resourceData?: any\n  ): Promise<boolean> {\n    // Allow authenticated users to use messaging features; row-level checks are enforced per endpoint\n    if (resource === 'MESSAGING') {\n      return true;\n    }\n\n    const permission = `${resource}:${action}`;\n    // Check if user has the permission\n    if (!context.permissions.includes(permission)) {\n      return false;\n    }\n\n    // Apply row-level security based on resource type and user context\n    return this.applyRowLevelSecurity(context, resource, action, resourceData);\n  }\n\n  private static async applyRowLevelSecurity(\n    context: SecurityContext,\n    resource: Resource,\n    action: Action,\n    resourceData?: any\n  ): Promise<boolean> {\n    // Admin can access everything\n    if (context.role === 'ADMIN') {\n      return true;\n    }\n\n    switch (resource) {\n      case 'LEADS':\n        return this.canAccessLeads(context, resourceData);\n      \n      case 'PIPELINE':\n        return this.canAccessPipeline(context, resourceData);\n      \n      case 'FINANCE':\n        return this.canAccessFinance(context, resourceData);\n      \n      case 'USERS':\n        return this.canAccessUsers(context, action, resourceData);\n      \n      case 'REPORTS':\n        return this.canAccessReports(context, resourceData);\n      case 'MESSAGING':\n        // High-level permission was already checked. Row-level membership is enforced in endpoints.\n        return true;\n      case 'TEMPLATES':\n        return this.canAccessTemplates(context, action, resourceData);\n      \n      default:\n        return false;\n    }\n  }\n\n  private static canAccessLeads(context: SecurityContext, leadData?: any): boolean {\n    if (!leadData) return true; // For general access\n\n    // BDRs can only see their own leads\n    if (context.role === 'BDR') {\n      return leadData.bdrId === context.userId;\n    }\n\n    // Team leads can see their team's leads\n    if (context.role === 'TEAM_LEAD' && context.territoryId) {\n      return leadData.bdr?.territoryId === context.territoryId;\n    }\n\n    // Managers can see leads in territories they manage\n    if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\n      return context.managedTerritoryIds.includes(leadData.bdr?.territoryId);\n    }\n\n    // Directors can see all leads\n    return context.role === 'DIRECTOR';\n  }\n\n  private static canAccessPipeline(context: SecurityContext, pipelineData?: any): boolean {\n    if (!pipelineData) return true;\n\n    // BDRs can only see their own pipeline items\n    if (context.role === 'BDR') {\n      return pipelineData.bdrId === context.userId;\n    }\n\n    // Team leads can see their team's pipeline\n    if (context.role === 'TEAM_LEAD' && context.territoryId) {\n      return pipelineData.bdr?.territoryId === context.territoryId;\n    }\n\n    // Managers can see pipeline in territories they manage\n    if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\n      return context.managedTerritoryIds.includes(pipelineData.bdr?.territoryId);\n    }\n\n    return context.role === 'DIRECTOR';\n  }\n\n  private static canAccessFinance(context: SecurityContext, financeData?: any): boolean {\n    // Finance data is more restricted\n    if (context.role === 'BDR') {\n      return financeData?.bdrId === context.userId;\n    }\n\n    // Only managers and above can see team finance data\n    if (context.role === 'TEAM_LEAD') {\n      return false; // Team leads cannot see finance by default\n    }\n\n    if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\n      return context.managedTerritoryIds.includes(financeData?.bdr?.territoryId);\n    }\n\n    return context.role === 'DIRECTOR';\n  }\n\n  private static canAccessUsers(context: SecurityContext, action: Action, userData?: any): boolean {\n    // Only managers and above can manage users\n    if (action === 'CREATE' || action === 'DELETE' || action === 'MANAGE') {\n      return ['MANAGER', 'DIRECTOR'].includes(context.role);\n    }\n\n    // BDRs can only see basic info of users in their territory\n    if (context.role === 'BDR') {\n      return userData?.territoryId === context.territoryId;\n    }\n\n    if (context.role === 'TEAM_LEAD' && context.territoryId) {\n      return userData?.territoryId === context.territoryId;\n    }\n\n    if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\n      return context.managedTerritoryIds.includes(userData?.territoryId);\n    }\n\n    return context.role === 'DIRECTOR';\n  }\n\n  private static canAccessReports(context: SecurityContext, reportData?: any): boolean {\n    // BDRs can only see their own reports\n    if (context.role === 'BDR') {\n      return reportData?.scope === 'self';\n    }\n\n    // Team leads can see team reports\n    if (context.role === 'TEAM_LEAD') {\n      return ['self', 'team'].includes(reportData?.scope);\n    }\n\n    return ['MANAGER', 'DIRECTOR'].includes(context.role);\n  }\n\n  private static canAccessTemplates(context: SecurityContext, action: Action, templateData?: any): boolean {\n    // All authenticated roles can READ templates by default if they have READ permission assigned\n    if (action === 'READ') return true;\n    // For CREATE/UPDATE/DELETE, allow BDR and above if they have the permission assigned\n    return ['BDR', 'TEAM_LEAD', 'MANAGER', 'DIRECTOR', 'ADMIN'].includes(context.role);\n  }\n\n  static async logAction(data: AuditLogData, request?: NextRequest): Promise<void> {\n    try {\n      const context = await this.getSecurityContext();\n      if (!context) return;\n\n      const ipAddress = data.ipAddress || this.getClientIP(request);\n      const userAgent = data.userAgent || request?.headers.get('user-agent') || undefined;\n\n      await prisma.auditLog.create({\n        data: {\n          userId: context.userId,\n          action: typeof data.action === 'string' ? data.action : String(data.action),\n          resource: typeof data.resource === 'string' ? data.resource : String(data.resource ?? 'UNKNOWN'),\n          resourceId: data.resourceId,\n          details: data.details ? JSON.parse(JSON.stringify(data.details)) : null,\n          success: data.success ?? true,\n          errorMsg: data.errorMsg,\n          ipAddress,\n          userAgent,\n          sessionId: data.sessionId\n        }\n      });\n    } catch (error) {\n      console.error('Failed to log audit action:', error);\n      // Don't throw - audit logging shouldn't break the main functionality\n    }\n  }\n\n  private static getClientIP(request?: NextRequest): string | undefined {\n    if (!request) return undefined;\n\n    // Check for IP in various headers\n    const forwarded = request.headers.get('x-forwarded-for');\n    const real = request.headers.get('x-real-ip');\n    const remote = request.headers.get('x-remote-addr');\n\n    if (forwarded) {\n      return forwarded.split(',')[0].trim();\n    }\n    if (real) {\n      return real;\n    }\n    if (remote) {\n      return remote;\n    }\n\n    return undefined;\n  }\n\n  static async createDataAccessPolicy(\n    userId: string,\n    resource: Resource,\n    conditions: any,\n    createdBy: string\n  ): Promise<void> {\n    await prisma.dataAccessPolicy.create({\n      data: {\n        userId,\n        resource,\n        conditions: JSON.parse(JSON.stringify(conditions)),\n        createdBy\n      }\n    });\n  }\n\n  static async getDataAccessPolicies(userId: string, resource?: Resource) {\n    return prisma.dataAccessPolicy.findMany({\n      where: {\n        userId,\n        resource,\n        isActive: true\n      }\n    });\n  }\n\n  static buildSecureQuery(\n    baseQuery: any,\n    context: SecurityContext,\n    resource: Resource\n  ): any {\n    if (context.role === 'ADMIN') {\n      return baseQuery; // Admin sees everything\n    }\n\n    switch (resource) {\n      case 'LEADS':\n        return this.buildLeadsQuery(baseQuery, context);\n      case 'PIPELINE':\n        return this.buildPipelineQuery(baseQuery, context);\n      case 'FINANCE':\n        return this.buildFinanceQuery(baseQuery, context);\n      case 'MESSAGING':\n        return baseQuery;\n      case 'TEMPLATES':\n        return baseQuery;\n      default:\n        return baseQuery;\n    }\n  }\n\n  private static buildLeadsQuery(baseQuery: any, context: SecurityContext): any {\n    if (context.role === 'BDR') {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          bdrId: context.userId\n        }\n      };\n    }\n\n    if (context.role === 'TEAM_LEAD' && context.territoryId) {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          bdr: {\n            territoryId: context.territoryId\n          }\n        }\n      };\n    }\n\n    if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          bdr: {\n            territoryId: {\n              in: context.managedTerritoryIds\n            }\n          }\n        }\n      };\n    }\n\n    return baseQuery; // Directors see all\n  }\n\n  private static buildPipelineQuery(baseQuery: any, context: SecurityContext): any {\n    if (context.role === 'BDR') {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          bdrId: context.userId\n        }\n      };\n    }\n\n    if (context.role === 'TEAM_LEAD' && context.territoryId) {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          bdr: {\n            territoryId: context.territoryId\n          }\n        }\n      };\n    }\n\n    if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          bdr: {\n            territoryId: {\n              in: context.managedTerritoryIds\n            }\n          }\n        }\n      };\n    }\n\n    return baseQuery;\n  }\n\n  private static buildFinanceQuery(baseQuery: any, context: SecurityContext): any {\n    if (context.role === 'BDR') {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          bdrId: context.userId\n        }\n      };\n    }\n\n    // Team leads cannot see finance data by default\n    if (context.role === 'TEAM_LEAD') {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          id: 'never-match' // Effectively block access\n        }\n      };\n    }\n\n    if (context.role === 'MANAGER' && context.managedTerritoryIds.length > 0) {\n      return {\n        ...baseQuery,\n        where: {\n          ...baseQuery.where,\n          bdr: {\n            territoryId: {\n              in: context.managedTerritoryIds\n            }\n          }\n        }\n      };\n    }\n\n    return baseQuery;\n  }\n}\n\n// Export middleware function for easy integration\nexport async function withSecurity<T>(\n  resource: Resource,\n  action: Action,\n  operation: (context: SecurityContext) => Promise<T>,\n  request?: NextRequest\n): Promise<T> {\n  const context = await SecurityService.getSecurityContext();\n  \n  if (!context) {\n    await SecurityService.logAction({\n      action: action,\n      resource: resource,\n      success: false,\n      errorMsg: 'Unauthorized access attempt'\n    }, request);\n    throw new Error('Unauthorized');\n  }\n\n  const hasAccess = await SecurityService.canAccessResource(context, resource, action);\n  \n  if (!hasAccess) {\n    await SecurityService.logAction({\n      action: action,\n      resource: resource,\n      success: false,\n      errorMsg: 'Insufficient permissions'\n    }, request);\n    throw new Error('Forbidden');\n  }\n\n  try {\n    const result = await operation(context);\n    \n    await SecurityService.logAction({\n      action: action,\n      resource: resource,\n      success: true\n    }, request);\n    \n    return result;\n  } catch (error) {\n    await SecurityService.logAction({\n      action: action,\n      resource: resource,\n      success: false,\n      errorMsg: error instanceof Error ? error.message : 'Unknown error'\n    }, request);\n    throw error;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\session-management.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\uploads.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lookupMime' is defined but never used.","line":2,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from 'next/server';\r\nimport { lookup as lookupMime } from 'mime-types';\r\n\r\nexport type AllowedUpload = {\r\n  mime: string;\r\n  size: number; // bytes\r\n};\r\n\r\nconst MAX_FILE_SIZE_BYTES = 25 * 1024 * 1024; // 25MB\r\nconst ALLOWED_MIME_PREFIXES = ['image/', 'video/', 'application/pdf', 'application/vnd', 'text/plain'];\r\n\r\nexport function validateUpload({ mime, size }: AllowedUpload) {\r\n  if (!mime || !ALLOWED_MIME_PREFIXES.some((p) => mime.startsWith(p))) {\r\n    throw new Error('Unsupported file type');\r\n  }\r\n  if (size <= 0 || size > MAX_FILE_SIZE_BYTES) {\r\n    throw new Error('File too large');\r\n  }\r\n}\r\n\r\n// Minimal Vercel Blob direct upload URL creator via REST\r\nexport async function createDirectUploadUrl({ filename, mime, size }: { filename: string; mime: string; size: number }) {\r\n  validateUpload({ mime, size });\r\n  const token = process.env.BLOB_READ_WRITE_TOKEN;\r\n  if (!token) throw new Error('Blob token not configured');\r\n\r\n  const res = await fetch('https://api.vercel.com/v2/blobs/upload', {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ filename, contentType: mime, size }),\r\n  });\r\n  if (!res.ok) {\r\n    const text = await res.text();\r\n    throw new Error(`Failed to create upload URL: ${text}`);\r\n  }\r\n  return (await res.json()) as { url: string; uploadUrl: string; pathname: string };\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\lib\\validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Dan\\Documents\\EMG\\emg-crm\\src\\types\\next-auth.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
